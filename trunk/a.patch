diff -Nur php-4.3.11/Zend/dezender/dezender.c php/Zend/dezender/dezender.c
--- php-4.3.11/Zend/dezender/dezender.c	1970-01-01 08:00:00.000000000 +0800
+++ php/Zend/dezender/dezender.c	2007-07-23 21:49:14.000000000 +0800
@@ -0,0 +1,7962 @@
+/***********************************************************************/
+/*                                                                     */
+/*  FILE        :dezender.c                                            */
+/*  DATE        :2005/08/10                                            */
+/*  DESCRIPTION :opcode->php source code                               */
+/*  PROJECT     :deZender                                              */
+/*                                                                     */
+/***********************************************************************/
+
+
+#include "php.h"
+#include "ext/standard/url.h"
+
+
+#if 0
+#define ZEND_NOP					0				/* NOP */
+#define ZEND_ADD					1				/* + */
+#define ZEND_SUB					2				/* - */
+#define ZEND_MUL					3				/* * */
+#define ZEND_DIV					4				/* / */
+#define ZEND_MOD					5				/* % */
+#define ZEND_SL						6				/* << */
+#define ZEND_SR						7				/* >> */
+#define ZEND_CONCAT					8				/* . */
+#define ZEND_BW_OR					9				/* | */
+#define ZEND_BW_AND					10				/* & */
+#define ZEND_BW_XOR					11				/* ^ */
+#define ZEND_BW_NOT					12				/* ~ */
+#define ZEND_BOOL_NOT				13				/* ! */
+#define ZEND_BOOL_XOR				14				/* XOR */
+#define ZEND_IS_IDENTICAL			15				/* === */
+#define ZEND_IS_NOT_IDENTICAL		16				/* !== */
+#define ZEND_IS_EQUAL				17				/* == */
+#define ZEND_IS_NOT_EQUAL			18				/* != */
+#define ZEND_IS_SMALLER				19				/* < */
+#define ZEND_IS_SMALLER_OR_EQUAL	20				/* <= */
+#define ZEND_CAST					21				/* (int), (real), (string), (array), (object), (bool), (unset) */
+#define ZEND_QM_ASSIGN				22				/* a?b:c */
+#define ZEND_ASSIGN_ADD				23				/* += */
+#define ZEND_ASSIGN_SUB				24				/* -= */
+#define ZEND_ASSIGN_MUL				25				/* *= */
+#define ZEND_ASSIGN_DIV				26				/* /= */
+#define ZEND_ASSIGN_MOD				27				/* %= */
+#define ZEND_ASSIGN_SL				28				/* <<= */
+#define ZEND_ASSIGN_SR				29				/* >>= */
+#define ZEND_ASSIGN_CONCAT			30				/* .= */
+#define ZEND_ASSIGN_BW_OR			31				/* |= */
+#define ZEND_ASSIGN_BW_AND			32				/* &= */
+#define ZEND_ASSIGN_BW_XOR			33				/* ^= */
+#define ZEND_PRE_INC				34				/* ++a */
+#define ZEND_PRE_DEC				35				/* --a */
+#define ZEND_POST_INC				36				/* a++ */
+#define ZEND_POST_DEC				37				/* a-- */
+#define ZEND_ASSIGN					38				/* = */
+#define ZEND_ASSIGN_REF				39				/* =&a */
+#define ZEND_ECHO					40				/* echo */
+#define ZEND_PRINT					41				/* print */
+#define ZEND_JMP					42				/* JMP */
+#define ZEND_JMPZ					43				/* JMPZ */
+#define ZEND_JMPNZ					44				/* JMPNZ */
+#define ZEND_JMPZNZ					45				/* JMPZNZ */
+#define ZEND_JMPZ_EX				46				/* JMPZ_EX */
+#define ZEND_JMPNZ_EX				47				/* JMPNZ_EX */
+#define ZEND_CASE					48				/* case */
+#define ZEND_SWITCH_FREE			49				/* return, foreach, switch */
+#define ZEND_BRK					50				/* break */
+#define ZEND_CONT					51				/* continue */
+#define ZEND_BOOL					52				/* ||, &&, switch(expr), default:  */
+#define ZEND_INIT_STRING			53				/* '' */
+#define ZEND_ADD_CHAR				54				/* . */
+#define ZEND_ADD_STRING				55				/* . */
+#define ZEND_ADD_VAR				56				/* . */
+#define ZEND_BEGIN_SILENCE			57				/* @:begin */
+#define ZEND_END_SILENCE			58				/* @:end */
+#define ZEND_INIT_FCALL_BY_NAME		59				/* call function */
+#define ZEND_DO_FCALL				60				/* call function */
+#define ZEND_DO_FCALL_BY_NAME		61				/* call function */
+#define ZEND_RETURN					62				/* return */
+#define ZEND_RECV					63				/* function parameter */
+#define ZEND_RECV_INIT				64				/* function parameter: static? */
+#define ZEND_SEND_VAL				65				/* function call parameter: without variable  */
+#define ZEND_SEND_VAR				66				/* function call parameter: variable */
+#define ZEND_SEND_REF				67				/* function call parameter: &variable */
+#define ZEND_NEW 					68				/* new */
+#define ZEND_JMP_NO_CTOR			69				/* free, end of new */
+#define ZEND_FREE					70				/* free */
+#define ZEND_INIT_ARRAY				71				/* array pair list (a => b, ...) */
+#define ZEND_ADD_ARRAY_ELEMENT		72				/* array pair list (a => b, ...) */
+#define ZEND_INCLUDE_OR_EVAL		73				/* include, include_once, evel, require, require_once */
+#define ZEND_UNSET_VAR				74				/* unset variable */
+#define ZEND_UNSET_DIM_OBJ			75				/* unset dim, unset object */
+#define ZEND_ISSET_ISEMPTY			76				/* isset, empty */
+#define ZEND_FE_RESET				77				/* foreach */
+#define ZEND_FE_FETCH				78				/* foreach */
+#define ZEND_EXIT					79				/* exit */
+#define ZEND_FETCH_R				80				/* fetch variable: read mode */
+#define ZEND_FETCH_DIM_R			81				/* fetch dim: read mode */
+#define ZEND_FETCH_OBJ_R			82				/* fetch object: read mode */
+#define ZEND_FETCH_W				83				/* fetch variable: write mode */
+#define ZEND_FETCH_DIM_W			84				/* fetch dim: write mode */
+#define ZEND_FETCH_OBJ_W			85				/* fetch object: write mode */
+#define ZEND_FETCH_RW				86				/* fetch variable: read/write mode */
+#define ZEND_FETCH_DIM_RW			87				/* fetch dim: read/write mode */
+#define ZEND_FETCH_OBJ_RW			88				/* fetch object: read/write mode */
+#define ZEND_FETCH_IS				89				/* fetch variable: is mode */
+#define ZEND_FETCH_DIM_IS			90				/* fetch dim: is mode */
+#define ZEND_FETCH_OBJ_IS			91				/* fetch object: is mode */
+#define ZEND_FETCH_FUNC_ARG			92				/* fetch variable: argument mode */
+#define ZEND_FETCH_DIM_FUNC_ARG		93				/* fetch dim: argument mode */
+#define ZEND_FETCH_OBJ_FUNC_ARG		94				/* fetch object: argument mode */
+#define ZEND_FETCH_UNSET			95				/* fetch unset variable */
+#define ZEND_FETCH_DIM_UNSET		96				/* fetch unset dim */
+#define ZEND_FETCH_OBJ_UNSET		97				/* fetch unset object */
+#define ZEND_FETCH_DIM_TMP_VAR		98				/* list, foreach */
+#define ZEND_FETCH_CONSTANT			99				/* constant declaration */
+#define ZEND_DECLARE_FUNCTION_OR_CLASS	100			/* function, class */
+#define ZEND_EXT_STMT				101				/* ??? */
+#define ZEND_EXT_FCALL_BEGIN		102				/* ??? */
+#define ZEND_EXT_FCALL_END			103				/* ??? */
+#define ZEND_EXT_NOP				104				/* ??? */
+#define ZEND_TICKS					105				/* declare (ticks=?) */
+#define ZEND_SEND_VAR_NO_REF		106				/* function call parameter: no reference */
+#endif
+
+/*-- for php 5.0.4 --*/
+#define ZEND_CATCH					107
+#define ZEND_THROW					108
+#define ZEND_FETCH_CLASS			109
+#define ZEND_CLONE					110
+#define ZEND_INIT_CTOR_CALL			111
+#define ZEND_INIT_METHOD_CALL		112
+#define ZEND_INIT_STATIC_METHOD_CALL 113
+#define ZEND_ISSET_ISEMPTY_VAR		114
+#define ZEND_ISSET_ISEMPTY_DIM_OBJ	115
+#define	ZEND_IMPORT_FUNCTION		116
+#define	ZEND_IMPORT_CLASS			117
+#define	ZEND_IMPORT_CONST			118
+#define ZEND_PRE_INC_OBJ			132
+#define ZEND_PRE_DEC_OBJ			133
+#define ZEND_POST_INC_OBJ			134
+#define ZEND_POST_DEC_OBJ			135
+#define ZEND_ASSIGN_OBJ				136
+#define ZEND_OP_DATA				137
+#define ZEND_INSTANCEOF				138
+//#define ZEND_DECLARE_CLASS				139
+//#define ZEND_DECLARE_INHERITED_CLASS	140
+//#define ZEND_DECLARE_FUNCTION			141
+#define ZEND_RAISE_ABSTRACT_ERROR	142
+
+
+#define DEZ_OP_NOP						0			/* NOP */
+#define DEZ_OP_ADD						1   		/* + */
+#define DEZ_OP_SUB						2   		/* - */
+#define DEZ_OP_MUL						3   		/* * */
+#define DEZ_OP_DIV						4   		/* / */
+#define DEZ_OP_MOD						5   		/* % */
+#define DEZ_OP_SL						6   		/* << */
+#define DEZ_OP_SR						7   		/* >> */
+#define DEZ_OP_CONCAT					8   		/* . */
+#define DEZ_OP_BW_OR					9   		/* | */
+#define DEZ_OP_BW_AND					10  		/* & */
+#define DEZ_OP_BW_XOR					11  		/* ^ */
+#define DEZ_OP_BW_NOT					12  		/* ~ */
+#define DEZ_OP_BOOL_NOT					13  		/* ! */
+#define DEZ_OP_IS_IDENTICAL				14  		/* === */
+#define DEZ_OP_IS_NOT_IDENTICAL			15  		/* !== */
+#define DEZ_OP_IS_EQUAL					16  		/* == */
+#define DEZ_OP_IS_NOT_EQUAL				17  		/* != */
+#define DEZ_OP_IS_SMALLER				18  		/* < */
+#define DEZ_OP_IS_SMALLER_OR_EQUAL		19  		/* <= */
+#define	DEZ_OP_CAST						20  		/* (double)a, (string)a, (array)a, (object)a, (bool)a, (unset)a */
+#define DEZ_OP_QM_ASSIGN				21  		/* a?b:c */
+#define DEZ_OP_ASSIGN_ADD				22  		/* += */
+#define DEZ_OP_ASSIGN_SUB				23  		/* -= */
+#define DEZ_OP_ASSIGN_MUL				24  		/* *= */
+#define DEZ_OP_ASSIGN_DIV				25  		/* /= */
+#define DEZ_OP_ASSIGN_MOD				26  		/* %= */
+#define DEZ_OP_ASSIGN_SL				27  		/* <<= */
+#define DEZ_OP_ASSIGN_SR				28  		/* >>= */
+#define DEZ_OP_ASSIGN_CONCAT			29  		/* .= */
+#define DEZ_OP_ASSIGN_BW_OR				30  		/* |= */
+#define DEZ_OP_ASSIGN_BW_AND			31  		/* &= */
+#define DEZ_OP_ASSIGN_BW_XOR			32  		/* ^= */
+#define DEZ_OP_PRE_INC					33  		/* ++a */
+#define DEZ_OP_PRE_DEC					34  		/* --a */
+#define DEZ_OP_POST_INC					35  		/* a++ */
+#define DEZ_OP_POST_DEC					36  		/* a-- */
+#define DEZ_OP_ASSIGN					37  		/* = */
+#define DEZ_OP_ASSIGN_REF				38  		/* =&a, static, global */
+#define DEZ_OP_ECHO						39  		/* echo */
+#define DEZ_OP_PRINT					40  		/* print */
+#define	DEZ_OP_INCLUDE_OR_EVAL			41  		/* include, include_once, eval, require, require_once */
+#define	DEZ_OP_LOGICAL_OR				42  		/* OR */
+#define	DEZ_OP_LOGICAL_XOR				43  		/* XOR */
+#define	DEZ_OP_LOGICAL_AND				44  		/* AND */
+#define	DEZ_OP_NEW						45  		/* new */
+#define	DEZ_OP_EXIT						46  		/* exit */
+#define	DEZ_OP_IF						47  		/* if */
+#define	DEZ_OP_ELSEIF					48  		/* elseif */
+#define	DEZ_OP_ELSE						49  		/* else */
+#define	DEZ_OP_DO						50  		/* do */
+#define	DEZ_OP_WHILE					51  		/* while */
+#define	DEZ_OP_FOR						52  		/* for */
+#define	DEZ_OP_FOREACH					53  		/* foreach */
+#define	DEZ_OP_DECLARE					54  		/* declare */
+#define	DEZ_OP_AS						55  		/* as */
+#define	DEZ_OP_SWITCH					56  		/* switch */
+#define	DEZ_OP_CASE						57  		/* case */
+#define	DEZ_OP_DEFAULT					58  		/* default */
+#define	DEZ_OP_BREAK					59  		/* break */
+#define	DEZ_OP_CONTINUE					60  		/* continue */
+#define	DEZ_OP_OLD_FUNCTION				61  		/* old_function */
+#define	DEZ_OP_FUNCTION					62  		/* function */
+#define	DEZ_OP_CONST					63  		/* const */
+#define	DEZ_OP_RETURN					64  		/* return */
+#define	DEZ_OP_USE						65  		/* use */
+#define	DEZ_OP_VAR						66  		/* var */
+#define	DEZ_OP_UNSET					67  		/* unset */
+#define	DEZ_OP_ISSET					68  		/* isset */
+#define	DEZ_OP_EMPTY					69  		/* empty */
+#define	DEZ_OP_CLASS					70  		/* class */
+#define	DEZ_OP_EXTENDS					71  		/* extends */
+#define	DEZ_OP_OBJECT_OPERATOR			72  		/* a->b */
+#define	DEZ_OP_DOUBLE_ARROW				73  		/* a=>b */
+#define	DEZ_OP_LIST						74  		/* list */
+#define	DEZ_OP_ARRAY					75  		/* array */
+#define	DEZ_OP_CLASS_C					76  		/* __CLASS__ */
+#define	DEZ_OP_FUNC_C					77  		/* __FUNCTION__ */
+#define	DEZ_OP_LINE						78  		/* __LINE__ */
+#define	DEZ_OP_FILE						79  		/* __FILE__ */
+#define	DEZ_OP_COMMENT					80  		/* comment */
+#define	DEZ_OP_HEREDOC					81  		/* <<< */
+#define	DEZ_OP_DOLLAR_OPEN_CURLY_BRACES	82  		/* ${...} */
+#define	DEZ_OP_PAAMAYIM_NEKUDOTAYIM		83  		/* :: */
+#define DEZ_OP_CALL_PARAM				84  		/* parameter of function calling */
+#define DEZ_OP_CALL_INIT				85  		/* initialize function calling */
+#define DEZ_OP_CALL						86  		/* function call */
+#define DEZ_OP_CALL_EX					87  		/* function call (ex) */
+#define DEZ_OP_BOOL						88  		/* end of OR, AND, ... */
+#define DEZ_OP_FETCH_DIM				89  		/* fetch dim */
+#define DEZ_OP_INIT_STRING				90  		/* init string */
+#define DEZ_OP_FETCH					91  		/* fetch variable */
+#define DEZ_OP_FETCH_CONSTANT			92  		/* fetch constant */
+#define DEZ_OP_JMP						93  		/* jmp */
+#define DEZ_OP_FUNC_PARAM				94  		/* parameter of function */
+#define DEZ_OP_BEGIN_SILENCE			95  		/* @: begin */
+#define DEZ_OP_END_SILENCE				96  		/* @: end */
+#define DEZ_OP_LE						97  		/* list element */
+#define DEZ_OP_UNKNOWN					98  		/* unknown op */
+
+#define DEZ_IS_OPLINE					(1<<15)
+#define DEZ_IS_CLASS					(1<<16)
+
+#define OPC_STACK_SIZE					1024
+#define OPCS_MAX_LEN					16
+#define DEZ_VARS_NUM					1024
+#define NODE_STACK_SIZE					2048
+
+
+#define DEZ_ADD_NODE(x)					\
+	m_dez_op_prev	= (x);				\
+	(x)->prev		= m_dez_op_current;	\
+	(x)->next		= NULL;				\
+	if (m_dez_op_current != NULL)		\
+	{									\
+		m_dez_op_current->next	= (x);	\
+	}									\
+	m_dez_op_current		= (x);
+
+
+#define DEZ_DEL_NODE(x)												\
+	if ((x)->prev != NULL) (x)->prev->next = (x)->next;				\
+	if ((x)->next != NULL) (x)->next->prev = (x)->prev;				\
+	(x)->next = NULL;												\
+	if (m_dez_op_current == (x)) m_dez_op_current = (x)->prev;		\
+	dez_node_specs[(x)->dez_op].dez_node_free_func(x);
+
+
+#define DEZ_DEL_CURRENT_NODE()			\
+	m_dez_op_current		= m_dez_op_current->prev;	\
+	dez_node_specs[m_dez_op_current->next->dez_op].dez_node_free_func(m_dez_op_current->next);	\
+	m_dez_op_current->next	= NULL;
+
+
+#define ZEND_LINENUM(x)					\
+	((x) == NULL ? 0 : ((x) >= (zend_op *)m_zend_op_dup && (x) < (zend_op *)(m_zend_op_dup+m_zend_op_dup_num) ? *((int *)((x)+1)) : ((x) - m_zend_op_start)))
+
+
+typedef struct
+{
+	zend_op zop;
+	int linenum;
+} DEZ_ZEND_OP_DUP;
+
+typedef struct
+{
+	int index;
+	char varname[1024];
+} DEZ_VAR;
+
+typedef struct DEZ_EG_VAR_NAME_t
+{
+	unsigned type;
+	char *var;
+	unsigned len;
+	unsigned other;
+} DEZ_EG_VAR_NAME;
+
+typedef struct DEZ_EG_FUNC_NAME_t
+{
+	unsigned type;
+	char *func;
+	unsigned len;
+	unsigned other;
+} DEZ_EG_FUNC_NAME;
+
+typedef struct DEZ_EG_FUNC_t
+{
+	DEZ_EG_FUNC_NAME *funcs;
+	unsigned func_num;
+	unsigned r2;
+	unsigned r3;
+} DEZ_EG_FUNC;
+
+typedef struct DEZ_EG_E_t
+{
+	unsigned r1;
+	unsigned r2;
+	unsigned r3;
+	unsigned r4;
+	unsigned r5;
+	unsigned r6;
+	void *p1;
+	unsigned char *zop2op;
+	void *p2;
+	unsigned r7;
+	void *p3;
+	unsigned r8;
+} DEZ_EG_E;
+
+typedef struct DEZ_EG_RESERVED_t
+{
+	DEZ_EG_VAR_NAME	*vars;
+	unsigned		var_num;
+	unsigned		r1;
+	DEZ_EG_FUNC		*funcs;
+	unsigned		r2;
+	DEZ_EG_E		*e;
+	void			*p3;
+} DEZ_EG_RESERVED;
+
+/*-- type: dez node --*/
+typedef struct DEZ_NODE_s
+{
+	unsigned char dez_op;							/* dez op code */
+	zend_op *zop;
+	void *content;									/* dez node content */
+	struct DEZ_NODE_s *prev;						/* pointer the previous dez node */
+	struct DEZ_NODE_s *next;						/* pointer the next dez node */
+} DEZ_NODE;
+
+/*-- dez node content: expression --*/
+typedef struct DEZ_NODE_EXPR_s
+{
+	DEZ_NODE *branch_node;							/* must is first one */
+	DEZ_NODE *op1_node;
+	DEZ_NODE *op2_node;
+} DEZ_NODE_EXPR;
+
+/*-- dez node content: if --*/
+typedef struct DEZ_NODE_IF_s
+{
+	DEZ_NODE *branch_node;							/* must is first one */
+	DEZ_NODE *op1_node;
+	DEZ_NODE *op2_node;
+	int dest;
+} DEZ_NODE_IF;
+
+/*-- dez node content: for --*/
+typedef struct DEZ_NODE_FOR_s
+{
+	DEZ_NODE *branch_node;							/* must is first one */
+	DEZ_NODE *before_node;
+	DEZ_NODE *cond_node;
+	DEZ_NODE *after_node;
+} DEZ_NODE_FOR;
+
+/*-- dez node content: => --*/
+typedef struct DEZ_NODE_DA_s
+{
+	DEZ_NODE *branch_node;							/* must is first one */
+	DEZ_NODE *key_node;
+	DEZ_NODE *value_node;
+	DEZ_NODE *next_node;
+} DEZ_NODE_DA;
+
+/*-- dez node content: foreach --*/
+typedef struct DEZ_NODE_FOREACH_s
+{
+	DEZ_NODE *branch_node;							/* must is first one */
+	DEZ_NODE *source_node;
+	DEZ_NODE *key_node;
+	DEZ_NODE *value_node;
+} DEZ_NODE_FOREACH;
+
+/*-- dez node content: function --*/
+typedef struct DEZ_NODE_FUNCTION_s
+{
+	DEZ_NODE *branch_node;							/* must is first one */
+	DEZ_NODE *param_node;
+	char *name;
+	DEZ_VAR m_dez_vars[DEZ_VARS_NUM];
+	int m_dez_var_num;
+	zend_op_array *op_array;
+} DEZ_NODE_FUNCTION;
+
+/*-- dez node content: class --*/
+typedef struct DEZ_NODE_CLASS_s
+{
+	DEZ_NODE *branch_node;							/* must is first one */
+	char *name;
+	zend_class_entry *parent;
+} DEZ_NODE_CLASS;
+
+/*-- dez node content: var --*/
+typedef struct DEZ_NODE_VAR_s
+{
+	DEZ_NODE *branch_node;							/* must is first one */
+	Bucket *property;
+} DEZ_NODE_VAR;
+
+/*-- dez node content: list element --*/
+typedef struct DEZ_NODE_LE_s
+{
+	DEZ_NODE *branch_node;							/* must is first one */
+	DEZ_NODE *a_node;
+	int pos;
+} DEZ_NODE_LE;
+
+/*-- dez node content: list --*/
+typedef struct DEZ_NODE_LIST_s
+{
+	DEZ_NODE *branch_node;							/* must is first one */
+	DEZ_NODE *le_node;
+	DEZ_NODE *dest_node;
+	int level;
+} DEZ_NODE_LIST;
+
+
+typedef int (*DEZ_NODE_CVT_FUNC)(unsigned char dez_op, zend_op *pzop);
+typedef int (*DEZ_NODE_OUTPUT_FUNC)(DEZ_NODE *pdez_node);
+typedef void (*DEZ_NODE_FREE_FUNC)(DEZ_NODE *pdez_node);
+
+
+static int dez_node_cvt_nop  (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_expr (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_qm_assign (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_if (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_do (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_for (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_foreach (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_case (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_default (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_function_or_class (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_double_arrow (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_array (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_heredoc (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_dollar_open_curly_braces (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_call (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_bool (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_jmp (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_func_param (unsigned char dez_op, zend_op *pzop);
+static int dez_node_cvt_unknown (unsigned char dez_op, zend_op *pzop);
+
+static int dez_node_output_nop(DEZ_NODE *pdez_node);
+static int dez_node_output_expr(DEZ_NODE *pdez_node);
+static int dez_node_output_cast(DEZ_NODE *pdez_node);
+static int dez_node_output_pre(DEZ_NODE *pdez_node);
+static int dez_node_output_pre2(DEZ_NODE *pdez_node);
+static int dez_node_output_post(DEZ_NODE *pdez_node);
+static int dez_node_output_qm_assign(DEZ_NODE *pdez_node);
+static int dez_node_output_assign(DEZ_NODE *pdez_node);
+static int dez_node_output_assign_ref(DEZ_NODE *pdez_node);
+static int dez_node_output_include_or_eval(DEZ_NODE *pdez_node);
+static int dez_node_output_or_and(DEZ_NODE *pdez_node);
+static int dez_node_output_new(DEZ_NODE *pdez_node);
+static int dez_node_output_exit(DEZ_NODE *pdez_node);
+static int dez_node_output_if(DEZ_NODE *pdez_node);
+static int dez_node_output_do(DEZ_NODE *pdez_node);
+static int dez_node_output_for(DEZ_NODE *pdez_node);
+static int dez_node_output_foreach(DEZ_NODE *pdez_node);
+static int dez_node_output_declare(DEZ_NODE *pdez_node);
+static int dez_node_output_case(DEZ_NODE *pdez_node);
+static int dez_node_output_default(DEZ_NODE *pdez_node);
+static int dez_node_output_function(DEZ_NODE *pdez_node);
+static int dez_node_output_var(DEZ_NODE *pdez_node);
+static int dez_node_output_unset(DEZ_NODE *pdez_node);
+static int dez_node_output_isset_or_empty(DEZ_NODE *pdez_node);
+static int dez_node_output_class(DEZ_NODE *pdez_node);
+static int dez_node_output_double_arrow(DEZ_NODE *pdez_node);
+static int dez_node_output_list(DEZ_NODE *pdez_node);
+static int dez_node_output_array(DEZ_NODE *pdez_node);
+static int dez_node_output_heredoc(DEZ_NODE *pdez_node);
+static int dez_node_output_dollar_open_curly_braces(DEZ_NODE *pdez_node);
+static int dez_node_output_call_param(DEZ_NODE *pdez_node);
+static int dez_node_output_call_init(DEZ_NODE *pdez_node);
+static int dez_node_output_call(DEZ_NODE *pdez_node);
+static int dez_node_output_call_ex(DEZ_NODE *pdez_node);
+static int dez_node_output_fetch_dim(DEZ_NODE *pdez_node);
+static int dez_node_output_init_string(DEZ_NODE *pdez_node);
+static int dez_node_output_fetch_constant(DEZ_NODE *pdez_node);
+static int dez_node_output_func_param(DEZ_NODE *pdez_node);
+static int dez_node_output_property(DEZ_NODE *pdez_node);
+static int dez_node_output_le(DEZ_NODE *pdez_node);
+static int dez_node_output_unknown(DEZ_NODE *pdez_node);
+
+static void dez_node_free_nop (DEZ_NODE *pdez_node);
+static void dez_node_free_expr (DEZ_NODE *pdez_node);
+static void dez_node_free_if (DEZ_NODE *pdez_node);
+static void dez_node_free_for (DEZ_NODE *pdez_node);
+static void dez_node_free_foreach (DEZ_NODE *pdez_node);
+static void dez_node_free_case (DEZ_NODE *pdez_node);
+static void dez_node_free_default (DEZ_NODE *pdez_node);
+static void dez_node_free_function (DEZ_NODE *pdez_node);
+static void dez_node_free_var (DEZ_NODE *pdez_node);
+static void dez_node_free_class (DEZ_NODE *pdez_node);
+static void dez_node_free_da (DEZ_NODE *pdez_node);
+static void dez_node_free_list (DEZ_NODE *pdez_node);
+static void dez_node_free_heredoc (DEZ_NODE *pdez_node);
+static void dez_node_free_dollar_open_curly_braces (DEZ_NODE *pdez_node);
+static void dez_node_free_property(DEZ_NODE *pdez_node);
+static void dez_node_free_le (DEZ_NODE *pdez_node);
+static void dez_node_free_unknown (DEZ_NODE *pdez_node);
+
+
+typedef struct
+{
+	char *desc;
+	DEZ_NODE_CVT_FUNC		dez_node_cvt_func;			/* the node convert function */
+	DEZ_NODE_OUTPUT_FUNC 	dez_node_output_func;		/* the node output function */
+	DEZ_NODE_FREE_FUNC		dez_node_free_func;			/* the node free function */
+} DEZ_NODE_SPEC;
+
+typedef struct
+{
+	unsigned char dez_op;							/* dez op code */
+	short opcs_len;                 				/* the length of opcs[] */
+	unsigned char opcs[OPCS_MAX_LEN];				/* the matching zend op codes */
+} DEZ_OP_TYPE;
+
+typedef struct DEZ_BRK_CNT_NODE_s
+{
+	const DEZ_NODE *node;							/* pointer to if(false) node */
+	struct DEZ_BRK_CNT_NODE_s *prev;
+	struct DEZ_BRK_CNT_NODE_s *next;
+} DEZ_BRK_CNT_NODE;
+
+
+static DEZ_VAR m_dez_vars[DEZ_VARS_NUM];
+static int m_dez_var_num = 0;
+
+static char *ZEND_OP_STRING[] = 
+{
+	"ZEND_NOP                         ",
+	"ZEND_ADD                         ",
+	"ZEND_SUB                         ",
+	"ZEND_MUL                         ",
+	"ZEND_DIV                         ",
+	"ZEND_MOD                         ",
+	"ZEND_SL                          ",
+	"ZEND_SR                          ",
+	"ZEND_CONCAT                      ",
+	"ZEND_BW_OR                       ",
+	"ZEND_BW_AND                      ",
+	"ZEND_BW_XOR                      ",
+	"ZEND_BW_NOT                      ",
+	"ZEND_BOOL_NOT                    ",
+	"ZEND_BOOL_XOR                    ",
+	"ZEND_IS_IDENTICAL                ",
+	"ZEND_IS_NOT_IDENTICAL            ",
+	"ZEND_IS_EQUAL                    ",
+	"ZEND_IS_NOT_EQUAL                ",
+	"ZEND_IS_SMALLER                  ",
+	"ZEND_IS_SMALLER_OR_EQUAL         ",
+	"ZEND_CAST                        ",
+	"ZEND_QM_ASSIGN                   ",
+	"ZEND_ASSIGN_ADD                  ",
+	"ZEND_ASSIGN_SUB                  ",
+	"ZEND_ASSIGN_MUL                  ",
+	"ZEND_ASSIGN_DIV                  ",
+	"ZEND_ASSIGN_MOD                  ",
+	"ZEND_ASSIGN_SL                   ",
+	"ZEND_ASSIGN_SR                   ",
+	"ZEND_ASSIGN_CONCAT               ",
+	"ZEND_ASSIGN_BW_OR                ",
+	"ZEND_ASSIGN_BW_AND               ",
+	"ZEND_ASSIGN_BW_XOR               ",
+	"ZEND_PRE_INC                     ",
+	"ZEND_PRE_DEC                     ",
+	"ZEND_POST_INC                    ",
+	"ZEND_POST_DEC                    ",
+	"ZEND_ASSIGN                      ",
+	"ZEND_ASSIGN_REF                  ",
+	"ZEND_ECHO                        ",
+	"ZEND_PRINT                       ",
+	"ZEND_JMP                         ",
+	"ZEND_JMPZ                        ",
+	"ZEND_JMPNZ                       ",
+	"ZEND_JMPZNZ                      ",
+	"ZEND_JMPZ_EX                     ",
+	"ZEND_JMPNZ_EX                    ",
+	"ZEND_CASE                        ",
+	"ZEND_SWITCH_FREE                 ",
+	"ZEND_BRK                         ",
+	"ZEND_CONT                        ",
+	"ZEND_BOOL                        ",
+	"ZEND_INIT_STRING                 ",
+	"ZEND_ADD_CHAR                    ",
+	"ZEND_ADD_STRING                  ",
+	"ZEND_ADD_VAR                     ",
+	"ZEND_BEGIN_SILENCE               ",
+	"ZEND_END_SILENCE                 ",
+	"ZEND_INIT_FCALL_BY_NAME          ",
+	"ZEND_DO_FCALL                    ",
+	"ZEND_DO_FCALL_BY_NAME            ",
+	"ZEND_RETURN                      ",
+	"ZEND_RECV                        ",
+	"ZEND_RECV_INIT                   ",
+	"ZEND_SEND_VAL                    ",
+	"ZEND_SEND_VAR                    ",
+	"ZEND_SEND_REF                    ",
+	"ZEND_NEW                         ",
+	"ZEND_JMP_NO_CTOR                 ",
+	"ZEND_FREE                        ",
+	"ZEND_INIT_ARRAY                  ",
+	"ZEND_ADD_ARRAY_ELEMENT           ",
+	"ZEND_INCLUDE_OR_EVAL             ",
+	"ZEND_UNSET_VAR                   ",
+	"ZEND_UNSET_DIM_OBJ               ",
+	"ZEND_ISSET_ISEMPTY               ",
+	"ZEND_FE_RESET                    ",
+	"ZEND_FE_FETCH                    ",
+	"ZEND_EXIT                        ",
+	"ZEND_FETCH_R                     ",
+	"ZEND_FETCH_DIM_R                 ",
+	"ZEND_FETCH_OBJ_R                 ",
+	"ZEND_FETCH_W                     ",
+	"ZEND_FETCH_DIM_W                 ",
+	"ZEND_FETCH_OBJ_W                 ",
+	"ZEND_FETCH_RW                    ",
+	"ZEND_FETCH_DIM_RW                ",
+	"ZEND_FETCH_OBJ_RW                ",
+	"ZEND_FETCH_IS                    ",
+	"ZEND_FETCH_DIM_IS                ",
+	"ZEND_FETCH_OBJ_IS                ",
+	"ZEND_FETCH_FUNC_ARG              ",
+	"ZEND_FETCH_DIM_FUNC_ARG          ",
+	"ZEND_FETCH_OBJ_FUNC_ARG          ",
+	"ZEND_FETCH_UNSET                 ",
+	"ZEND_FETCH_DIM_UNSET             ",
+	"ZEND_FETCH_OBJ_UNSET             ",
+	"ZEND_FETCH_DIM_TMP_VAR           ",
+	"ZEND_FETCH_CONSTANT              ",
+	"ZEND_DECLARE_FUNCTION_OR_CLASS   ",
+	"ZEND_EXT_STMT                    ",
+	"ZEND_EXT_FCALL_BEGIN             ",
+	"ZEND_EXT_FCALL_END               ",
+	"ZEND_EXT_NOP                     ",
+	"ZEND_TICKS                       ",
+	"ZEND_SEND_VAR_NO_REF             ",
+	"ZEND_CATCH	                      ",
+	"ZEND_THROW	                      ",
+	"ZEND_FETCH_CLASS	              ",
+	"ZEND_CLONE	                      ",
+	"ZEND_INIT_CTOR_CALL	          ",
+	"ZEND_INIT_METHOD_CALL	          ",
+	"ZEND_INIT_STATIC_METHOD_CALL     ",
+	"ZEND_ISSET_ISEMPTY_VAR	          ",
+	"ZEND_ISSET_ISEMPTY_DIM_OBJ	      ",
+	"ZEND_IMPORT_FUNCTION	          ",
+	"ZEND_IMPORT_CLASS	              ",
+	"ZEND_IMPORT_CONST	              ",
+	"ZEND_PRE_INC_OBJ	              ",
+	"ZEND_PRE_DEC_OBJ	              ",
+	"ZEND_POST_INC_OBJ	              ",
+	"ZEND_POST_DEC_OBJ	              ",
+	"ZEND_ASSIGN_OBJ	              ",
+	"ZEND_OP_DATA	                  ",
+	"ZEND_INSTANCEOF	              ",
+	"ZEND_DECLARE_CLASS	              ",
+	"ZEND_DECLARE_INHERITED_CLASS	  ",  
+	"ZEND_DECLARE_FUNCTION	          ",  
+	"ZEND_RAISE_ABSTRACT_ERROR	      "
+};
+
+
+static DEZ_NODE_SPEC dez_node_specs[] = 
+{
+	{"", dez_node_cvt_nop, dez_node_output_nop, dez_node_free_nop},                                          /* DEZ_OP_NOP*/
+	{" + ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                                        /* DEZ_OP_ADD*/
+	{" - ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                                        /* DEZ_OP_SUB*/
+	{" * ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                                        /* DEZ_OP_MUL*/
+	{" / ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                                        /* DEZ_OP_DIV*/
+	{" % ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                                        /* DEZ_OP_MOD*/
+	{" << ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                                            /* DEZ_OP_SL*/
+	{" >> ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                                            /* DEZ_OP_SR*/
+	{".", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                                    /* DEZ_OP_CONCAT*/
+	{" | ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                                      /* DEZ_OP_BW_OR    */
+	{" & ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                                    /* DEZ_OP_BW_AND*/
+	{" ^ ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                                    /* DEZ_OP_BW_XOR*/
+	{"~", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                                    /* DEZ_OP_BW_NOT*/
+	{"!", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                                /* DEZ_OP_BOOL_NOT    */
+	{" === ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                        /* DEZ_OP_IS_IDENTICAL    */
+	{" !== ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                /* DEZ_OP_IS_NOT_IDENTICAL    */
+	{" == ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                                /* DEZ_OP_IS_EQUAL    */
+	{" != ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                        /* DEZ_OP_IS_NOT_EQUAL    */
+	{" < ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                            /* DEZ_OP_IS_SMALLER*/
+	{" <= ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},          			/* DEZ_OP_IS_SMALLER_OR_EQUAL*/
+	{"(xxx)a", dez_node_cvt_expr, dez_node_output_cast, dez_node_free_expr},                                        /* DEZ_OP_CAST    */
+	{"a?b:c", dez_node_cvt_qm_assign, dez_node_output_qm_assign, dez_node_free_expr},                              /* DEZ_OP_QM_ASSIGN    */
+	{" += ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                            /* DEZ_OP_ASSIGN_ADD*/
+	{" -= ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                            /* DEZ_OP_ASSIGN_SUB*/
+	{" *= ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                            /* DEZ_OP_ASSIGN_MUL*/
+	{" /= ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                            /* DEZ_OP_ASSIGN_DIV*/
+	{" %= ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                            /* DEZ_OP_ASSIGN_MOD*/
+	{" <<= ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                              /* DEZ_OP_ASSIGN_SL    */
+	{" >>= ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                              /* DEZ_OP_ASSIGN_SR    */
+	{" .= ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                      /* DEZ_OP_ASSIGN_CONCAT    */
+	{" |= ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                        /* DEZ_OP_ASSIGN_BW_OR    */
+	{" &= ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                      /* DEZ_OP_ASSIGN_BW_AND    */
+	{" ^= ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                      /* DEZ_OP_ASSIGN_BW_XOR    */
+	{"++", dez_node_cvt_expr, dez_node_output_pre, dez_node_free_expr},                                  /* DEZ_OP_PRE_INC*/
+	{"--", dez_node_cvt_expr, dez_node_output_pre, dez_node_free_expr},                                  /* DEZ_OP_PRE_DEC*/
+	{"++", dez_node_cvt_expr, dez_node_output_post, dez_node_free_expr},                                /* DEZ_OP_POST_INC    */
+	{"--", dez_node_cvt_expr, dez_node_output_post, dez_node_free_expr},                                /* DEZ_OP_POST_DEC    */
+	{" = ", dez_node_cvt_expr, dez_node_output_assign, dez_node_free_expr},                                    /* DEZ_OP_ASSIGN*/
+	{" = &", dez_node_cvt_expr, dez_node_output_assign_ref, dez_node_free_expr},                            /* DEZ_OP_ASSIGN_REF*/
+	{"echo ", dez_node_cvt_expr, dez_node_output_pre, dez_node_free_expr},                                        /* DEZ_OP_ECHO    */
+	{"print ", dez_node_cvt_expr, dez_node_output_pre, dez_node_free_expr},                                      /* DEZ_OP_PRINT    */
+	{"", dez_node_cvt_expr, dez_node_output_include_or_eval, dez_node_free_expr},                  /* DEZ_OP_INCLUDE_OR_EVAL*/
+	{" OR ", dez_node_cvt_expr, dez_node_output_or_and, dez_node_free_expr},                            /* DEZ_OP_LOGICAL_OR*/
+	{" XOR ", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},                          /* DEZ_OP_LOGICAL_XOR*/
+	{" AND ", dez_node_cvt_expr, dez_node_output_or_and, dez_node_free_expr},                          /* DEZ_OP_LOGICAL_AND*/
+	{"new ", dez_node_cvt_expr, dez_node_output_new, dez_node_free_expr},                                          /* DEZ_OP_NEW*/
+	{"exit", dez_node_cvt_expr, dez_node_output_exit, dez_node_free_expr},                                        /* DEZ_OP_EXIT    */
+	{"if ", dez_node_cvt_if, dez_node_output_if, dez_node_free_if},                                            /* DEZ_OP_IF*/
+	{"elseif ", dez_node_cvt_unknown, dez_node_output_unknown, dez_node_free_unknown},                                    /* DEZ_OP_ELSEIF*/
+	{"else", dez_node_cvt_expr, dez_node_output_pre, dez_node_free_expr},                                        /* DEZ_OP_ELSE    */
+	{"do", dez_node_cvt_do, dez_node_output_do, dez_node_free_expr},                                            /* DEZ_OP_DO*/
+	{"while ", dez_node_cvt_unknown, dez_node_output_if, dez_node_free_if},                                      /* DEZ_OP_WHILE    */
+	{"for ", dez_node_cvt_for, dez_node_output_for, dez_node_free_for},                                          /* DEZ_OP_FOR*/
+	{"foreach ", dez_node_cvt_foreach, dez_node_output_foreach, dez_node_free_foreach},                                  /* DEZ_OP_FOREACH*/
+	{"declare ", dez_node_cvt_expr, dez_node_output_declare, dez_node_free_expr},                                  /* DEZ_OP_DECLARE*/
+	{"", dez_node_cvt_unknown, dez_node_output_pre, dez_node_free_expr},                                            /* DEZ_OP_AS*/
+	{"switch ", dez_node_cvt_unknown, dez_node_output_if, dez_node_free_if},                                    /* DEZ_OP_SWITCH*/
+	{"case ", dez_node_cvt_case, dez_node_output_case, dez_node_free_case},                                        /* DEZ_OP_CASE    */
+	{"default:", dez_node_cvt_default, dez_node_output_default, dez_node_free_default},                                  /* DEZ_OP_DEFAULT*/
+	{"break", dez_node_cvt_expr, dez_node_output_pre2, dez_node_free_expr},                                      /* DEZ_OP_BREAK    */
+	{"continue", dez_node_cvt_expr, dez_node_output_pre2, dez_node_free_expr},                                /* DEZ_OP_CONTINUE    */
+	{"old_function", dez_node_cvt_unknown, dez_node_output_unknown, dez_node_free_unknown},                        /* DEZ_OP_OLD_FUNCTION    */
+	{"function ", dez_node_cvt_function_or_class, dez_node_output_function, dez_node_free_function},                                /* DEZ_OP_FUNCTION    */
+	{"const", dez_node_cvt_unknown, dez_node_output_unknown, dez_node_free_unknown},                                      /* DEZ_OP_CONST    */
+	{"return ", dez_node_cvt_expr, dez_node_output_pre, dez_node_free_expr},                                    /* DEZ_OP_RETURN*/
+	{"use", dez_node_cvt_unknown, dez_node_output_unknown, dez_node_free_unknown},                                          /* DEZ_OP_USE*/
+	{"var ", dez_node_cvt_unknown, dez_node_output_var, dez_node_free_var},                                          /* DEZ_OP_VAR*/
+	{"unset ", dez_node_cvt_expr, dez_node_output_unset, dez_node_free_expr},                                      /* DEZ_OP_UNSET    */
+	{"isset ", dez_node_cvt_expr, dez_node_output_isset_or_empty, dez_node_free_expr},                                      /* DEZ_OP_ISSET    */
+	{"empty ", dez_node_cvt_unknown, dez_node_output_unknown, dez_node_free_unknown},                                      /* DEZ_OP_EMPTY    */
+	{"class ", dez_node_cvt_function_or_class, dez_node_output_class, dez_node_free_class},                                      /* DEZ_OP_CLASS    */
+	{"extends", dez_node_cvt_unknown, dez_node_output_unknown, dez_node_free_unknown},                                  /* DEZ_OP_EXTENDS*/
+	{"->", dez_node_cvt_expr, dez_node_output_expr, dez_node_free_expr},    				              /* DEZ_OP_OBJECT_OPERATOR*/
+	{" => ", dez_node_cvt_double_arrow, dez_node_output_double_arrow, dez_node_free_da},                        /* DEZ_OP_DOUBLE_ARROW    */
+	{"list ", dez_node_cvt_unknown, dez_node_output_list, dez_node_free_list},                                        /* DEZ_OP_LIST    */
+	{"array ", dez_node_cvt_array, dez_node_output_array, dez_node_free_da},                                      /* DEZ_OP_ARRAY    */
+	{"__CLASS__", dez_node_cvt_unknown, dez_node_output_unknown, dez_node_free_unknown},                                  /* DEZ_OP_CLASS_C*/
+	{"__FUNCTION__", dez_node_cvt_unknown, dez_node_output_unknown, dez_node_free_unknown},                                    /* DEZ_OP_FUNC_C*/
+	{"__LINE__", dez_node_cvt_unknown, dez_node_output_unknown, dez_node_free_unknown},                                        /* DEZ_OP_LINE    */
+	{"__FILE__", dez_node_cvt_unknown, dez_node_output_unknown, dez_node_free_unknown},                                        /* DEZ_OP_FILE    */
+	{"", dez_node_cvt_unknown, dez_node_output_unknown, dez_node_free_unknown},                                  /* DEZ_OP_COMMENT*/
+/****/	{"<<<", dez_node_cvt_heredoc, dez_node_output_heredoc, dez_node_free_heredoc},                                  /* DEZ_OP_HEREDOC*/
+/****/	{"", dez_node_cvt_dollar_open_curly_braces, dez_node_output_dollar_open_curly_braces, dez_node_free_dollar_open_curly_braces},/* DEZ_OP_DOLLAR_OPEN_CURLY_BRACES  */
+	{"::", dez_node_cvt_unknown, dez_node_output_unknown, dez_node_free_unknown},                                /* DEZ_OP_PAAMAYIM_NEKUDOTAYIM    */
+	{"", dez_node_cvt_expr, dez_node_output_call_param, dez_node_free_expr},                                        /* DEZ_OP_CALL_PARAM    */
+	{"", dez_node_cvt_expr, dez_node_output_call_init, dez_node_free_expr},                                        /* DEZ_OP_CALL_INIT    */
+	{"", dez_node_cvt_call, dez_node_output_call, dez_node_free_expr},                                        /* DEZ_OP_CALL    */
+	{"", dez_node_cvt_call, dez_node_output_call_ex, dez_node_free_expr},                                        /* DEZ_OP_CALL_EX    */
+	{"", dez_node_cvt_bool, dez_node_output_unknown, dez_node_free_expr},                                        /* DEZ_OP_BOOL    */
+	{"a[b]", dez_node_cvt_expr, dez_node_output_fetch_dim, dez_node_free_expr},                                        /* DEZ_OP_FETCH_DIM    */
+	{"''", dez_node_cvt_expr, dez_node_output_init_string, dez_node_free_expr},                                        /* DEZ_OP_INIT_STRING    */
+	{"$", dez_node_cvt_expr, dez_node_output_pre, dez_node_free_expr},                                        /* DEZ_OP_FETCH    */
+	{"", dez_node_cvt_expr, dez_node_output_fetch_constant, dez_node_free_expr},                                        /* DEZ_OP_FETCH_CONSTANT    */
+	{"jmp", dez_node_cvt_jmp, dez_node_output_pre, dez_node_free_if},                                        /* DEZ_OP_JMP    */
+	{"", dez_node_cvt_func_param, dez_node_output_func_param, dez_node_free_expr},                                        /* DEZ_OP_FUNC_PARAM    */
+	{"@", dez_node_cvt_expr, dez_node_output_unknown, dez_node_free_expr},                                        /* DEZ_OP_BEGIN_SILENCE    */
+	{"", dez_node_cvt_expr, dez_node_output_unknown, dez_node_free_expr},                                        /* DEZ_OP_END_SILENCE    */
+	{"", dez_node_cvt_unknown, dez_node_output_le, dez_node_free_le},                                        /* DEZ_OP_END_SILENCE    */
+	{"", dez_node_cvt_unknown, dez_node_output_unknown, dez_node_free_unknown}                                   /* DEZ_OP_UNKNOWN    */
+};
+
+
+static DEZ_OP_TYPE dez_op_types[] = 
+{
+	{DEZ_OP_NOP						, 1, {ZEND_NOP}},
+	{DEZ_OP_NOP						, 1, {ZEND_FREE}},
+	{DEZ_OP_NOP						, 1, {ZEND_SWITCH_FREE}},
+	{DEZ_OP_NOP						, 1, {ZEND_INIT_CTOR_CALL}},
+	{DEZ_OP_ADD						, 1, {ZEND_ADD}},
+	{DEZ_OP_SUB						, 1, {ZEND_SUB}},
+	{DEZ_OP_MUL						, 1, {ZEND_MUL}},
+	{DEZ_OP_DIV						, 1, {ZEND_DIV}},
+	{DEZ_OP_MOD						, 1, {ZEND_MOD}},
+	{DEZ_OP_SL						, 1, {ZEND_SL}},
+	{DEZ_OP_SR						, 1, {ZEND_SR}},
+	{DEZ_OP_CONCAT					, 1, {ZEND_CONCAT}},
+	{DEZ_OP_CONCAT					, 1, {ZEND_ADD_STRING}},
+	{DEZ_OP_CONCAT					, 1, {ZEND_ADD_VAR}},
+	{DEZ_OP_CONCAT					, 1, {ZEND_ADD_CHAR}},
+	{DEZ_OP_BW_OR					, 1, {ZEND_BW_OR}},
+	{DEZ_OP_BW_AND					, 1, {ZEND_BW_AND}},
+	{DEZ_OP_BW_XOR					, 1, {ZEND_BW_XOR}},
+	{DEZ_OP_BW_NOT					, 1, {ZEND_BW_NOT}},
+	{DEZ_OP_BOOL_NOT				, 1, {ZEND_BOOL_NOT}},
+	{DEZ_OP_IS_IDENTICAL			, 1, {ZEND_IS_IDENTICAL}},
+	{DEZ_OP_IS_NOT_IDENTICAL		, 1, {ZEND_IS_NOT_IDENTICAL}},
+	{DEZ_OP_IS_EQUAL				, 1, {ZEND_IS_EQUAL}},
+	{DEZ_OP_IS_NOT_EQUAL			, 1, {ZEND_IS_NOT_EQUAL}},
+	{DEZ_OP_IS_SMALLER				, 1, {ZEND_IS_SMALLER}},
+	{DEZ_OP_IS_SMALLER_OR_EQUAL		, 1, {ZEND_IS_SMALLER_OR_EQUAL}},
+	{DEZ_OP_CAST					, 1, {ZEND_CAST}},
+	{DEZ_OP_QM_ASSIGN				, 2, {ZEND_QM_ASSIGN, ZEND_JMP}},
+	{DEZ_OP_QM_ASSIGN				, 1, {ZEND_QM_ASSIGN}},
+	{DEZ_OP_ASSIGN_ADD				, 1, {ZEND_ASSIGN_ADD}},
+	{DEZ_OP_ASSIGN_SUB				, 1, {ZEND_ASSIGN_SUB}},
+	{DEZ_OP_ASSIGN_MUL				, 1, {ZEND_ASSIGN_MUL}},
+	{DEZ_OP_ASSIGN_DIV				, 1, {ZEND_ASSIGN_DIV}},
+	{DEZ_OP_ASSIGN_MOD				, 1, {ZEND_ASSIGN_MOD}},
+	{DEZ_OP_ASSIGN_SL				, 1, {ZEND_ASSIGN_SL}},
+	{DEZ_OP_ASSIGN_SR				, 1, {ZEND_ASSIGN_SR}},
+	{DEZ_OP_ASSIGN_CONCAT			, 1, {ZEND_ASSIGN_CONCAT}},
+	{DEZ_OP_ASSIGN_BW_OR			, 1, {ZEND_ASSIGN_BW_OR}},
+	{DEZ_OP_ASSIGN_BW_AND			, 1, {ZEND_ASSIGN_BW_AND}},
+	{DEZ_OP_ASSIGN_BW_XOR			, 1, {ZEND_ASSIGN_BW_XOR}},
+	{DEZ_OP_PRE_INC					, 1, {ZEND_PRE_INC}},
+	{DEZ_OP_PRE_DEC					, 1, {ZEND_PRE_DEC}},
+	{DEZ_OP_POST_INC				, 1, {ZEND_POST_INC}},
+	{DEZ_OP_POST_DEC				, 1, {ZEND_POST_DEC}},
+	{DEZ_OP_ASSIGN					, 1, {ZEND_ASSIGN}},
+	{DEZ_OP_ASSIGN_REF				, 1, {ZEND_ASSIGN_REF}},
+	{DEZ_OP_ECHO					, 1, {ZEND_ECHO}},
+	{DEZ_OP_PRINT					, 1, {ZEND_PRINT}},
+	{DEZ_OP_INCLUDE_OR_EVAL			, 1, {ZEND_INCLUDE_OR_EVAL}},
+	{DEZ_OP_LOGICAL_OR				, 1, {ZEND_JMPNZ_EX}},
+	{DEZ_OP_LOGICAL_XOR				, 1, {ZEND_BOOL_XOR}},
+	{DEZ_OP_LOGICAL_AND				, 1, {ZEND_JMPZ_EX}},
+	{DEZ_OP_NEW						, 3, {ZEND_NEW, ZEND_JMP_NO_CTOR, ZEND_INIT_FCALL_BY_NAME}},
+	{DEZ_OP_NEW						, 3, {ZEND_NEW, ZEND_JMP, ZEND_INIT_FCALL_BY_NAME}},
+	{DEZ_OP_NEW						, 2, {ZEND_NEW, ZEND_INIT_FCALL_BY_NAME}},
+	{DEZ_OP_EXIT					, 1, {ZEND_EXIT}},
+	{DEZ_OP_IF						, 1, {ZEND_JMPZ}},
+//	{DEZ_OP_ELSEIF					, 1, {???ZEND_JMPZ}},
+//	{DEZ_OP_ELSE					, 1, {ZEND_JMP}},
+	{DEZ_OP_DO						, 1, {ZEND_JMPNZ}},
+//	{DEZ_OP_WHILE					, 1, {???ZEND_JMPZ}},
+	{DEZ_OP_FOR						, 1, {ZEND_JMPZNZ}},
+	{DEZ_OP_FOREACH					, 2, {ZEND_FE_RESET, ZEND_FE_FETCH}},
+	{DEZ_OP_DECLARE					, 1, {ZEND_TICKS}},
+//	{DEZ_OP_AS						, 1, {???}},
+//	{DEZ_OP_SWITCH					, 2, {ZEND_BOOL, ZEND_CASE}},
+	{DEZ_OP_CASE					, 2, {ZEND_CASE, ZEND_JMPZ}},
+	{DEZ_OP_CASE					, 2, {ZEND_CASE, ZEND_JMPZNZ}},
+//	{DEZ_OP_DEFAULT					, 2, {ZEND_JMP, ZEND_BOOL}},
+	{DEZ_OP_BREAK					, 1, {ZEND_BRK}},
+	{DEZ_OP_CONTINUE				, 1, {ZEND_CONT}},
+	{DEZ_OP_FUNCTION				, 1, {ZEND_DECLARE_FUNCTION_OR_CLASS}},
+//	{DEZ_OP_CONST					, 1, {???}},
+	{DEZ_OP_RETURN					, 1, {ZEND_RETURN}},
+//	{DEZ_OP_VAR						, 1, {???}},
+	{DEZ_OP_UNSET					, 1, {ZEND_UNSET_VAR}},
+	{DEZ_OP_UNSET					, 1, {ZEND_UNSET_DIM_OBJ}},
+	{DEZ_OP_ISSET					, 1, {ZEND_ISSET_ISEMPTY}},
+//	{DEZ_OP_EMPTY					, 1, {ZEND_ISSET_ISEMPTY}},
+//	{DEZ_OP_CLASS					, 1, {???ZEND_DECLARE_FUNCTION_OR_CLASS}},
+//	{DEZ_OP_EXTENDS					, 1, {???}},
+	{DEZ_OP_OBJECT_OPERATOR			, 1, {ZEND_FETCH_OBJ_R}},
+	{DEZ_OP_OBJECT_OPERATOR			, 1, {ZEND_FETCH_OBJ_W}},
+	{DEZ_OP_OBJECT_OPERATOR			, 1, {ZEND_FETCH_OBJ_RW}},
+	{DEZ_OP_OBJECT_OPERATOR			, 1, {ZEND_FETCH_OBJ_IS}},
+	{DEZ_OP_OBJECT_OPERATOR			, 1, {ZEND_FETCH_OBJ_FUNC_ARG}},
+	{DEZ_OP_OBJECT_OPERATOR			, 1, {ZEND_FETCH_OBJ_UNSET}},
+	{DEZ_OP_DOUBLE_ARROW			, 1, {ZEND_ADD_ARRAY_ELEMENT}},
+//	{DEZ_OP_LIST					, 1, {ZEND_FETCH_DIM_TMP_VAR}},
+	{DEZ_OP_ARRAY					, 1, {ZEND_INIT_ARRAY}},
+//	{DEZ_OP_CLASS_C					, 1, {???}},
+//	{DEZ_OP_FUNC_C					, 1, {???}},
+//	{DEZ_OP_LINE					, 1, {???}},
+//	{DEZ_OP_FILE					, 1, {???}},
+//	{DEZ_OP_COMMENT					, 1, {???}},
+//	{DEZ_OP_HEREDOC					, 1, {???}},
+//	{DEZ_OP_DOLLAR_OPEN_CURLY_BRACES, 1, {???}},
+//	{DEZ_OP_PAAMAYIM_NEKUDOTAYIM	, 1, {???ZEND_INIT_FCALL_BY_NAME}},
+	{DEZ_OP_CALL_PARAM				, 1, {ZEND_SEND_VAL}},
+	{DEZ_OP_CALL_PARAM				, 1, {ZEND_SEND_VAR}},
+	{DEZ_OP_CALL_PARAM				, 1, {ZEND_SEND_REF}},
+	{DEZ_OP_CALL_PARAM				, 1, {ZEND_SEND_VAR_NO_REF}},
+	{DEZ_OP_CALL_INIT				, 1, {ZEND_INIT_FCALL_BY_NAME}},
+	{DEZ_OP_CALL					, 1, {ZEND_DO_FCALL}},
+	{DEZ_OP_CALL					, 1, {ZEND_DO_FCALL_BY_NAME}},
+	{DEZ_OP_CALL_EX					, 1, {ZEND_CLONE}},
+	{DEZ_OP_BOOL					, 1, {ZEND_BOOL}},
+	{DEZ_OP_FETCH_DIM				, 1, {ZEND_FETCH_DIM_W}},
+	{DEZ_OP_FETCH_DIM				, 1, {ZEND_FETCH_DIM_R}},
+	{DEZ_OP_FETCH_DIM				, 1, {ZEND_FETCH_DIM_RW}},
+	{DEZ_OP_FETCH_DIM				, 1, {ZEND_FETCH_DIM_IS}},
+	{DEZ_OP_FETCH_DIM				, 1, {ZEND_FETCH_DIM_TMP_VAR}},
+	{DEZ_OP_FETCH_DIM				, 1, {ZEND_FETCH_DIM_FUNC_ARG}},
+	{DEZ_OP_FETCH_DIM				, 1, {ZEND_FETCH_DIM_UNSET}},
+	{DEZ_OP_INIT_STRING				, 1, {ZEND_INIT_STRING}},
+	{DEZ_OP_FETCH					, 1, {ZEND_FETCH_W}},
+	{DEZ_OP_FETCH					, 1, {ZEND_FETCH_R}},
+	{DEZ_OP_FETCH					, 1, {ZEND_FETCH_RW}},
+	{DEZ_OP_FETCH					, 1, {ZEND_FETCH_IS}},
+	{DEZ_OP_FETCH					, 1, {ZEND_FETCH_FUNC_ARG}},
+	{DEZ_OP_FETCH					, 1, {ZEND_FETCH_UNSET}},
+	{DEZ_OP_FETCH_CONSTANT			, 1, {ZEND_FETCH_CONSTANT}},
+	{DEZ_OP_FUNC_PARAM				, 1, {ZEND_RECV}},
+	{DEZ_OP_FUNC_PARAM				, 1, {ZEND_RECV_INIT}},
+	{DEZ_OP_BEGIN_SILENCE			, 1, {ZEND_BEGIN_SILENCE}},
+	{DEZ_OP_END_SILENCE				, 1, {ZEND_END_SILENCE}},
+	{DEZ_OP_JMP						, 1, {ZEND_JMP}}
+};
+
+
+static unsigned char m_opc_stack[OPC_STACK_SIZE];
+static zend_op *m_op_buffer[OPC_STACK_SIZE];
+static int m_opc_num = 0;
+
+static DEZ_NODE *m_node_stack[NODE_STACK_SIZE];
+static int m_node_num = 0;
+
+static DEZ_NODE *m_dez_op_root		= NULL;		/* pointer to the root of dez ops */
+static DEZ_NODE *m_dez_op_prev		= NULL;		/* pointer to the previous dez op */
+static DEZ_NODE *m_dez_op_current	= NULL;		/* pointer to the current dez op */
+static zend_op *m_zend_op_start		= NULL;		/* pointer to the start of zend ops */
+static zend_op *m_zend_op_end		= NULL;		/* pointer to the end of zend ops */
+static zend_op *m_zend_op_current	= NULL;		/* pointer to the current zend op */
+
+static short m_zend_op_match_n		= 0;		/* the number of matching zend op */
+
+static DEZ_ZEND_OP_DUP m_zend_op_dup[512];		/* the duplicate zend op */
+static int m_zend_op_dup_num		= 0;
+
+static int m_max_jmp_dest			= 0;
+
+static DEZ_NODE *m_current_function = NULL;		/* pointer to current function node */
+
+static DEZ_BRK_CNT_NODE *m_dez_brk_cnt_root	= NULL;	/* pointer to the root of break/continue node */
+static DEZ_BRK_CNT_NODE *m_dez_brk_cnt_tail	= NULL;	/* pointer to the tailer of break/continue node */
+
+
+static int dez_opc_push(zend_op *pzop)
+{                                   
+	if (m_opc_num >= OPC_STACK_SIZE)			/* the stack is full */
+	{
+		return -1;
+	}
+
+	m_opc_stack[m_opc_num]		= (unsigned char)(pzop->opcode);
+	m_op_buffer[m_opc_num++]	= pzop;
+
+	return 0;
+}                                   
+
+static void dez_opc_pop(int n)
+{
+	if (n > m_opc_num)
+	{
+		n = m_opc_num;
+	}
+	
+	m_opc_num -= n;
+	
+	if (m_opc_num > 0)
+	{
+		memmove (m_opc_stack, m_opc_stack + m_opc_num, n*sizeof(m_opc_stack[0]));
+		memmove (m_op_buffer, m_op_buffer + m_opc_num, n*sizeof(m_op_buffer[0]));
+	}
+}
+
+static void dez_opc_refresh(void)
+{                                   
+	int i = 0;
+	
+	while(i < m_opc_num)
+	{
+		m_opc_stack[i] = m_op_buffer[i]->opcode;
+		
+		i++;
+	}
+}
+
+/* return: <0: error; 0: need to continue; 1: not matching; 2: matching */
+static int dez_opc_compare(const unsigned char *opcs, int len)
+{
+	int i;
+	int r;
+	
+	if (len > m_opc_num)
+	{
+		len	= m_opc_num;
+		r	= 0;
+	}
+	else
+	{
+		r	= 2;
+	}
+	
+	for (i = 0; i < len; i++)
+	{
+		if (m_opc_stack[i] != opcs[i])					/* not matching */
+		{
+			return 1;
+		}
+	}
+	
+	return r;
+}
+
+static int dez_node_push(DEZ_NODE *node)
+{                                   
+	if (m_node_num >= NODE_STACK_SIZE)					/* the stack is full */
+	{                               
+		return -1;
+	}                               
+
+	m_node_stack[m_node_num++]	= node;
+
+	return 0;
+}
+
+static DEZ_NODE *dez_node_pop()
+{
+	if (m_node_num <= 0)								/* the stack is empty */
+	{
+		return NULL;
+	}
+	
+	return m_node_stack[--m_node_num];
+}
+
+static DEZ_NODE *dez_node_get()
+{
+	if (m_node_num <= 0)								/* the stack is empty */
+	{
+		return NULL;
+	}
+	
+	return m_node_stack[m_node_num-1];
+}
+
+static DEZ_BRK_CNT_NODE *dez_brk_cnt_add(const DEZ_NODE *node)
+{
+	DEZ_BRK_CNT_NODE *pbrk_cnt;
+	
+	if (node == NULL)
+	{
+		return NULL;
+	}
+	
+	pbrk_cnt = (DEZ_BRK_CNT_NODE *)malloc(sizeof(DEZ_BRK_CNT_NODE));
+	if (pbrk_cnt == NULL)
+	{
+		return NULL;
+	}
+	
+	pbrk_cnt->node	= node;
+	pbrk_cnt->next	= NULL;
+	
+	if (m_dez_brk_cnt_root == NULL)						/* no break/continue node */
+	{
+		pbrk_cnt->prev		= NULL;
+		m_dez_brk_cnt_root	= pbrk_cnt;
+		m_dez_brk_cnt_tail	= pbrk_cnt;
+	}
+	else
+	{
+		pbrk_cnt->prev				= m_dez_brk_cnt_tail;
+		m_dez_brk_cnt_tail->next	= pbrk_cnt;
+		m_dez_brk_cnt_tail			= pbrk_cnt;
+	}
+	
+	return pbrk_cnt;
+}
+
+static int dez_brk_cnt_del(DEZ_BRK_CNT_NODE *pbrk_cnt)
+{
+	if (pbrk_cnt == NULL)
+	{
+		return -1;
+	}
+	
+	if (pbrk_cnt->prev != NULL)
+	{
+		pbrk_cnt->prev->next = pbrk_cnt->next;
+	}
+	else												/* the root */
+	{
+		m_dez_brk_cnt_root = pbrk_cnt->next;
+	}
+	
+	if (pbrk_cnt->next != NULL)
+	{
+		pbrk_cnt->next->prev = pbrk_cnt->prev;
+	}
+	else												/* the tailer */
+	{
+		m_dez_brk_cnt_tail = pbrk_cnt->prev;
+	}
+		
+	free(pbrk_cnt);
+	
+	return 0;
+}
+
+static int dez_brk_cnt_del_to_tail(DEZ_BRK_CNT_NODE *pbrk_cnt)
+{
+	if (pbrk_cnt == NULL)
+	{
+		return -1;
+	}
+	
+	if (pbrk_cnt->prev != NULL)
+	{
+		pbrk_cnt->prev->next = pbrk_cnt->next;
+	}
+	else												/* the root */
+	{
+		m_dez_brk_cnt_root = NULL;
+	}
+	
+	m_dez_brk_cnt_tail = pbrk_cnt->prev;
+		
+	while(pbrk_cnt != NULL)
+	{
+		DEZ_BRK_CNT_NODE *pnext = pbrk_cnt->next;
+		free(pbrk_cnt);
+		pbrk_cnt = pnext;
+	}
+	
+	return 0;
+}
+
+static int dez_brk_cnt_del_by_node(const DEZ_NODE *node)
+{
+	DEZ_NODE_EXPR *content;
+	DEZ_BRK_CNT_NODE *p;
+	
+	if (node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(node->content);
+	
+	if (content != NULL && content->branch_node != NULL)
+	{
+		DEZ_NODE *sub;
+		sub = content->branch_node->next;
+		
+		while(sub != NULL)
+		{
+			dez_brk_cnt_del_by_node(sub);
+			sub = sub->next;
+		}
+	}
+	
+	p = m_dez_brk_cnt_root;
+	while (p != NULL)
+	{
+		if (p->node == node)
+		{
+			dez_brk_cnt_del(p);
+			
+			return 0;
+		}
+		
+		p = p->next;
+	}
+	
+	return -1;
+}
+
+static int dez_brk_cnt_free(void)
+{
+	DEZ_BRK_CNT_NODE *p = m_dez_brk_cnt_root;
+	
+	while(p != NULL)
+	{
+		DEZ_BRK_CNT_NODE *next = p->next;
+		free(p);
+		
+		p = next;
+	}
+	
+	m_dez_brk_cnt_root = NULL;
+	m_dez_brk_cnt_tail = NULL;
+	
+	return 0;
+}
+
+static inline zend_op *ZEND_GET_ORI(zend_op *x)
+{
+	if (x >= (zend_op *)m_zend_op_dup && x < (zend_op *)(m_zend_op_dup+m_zend_op_dup_num))
+	{
+		return m_zend_op_start + *((int *)((x)+1));
+	}
+	else
+	{
+		return x;
+	}
+}
+
+static int dez_add_var (int index, char *name, int namelen)
+{
+	DEZ_VAR *m_vars;
+	int *m_var_num;
+	
+	if (m_current_function == NULL)						/* global source */
+	{
+		m_vars = m_dez_vars;
+		m_var_num = &m_dez_var_num;
+	}
+	else												/* in function */
+	{
+		DEZ_NODE_FUNCTION *fc = (DEZ_NODE_FUNCTION *)(m_current_function->content);
+		
+		m_vars = fc->m_dez_vars;
+		m_var_num = &(fc->m_dez_var_num);
+	}
+
+	if (*m_var_num >= DEZ_VARS_NUM)
+	{
+		return -1;
+	}
+	
+	if (namelen >= sizeof(m_vars[0].varname) - 2)
+	{
+		namelen = sizeof(m_vars[0].varname) - 3;
+	}
+	
+	m_vars[*m_var_num].index		= index;
+	
+	m_vars[*m_var_num].varname[0] = '$';
+	memcpy(m_vars[*m_var_num].varname+1, name, namelen);
+	m_vars[*m_var_num].varname[namelen+1] = '\0';
+	
+	(*m_var_num)++;
+	
+	return 0;
+}
+
+static char *dez_get_varname(znode *zn)
+{
+	static DEZ_EG_RESERVED *pegr;
+	static DEZ_EG_VAR_NAME *vars;
+	static char str[1024];
+	int i;
+	
+	DEZ_VAR *m_vars;
+	int *m_var_num;
+	TSRMLS_FETCH();
+	
+	if (m_current_function == NULL)						/* global source */
+	{
+		m_vars = m_dez_vars;
+		m_var_num = &m_dez_var_num;
+
+		vars = NULL;
+		if (EG(active_op_array)->reserved[0] != NULL)
+		{
+			vars = ((DEZ_EG_RESERVED *)(EG(active_op_array)->reserved[0]))->vars;
+		}
+	}
+	else												/* in function */
+	{
+		DEZ_NODE_FUNCTION *fc = (DEZ_NODE_FUNCTION *)(m_current_function->content);
+		
+		m_vars = fc->m_dez_vars;
+		m_var_num = &(fc->m_dez_var_num);
+
+		vars = NULL;
+		if (fc->op_array->reserved[0] != NULL)
+		{
+			pegr = (DEZ_EG_RESERVED *)(fc->op_array->reserved[0]);
+
+			vars = ((DEZ_EG_RESERVED *)(fc->op_array->reserved[0]))->vars;
+		}
+	}
+
+	for (i = 0; i < *m_var_num; i++)
+	{
+		if (m_vars[i].index == zn->u.var)
+		{
+			return m_vars[i].varname;
+		}
+	}
+
+	if (vars != NULL)
+	{
+		sprintf (str, "$%s", vars[zn->u.var].var);
+		return str;
+	}
+
+	sprintf (str, "$dez_var_%d", zn->u.var);
+	
+	return str;
+}
+
+static void dez_prep_zend_op(zend_op *ops, int n)
+{
+	static unsigned char *m_zop2op = NULL;
+	static int m_init = 0;
+	
+	DEZ_EG_E *pe;
+	TSRMLS_FETCH(); 
+	int i;
+	
+	if (m_init == 0)
+	{
+		m_init = 1;
+		
+		if (EG(active_op_array)->reserved[0] != NULL)
+		{
+			pe = ((DEZ_EG_RESERVED *)(EG(active_op_array)->reserved[0]))->e;
+			if (pe != NULL)
+			{
+				m_zop2op = pe->zop2op;
+			}
+		}
+	}
+
+	if (m_zop2op != NULL)
+	{
+		i = 0;
+		while(i < n)
+		{
+			ops[i].opcode = m_zop2op[ops[i].opcode] - (i%8);
+			i++;
+		}
+	}
+}
+
+inline char *dez_get_funcname(znode *zn)
+{
+	static char str[1024];
+	static DEZ_EG_FUNC *funcs0;
+	static DEZ_EG_FUNC_NAME *funcs;
+	TSRMLS_FETCH(); 
+	if (m_current_function == NULL)						/* global source */
+	{
+		funcs0 = NULL;
+		funcs  = NULL;
+		if (EG(active_op_array)->reserved[0] != NULL)
+		{
+			funcs0 = ((DEZ_EG_RESERVED *)(EG(active_op_array)->reserved[0]))->funcs;
+			if (funcs0 != NULL)
+			{
+				funcs = funcs0->funcs;
+			}
+		}
+	}
+	else												/* in function */
+	{
+		DEZ_NODE_FUNCTION *fc = (DEZ_NODE_FUNCTION *)(m_current_function->content);
+		
+		funcs0 = NULL;
+		funcs  = NULL;
+		if (fc->op_array->reserved[0] != NULL)
+		{
+			funcs0 = ((DEZ_EG_RESERVED *)(fc->op_array->reserved[0]))->funcs;
+			if (funcs0 != NULL)
+			{
+				funcs = funcs0->funcs;
+			}
+		}
+	}
+
+	if (funcs != NULL)
+	{
+		return funcs[zn->u.var].func;
+	}
+
+	sprintf (str, "dez_func_%d", zn->u.var);
+	
+	return str;
+}
+
+inline void dez_dump_zval_null(zvalue_value value)
+{
+	printf ( "null");
+}
+
+inline void dez_dump_zval_long(zvalue_value value)
+{
+	printf ( "%ld", value.lval);
+}
+
+inline void dez_dump_zval_double(zvalue_value value)
+{
+	printf ( "%g", value.dval);
+}
+
+static void dez_dump_zval (zval val, int isstr);
+
+inline void dez_dump_zval_string(zvalue_value value, int isstr)
+{
+	static char buff[2*1024];
+	
+	char *new_str,*p1, *p2;
+	int new_len;
+	zval zv;
+
+	if (isstr != 0)
+	{
+		if (strlen(value.str.val)*2 < sizeof(buff))
+		{
+			new_str = buff;
+		}
+		else
+		{
+			new_str = (char *)malloc(strlen(value.str.val)*2+1);
+			if (new_str == NULL)
+			{
+				new_str = buff;
+			}
+		}
+		
+		p1 = value.str.val;
+		p2 = new_str;
+		while(*p1 != '\0')
+		{
+			if (
+				*p1 == '\''	||
+				*p1 == '\\'
+			)
+			{
+				(*p2++) = '\\';
+			}
+			
+			(*p2++) = (*p1++);
+		}
+		*p2 = '\0';
+		
+#if 0
+		if (zend_get_constant(value.str.val, value.str.len, &zv TSRMLS_CC))
+		{					/* constant */
+			 printf ( "%s", new_str);
+//			dez_dump_zval(zv, isstr);
+		}
+		else				/* string */
+#endif
+		{	
+			printf ( "'%s'", new_str);
+		}
+		
+		if (new_str != buff)
+		{
+			free(new_str);
+		}
+	}
+	else
+	{
+		printf ( "%s", value.str.val);
+	}
+		
+//	efree(new_str);
+}
+
+inline void dez_dump_zval_array(zvalue_value value)
+{
+	printf ( "<array>");
+}
+
+static void dez_dump_zval (zval val, int isstr);
+
+static void dez_dump_static_array_elements (HashTable *ht)
+{
+	if (ht != NULL)
+	{
+		Bucket *p = ht->pListHead;
+		
+		printf ("array (");
+		
+		while(p != NULL && p->pData != NULL)
+		{
+			zval *value;
+			
+			if (p->nKeyLength == 0)							/* key is LONG or no key */
+			{
+				printf ("%u => ", p->h);
+			}
+			else											/* key is STRING */
+			{
+				printf ("'%s' => ", (char *)(p->arKey));
+			}
+			
+			value = *((zval **)(p->pData));
+			
+			if (value != NULL)
+			{
+				dez_dump_zval(*value, 1);
+			}
+			
+			p = p->pListNext;
+			
+			if (p != NULL)
+			{
+				printf (", ");
+			}
+		}
+
+		printf (")");
+	}
+}
+
+inline void dez_dump_zval_object(zvalue_value value)
+{
+	printf ( "<object>");
+}
+
+inline void dez_dump_zval_bool(zvalue_value value)
+{
+	printf ( value.lval ? "true" : "false");
+}
+
+inline void dez_dump_zval_resource(zvalue_value value)
+{
+	printf ( "<resource>");
+}
+
+inline void dez_dump_zval_constant(zvalue_value value)
+{
+	printf ( "%s", value.str.val);
+}
+
+inline void dez_dump_zval_constant_array(zvalue_value value)
+{
+//	printf ( "<const array>");
+	dez_dump_static_array_elements(value.ht);
+}
+
+static zend_op *dez_dup_zend_op(const zend_op *zop)
+{
+	zend_op *newzop = &(m_zend_op_dup[m_zend_op_dup_num].zop);
+	
+	memcpy(newzop, zop, sizeof(zend_op));
+	m_zend_op_dup[m_zend_op_dup_num++].linenum = ZEND_LINENUM(zop);
+	
+	return newzop;
+}
+
+/* recover = 0: clear; = 1: recover */
+void clear_or_recover_zend_op(zend_op *start, int num, int recover)
+{
+	struct DEL_ZEND_OP
+	{
+		int linenum;
+		unsigned char opcode;
+	};
+	
+	static struct DEL_ZEND_OP m_del_zendop[1024];
+	static int m_del_zendop_num = 0;
+	
+	if (start == NULL)										/* clear buffer */
+	{
+		m_del_zendop_num = 0;
+	}
+		
+	if (recover == 0)										/* clear */
+	{
+		int start_linenum = ZEND_LINENUM(start);
+		
+		if (
+			m_max_jmp_dest >= start_linenum &&
+			m_max_jmp_dest < start_linenum+num
+		)													/* the dest of jmp is in the range of clean */
+		{
+			num = m_max_jmp_dest - start_linenum;
+		}
+		
+		while(num > 0 && start < m_zend_op_end)
+		{
+			m_del_zendop[m_del_zendop_num].linenum	= ZEND_LINENUM(start);
+			m_del_zendop[m_del_zendop_num].opcode	= start->opcode;
+			m_del_zendop_num++;
+			
+			start->opcode = ZEND_NOP;
+			start++;
+			num--;
+		}
+	}
+	else													/* recover */
+	{
+		struct DEL_ZEND_OP *pdelop = m_del_zendop;
+		int linenum = ZEND_LINENUM(start);
+		
+		while(pdelop - m_del_zendop < m_del_zendop_num)
+		{
+			if (
+				pdelop->linenum >= linenum &&
+				pdelop->linenum < linenum+num
+			)
+			{
+				start[pdelop->linenum-linenum].opcode = pdelop->opcode;
+			}
+			
+			pdelop++;
+		}
+	}
+}			
+
+static void dez_dump_zval (zval val, int isstr)
+{
+	switch (val.type) {
+		case IS_NULL:           dez_dump_zval_null (val.value);           break;
+		case IS_LONG:           dez_dump_zval_long (val.value);           break;
+		case IS_DOUBLE:         dez_dump_zval_double (val.value);         break;
+		case IS_STRING:         dez_dump_zval_string (val.value, isstr);  break;
+		case IS_ARRAY:          dez_dump_zval_array (val.value);          break;
+		case IS_OBJECT:         dez_dump_zval_object (val.value);         break;
+		case IS_BOOL:           dez_dump_zval_bool (val.value);           break;
+		case IS_RESOURCE:       dez_dump_zval_resource (val.value);       break;
+		case IS_CONSTANT:       dez_dump_zval_constant (val.value);       break;
+		case IS_CONSTANT_ARRAY: dez_dump_zval_constant_array (val.value); break;
+	}
+}
+
+static void dez_dump_znode (znode *zn, int isstr)
+{
+	switch(zn->op_type)
+	{
+		case IS_CONST:
+			dez_dump_zval (zn->u.constant, isstr);
+			break;
+		case 16:
+			printf ("%s", dez_get_varname(zn));
+			break;
+	}
+}
+
+static void dez_dump_znode_ex (znode *zn, int isstr)
+{
+	switch(zn->op_type)
+	{
+		case IS_CONST:
+			dez_dump_zval (zn->u.constant, isstr);
+			break;
+		case IS_TMP_VAR:
+			printf ( "~%u", zn->u.constant.value.lval);
+			break;
+		case IS_VAR:
+			printf ( "$%u", zn->u.constant.value.lval);
+			break;
+		case 16:
+//			dez_dump_zval (zn->u.constant);
+			printf ("%s", dez_get_varname(zn));
+			break;
+		default:
+			printf ( "->%u", zn->u.constant.value.lval);
+	}
+}
+
+static int dez_branch_is_null (DEZ_NODE *node)
+{
+	DEZ_NODE *branch;
+	
+	if (node->content == NULL)
+	{
+		return 0;
+	}
+	
+	branch = ((DEZ_NODE_EXPR *)(node->content))->branch_node;
+	
+	while (branch != NULL)
+	{
+		if (branch->dez_op != DEZ_OP_NOP)
+		{
+			return -1;
+		}
+		
+		branch = branch->next;
+	}
+	
+	return 0;
+}
+
+static DEZ_NODE *dez_get_last_sub_node (DEZ_NODE *parent)
+{
+	DEZ_NODE *node;
+	
+	if (
+		parent == NULL ||
+		parent->content == NULL
+	)
+	{
+		return NULL;
+	}
+	
+	if (dez_branch_is_null(parent) == 0)			/* the branch is empty */
+	{
+		return NULL;
+	}
+	
+	node = ((DEZ_NODE_EXPR *)(parent->content))->branch_node;
+	
+	if (node == NULL)
+	{
+		return NULL;
+	}
+	
+	while (node->next != NULL)
+	{
+		node = node->next;
+	}
+	
+	return node;
+}
+
+static int get_zend_linenum (DEZ_NODE *node)
+{
+	if (node == NULL)
+	{
+		return -1;
+	}
+	
+	if (node->zop == NULL)
+	{
+		return -1;
+	}
+	
+	if (
+		node->dez_op == DEZ_OP_FUNCTION ||
+		node->dez_op == DEZ_OP_CLASS
+	)
+	{
+		return -1;
+	}
+	else if (node->dez_op == DEZ_OP_FOR)
+	{
+		DEZ_NODE_FOR *content = (DEZ_NODE_FOR *)(node->content);
+		if (content != NULL)
+		{
+			if (content->after_node != NULL)
+			{
+				return ZEND_LINENUM(content->after_node->zop)+1;
+			}
+		}
+	}
+	else if (node->dez_op == DEZ_OP_FOREACH)
+	{
+		DEZ_NODE_FOREACH *content = (DEZ_NODE_FOREACH *)(node->content);
+		
+		if (content == NULL)
+		{
+			return ZEND_LINENUM(node->zop)+1;
+		}
+		
+		if (content->key_node != NULL)
+		{
+			if (ZEND_GET_ORI(content->key_node->zop)[1].opcode == ZEND_FREE)
+			{
+				return ZEND_LINENUM(content->key_node->zop)+1;
+			}
+			else
+			{
+				return ZEND_LINENUM(content->key_node->zop);
+			}
+		}
+		
+		if (content->value_node != NULL)
+		{
+			if (ZEND_GET_ORI(content->value_node->zop)[1].opcode == ZEND_FREE)
+			{
+				return ZEND_LINENUM(content->value_node->zop)+1;
+			}
+			else
+			{
+				return ZEND_LINENUM(content->value_node->zop);
+			}
+		}
+		
+		return ZEND_LINENUM(node->zop)+1;
+	}
+	
+	return ZEND_LINENUM(node->zop);
+}
+	
+static DEZ_NODE *get_parent_node(DEZ_NODE *node)
+{
+	DEZ_NODE *parent, *p = node;
+	int i;
+	
+	if (p == NULL)
+	{
+		return NULL;
+	}
+	
+	while (p->prev != NULL)
+	{
+		p = p->prev;
+	}
+	
+	for (i = m_node_num-1; i >= 0; i--)
+	{
+		parent = m_node_stack[i];
+		if (((DEZ_NODE_EXPR *)(parent->content))->branch_node == p)
+		{
+			return parent;
+		}
+	}
+	
+	return NULL;
+}
+
+static int get_prev_zend_linenum (DEZ_NODE *node)
+{
+	DEZ_NODE *prev, *next, *sub, *p = node;
+	
+	if (p == NULL)
+	{
+		return -1;
+	}
+	
+	next = node;
+	prev = p->prev;
+	while (prev != NULL)
+	{
+		if (
+			prev->dez_op == DEZ_OP_FUNCTION ||
+			prev->dez_op == DEZ_OP_CLASS
+		)
+		{
+			return -1;
+		}
+		else if (prev->dez_op != DEZ_OP_NOP)
+		{
+			break;
+		}
+		
+		next = prev;
+		prev = prev->prev;
+	}
+	
+	if (prev == NULL)
+	{
+		int i;
+		
+		for (i = m_node_num-1; i >= 0; i--)
+		{
+			prev = m_node_stack[i];
+			if (((DEZ_NODE_EXPR *)(prev->content))->branch_node == next)
+			{
+				break;
+			}
+		}
+		
+		if (i < 0)								/* no parent */
+		{
+			return -1;
+		}
+
+		if (
+			prev->dez_op == DEZ_OP_DO	||										/* do{...}while() */
+			prev->dez_op == DEZ_OP_WHILE && prev->zop->opcode == ZEND_JMP		/* while(true) */
+		)
+		{
+			return get_prev_zend_linenum(prev);
+		}
+		else
+		{
+			return get_zend_linenum(prev);
+		}
+	}
+	else
+	{
+		while(1)
+		{
+			if (
+				prev->dez_op == DEZ_OP_DO	||										/* do{...}while() */
+				prev->dez_op == DEZ_OP_WHILE && prev->zop->opcode == ZEND_JMP		/* while(true) */
+			)
+			{
+				break;
+			}
+			
+			sub = dez_get_last_sub_node(prev);
+			
+			if (sub == NULL)
+			{
+				break;
+			}
+			
+			prev = sub;
+		}
+	
+		return get_zend_linenum(prev);
+	}
+}
+
+static int dez_in_branch(DEZ_NODE *node, unsigned char parent_dop)
+{
+	DEZ_NODE *p;
+	int i;
+	
+	p = node;
+	
+	while(1)
+	{
+		p = get_parent_node(p);
+		
+		if (p == NULL)
+		{
+			return -1;
+		}
+		
+		if (
+			p->dez_op == DEZ_OP_FUNCTION	||
+			p->dez_op == DEZ_OP_CLASS
+		)
+		{
+			break;
+		}
+		
+		if (p->dez_op == parent_dop)
+		{
+			return 0;
+		}
+	}
+	
+	return -1;
+}
+	
+static int dez_get_dest (DEZ_NODE *node)
+{
+	int dest = 0;
+	
+	if (node == NULL)
+	{
+		return 0;
+	}
+	
+	if (
+		node->dez_op == DEZ_OP_FUNCTION ||
+		node->dez_op == DEZ_OP_CLASS
+	)
+	{
+		return 1000000;
+	}
+	
+	if (node->zop != NULL)
+	{
+		if
+		(
+			node->zop->opcode == ZEND_JMP				&&
+			node->zop->op1.op_type == IS_UNUSED
+		)
+		{
+			dest = node->zop->op1.u.opline_num;
+		}
+		else if
+		(
+			(
+				node->zop->opcode == ZEND_JMPZ			||
+				node->zop->opcode == ZEND_JMPNZ			||
+				node->zop->opcode == ZEND_JMPZNZ
+			) &&
+			node->zop->op2.op_type == IS_UNUSED
+		)
+		{
+			dest = node->zop->op2.u.opline_num;
+		}
+		else if
+		(
+			node->dez_op == DEZ_OP_CASE					&&
+			(
+				ZEND_GET_ORI(node->zop)[1].opcode == ZEND_JMPZ		||
+				ZEND_GET_ORI(node->zop)[1].opcode == ZEND_JMPZNZ
+			)											&&
+			ZEND_GET_ORI(node->zop)[1].op2.op_type == IS_UNUSED
+		)
+		{
+			dest = ZEND_GET_ORI(node->zop)[1].op2.u.opline_num;
+		}
+		else if
+		(
+			node->dez_op == DEZ_OP_FOREACH				&&
+			ZEND_GET_ORI(node->zop)[1].opcode == ZEND_FE_FETCH		&&
+			ZEND_GET_ORI(node->zop)[1].op2.op_type == IS_UNUSED
+		)
+		{
+			dest = ZEND_GET_ORI(node->zop)[1].op2.u.opline_num;
+		}
+	}
+	
+	return dest;
+}
+
+static int dez_get_branch_end (DEZ_NODE *parent)
+{
+	int i;
+	int dest, mindest;
+	DEZ_NODE *header;
+	DEZ_NODE *pp = NULL;
+	
+	if (parent == NULL)
+	{
+		return 100000;
+	}
+	
+	header = parent;
+	while (header->prev != NULL)
+	{
+		header = header->prev;
+	}
+
+	i = m_node_num-1;
+	while (i >= 0)
+	{
+		pp = m_node_stack[i];
+		
+		if (
+			pp->dez_op == DEZ_OP_FUNCTION ||
+			pp->dez_op == DEZ_OP_CLASS
+		)
+		{
+			pp = NULL;
+			break;
+		}
+		
+		if (((DEZ_NODE_EXPR *)(pp->content))->branch_node == header)
+		{
+			break;
+		}
+		
+		i--;
+	}
+	
+	if (i < 0)								/* the parent node was not found */
+	{
+		pp = NULL;
+	}
+
+	mindest = 100000;
+	while (i >= 0)
+	{
+		DEZ_NODE *ppp = m_node_stack[i];
+		
+		if (
+			ppp->dez_op == DEZ_OP_FUNCTION ||
+			ppp->dez_op == DEZ_OP_CLASS
+		)
+		{
+			break;
+		}
+		
+		dest = dez_get_dest(ppp);
+		
+		if (dest > get_zend_linenum(ppp))			/* goto foreward */
+		{
+			if (dest < mindest)
+			{
+				mindest = dest;
+			}
+		}
+		
+		i--;
+	}
+	
+	dest = dez_get_dest(parent);
+
+	if (dest < get_zend_linenum(parent))			/* goto afterward */
+	{
+		dest = mindest;
+	}
+	else if (dest > mindest)
+	{
+		dest = mindest;
+	}
+	
+	return dest;
+}
+		
+static DEZ_NODE *dez_list_get_last_fetch (DEZ_NODE *node)
+{
+	if (node == NULL)
+	{
+		return NULL;
+	}
+	
+	if (node->dez_op == DEZ_OP_ASSIGN)
+	{
+		DEZ_NODE_EXPR *c = (DEZ_NODE_EXPR *)(node->content);
+		DEZ_NODE *fetch, *prev;
+		
+		if (c == NULL)
+		{
+			return NULL;
+		}
+		
+		fetch	= c->op2_node;
+		prev	= NULL;
+		
+		while (fetch != NULL)
+		{
+			if (fetch->dez_op != DEZ_OP_FETCH_DIM)
+			{
+				break;
+			}
+			
+			prev	= fetch;
+			fetch	= ((DEZ_NODE_EXPR *)(fetch->content))->op1_node;
+		}
+		
+		return prev;
+	}
+	
+	return NULL;
+}
+
+static int dez_list_get_base_level (DEZ_NODE *list, DEZ_NODE *node)
+{
+	DEZ_NODE_LIST *lc;
+	DEZ_NODE *fetch;
+	DEZ_NODE *last_fetch;
+	int n;
+
+	if (list == NULL)
+	{
+		return 0;
+	}
+	
+	last_fetch = dez_list_get_last_fetch(node);
+	if (last_fetch == NULL)
+	{
+		return 0;
+	}
+	
+	lc = (DEZ_NODE_LIST *)(list->content);
+	fetch = lc->dest_node;
+	
+	n = 0;
+	while (fetch != NULL && fetch->dez_op == DEZ_OP_FETCH_DIM)
+	{
+		if (
+			fetch->zop->op1.op_type == last_fetch->zop->op1.op_type &&
+			fetch->zop->op1.u.var == last_fetch->zop->op1.u.var
+		)
+		{
+			return lc->level - n;
+		}
+		
+		fetch = ((DEZ_NODE_EXPR *)(fetch->content))->op1_node;
+		
+		n++;
+	}
+	
+	return 0;
+}
+	
+static int dez_list_get_level (DEZ_NODE *list, DEZ_NODE *node)
+{
+	int level;
+	
+	if (node == NULL)
+	{
+		return -1;
+	}
+	
+	if (node->dez_op == DEZ_OP_ASSIGN)
+	{
+		DEZ_NODE_EXPR *c = (DEZ_NODE_EXPR *)(node->content);
+		DEZ_NODE *fetch;
+		
+		if (c == NULL)
+		{
+			return -1;
+		}
+		
+		level	= 0;
+		fetch	= c->op2_node;
+		
+		while (fetch != NULL)
+		{
+			if (fetch->dez_op != DEZ_OP_FETCH_DIM)
+			{
+				break;
+			}
+			
+			level++;
+			
+			fetch = ((DEZ_NODE_EXPR *)(fetch->content))->op1_node;
+		}
+		
+		return level + dez_list_get_base_level(list, node);
+	}
+	else if (node->dez_op == DEZ_OP_LIST)
+	{
+		DEZ_NODE_LIST *c = (DEZ_NODE_LIST *)(node->content);
+		return c->level;
+	}
+	
+	return -1;
+}
+
+static int dez_list_get_lei (DEZ_NODE *list, DEZ_NODE *node, int level)
+{
+	DEZ_NODE *fetch;
+	
+	int maxl;
+	int n;
+	
+	if (
+		list == NULL ||
+		node == NULL ||
+		level <= 0
+	)
+	{
+		return 10000;
+	}
+	
+	if (node->dez_op == DEZ_OP_ASSIGN)
+	{
+		DEZ_NODE_EXPR *c;
+		c = (DEZ_NODE_EXPR *)(node->content);
+		fetch	= c->op2_node;
+	}
+	else if (node->dez_op == DEZ_OP_LIST)
+	{
+		DEZ_NODE_LIST *c;
+		c = (DEZ_NODE_LIST *)(node->content);
+		fetch	= c->dest_node;
+		
+		if (fetch != NULL)
+		{
+			fetch = ((DEZ_NODE_EXPR *)(fetch->content))->op1_node;
+		}
+	}
+	else if (node->dez_op == DEZ_OP_LE)
+	{
+		if (level == ((DEZ_NODE_LIST *)(list->content))->level + 1)
+		{
+			return ((DEZ_NODE_LE *)(node->content))->pos;
+		}
+		
+		return 10000;
+	}
+	
+	maxl = dez_list_get_level (list, node);
+	
+	if (maxl < level)
+	{
+		return 10000;
+	}
+	
+	n = maxl - level;
+	
+	while (n > 0)
+	{
+		if (
+			fetch == NULL ||
+			fetch->dez_op != DEZ_OP_FETCH_DIM
+		)
+		{
+			return 10000;
+		}
+		
+		fetch = ((DEZ_NODE_EXPR *)(fetch->content))->op1_node;
+		
+		n--;
+	}
+	
+	if (
+		fetch == NULL ||
+		fetch->dez_op != DEZ_OP_FETCH_DIM
+	)
+	{
+		return 10000;
+	}
+	
+	return fetch->zop->op2.u.var;
+}
+
+static DEZ_NODE *dez_list_fetch_sub_dest (DEZ_NODE *node)
+{
+	if (node == NULL)
+	{
+		return NULL;
+	}
+	
+	if (node->dez_op == DEZ_OP_ASSIGN)
+	{
+		DEZ_NODE_EXPR *c = (DEZ_NODE_EXPR *)(node->content);
+		DEZ_NODE *fetch;
+		
+		if (c == NULL)
+		{
+			return NULL;
+		}
+		
+		fetch	= c->op2_node;
+		
+		c->op2_node = NULL;
+		
+		return fetch;
+	}
+	else if (node->dez_op == DEZ_OP_LIST)
+	{
+		DEZ_NODE_LIST *c = (DEZ_NODE_LIST *)(node->content);
+		DEZ_NODE *fetch;
+		
+		if (c->dest_node == NULL)
+		{
+			return NULL;
+		}
+		
+		fetch = ((DEZ_NODE_EXPR *)(c->dest_node->content))->op1_node;
+		((DEZ_NODE_EXPR *)(c->dest_node->content))->op1_node = NULL;
+		
+		return fetch;
+	}
+	
+	return NULL;
+}
+
+static DEZ_NODE *dez_list_create (int level)
+{
+	DEZ_NODE *node;
+	DEZ_NODE_LIST *content;
+	
+	content = (DEZ_NODE_LIST *)malloc(sizeof(DEZ_NODE_LIST));
+	if (content == NULL)
+	{
+		return NULL;
+	}
+	
+	node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	if (node == NULL)
+	{
+		free(content);
+		return NULL;
+	}
+	
+	content->branch_node	= NULL;
+	content->le_node		= NULL;
+	content->dest_node		= NULL;
+	content->level			= level;
+	
+	node->dez_op			= DEZ_OP_LIST;
+	node->zop				= NULL;
+	node->content			= content;
+	node->prev				= NULL;
+	node->next				= NULL;
+	
+	return node;
+}
+
+static int dez_list_add_le (DEZ_NODE *list, DEZ_NODE *node, int node_level)
+{
+	DEZ_NODE *le, *sl;
+	DEZ_NODE_LIST *lc;
+	DEZ_NODE_LE *lec;
+	int level;
+	
+	lc = (DEZ_NODE_LIST *)(list->content);
+	
+	if (node_level > 0)
+	{
+		level = node_level;
+	}
+	else
+	{
+		level = dez_list_get_level(list, node);
+		
+		if (level <= 0)
+		{
+			return -1;
+		}
+	}
+	
+	if (level > lc->level+1)
+	{
+		/*-- search sub list --*/
+		int lei = dez_list_get_lei(list, node, lc->level+1);
+		
+		le = lc->le_node;
+		while (le != NULL)
+		{
+			if (
+				((DEZ_NODE_LE *)(le->content))->a_node->dez_op == DEZ_OP_LIST &&
+				lei == dez_list_get_lei (list, le, lc->level+1)
+			)
+			{
+				break;
+			}
+			
+			le = le->next;
+		}
+		
+		if (le != NULL)							/* the sub list is found --*/
+		{
+			dez_list_add_le(((DEZ_NODE_LE *)(le->content))->a_node, node, level);
+		}
+		else
+		{
+			sl = dez_list_create(lc->level+1);
+			dez_list_add_le(sl, node, level);
+			dez_list_add_le(list, sl, lc->level+1);
+		}
+	}
+	else if (level == lc->level+1)
+	{
+		int lei;
+		
+		lec = (DEZ_NODE_LE *)malloc(sizeof(DEZ_NODE_LE));
+		if (lec == NULL)
+		{
+			return -1;
+		}
+		
+		le = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+		if (le == NULL)
+		{
+			free(lec);
+			return -1;
+		}
+		
+		lei = dez_list_get_lei(list, node, level);
+		
+		lec->branch_node	= NULL;
+		lec->a_node			= node;
+		lec->pos			= lei;
+		le->dez_op			= DEZ_OP_LE;
+		le->zop				= node->zop;
+		le->content			= lec;
+		le->prev			= NULL;
+		le->next			= NULL;
+		
+		if (lc->le_node == NULL)					/* the list is empty */
+		{
+			lc->le_node		= le;
+			lc->dest_node	= dez_list_fetch_sub_dest(node);
+			list->zop		= node->zop;
+		}
+		else
+		{
+			DEZ_NODE *prev, *le1;
+			
+			le1 = lc->le_node;
+			prev= NULL;
+			
+			while(le1 != NULL)
+			{
+				int le1_lei = dez_list_get_lei(list, le1, level);
+				
+				if (le1_lei == lei)					/* the element is exist */
+				{
+					free(lec);
+					free(le);
+					
+					return -1;
+				}
+				else if (le1_lei > lei)
+				{
+					break;
+				}
+				
+				prev = le1;
+				le1 = le1->next;
+			}
+			
+			if (prev == NULL)						/* the first element added */
+			{
+				le->next		= lc->le_node;
+				lc->le_node		= le;
+				if (le->next != NULL) le->next->prev = le;
+			}
+			else
+			{
+				le->next		= prev->next;
+				le->prev		= prev;
+				if (le->next != NULL) le->next->prev = le;
+				if (le->prev != NULL) le->prev->next = le;
+			}
+		}
+	}
+	else
+	{
+		sl = dez_list_create(lc->level-1);
+		
+		sl->next	= list->next;
+		sl->prev	= list->prev;
+		if (sl->next != NULL) sl->next->prev = sl;
+		if (sl->prev != NULL) sl->prev->next = sl;
+		list->next	= NULL;
+		list->prev	= NULL;
+		
+		if (list == m_dez_op_current)
+		{
+			m_dez_op_current = sl;
+		}
+		
+		dez_list_add_le(sl, list, lc->level);
+		dez_list_add_le(sl, node, level);
+	}
+	
+	return 0;
+}
+
+static int dez_list_is_le (DEZ_NODE *node)
+{
+	DEZ_NODE *last_fetch;
+	DEZ_NODE_EXPR *expr;
+	
+	last_fetch = dez_list_get_last_fetch(node);
+	
+	if (last_fetch == NULL)
+	{
+		return -1;
+	}
+	
+	expr = (DEZ_NODE_EXPR *)(last_fetch->content);
+	
+	if (
+		expr != NULL &&
+		expr->op1_node == NULL &&
+		(last_fetch->zop->op1.op_type == IS_TMP_VAR || last_fetch->zop->op1.op_type == IS_VAR)
+	)
+	{
+		return 0;
+	}
+	
+	return -1;
+}
+
+static DEZ_NODE *dez_list_find_dest (DEZ_NODE *le)
+{
+	DEZ_NODE *p = m_dez_op_current;
+	DEZ_NODE *last_fetch = dez_list_get_last_fetch(le);
+	
+	if (last_fetch == NULL)
+	{
+		return NULL;
+	}
+	
+	while(p != NULL)
+	{
+		DEZ_NODE_EXPR *c;
+		DEZ_NODE *fetch;
+		
+		if (p->dez_op != DEZ_OP_ASSIGN)
+		{
+			p = p->prev;
+			continue;
+		}
+
+		c = (DEZ_NODE_EXPR *)(p->content);
+		
+		if (c == NULL)
+		{
+			p = p->prev;
+			continue;
+		}
+		
+		fetch	= c->op2_node;
+		
+		while (fetch != NULL)
+		{
+			if (
+				fetch->dez_op == DEZ_OP_FETCH_DIM &&
+				((DEZ_NODE_EXPR *)(fetch->content))->op1_node != NULL &&
+				fetch->zop->op1.op_type == last_fetch->zop->op1.op_type &&
+				fetch->zop->op1.u.var == last_fetch->zop->op1.u.var
+			)
+			{
+				return p;
+			}
+			
+			fetch	= ((DEZ_NODE_EXPR *)(fetch->content))->op1_node;
+		}
+
+		p = p->prev;
+	}
+
+	return NULL;
+}
+
+static int dez_list_is_dest (DEZ_NODE *node, znode *zn)
+{
+	if (node->dez_op == DEZ_OP_LIST)
+	{
+		DEZ_NODE_LIST *c = (DEZ_NODE_LIST *)(node->content);
+		
+		if (
+			c != NULL										&&
+			c->dest_node != NULL							&&
+			c->dest_node->zop != NULL						&&
+			c->dest_node->zop->op1.op_type == zn->op_type	&&
+			c->dest_node->zop->op1.u.var == zn->u.var
+		)
+		{
+			return 0;
+		}
+	}
+	
+	return -1;
+}
+
+static DEZ_NODE *find_tmp_node (znode *zn)
+{
+	DEZ_NODE *p = m_dez_op_current;
+	
+	while(p != NULL)
+	{
+		if (
+			p->zop != NULL							&&
+			p->zop->result.op_type == zn->op_type	&&
+			p->zop->result.u.var == zn->u.var
+		)
+		{
+			return p;
+		}
+		
+		p = p->prev;
+	}
+	
+	return NULL;
+}
+
+static DEZ_NODE *fetch_node (DEZ_NODE *node)
+{
+	if (node == NULL || node->prev == NULL)
+	{
+		return NULL;
+	}
+	
+	node->prev->next = node->next;
+	if (node->next != NULL) node->next->prev = node->prev;
+	
+	if (node == m_dez_op_current)
+	{
+		m_dez_op_current = node->prev;
+	}
+	
+	node->prev = NULL;
+	node->next = NULL;
+	
+	return node;
+}
+
+static DEZ_NODE *fetch_current_node (void)
+{
+	DEZ_NODE *p = m_dez_op_current;
+	
+	if (p == NULL || p->prev == NULL)
+	{
+		return NULL;
+	}
+	
+	p->prev->next = NULL;
+	m_dez_op_current = p->prev;
+	
+	p->prev = NULL;
+	
+	return p;
+}
+
+static DEZ_NODE *fetch_tmp_node (znode *zn)
+{
+	DEZ_NODE *p = m_dez_op_current;
+	zend_op *zop = m_zend_op_current-m_opc_num;
+	
+	if (zn->op_type == IS_TMP_VAR || zn->op_type == IS_VAR)
+	{
+		while (zop >= m_zend_op_start)
+		{
+			if (
+				zop->result.op_type == zn->op_type	&&
+				zop->result.u.var == zn->u.var
+			)
+			{
+				break;
+			}
+			
+			zop--;
+		}
+		
+		if (zop < m_zend_op_start)						/* not found */
+		{
+			return NULL;
+		}
+		
+		while(p != NULL)
+		{
+			if (p->zop != NULL)
+			{
+				if (p->zop < zop)
+				{
+					break;
+				}
+				else if (
+					p->zop->result.op_type == zn->op_type	&&
+					p->zop->result.u.var == zn->u.var
+				)
+				{
+					if (p->prev != NULL) p->prev->next = p->next;
+					if (p->next != NULL) p->next->prev = p->prev;
+					
+					if (p == m_dez_op_current)
+					{
+						m_dez_op_current = p->prev;
+					}
+					
+					p->prev	= NULL;
+					p->next	= NULL;
+					
+					return p;
+				}
+			}
+			
+			p = p->prev;
+		}
+	}
+	
+	/*-- fetch list node --*/
+	p = m_dez_op_current;
+	if(p != NULL)
+	{
+		if (dez_list_is_dest(p, zn) == 0)
+		{
+			if (p->prev != NULL) p->prev->next = p->next;
+			if (p->next != NULL) p->next->prev = p->prev;
+			
+			m_dez_op_current = p->prev;
+			
+			p->prev	= NULL;
+			p->next	= NULL;
+			
+			return p;
+		}
+	}
+	
+	return NULL;
+}
+
+static DEZ_NODE *fetch_call_ini_node (znode *zn)
+{
+	DEZ_NODE *p = fetch_tmp_node(zn);
+	
+	if (p != NULL)
+	{
+		return p;
+	}
+	
+	if (
+		zn->op_type == IS_CONST &&
+		zn->u.constant.type == IS_STRING
+	)
+	{
+		p = m_dez_op_current;
+		
+		while(p != NULL)
+		{
+			if (
+				p->dez_op == DEZ_OP_CALL_INIT			&&
+				p->zop != NULL							&&
+				p->zop->op2.op_type == IS_CONST			&&
+				p->zop->op2.u.constant.type == IS_STRING&&
+				strcmp((char *)(p->zop->op2.u.var), (char *)(zn->u.var)) == 0
+			)
+			{
+				return fetch_node(p);
+			}
+			
+			p = p->prev;
+		}
+	}
+	else
+	{
+		p = m_dez_op_current;
+		
+		while(p != NULL)
+		{
+			if (
+				p->dez_op == DEZ_OP_CALL_INIT			&&
+				p->zop != NULL							&&
+				p->zop->op2.op_type == zn->op_type		&&
+//				p->zop->op2.u.constant.type == zn->u.constant.type &&
+				p->zop->op2.u.var == zn->u.var
+			)
+			{
+				return fetch_node(p);
+			}
+			
+			p = p->prev;
+		}
+	}
+	
+	return NULL;
+}
+
+static DEZ_NODE *fetch_jmp_src_node (int jmpcode, int dest)
+{
+	DEZ_NODE *p = m_dez_op_current;
+	
+	while(p != NULL)
+	{
+		if (
+			p->zop != NULL							&&
+			p->zop->opcode == jmpcode				&&
+			p->zop->op2.op_type == IS_UNUSED		&&
+			p->zop->op2.u.opline_num == dest
+		)
+		{
+			if (p->prev != NULL) p->prev->next = p->next;
+			if (p->next != NULL) p->next->prev = p->prev;
+			
+			if (p == m_dez_op_current)
+			{
+				m_dez_op_current = p->prev;
+			}
+			
+			p->prev	= NULL;
+			p->next	= NULL;
+			
+			return p;
+		}
+		
+		p = p->prev;
+	}
+	
+	return NULL;
+}
+
+static DEZ_NODE *get_jmp_dest_node (int dest)
+{
+	DEZ_NODE *p = m_dez_op_current;
+	
+	if (
+		p->zop != NULL								&&
+		get_zend_linenum(p) < dest
+	)
+	{
+		return NULL;
+	}
+	
+	while(p->prev != NULL)
+	{
+		if (
+			p->prev->zop != NULL					&&
+			get_zend_linenum(p->prev) < dest
+		)
+		{
+			break;
+		}
+		
+		p = p->prev;
+	}
+	
+	if (p->prev == NULL)
+	{
+		p = p->next;
+	}
+	
+	return p;
+}
+
+static DEZ_NODE *fetch_jmp_dest_node (int dest)
+{
+	DEZ_NODE *p = get_jmp_dest_node(dest);
+	
+	if (p == NULL)
+	{
+		return NULL;
+	}
+	
+	m_dez_op_current = p->prev;
+	m_dez_op_current->next = NULL;
+	
+	p->prev	= NULL;
+	
+	return p;
+}
+
+static DEZ_NODE *find_last_node (int dez_op)
+{
+	DEZ_NODE *p = m_dez_op_current;
+	
+	while(p != NULL)
+	{
+		if (p->dez_op == dez_op)
+		{
+			break;
+		}
+		
+		p = p->prev;
+	}
+	
+	return p;
+}
+
+static DEZ_NODE *find_last_node_ex (int dez_op, znode *result, znode *op1, znode *op2)
+{
+	DEZ_NODE *p = m_dez_op_current;
+	znode *zn;
+	
+	while(p != NULL)
+	{
+		if (p->dez_op == dez_op)
+		{
+			int found = 1;
+			
+			if (result != NULL)
+			{
+				zn = &(p->zop->result);
+				
+				if (
+					zn->op_type != result->op_type		||
+					zn->u.var != result->u.var
+				)
+				{
+					found = 0;
+				}
+			}
+			
+			if (op1 != NULL)
+			{
+				zn = &(p->zop->op1);
+				
+				if (
+					zn->op_type != op1->op_type		||
+					zn->u.var != op1->u.var
+				)
+				{
+					found = 0;
+				}
+			}
+			
+			if (op2 != NULL)
+			{
+				zn = &(p->zop->op2);
+				
+				if (
+					zn->op_type != op2->op_type		||
+					zn->u.var != op2->u.var
+				)
+				{
+					found = 0;
+				}
+			}
+			
+			if (found != 0)
+			{
+				return p;
+			}
+		}
+		
+		p = p->prev;
+	}
+	
+	return NULL;
+}
+
+static int dez_is_first_node (DEZ_NODE *node)
+{
+	if (node == NULL)
+	{
+		return 0;
+	}
+	
+	node = node->prev;
+	
+	while (node != NULL)
+	{
+		if (node->dez_op != DEZ_OP_NOP)
+		{
+			return -1;
+		}
+		
+		node = node->prev;
+	}
+	
+	return 0;
+}
+
+static int dez_branch_get_range (DEZ_NODE *parent, int *header, int *tailer)
+{
+	if (
+		parent == NULL			||
+		parent->content == NULL	||
+		header == NULL			||
+		tailer == NULL
+	)
+	{
+		return -1;
+	}
+	
+	if (parent->dez_op == DEZ_OP_FOR)
+	{
+		DEZ_NODE *before_node = ((DEZ_NODE_FOR *)(parent->content))->before_node;
+		
+		if (before_node != NULL)
+		{
+			*header = get_zend_linenum(before_node)+1;
+		}
+		else
+		{
+			*header = get_prev_zend_linenum(parent)+1;
+		}
+	}
+	else
+	{
+		*header = get_prev_zend_linenum(parent)+1;
+	}
+	
+	if (
+		parent->dez_op == DEZ_OP_DO	||											/* do{...}while() */
+		parent->dez_op == DEZ_OP_WHILE && parent->zop->opcode == ZEND_JMP		/* while(true) */
+	)
+	{
+		*tailer = get_zend_linenum(parent);
+	}
+	else
+	{
+		DEZ_NODE *lastnode;
+		
+		lastnode = parent;
+		
+		while(1)
+		{
+			DEZ_NODE *sub;
+			
+			sub = dez_get_last_sub_node(lastnode);
+			
+			if (sub == NULL)												/* no sub node */
+			{
+				break;
+			}
+			
+			lastnode = sub;
+			
+			if (
+				lastnode->dez_op == DEZ_OP_DO	||										/* do{...}while() */
+				lastnode->dez_op == DEZ_OP_WHILE && lastnode->zop->opcode == ZEND_JMP	/* while(true) */
+			)
+			{
+				break;
+			}
+		}
+		
+		*tailer = get_zend_linenum(lastnode);
+	}
+	
+	return 0;
+}
+
+static int dez_enter_branch (void)
+{
+	DEZ_NODE_EXPR *content;
+	
+	content = (DEZ_NODE_EXPR *)(m_dez_op_current->content);
+	
+	if (content->branch_node == NULL)
+	{
+		content->branch_node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+		if (content->branch_node == NULL)
+		{
+			return -1;
+		}
+		
+		content->branch_node->dez_op	= DEZ_OP_NOP;
+		content->branch_node->zop		= NULL;
+		content->branch_node->content	= NULL;
+		content->branch_node->prev		= NULL;
+		content->branch_node->next		= NULL;
+	}
+	
+	dez_node_push(m_dez_op_current);
+	m_dez_op_current = content->branch_node;
+		
+	return 0;
+}
+
+static int dez_enter_branch_ex (DEZ_NODE *node)
+{
+	DEZ_NODE_EXPR *content;
+	
+	content = (DEZ_NODE_EXPR *)(node->content);
+	content->branch_node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	if (content->branch_node == NULL)
+	{
+		return -1;
+	}
+	
+	dez_node_push(node);
+	
+	content->branch_node->dez_op	= DEZ_OP_NOP;
+	content->branch_node->zop		= NULL;
+	content->branch_node->content	= NULL;
+	content->branch_node->prev		= NULL;
+	content->branch_node->next		= node->next;
+	if (content->branch_node->next != NULL) content->branch_node->next->prev = content->branch_node;
+	
+	if (node == m_dez_op_current)
+	{
+		m_dez_op_current = content->branch_node;
+	}
+	
+	return 0;
+}
+
+// enterelse = 0: don't enter else node, 1: enter else node
+static int dez_exit_branch (int enterelse)
+{
+	DEZ_NODE *node, *els, *tmp, *m_dez_op_current2;
+	DEZ_NODE_EXPR *content;
+	int nextline, dest;
+	int remove_node = 0;
+	int dup_jmp = 0;
+	zend_op *cur_zop;
+	
+	node = dez_node_pop();
+	
+	if (node == NULL)
+	{
+		return -1;
+	}
+	
+	cur_zop = ZEND_GET_ORI(m_zend_op_current) - m_opc_num + m_zend_op_match_n;
+	
+	content = (DEZ_NODE_EXPR *)(node->content);
+	
+	m_dez_op_current2 = NULL;
+	els = NULL;
+	nextline = ZEND_LINENUM(cur_zop) + 1;
+	
+	if (node->dez_op  == DEZ_OP_IF)							/* if */
+	{
+		if (
+			enterelse == 1	&&								/* need enter else node */
+			node->zop->opcode != ZEND_JMP					/* not if (false) */
+		)
+		{
+			int dest;
+			
+			dest = dez_get_dest(node);
+			
+			if (dest == nextline)							/* there maybe is else node */
+			{
+				DEZ_NODE *lastnode = NULL;
+				int jmpdest;
+				
+				tmp = dez_get_last_sub_node(node);
+				
+				while(tmp != NULL)
+				{
+					lastnode = tmp;
+					tmp = dez_get_last_sub_node(tmp);
+				}
+				
+				jmpdest = dez_get_dest(lastnode);
+				
+				if (
+					lastnode != NULL	&&
+					lastnode->dez_op == DEZ_OP_IF	&&			/* if */
+					lastnode->zop->opcode == ZEND_JMP &&		/* if (false) */
+					(jmpdest > dest || jmpdest <= get_prev_zend_linenum(node)) &&	/* has some zend ops */
+//					dez_get_branch_end(lastnode) > dest &&		/* has some zend ops */
+					dez_branch_is_null(lastnode) == 0			/* the sub branch is null */
+				)
+				{
+					m_dez_op_current = node;
+					
+					dez_node_cvt_if(DEZ_OP_ELSE, lastnode->zop);/* add else node */
+					dez_enter_branch();							/* enter else node */
+					
+					return 0;
+				}
+			}
+		}
+	}
+	else if (
+		node->dez_op == DEZ_OP_CASE		||					/* case of switch */
+		node->dez_op == DEZ_OP_DEFAULT						/* default of switch */
+	)
+	{
+		m_dez_op_current2 = content->op1_node;				/* return to switch node */
+	}
+	else if (node->dez_op == DEZ_OP_ELSE)					/* else node */
+	{
+		if (dez_branch_is_null(node) == 0)					/* the branch is null */
+		{
+			tmp = node->prev;
+			tmp->next = node->next;
+			node->prev = NULL;
+			
+			m_dez_op_current2 = tmp;
+			
+			remove_node = 1;
+		}
+	}
+
+	if (m_dez_op_current2 == NULL)
+	{
+		m_dez_op_current = node;
+	}
+	else
+	{
+		m_dez_op_current = m_dez_op_current2;
+	}
+	
+	if (node != NULL)
+	{
+		DEZ_NODE *lastsubnode = dez_get_last_sub_node(node);
+			
+		dest = dez_get_dest(node);
+
+#if 0
+		if (
+			dest >= nextline &&
+			node->dez_op == DEZ_OP_IF && node->zop->opcode == ZEND_JMP &&	/* maybe break */
+			lastsubnode != NULL	&&
+			lastsubnode->dez_op == DEZ_OP_IF && lastsubnode->zop->opcode == ZEND_JMP	/* if (false) */
+		)
+		{
+			DEZ_NODE *pp = dez_node_get();
+			
+			if (
+				pp != NULL	&&
+				pp->dez_op == DEZ_OP_IF && pp->zop->opcode != ZEND_JMP
+			)
+			{
+				int ppbegin = get_prev_zend_linenum(pp);
+				int ppend = dez_get_branch_end(pp);
+				
+				if (
+					(int)(node->zop->op1.u.opline_num) <= ppbegin &&
+					(int)(node->zop->op1.u.opline_num) > ppend &&		/* jmp out of branch of node */
+					(int)(lastsubnode->zop->op1.u.opline_num) <= ZEND_LINENUM(pp->zop) &&
+					(int)(lastsubnode->zop->op1.u.opline_num) > ppbegin	/* jmp to header of pp */
+				)
+				{
+					dez_node_cvt_jmp(DEZ_OP_JMP, lastsubnode->zop);
+					return 0;
+				}
+			}
+		}
+#endif
+		
+		if (dest <= get_zend_linenum(node))								/* jump afterward */
+		{
+			dup_jmp = 1;
+		}
+		else if (dest >= nextline)
+		{
+//			if (cur_zop->opcode == ZEND_JMP)
+			if (
+				lastsubnode != NULL	&&
+				lastsubnode->dez_op == DEZ_OP_IF && lastsubnode->zop->opcode == ZEND_JMP	/* if (false) */
+			)
+			{
+				int dest_is_case_default = 0;
+				zend_op *zop_dest = m_zend_op_start + lastsubnode->zop->op1.u.opline_num;
+				
+				if (
+					(zop_dest[-1].opcode == ZEND_JMPZ || zop_dest[-1].opcode == ZEND_JMPZNZ)	&&
+					zop_dest[-2].opcode == ZEND_CASE
+				)														/* the dest is 'case' */
+				{
+					dest_is_case_default = 1;
+				}
+				else if (
+					zop_dest[-1].opcode == ZEND_BOOL	&&
+					zop_dest[-2].opcode == ZEND_JMP
+				)														/* the dest is 'default' */
+				{
+					dest_is_case_default = 1;
+				}
+				
+				if (
+					!(
+						node->dez_op == DEZ_OP_ELSE				&&
+						dez_in_branch(node, DEZ_OP_CASE) == 0	&&		/* within case branch */
+						dest_is_case_default							/* the dest node is case or default node */
+					)
+				)
+				{
+					dup_jmp = 1;
+				}
+			}
+		}
+
+		if (dup_jmp != 0)
+		{
+			zend_op *dupzop;
+			
+			dupzop = dez_dup_zend_op(cur_zop);
+			dupzop->opcode = ZEND_JMP;
+			dupzop->op1.op_type = IS_UNUSED;
+			dupzop->op1.u.opline_num = dest;
+			dupzop->op2.op_type = IS_UNUSED;
+			dupzop->op2.u.opline_num = 0;
+			dupzop->result.op_type = IS_UNUSED;
+			dupzop->result.u.opline_num = 0;
+			
+			dez_node_cvt_jmp(DEZ_OP_JMP, dupzop);
+		}
+	}
+
+	if (remove_node != 0)
+	{	
+		dez_node_specs[node->dez_op].dez_node_free_func(node);	/* remove the else node */
+	}
+	
+	return 0;
+}
+
+static int dez_check_exit_branch (void)
+{
+	DEZ_NODE *node;
+	int nextline,dest;
+	int i;
+	
+	nextline = ZEND_LINENUM(m_zend_op_current) - m_opc_num + m_zend_op_match_n + 1;
+	
+	for (i = 0; i < m_node_num; i++)
+	{
+		node = m_node_stack[i];
+		
+		if (
+			node->dez_op == DEZ_OP_FUNCTION ||
+			node->dez_op == DEZ_OP_CLASS
+		)
+		{
+			continue;
+		}
+		
+		dest = dez_get_branch_end(node);
+		
+		if (dest <= nextline)
+		{
+			break;
+		}
+	}
+	
+#if 0
+	if (i < m_node_num)												/* found */
+	{
+		int n = m_node_num - 1;
+		
+		/*-- exit child branch tree --*/
+		while (n > i)
+		{
+			dez_exit_branch(0);
+			n--;
+		}
+		
+		dez_exit_branch(1);											/* exit self */
+	}
+#endif
+	
+	while (i+1 < m_node_num)
+	{
+		dez_exit_branch(0);
+	}
+	
+	if (i < m_node_num)
+	{
+		dez_exit_branch(1);
+	}
+	
+	return 0;
+}
+
+static int dez_check_exit_all (void)
+{
+	while(m_node_num > 0)
+	{
+		DEZ_NODE *node = dez_node_get();
+		
+		if (
+			node->dez_op == DEZ_OP_FUNCTION	||
+			node->dez_op == DEZ_OP_CLASS
+		)
+		{
+			break;
+		}
+		
+		dez_exit_branch(0);
+	}
+	
+	return 0;
+}
+	
+#if 0
+static int dez_check_exit_branch (void)
+{
+	int nextline;
+	DEZ_NODE *tmp, *node, *els;
+	DEZ_NODE_EXPR *content;
+	int i,j;
+	
+	nextline = ZEND_LINENUM(m_zend_op_current - m_opc_num) + 1;
+	
+	for (i = 0; i < m_node_num; i++)
+	{
+		int dest;
+		
+		node = m_node_stack[i];
+		
+		if (
+			node->dez_op == DEZ_OP_FUNCTION ||
+			node->dez_op == DEZ_OP_CLASS
+		)
+		{
+			continue;
+		}
+		
+		content = (DEZ_NODE_EXPR *)(node->content);
+		
+		dest = dez_get_dest(node);
+		
+		if (
+			dest > get_zend_linenum(node) &&						/* jump forward */
+			dest <= nextline
+		)
+		{
+			m_dez_op_current = node;
+			
+			els = NULL;
+			
+			if (
+				node->dez_op  == DEZ_OP_IF &&						/* if */
+				node->zop->opcode != ZEND_JMP						/* not if (false) */
+			)
+			{
+				tmp = dez_node_get();
+				
+				if (
+					node != tmp &&
+					tmp != NULL	&&
+					tmp->dez_op == DEZ_OP_IF	&&				/* if */
+					tmp->zop->opcode == ZEND_JMP &&				/* if (false) */
+					dez_get_dest(tmp) > nextline &&				/* has some zend ops */
+					dez_branch_is_null(tmp) == 0				/* the sub branch is null */
+				)
+				{
+					els = dez_node_pop();
+					els->dez_op = DEZ_OP_ELSE;
+					els = fetch_node(els);
+				}
+			}
+			else if (
+				node->dez_op == DEZ_OP_CASE		||				/* case of switch */
+				node->dez_op == DEZ_OP_DEFAULT					/* default of switch */
+			)
+			{
+				m_dez_op_current = content->op1_node;			/* return to switch node */
+			}
+
+			/*-- exit all child branchs --*/
+			while (m_node_num > i)
+			{
+				node = m_node_stack[m_node_num-1];
+				
+				if (node->dez_op == DEZ_OP_ELSE)			/* else node */
+				{
+					if (dez_branch_is_null(node) == 0)		/* the branch is null */
+					{
+						tmp = node->prev;
+						
+						if (m_dez_op_current == node)
+						{
+							m_dez_op_current = tmp;
+						}
+						
+						tmp->next = node->next;
+						node->prev = NULL;
+						
+						dez_node_specs[node->dez_op].dez_node_free_func(node);	/* remove the else node */
+						node = tmp;
+					}
+				}
+				else if (node->dez_op == DEZ_OP_IF && node->zop->opcode == ZEND_JMP)	/* if (false) */
+				{
+					DEZ_NODE_IF *ifc = (DEZ_NODE_IF *)(node->content);
+#if 0					
+					node->next = ifc->branch_node->next;		/* moveup all sub node */
+					
+					ifc->branch_node->next = NULL;
+					dez_node_specs[ifc->branch_node->dez_op].dez_node_free_func(ifc->branch_node);
+					ifc->branch_node = NULL;
+#endif					
+					node->dez_op = DEZ_OP_JMP;					/* change this node into JMP (maybe break) */
+				}
+				
+				m_node_num--;
+			}
+					
+			if (els != NULL)
+			{
+				DEZ_ADD_NODE(els);
+				
+				dez_enter_branch();								/* enter else branch */
+			}
+			
+			break;
+		}
+	}
+	
+	return 0;
+}
+#endif
+
+/*-- convertor for DEZ_NODE_NOP --*/
+static int dez_node_cvt_nop (unsigned char dez_op, zend_op *pzop)
+{
+	return 0;
+}
+
+/*-- convertor for expr --*/
+static int dez_node_cvt_expr (unsigned char dez_op, zend_op *pzop)
+{
+	DEZ_NODE *parent, *node;
+	DEZ_NODE_EXPR *content, *c;
+	
+	parent = dez_node_get();
+	
+	content = (DEZ_NODE_EXPR *)malloc(sizeof(DEZ_NODE_EXPR));
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	if (node == NULL)
+	{
+		free(content);
+		return -1;
+	}
+	
+	content->branch_node	= NULL;
+	content->op1_node		= fetch_tmp_node(&(pzop->op1));
+	content->op2_node		= fetch_tmp_node(&(pzop->op2));
+	
+	node->dez_op	= dez_op;
+	node->zop		= pzop;
+	node->content	= content;
+	node->prev		= NULL;
+	node->next		= NULL;
+
+	if (
+		dez_op == DEZ_OP_ASSIGN				&&
+		parent != NULL						&&
+		parent->dez_op == DEZ_OP_FOREACH
+	)
+	{
+		DEZ_NODE_FOREACH *fe = (DEZ_NODE_FOREACH *)(parent->content);
+		
+		if (
+			content->op2_node != NULL &&
+			content->op2_node->zop->opcode == ZEND_FETCH_DIM_TMP_VAR &&
+			content->op2_node->zop->op1.op_type == ZEND_GET_ORI(parent->zop)[1].result.op_type &&
+			content->op2_node->zop->op1.u.var == ZEND_GET_ORI(parent->zop)[1].result.u.var
+		)
+		{
+			if (
+				fe->value_node == NULL &&
+				content->op2_node->zop->op2.u.var == 0
+			)
+			{
+				node->dez_op = DEZ_OP_AS;
+				fe->value_node = node;
+				
+				return 0;
+			}
+			else if
+			(
+				fe->key_node == NULL &&
+				content->op2_node->zop->op2.u.var == 1
+			)
+			{
+				node->dez_op = DEZ_OP_AS;
+				fe->key_node = node;
+				
+				return 0;
+			}
+			
+		}
+		else if (content->op2_node == NULL)
+		{
+			if (
+				fe->value_node == NULL &&
+				pzop->op2.op_type == ZEND_GET_ORI(parent->zop)[1].result.op_type &&
+				pzop->op2.u.var == ZEND_GET_ORI(parent->zop)[1].result.u.var
+			)
+			{
+				node->dez_op = DEZ_OP_AS;
+				fe->value_node = node;
+				
+				return 0;
+			}
+		}
+	}
+	
+	if (
+		dez_op == DEZ_OP_ASSIGN				&&
+		content->op2_node != NULL			&&
+		content->op2_node->dez_op == DEZ_OP_FETCH_DIM
+	)
+	{
+		DEZ_NODE *fetch = dez_list_get_last_fetch(node);
+		
+		if (fetch != NULL)
+		{
+			c = (DEZ_NODE_EXPR *)(fetch->content);
+			
+			if (
+				c->op1_node != NULL &&
+				c->op1_node->dez_op == DEZ_OP_LIST				/* list element */
+			)
+			{
+				DEZ_NODE *list = c->op1_node;
+				c->op1_node = NULL;
+				
+				DEZ_ADD_NODE(list);
+				
+				dez_list_add_le(list, node, -1);				/* add element into list */
+				
+				return 0;
+			}
+		}
+	}
+	
+	if (dez_list_is_le(node) == 0)								/* list element */
+	{
+		int level;
+		DEZ_NODE *list, *dest;
+		
+		dest = dez_list_find_dest(node);
+		
+		if (dest != NULL)
+		{
+			fetch_node(dest);
+			
+			level = dez_list_get_level(NULL, dest);
+			list = dez_list_create(level-1);					/* create an empty list */
+			dez_list_add_le(list, dest, level);
+			
+			DEZ_ADD_NODE(list);
+		}
+		else
+		{
+			list = find_last_node(DEZ_OP_LIST);
+		}
+		
+		if (list != NULL)
+		{
+			dez_list_add_le(list, node, -1);
+			
+			return 0;
+		}
+	}
+	
+	DEZ_ADD_NODE(node);
+
+	if (dez_op == DEZ_OP_QM_ASSIGN && (m_opc_num < 2 || ZEND_GET_ORI(pzop)[1].opcode != ZEND_JMP))			/* qm false */
+	{
+		return 2;					/* exit branch */
+	}
+	else
+	{
+		return 0;
+	}
+}
+
+/*-- convertor for if --*/
+static int dez_node_cvt_if (unsigned char dez_op, zend_op *pzop)
+{
+	DEZ_NODE *parent, *node;
+	DEZ_NODE_IF *content;
+	
+	parent = dez_node_get();
+	
+	if (dez_op == DEZ_OP_IF && pzop->opcode != ZEND_JMP)
+	{
+		DEZ_NODE *current_node = m_dez_op_current;
+		
+		while(current_node != NULL)
+		{
+			if (
+				current_node->dez_op == DEZ_OP_IF &&
+				current_node->zop->opcode == ZEND_JMP
+			)														/* if (false) */
+			{
+				current_node = current_node->prev;
+				continue;
+			}
+			else if
+			(
+				current_node->dez_op == DEZ_OP_FUNCTION ||
+				current_node->dez_op == DEZ_OP_CLASS
+			)
+			{
+				current_node = NULL;
+			}
+			
+			break;
+		}
+		
+		node = find_tmp_node(&(pzop->op1));
+		
+		
+		if (
+			node != NULL					&&
+			node->dez_op == DEZ_OP_SWITCH	&&
+			current_node == node			&&
+			ZEND_LINENUM(pzop) >= pzop->op2.u.opline_num			/* ZEND_JMPZ: goto afterward */
+		)	/* the end of default of switch */
+		{
+			return 0;
+		}
+	}
+
+	content = (DEZ_NODE_IF *)malloc(sizeof(DEZ_NODE_IF));
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	if (node == NULL)
+	{
+		free(content);
+		return -1;
+	}
+	
+	content->branch_node	= NULL;
+	
+	if (pzop->opcode == ZEND_JMP)								/* if (false) or else */
+	{
+		content->op1_node 		= NULL;
+		content->op2_node 		= NULL;
+		content->dest			= pzop->op1.u.opline_num;
+	}
+	else
+	{
+		content->op1_node 		= fetch_tmp_node(&(pzop->op1));
+		content->op2_node 		= fetch_tmp_node(&(pzop->op2));
+		content->dest			= pzop->op2.u.opline_num;
+	}
+	
+	node->dez_op	= dez_op;
+	node->zop		= pzop;
+	node->content	= content;
+	node->prev		= NULL;
+	node->next		= NULL;
+
+	DEZ_ADD_NODE(node);
+
+	if (dez_op == DEZ_OP_IF)
+	{
+		return 1;					/* enter branch */
+	}
+	else
+	{
+		return 0;
+	}
+}
+
+/*-- convertor for DEZ_OP_QM_ASSIGN --*/
+static int dez_node_cvt_qm_assign (unsigned char dez_op, zend_op *pzop)
+{
+	DEZ_NODE *node;
+	DEZ_NODE_EXPR *content;
+	
+	content = (DEZ_NODE_EXPR *)malloc(sizeof(DEZ_NODE_EXPR));
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	if (node == NULL)
+	{
+		free(content);
+		return -1;
+	}
+	
+	content->branch_node	= NULL;
+	content->op1_node		= fetch_tmp_node(&(pzop->op1));
+	
+	if (m_opc_num >= 2 && ZEND_GET_ORI(pzop)[1].opcode == ZEND_JMP)			/* qm true */
+	{
+		DEZ_NODE *cond;
+		
+		/*-- fetch qm condition node --*/
+//		content->op2_node = fetch_jmp_src_node (ZEND_JMPZ, (ZEND_LINENUM(pzop)+2);
+		cond = dez_node_get();
+		if (
+			cond != NULL &&
+			cond->dez_op == DEZ_OP_IF &&
+			((DEZ_NODE_IF *)(cond->content))->dest == ZEND_LINENUM(pzop)+2
+		)
+		{
+			content->op2_node = dez_node_pop();					/* fetch the condition node */
+		
+			m_dez_op_current = content->op2_node->prev;
+			content->op2_node->prev = NULL;
+		}
+		else
+		{
+			content->op2_node = NULL;
+		}
+	}
+	else														/* qm false */
+	{
+		/*-- fetch qm true node --*/
+		content->op2_node = fetch_tmp_node (&(pzop->result));
+	}
+		
+	node->dez_op	= dez_op;
+	node->zop		= pzop;
+	node->content	= content;
+
+	DEZ_ADD_NODE(node);
+
+	return 0;
+}
+
+/*-- convertor for DEZ_OP_DO --*/
+static int dez_node_cvt_do (unsigned char dez_op, zend_op *pzop)
+{
+	DEZ_NODE *node;
+	DEZ_NODE_EXPR *content;
+	
+	content = (DEZ_NODE_EXPR *)malloc(sizeof(DEZ_NODE_EXPR));
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	if (node == NULL)
+	{
+		free(content);
+		return -1;
+	}
+	
+	content->op1_node = fetch_tmp_node(&(pzop->op1));
+	content->op2_node = NULL;
+	content->branch_node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	
+	if (content->branch_node == NULL)
+	{
+		return -1;
+	}
+	
+	content->branch_node->dez_op	= DEZ_OP_NOP;
+	content->branch_node->zop		= NULL;
+	content->branch_node->content	= NULL;
+	content->branch_node->prev		= NULL;
+	content->branch_node->next		= fetch_jmp_dest_node(pzop->op2.u.opline_num);
+	if (content->branch_node->next != NULL) content->branch_node->next->prev = content->branch_node;
+	
+	DEZ_ADD_NODE(node);
+
+	node->dez_op	= dez_op;
+	node->zop		= pzop;
+	node->content	= content;
+
+	return 0;
+}
+
+/*-- convertor for DEZ_OP_FOR --*/
+static int dez_node_cvt_for (unsigned char dez_op, zend_op *pzop)
+{
+	DEZ_NODE *node;
+	DEZ_NODE_FOR *content;
+	
+	content = (DEZ_NODE_FOR *)malloc(sizeof(DEZ_NODE_FOR));
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	if (node == NULL)
+	{
+		free(content);
+		return -1;
+	}
+	
+	content->branch_node	= NULL;
+	content->cond_node		= fetch_tmp_node(&(pzop->op1));
+	
+	if (m_dez_op_current->dez_op == DEZ_OP_ASSIGN)
+	{
+		content->before_node	= fetch_current_node();
+	}
+	else
+	{
+		content->before_node	= NULL;
+	}
+	
+	content->after_node		= NULL;
+	
+	node->dez_op	= dez_op;
+	node->zop		= pzop;
+	node->content	= content;
+
+	DEZ_ADD_NODE(node);
+
+	return 1;					/* enter branch */
+}
+
+/*-- convertor for DEZ_OP_FOREACH --*/
+static int dez_node_cvt_foreach (unsigned char dez_op, zend_op *pzop)
+{
+	DEZ_NODE *node;
+	DEZ_NODE_FOREACH *content;
+	
+	content = (DEZ_NODE_FOREACH *)malloc(sizeof(DEZ_NODE_FOREACH));
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	if (node == NULL)
+	{
+		free(content);
+		return -1;
+	}
+	
+	content->branch_node	= NULL;
+	
+	content->source_node	= fetch_tmp_node(&(pzop->op1));
+	content->key_node		= NULL;
+	content->value_node		= NULL;
+	
+	node->dez_op	= dez_op;
+	node->zop		= pzop;
+	node->content	= content;
+
+	DEZ_ADD_NODE(node);
+
+	return 1;					/* enter branch */
+}
+
+/*-- convertor for DEZ_OP_CASE --*/
+static int dez_node_cvt_case (unsigned char dez_op, zend_op *pzop)
+{
+	DEZ_NODE *node, *parent, *branch;
+	DEZ_NODE_EXPR *content, *swcontent;
+	
+	content = (DEZ_NODE_EXPR *)malloc(sizeof(DEZ_NODE_EXPR));
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	if (node == NULL)
+	{
+		free(content);
+		return -1;
+	}
+	
+	content->branch_node	= NULL;
+	content->op1_node		= fetch_tmp_node(&(pzop->op1));
+	content->op2_node		= fetch_tmp_node(&(pzop->op2));
+	
+	node->dez_op	= dez_op;
+	node->zop		= pzop;
+	node->content	= content;
+	node->prev		= NULL;
+	node->next		= NULL;
+
+	parent = find_tmp_node(&(pzop->result));
+	
+	if (parent == NULL)
+	{
+		return -1;
+	}
+	
+	if (parent->dez_op == DEZ_OP_BOOL)
+	{
+		if (
+			parent->zop->op1.op_type == IS_CONST			&&
+			parent->zop->op1.u.constant.type == IS_BOOL		&&
+			parent->zop->op1.u.constant.value.lval == 0
+		)
+		{
+			parent->dez_op	= DEZ_OP_SWITCH;
+	
+			/* set the condition of switch */
+			swcontent = (DEZ_NODE_EXPR *)(parent->content);
+			swcontent->op1_node = content->op1_node;
+			parent->zop->op1 = pzop->op1;
+			content->op1_node = NULL;
+			
+			branch = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+			if (branch == NULL)
+			{
+				return -1;
+			}
+			
+			branch->dez_op		= DEZ_OP_NOP;
+			branch->zop			= NULL;
+			branch->content		= NULL;
+			branch->prev		= NULL;
+			branch->next		= NULL;
+			
+			swcontent->branch_node = branch;
+		}
+		else
+		{
+			return -1;
+		}
+	}
+	else if (parent->dez_op == DEZ_OP_SWITCH)
+	{
+		branch = ((DEZ_NODE_EXPR *)(parent->content))->branch_node;
+		
+		while(branch->next != NULL) branch = branch->next;
+	}
+	else
+	{
+		return -1;
+	}
+	
+	content->op1_node	= parent;							/* pointer to switch node */
+	
+	branch->next	= node;
+	node->prev		= branch;
+	
+	m_dez_op_current= node;
+	
+	return 1;										/* enter case branch */
+}
+
+/*-- convertor for DEZ_OP_DEFAULT --*/
+static int dez_node_cvt_default (unsigned char dez_op, zend_op *pzop)
+{
+	DEZ_NODE *node, *parent, *branch;
+	DEZ_NODE_EXPR *content, *swcontent;
+	
+	content = (DEZ_NODE_EXPR *)malloc(sizeof(DEZ_NODE_EXPR));
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	if (node == NULL)
+	{
+		free(content);
+		return -1;
+	}
+	
+	content->branch_node	= NULL;
+	content->op1_node		= NULL;
+	content->op2_node		= NULL;
+	
+	node->dez_op	= dez_op;
+	node->zop		= pzop;
+	node->content	= content;
+	node->prev		= NULL;
+	node->next		= NULL;
+
+	while (1)
+	{
+		DEZ_NODE *tmp;
+		
+		parent = find_tmp_node(&(ZEND_GET_ORI(pzop)[1].result));
+		
+		if (parent != NULL)
+		{
+			break;
+		}
+		
+		tmp = dez_node_get();
+		
+		if (tmp == NULL)
+		{
+			free(content);
+			free(node);
+			
+			return 0;
+		}
+		
+		if (
+			(tmp->dez_op == DEZ_OP_IF && tmp->zop->opcode == ZEND_JMP)	||		/* if(false) */
+			tmp->dez_op == DEZ_OP_CASE									||		/* case */
+			dez_get_dest(tmp) >= ZEND_LINENUM(pzop)+2							/* the dest of parent is next node */
+		)
+		{
+			if (ZEND_GET_ORI(pzop) == ZEND_GET_ORI(tmp->zop))					/* is ZEND_JMP of default */
+			{
+				m_dez_op_current = dez_node_pop();
+			}
+			else
+			{
+				dez_exit_branch(0);			//m_dez_op_current = dez_node_pop();
+			}
+		}
+		else
+		{
+			free(content);
+			free(node);
+			
+			return 0;
+		}
+	}
+	
+	if (parent->dez_op == DEZ_OP_BOOL)
+	{
+		if (
+			parent->zop->op1.op_type == IS_CONST			&&
+			parent->zop->op1.u.constant.type == IS_BOOL		&&
+			parent->zop->op1.u.constant.value.lval == 0
+		)
+		{
+			parent->dez_op	= DEZ_OP_SWITCH;
+			
+			swcontent = (DEZ_NODE_EXPR *)(parent->content);
+			
+			branch = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+			if (branch == NULL)
+			{
+				return -1;
+			}
+			
+			branch->dez_op		= DEZ_OP_NOP;
+			branch->zop			= NULL;
+			branch->content		= NULL;
+			branch->prev		= NULL;
+			branch->next		= NULL;
+			
+			swcontent->branch_node = branch;
+		}
+		else
+		{
+			return -1;
+		}
+	}
+	else if (parent->dez_op == DEZ_OP_SWITCH)
+	{
+		branch = ((DEZ_NODE_EXPR *)(parent->content))->branch_node;
+		
+		while(branch->next != NULL) branch = branch->next;
+	}
+	else
+	{
+		return -1;
+	}
+	
+	content->op1_node	= parent;							/* pointer to switch node */
+	
+	branch->next	= node;
+	node->prev		= branch;
+	
+	m_dez_op_current= node;
+	
+	return 1;												/* enter default branch */
+}
+
+/*-- convertor for DEZ_OP_FUNCTION or DEZ_OP_CLASS --*/
+static int dez_node_cvt_function_or_class (unsigned char dez_op, zend_op *pzop)
+{
+	DEZ_NODE *node;
+	
+	node = m_dez_op_root;
+	
+	while(node != NULL)
+	{
+		if (pzop->extended_value == ZEND_DECLARE_FUNCTION)
+		{
+			if (node->dez_op == DEZ_OP_FUNCTION)
+			{
+				DEZ_NODE_FUNCTION *content;
+				
+				content = (DEZ_NODE_FUNCTION *)(node->content);
+				
+				if (0 == strcmp(content->name, pzop->op2.u.constant.value.str.val))
+				{
+					fetch_node(node);
+					
+					DEZ_ADD_NODE(node);
+					
+					return 0;
+				}
+			}
+		}
+		else if
+		(
+			pzop->extended_value == ZEND_DECLARE_CLASS	||
+			pzop->extended_value == ZEND_DECLARE_INHERITED_CLASS
+		)		/* declare class */
+		{
+			if (node->dez_op == DEZ_OP_CLASS)
+			{
+				DEZ_NODE_CLASS *content;
+				
+				content = (DEZ_NODE_CLASS *)(node->content);
+				
+				if (0 == strcmp(content->name, pzop->op2.u.constant.value.str.val))
+				{
+					fetch_node(node);
+					
+					DEZ_ADD_NODE(node);
+					
+					return 0;
+				}
+			}
+		}
+		
+		node = node->next;
+	}
+	
+	return 0;
+}
+
+/*-- convertor for DEZ_OP_DOUBLE_ARROW --*/
+static int dez_node_cvt_double_arrow (unsigned char dez_op, zend_op *pzop)
+{
+	DEZ_NODE *node, *parent;
+	DEZ_NODE_DA *content;
+	
+	content = (DEZ_NODE_DA *)malloc(sizeof(DEZ_NODE_DA));
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	if (node == NULL)
+	{
+		free(content);
+		return -1;
+	}
+	
+	parent = fetch_tmp_node(&(pzop->result));
+	
+	content->branch_node	= NULL;
+	content->key_node		= fetch_tmp_node(&(pzop->op2));
+	content->value_node		= fetch_tmp_node(&(pzop->op1));
+	content->next_node		= parent;
+	if (parent != NULL) parent->prev = node;
+	
+	node->dez_op	= DEZ_OP_ARRAY;
+	node->zop		= pzop;
+	node->content	= content;
+	node->prev		= NULL;
+	node->next		= NULL;
+
+	DEZ_ADD_NODE(node);
+
+	return 0;
+}
+
+/*-- convertor for DEZ_OP_ARRAY --*/
+static int dez_node_cvt_array (unsigned char dez_op, zend_op *pzop)
+{
+	DEZ_NODE *node;
+	DEZ_NODE_DA *content;
+	
+	content = (DEZ_NODE_DA *)malloc(sizeof(DEZ_NODE_DA));
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	if (node == NULL)
+	{
+		free(content);
+		return -1;
+	}
+	
+	content->branch_node	= NULL;
+	content->key_node		= fetch_tmp_node(&(pzop->op2));
+	content->value_node		= fetch_tmp_node(&(pzop->op1));
+	content->next_node		= NULL;
+	
+	node->dez_op	= dez_op;
+	node->zop		= pzop;
+	node->content	= content;
+
+	DEZ_ADD_NODE(node);
+
+	return 0;
+}
+
+/*-- convertor for DEZ_OP_HEREDOC --*/
+static int dez_node_cvt_heredoc (unsigned char dez_op, zend_op *pzop)
+{
+	/**********/
+	return 0;
+}
+
+/*-- convertor for DEZ_OP_DOLLAR_OPEN_CURLY_BRACES --*/
+static int dez_node_cvt_dollar_open_curly_braces (unsigned char dez_op, zend_op *pzop)
+{
+	/**********/
+	return 0;
+}
+
+/*-- convertor for DEZ_OP_CALL --*/
+static int dez_node_cvt_call (unsigned char dez_op, zend_op *pzop)
+{
+	DEZ_NODE *node, *param, *tmp;
+	DEZ_NODE_EXPR *content;
+	int param_num;
+	
+	content = (DEZ_NODE_EXPR *)malloc(sizeof(DEZ_NODE_EXPR));
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	if (node == NULL)
+	{
+		free(content);
+		return -1;
+	}
+	
+	content->branch_node	= NULL;
+	content->op1_node		= fetch_call_ini_node(&(pzop->op1));
+	
+	param = NULL;
+	tmp = m_dez_op_current;
+	param_num = pzop->extended_value;
+	
+	while (tmp != NULL && param_num > 0)
+	{
+		DEZ_NODE *prev = tmp->prev;
+		
+		if (tmp->dez_op == DEZ_OP_CALL_PARAM)
+		{
+			if (tmp == m_dez_op_current)
+			{
+				m_dez_op_current = prev;
+			}
+			
+			if (tmp->prev != NULL)
+			{
+				tmp->prev->next = tmp->next;
+				tmp->prev = NULL;
+			}
+			
+			if (tmp->next != NULL)
+			{
+				tmp->next->prev = prev;
+				tmp->next = NULL;
+			}
+			
+			tmp->next = param;
+			param = tmp;
+
+			param_num--;
+		}
+		
+		tmp = prev;
+	}
+	
+	content->op2_node = param;
+	
+	node->dez_op	= dez_op;
+	node->zop		= pzop;
+	node->content	= content;
+	node->next		= NULL;
+
+	if (pzop->opcode == ZEND_DO_FCALL_BY_NAME)
+	{
+		if (m_dez_op_current->dez_op == DEZ_OP_NEW)
+		{
+			content = (DEZ_NODE_EXPR *)(m_dez_op_current->content);
+			
+			if (content->op1_node != NULL)
+			{
+				((DEZ_NODE_EXPR *)(node->content))->op1_node = content->op1_node;
+			}
+			
+			content->op1_node = node;
+			
+			return 0;
+		}
+	}
+	
+	DEZ_ADD_NODE(node);
+
+	return 0;
+}
+
+/*-- convertor for DEZ_OP_BOOL --*/
+static int dez_node_cvt_bool (unsigned char dez_op, zend_op *pzop)
+{
+	DEZ_NODE *node, *tmp;
+	DEZ_NODE_EXPR *content;
+	
+	if (
+		pzop->op1.op_type == IS_CONST &&
+		pzop->op1.u.constant.type == IS_BOOL &&
+		pzop->op1.u.constant.value.lval == 1 &&
+		ZEND_GET_ORI(pzop)[-1].opcode == ZEND_JMP
+	)								/* default of switch */
+	{
+		return dez_node_cvt_default(DEZ_OP_DEFAULT, ZEND_GET_ORI(pzop)-1);
+	}		
+	
+	content = (DEZ_NODE_EXPR *)malloc(sizeof(DEZ_NODE_EXPR));
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	if (node == NULL)
+	{
+		free(content);
+		return -1;
+	}
+	
+	content->branch_node	= NULL;
+	content->op1_node		= NULL;
+	content->op2_node		= NULL;
+
+	node->dez_op			= dez_op;
+	node->zop				= pzop;
+	node->content			= content;
+	node->prev				= NULL;
+	node->next				= NULL;
+	
+	tmp = fetch_tmp_node(&(pzop->result));
+	
+	if (tmp == NULL)
+	{
+		DEZ_ADD_NODE(node);
+
+		return 0;
+	}
+	
+	if (tmp->dez_op == DEZ_OP_LOGICAL_OR || tmp->dez_op == DEZ_OP_LOGICAL_AND)
+	{
+		content->op1_node	= fetch_tmp_node(&(pzop->op1));	/* 2nd condition */
+		
+		content->op2_node	= tmp;							/* 1st condition */
+		
+		node->dez_op		= tmp->dez_op;
+		
+		DEZ_ADD_NODE(node);
+
+		return 0;
+	}
+	else
+	{
+		return -1;
+	}
+}
+
+
+static int dez_add_jmp_node(zend_op *pzop)
+{
+	DEZ_NODE *node;
+	DEZ_NODE_EXPR *content;
+	
+	content = (DEZ_NODE_EXPR *)malloc(sizeof(DEZ_NODE_EXPR));
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	if (node == NULL)
+	{
+		free(content);
+		return -1;
+	}
+	
+	content->branch_node	= NULL;
+	content->op1_node		= NULL;
+	content->op2_node		= NULL;
+	
+	node->dez_op	= DEZ_OP_JMP;
+	node->zop		= pzop;
+	node->content	= content;
+	node->prev		= NULL;
+	node->next		= NULL;
+	
+	DEZ_ADD_NODE(node);
+	
+	return 0;
+}	
+
+/*-- convertor for DEZ_OP_JMP --*/
+static int dez_node_cvt_jmp (unsigned char dez_op, zend_op *pzop)
+{
+	DEZ_NODE *parent;
+	int p_linenum;
+	
+	parent	= dez_node_get();
+	if (parent == NULL)
+	{
+		p_linenum = -1;
+	}
+	else
+	{
+		p_linenum = get_zend_linenum(parent);
+	}
+	
+	if (ZEND_LINENUM(pzop) < (int)(pzop->op1.u.opline_num))			/* goto forward */
+	{
+		if (m_max_jmp_dest < pzop->op1.u.opline_num)
+		{
+			m_max_jmp_dest = pzop->op1.u.opline_num;
+		}
+		
+		if (
+			parent != NULL						&&
+			parent->dez_op == DEZ_OP_CASE
+		)
+		{
+			zend_op *dest;
+			
+			dest = m_zend_op_start + pzop->op1.u.opline_num;
+			
+			if (
+				(dest[-1].opcode == ZEND_JMPZ || dest[-1].opcode == ZEND_JMPZNZ)	&&
+				dest[-2].opcode == ZEND_CASE
+			)														/* the dest is 'case' */
+			{
+				dez_exit_branch(0);									/* exit the case branch */
+				return 0;
+			}
+			else if (
+				dest[-1].opcode == ZEND_BOOL	&&
+				dest[-2].opcode == ZEND_JMP
+			)														/* the dest is 'default' */
+			{
+				dez_exit_branch(0);									/* exit the case branch */
+				return 0;
+			}
+		}
+		
+		return dez_node_cvt_if(DEZ_OP_IF, pzop);					/* add if (false) node */
+	}
+	else															/* goto afterware */
+	{
+		int header_linenum;
+		if (
+			parent != NULL && parent->dez_op == DEZ_OP_FOR &&
+			((DEZ_NODE_FOR *)(parent->content))->before_node != NULL
+		)
+		{
+			header_linenum = get_zend_linenum(((DEZ_NODE_FOR *)(parent->content))->before_node);
+		}
+		else
+		{
+			header_linenum = get_prev_zend_linenum(parent);
+		}
+		
+		if ((int)(pzop->op1.u.opline_num) > p_linenum)				/* within this branch */
+		{
+			DEZ_NODE *node, *branch;
+			DEZ_NODE_IF *content;
+			int dest;
+			
+			if (
+				parent != NULL						&&
+				parent->dez_op == DEZ_OP_FOR
+			)
+			{
+				DEZ_NODE_FOR *content;
+				
+				content = (DEZ_NODE_FOR *)(parent->content);
+				if (content == NULL)
+				{
+					return -1;
+				}
+				
+				if (
+					content->after_node != NULL &&
+					pzop->op1.u.opline_num <= get_zend_linenum(content->after_node)
+				)
+				{
+					return 0;
+				}
+			}
+#if 0
+			else if (
+				parent != NULL						&&
+				parent->dez_op == DEZ_OP_FOREACH
+			)
+			{
+				DEZ_NODE *dest;
+				
+				if (pzop->op1.u.opline_num == p_linenum+1)
+				{
+					return 2;										/* exit foreach branch */
+				}
+			}
+#endif
+			
+			content = (DEZ_NODE_IF *)malloc(sizeof(DEZ_NODE_IF));
+			if (content == NULL)
+			{
+				return -1;
+			}
+			
+			node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+			if (node == NULL)
+			{
+				free(content);
+				return -1;
+			}
+			
+			branch = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+			if (branch == NULL)
+			{
+				return -1;
+			}
+			
+			branch->dez_op	= DEZ_OP_NOP;
+			branch->zop		= NULL;
+			branch->content	= NULL;
+			branch->prev	= NULL;
+			branch->next	= fetch_jmp_dest_node(pzop->op1.u.opline_num);
+			if (branch->next != NULL) branch->next->prev = branch;
+			
+			content->branch_node	= branch;
+			content->op1_node		= NULL;
+			content->op2_node		= NULL;
+			content->dest			= ZEND_LINENUM(pzop);
+			
+			node->dez_op	= DEZ_OP_WHILE;
+			node->zop		= pzop;/*branch->next->zop;*/
+			node->content	= content;
+			node->prev		= NULL;
+			node->next		= NULL;
+			
+			dest = dez_get_branch_end(parent);
+
+//			dez_node_cvt_if(DEZ_OP_IF, pzop);					/* add if (false) */
+
+			clear_or_recover_zend_op(ZEND_GET_ORI(pzop)+1, dest-ZEND_LINENUM(pzop)-1, 1);		/* recover the remainder opcodes in this branch */
+
+			DEZ_ADD_NODE(node);									/* add while (true) */
+	
+			return 0;
+		}
+		else if (
+			(int)(pzop->op1.u.opline_num) <= p_linenum &&
+			(int)(pzop->op1.u.opline_num) > header_linenum
+		)														/* the dest is the header of this branch */
+		{
+			int dest;
+			
+			if (parent == NULL)
+			{
+				return 0;
+			}
+			
+			dest = dez_get_branch_end(parent);
+			
+			if (parent->dez_op == DEZ_OP_IF)
+			{
+				DEZ_NODE *pp;
+				int n = dest-ZEND_LINENUM(pzop)-1;
+				
+				if (parent->zop->opcode != ZEND_JMP)			/* not if (false) */
+				{
+					parent->dez_op = DEZ_OP_WHILE;
+				}
+				
+				if (dez_in_branch(parent, DEZ_OP_CASE) == 0)	/* the while() is in case branch */
+				{
+					int i;
+					zend_op *zp = ZEND_GET_ORI(pzop)+1;
+					
+					i = 0;
+					while(i < n)
+					{
+						if (
+							(
+								zp[i].opcode == ZEND_JMP	&&
+								zp[i+1].opcode == ZEND_BOOL
+							)	||								/* default node */
+							(
+								zp[i].opcode == ZEND_CASE	&&
+								(zp[i+1].opcode == ZEND_JMPZ || zp[i+1].opcode == ZEND_JMPZNZ)
+							)									/* case node */
+						)
+						{
+							break;
+						}
+						
+						i++;
+					}
+					
+					if (i < n)									/* the case or default node was found */
+					{
+						zend_op *dupzop;
+						
+						dupzop = dez_dup_zend_op(pzop);
+						dupzop->op1.u.opline_num = dest;
+						
+//						dez_node_cvt_jmp(DEZ_OP_JMP, dupzop);	/* add if (false) */
+						
+						n = i;
+					}
+				}
+				
+				clear_or_recover_zend_op(ZEND_GET_ORI(pzop)+1, n, 0);	/* clear the remainder opcodes in this branch */
+	
+				dez_node_cvt_if(DEZ_OP_IF, pzop);				/* add if (false) */
+
+				dez_exit_branch(0);								/* exit the branch */
+				
+				return 0;
+			}
+			else if (parent->dez_op == DEZ_OP_FOR)
+			{
+				DEZ_NODE_FOR *content;
+				
+				content = (DEZ_NODE_FOR *)(parent->content);
+				if (content == NULL)
+				{
+					return -1;
+				}
+				
+				if (content->after_node == NULL)
+				{
+					content->after_node = fetch_jmp_dest_node(pzop->op1.u.opline_num);
+				}
+				else if (pzop->op1.u.opline_num == get_zend_linenum(content->after_node))
+				{
+					clear_or_recover_zend_op(ZEND_GET_ORI(pzop)+1, dest-ZEND_LINENUM(pzop)-1, 0);		/* clear the remainder opcodes in this branch */
+					
+					dez_node_cvt_if(DEZ_OP_IF, pzop);			/* add if (false) */
+
+					dez_exit_branch(0);							/* exit the branch */
+					
+//					return dez_node_specs[DEZ_OP_CONTINUE].dez_node_cvt_func (DEZ_OP_CONTINUE, pzop);	/* add continue node */
+				}
+				
+				return 0;
+			}
+			else if (parent->dez_op == DEZ_OP_FOREACH)
+			{
+				clear_or_recover_zend_op(ZEND_GET_ORI(pzop)+1, dest-ZEND_LINENUM(pzop)-1, 0);			/* clear the remainder opcodes in this branch */
+				
+				dez_node_cvt_if(DEZ_OP_IF, pzop);				/* add if (false) */
+
+//				return dez_node_specs[DEZ_OP_CONTINUE].dez_node_cvt_func (DEZ_OP_CONTINUE, pzop);		/* add continue node */
+			}
+			
+			return 0;
+		}
+		else													/* the dest is without this branch */
+		{
+			int dest;
+			zend_op *prev_zop;
+			
+			dest = dez_get_branch_end(parent);
+			clear_or_recover_zend_op(ZEND_GET_ORI(pzop)+1, dest-ZEND_LINENUM(pzop)-1, 0);				/* clear the remainder opcodes in this branch */
+
+			dest = dez_get_dest(parent);						// dez_get_branch_end(parent);
+			
+			if (
+				dest > ZEND_LINENUM(pzop) &&					/* jump foreward away */
+				parent != NULL	&&
+				parent->dez_op == DEZ_OP_ELSE
+			)													/* break? */
+			{
+				DEZ_NODE_EXPR *c;
+				
+				dez_exit_branch(0);								/* exit this branch */
+				
+				/*-- fetch the sub branch and add them into m_dez_op_current --*/
+				c = (DEZ_NODE_EXPR *)(parent->content);
+				if (c != NULL && c->branch_node != NULL)		/* the sub branch is exist */
+				{
+					m_dez_op_current->next = c->branch_node->next;
+					if (c->branch_node->next != NULL) c->branch_node->next->prev = m_dez_op_current;
+					
+					free(c->branch_node);
+					c->branch_node = NULL;
+					
+					while(m_dez_op_current->next != NULL) m_dez_op_current = m_dez_op_current->next;
+				}
+				
+				DEZ_DEL_NODE(parent);							/* remove the else node */
+				
+				return dez_node_cvt_jmp(DEZ_OP_JMP, pzop);
+			}
+			
+			prev_zop = ZEND_GET_ORI(pzop)-1;
+			if (
+				m_dez_op_current->dez_op == DEZ_OP_WHILE && m_dez_op_current->zop->opcode == ZEND_JMP &&	/* the previous node is while(true) */
+				prev_zop->opcode == ZEND_JMP					&&
+				(int)(prev_zop->op1.u.opline_num) <= p_linenum 	&&			/* jmp to header */
+				(int)(prev_zop->op1.u.opline_num) > header_linenum			/* ------------- */
+			)
+			{
+				/* do nothing */
+			}
+			else
+			{	
+				dez_node_cvt_if(DEZ_OP_IF, pzop);				/* add if (false) node */
+			}
+
+			dez_exit_branch(1);									/* exit this branch */
+
+			return 0;
+		}
+	}
+	
+	return dez_node_cvt_expr (dez_op, pzop);					/* add jmp node */
+}
+
+/*-- convertor for DEZ_OP_FUNC_PARAM --*/
+static int dez_node_cvt_func_param (unsigned char dez_op, zend_op *pzop)
+{
+	static char paramname[1024];
+	
+	DEZ_NODE *node, *parent, *param;
+	DEZ_NODE_EXPR *content;
+	DEZ_NODE_FUNCTION *funcc;
+	
+	parent = dez_node_get();
+	
+	if (parent == NULL)
+	{
+		return -1;
+	}
+	
+	if (parent->dez_op != DEZ_OP_FUNCTION)
+	{
+		return -1;
+	}
+	
+	funcc = (DEZ_NODE_FUNCTION *)(parent->content);
+	
+	if (funcc == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)malloc(sizeof(DEZ_NODE_EXPR));
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	if (node == NULL)
+	{
+		free(content);
+		return -1;
+	}
+	
+	content->branch_node	= NULL;
+	content->op1_node		= fetch_tmp_node(&(pzop->result));
+	
+#if 0
+	if (content->op1_node == NULL)
+	{
+		sprintf(paramname, "dez_param_%u", pzop->result.u.var);
+		dez_add_var(pzop->result.u.var, paramname, strlen(paramname));
+	}
+#endif
+	
+	if (pzop->opcode == ZEND_RECV_INIT)
+	{
+		content->op2_node = fetch_tmp_node(&(pzop->op2));
+	}
+	else
+	{
+		content->op2_node = NULL;
+	}
+
+	node->dez_op	= dez_op;
+	node->zop		= pzop;
+	node->content	= content;
+	node->prev		= NULL;
+	node->next		= NULL;
+	
+	param = funcc->param_node;
+	
+	if (param == NULL)
+	{
+		funcc->param_node = node;
+	}
+	else
+	{
+		while(param->next != NULL)
+		{
+			param = param->next;
+		}
+	
+		param->next		= node;
+		node->prev		= param;
+	}
+	
+	return 0;
+}
+
+/*-- convertor for DEZ_OP_UNKNOWN --*/
+static int dez_node_cvt_unknown (unsigned char dez_op, zend_op *pzop)
+{
+	/**********/
+	return 0;
+}
+
+
+static int dez_node_output_nop(DEZ_NODE *pdez_node)
+{
+	/******************/
+	return 0;
+}
+
+static int dez_node_output_expr(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	if (
+		pdez_node->dez_op == DEZ_OP_BW_NOT			||		/* ~ */
+		pdez_node->dez_op == DEZ_OP_BOOL_NOT				/* ! */
+	)
+	{
+		printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+		
+		if (content->op1_node != NULL)
+		{
+			dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+		}
+		else
+		{
+			dez_dump_znode(&(pdez_node->zop->op1), 1);
+		}
+	}
+	else if (
+		pdez_node->dez_op == DEZ_OP_CONCAT			&&
+		pdez_node->zop->opcode == ZEND_ADD_CHAR
+	)
+	{
+		printf ( "(");
+		
+		if (content->op1_node != NULL)
+		{
+			dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+		}
+		else
+		{
+			dez_dump_znode(&(pdez_node->zop->op1), 1);
+		}
+		
+		printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+		
+		if (content->op2_node != NULL)
+		{
+			dez_node_specs[content->op2_node->dez_op].dez_node_output_func (content->op2_node);
+		}
+		else
+		{
+			printf ( "'%c'", (char)(pdez_node->zop->op2.u.constant.value.lval));
+		}
+
+		printf ( ")");
+	}
+	else
+	{	
+		if (
+			pdez_node->dez_op != DEZ_OP_OBJECT_OPERATOR
+		)
+		{
+			printf ( "(");
+		}
+		
+		if (content->op1_node != NULL)
+		{
+			dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+		}
+		else
+		{
+			dez_dump_znode(&(pdez_node->zop->op1), 1);
+		}
+		
+		printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+		
+		if (content->op2_node != NULL)
+		{
+			dez_node_specs[content->op2_node->dez_op].dez_node_output_func (content->op2_node);
+		}
+		else
+		{
+			dez_dump_znode(&(pdez_node->zop->op2), (pdez_node->dez_op == DEZ_OP_OBJECT_OPERATOR ? 0: 1));
+		}
+		
+		if (
+			pdez_node->dez_op != DEZ_OP_OBJECT_OPERATOR
+		)
+		{
+			printf ( ")");
+		}
+	}
+	
+	return 0;
+}
+
+static int dez_node_output_cast(DEZ_NODE *pdez_node)
+{
+	static char *dez_cast_str[] =
+	{
+		"(unset)",
+		"(int)",
+		"(double)",
+		"(string)",
+		"(array)",
+		"(object)",
+		"(bool)"
+	};
+	
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	printf ("%s", dez_cast_str[pdez_node->zop->extended_value]);
+	
+	if (content->op1_node != NULL)
+	{
+		dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), 1);
+	}
+	
+	return 0;
+}
+
+static int dez_node_output_qm_assign(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+	DEZ_NODE *qm_true;
+	DEZ_NODE_EXPR *content1;
+	DEZ_NODE *qm_cond;
+	DEZ_NODE_EXPR *content2;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	qm_true = content->op2_node;
+	if (qm_true == NULL)
+	{
+		return -1;
+	}
+	
+	content1 = (DEZ_NODE_EXPR *)(qm_true->content);
+	if (content1 == NULL)
+	{
+		return -1;
+	}
+	
+	printf ( "(");
+	
+	qm_cond = content1->op2_node;
+	if (qm_cond == NULL)
+	{
+		printf ("true");
+	}
+	else
+	{
+		content2 = (DEZ_NODE_EXPR *)(qm_cond->content);
+		if (content2 == NULL)
+		{
+			return -1;
+		}
+		
+		if (qm_cond->zop->opcode == ZEND_JMP)
+		{
+			printf ("false");
+		}
+		else if (content2->op1_node != NULL)
+		{
+			dez_node_specs[content2->op1_node->dez_op].dez_node_output_func (content2->op1_node);
+		}
+		else
+		{
+			dez_dump_znode(&(qm_cond->zop->op1), 1);
+		}
+	}
+	
+	printf ( " ? ");
+	
+	if (content1->op1_node != NULL)
+	{
+		dez_node_specs[content1->op1_node->dez_op].dez_node_output_func (content1->op1_node);
+	}
+	else
+	{
+		dez_dump_znode(&(qm_true->zop->op1), 1);
+	}
+	
+	printf ( " : ");
+	
+	if (content->op1_node != NULL)
+	{
+		dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), 1);
+	}
+	
+	printf ( ")");
+	
+	return 0;
+}
+
+static int dez_node_output_pre(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	if (content->op1_node != NULL)
+	{
+		dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), (pdez_node->dez_op == DEZ_OP_FETCH ? 0 : 1));
+	}
+	
+	return 0;
+}
+
+static int dez_node_output_pre2(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_IF *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_IF *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	if (pdez_node->dez_op == DEZ_OP_BREAK)
+	{
+		if (pdez_node->zop->opcode == ZEND_BRK)
+		{
+			if (
+				pdez_node->zop->op2.op_type == IS_CONST &&
+				pdez_node->zop->op2.u.constant.type == IS_LONG &&
+				pdez_node->zop->op2.u.constant.value.lval == 1
+			)
+			{
+				/* do nothing */
+			}
+			else
+			{
+				printf (" ");
+				
+				if (content->op2_node != NULL)
+				{
+					dez_node_specs[content->op2_node->dez_op].dez_node_output_func (content->op2_node);
+				}
+				else
+				{
+					dez_dump_znode(&(pdez_node->zop->op2), 1);
+				}
+			}
+		}
+		else						/* ZEND_JMP */
+		{
+			if (content->dest > 1)
+			{
+				printf (" %u", content->dest);
+			}
+		}
+	}
+	
+	return 0;
+}
+
+static int dez_node_output_post(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	if (content->op1_node != NULL)
+	{
+		dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), 1);
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	return 0;
+}
+
+static int dez_node_output_assign(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	if (content->op1_node != NULL)
+	{
+		dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), 1);
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	if (content->op2_node != NULL)
+	{
+		dez_node_specs[content->op2_node->dez_op].dez_node_output_func (content->op2_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op2), 1);
+	}
+	
+	return 0;
+}
+
+static int dez_node_output_assign_ref(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+	zend_op *zop;
+	zval **tmp;
+	TSRMLS_FETCH(); 
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	if (content->op2_node != NULL)
+	{
+		zop = content->op2_node->zop;
+		
+		if (zop->opcode == ZEND_FETCH_W && zop->op2.u.fetch_type == ZEND_FETCH_STATIC)			/* static variable */
+		{
+			zend_op_array *op_array;
+			
+			printf ( "static ");
+			
+			if (content->op1_node != NULL)
+			{
+				dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+			}
+			else
+			{
+				dez_dump_znode(&(pdez_node->zop->op1), 1);
+			}
+			
+/*
+			dez_add_var (pdez_node->zop->op1.u.var, zop->op1.u.constant.value.str.val, zop->op1.u.constant.value.str.len);
+			
+			printf ( "static %s", dez_get_varname(&(pdez_node->zop->op1)));
+*/
+
+						
+			if (m_current_function == NULL)					/* main branch */
+			{
+				op_array = EG(active_op_array);
+			}
+			else
+			{
+				op_array = ((DEZ_NODE_FUNCTION *)(m_current_function->content))->op_array;
+			}
+			
+			tmp = NULL;
+			zend_hash_find(op_array->static_variables, zop->op1.u.constant.value.str.val, zop->op1.u.constant.value.str.len+1, (void **)&tmp);
+			if (tmp != NULL)		/* init value assigned */
+			{
+				printf ( " = ");
+				dez_dump_zval(**tmp, 1);
+			}
+			
+			return 0;
+		}
+		else if (zop->opcode == ZEND_FETCH_W && zop->op2.u.fetch_type == ZEND_FETCH_GLOBAL)		/* global variable */
+		{
+			printf ( "global ");
+
+			if (content->op1_node != NULL)
+			{
+				dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+			}
+			else
+			{
+				dez_dump_znode(&(pdez_node->zop->op1), 1);
+			}
+			
+/*
+			dez_add_var (pdez_node->zop->op1.u.var, zop->op1.u.constant.value.str.val, zop->op1.u.constant.value.str.len);
+			
+			printf ( "global %s", dez_get_varname(&(pdez_node->zop->op1)));
+*/
+			
+			return 0;
+		}
+#if 0
+		else if (zop->opcode == ZEND_FETCH_W && zop->op2.u.fetch_type == ZEND_FETCH_LOCAL)		/* local variable */
+		{
+			dez_add_var (pdez_node->zop->op1.u.var, zop->op1.u.constant.value.str.val, zop->op1.u.constant.value.str.len);
+			
+			printf ( "%s", dez_get_varname(&(pdez_node->zop->op1)));
+			
+			return 0;
+		}
+#endif
+	}
+	
+	/*-- a = &b --*/
+	if (content->op1_node != NULL)
+	{
+		dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), 1);
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	if (content->op2_node != NULL)
+	{
+		dez_node_specs[content->op2_node->dez_op].dez_node_output_func (content->op2_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op2), 1);
+	}
+	
+	return 0;
+}
+
+static int dez_node_output_include_or_eval(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+	char *str;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	switch (pdez_node->zop->op2.u.constant.value.lval)
+	{
+		case ZEND_EVAL:
+			str = "eval (";
+			break;
+		case ZEND_INCLUDE:
+			str = "include ";
+			break;
+		case ZEND_INCLUDE_ONCE:
+			str = "include_once ";
+			break;
+		case ZEND_REQUIRE:
+			str = "require ";
+			break;
+		case ZEND_REQUIRE_ONCE:
+			str = "require_once ";
+			break;
+	}
+	
+	printf ( str);
+	
+	if (content->op1_node != NULL)
+	{
+		dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), 1);
+	}
+	
+	if (pdez_node->zop->op2.u.constant.value.lval == ZEND_EVAL)
+	{
+		printf ( ")");
+	}
+	
+	return 0;
+}
+
+static int dez_node_output_or_and(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+
+	printf ( "(");
+	
+	if (content->op2_node != NULL)
+	{
+		DEZ_NODE_EXPR *cond1 = (DEZ_NODE_EXPR *)(content->op2_node->content);
+		
+		if (cond1->op1_node != NULL)
+		{
+			dez_node_specs[cond1->op1_node->dez_op].dez_node_output_func (cond1->op1_node);
+		}
+		else
+		{
+			dez_dump_znode(&(content->op2_node->zop->op1), 1);
+		}
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	if (content->op1_node != NULL)
+	{
+		dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), 1);
+	}
+	
+	printf ( ")");
+	
+	return 0;
+}
+
+static int dez_node_output_new(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	if (content->op1_node != NULL)
+	{
+		dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), 1);
+		
+/*
+		switch(pdez_node->zop->op1.op_type)
+		{
+			case IS_CONST:
+				printf ("%s", pdez_node->zop->op1.u.constant.value.str.val);
+				break;
+			case 16:
+				printf ("%s", dez_get_varname(&(pdez_node->zop->op1)));
+				break;
+		}
+*/
+	}
+	
+	return 0;
+}
+
+static int dez_node_output_exit(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	printf ( "exit (");
+	
+	if (content->op1_node != NULL)
+	{
+		dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), 1);
+	}
+	
+	printf ( ")");
+	
+	return 0;
+}
+
+static int dez_node_output_if(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	printf ( "(");
+	
+	if (pdez_node->zop->opcode == ZEND_JMP)
+	{
+		printf ( (pdez_node->dez_op == DEZ_OP_WHILE ? "true" : "false"));
+	}
+	else
+	{
+		if (content->op1_node != NULL)
+		{
+			dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+		}
+		else
+		{
+			dez_dump_znode(&(pdez_node->zop->op1), 1);
+		}
+	}
+	
+	printf ( ")");
+	
+	return 0;
+}
+
+static int dez_node_output_do(DEZ_NODE *pdez_node)
+{
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	return 0;
+}
+
+static int dez_node_output_for(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE *node;
+	DEZ_NODE_FOR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_FOR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	printf ( "(");
+	
+	if (content->before_node != NULL)
+	{
+		dez_node_specs[content->before_node->dez_op].dez_node_output_func (content->before_node);
+	}
+	
+	printf ( "; ");
+	
+	if (content->cond_node != NULL)
+	{
+		dez_node_specs[content->cond_node->dez_op].dez_node_output_func (content->cond_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), 1);
+	}
+	
+	printf ( "; ");
+	
+	node = content->after_node;
+	while (node != NULL)
+	{
+		dez_node_specs[node->dez_op].dez_node_output_func (node);
+		
+		node = node->next;
+		
+		if (node != NULL)
+		{
+			printf ( ", ");
+		}
+	}
+	
+	printf ( ")");
+	
+	return 0;
+}
+
+static int dez_node_output_foreach(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE *node;
+	DEZ_NODE_FOREACH *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_FOREACH *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	printf ( "(");
+	
+	if (content->source_node != NULL)
+	{
+		dez_node_specs[content->source_node->dez_op].dez_node_output_func (content->source_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), 1);
+	}
+	
+	printf ( " as ");
+	
+	if (content->key_node != NULL)
+	{
+		dez_node_specs[content->key_node->dez_op].dez_node_output_func (content->key_node);
+		printf ("%s", dez_node_specs[DEZ_OP_DOUBLE_ARROW].desc);
+	}
+	
+	if (content->value_node != NULL)
+	{
+		dez_node_specs[content->value_node->dez_op].dez_node_output_func (content->value_node);
+	}
+	
+	printf ( ")");
+	
+	return 0;
+}
+
+static int dez_node_output_declare(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	printf ( "(");
+	
+	if (pdez_node->zop->opcode == ZEND_TICKS)
+	{
+		printf ( "ticks = ");
+		dez_dump_znode(&(pdez_node->zop->op1), 1);
+	}
+	
+	printf ( ")");
+	
+	return 0;
+}
+
+static int dez_node_output_case(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	if (content->op2_node != NULL)
+	{
+		dez_node_specs[content->op2_node->dez_op].dez_node_output_func (content->op2_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op2), 1);
+	}
+	
+	printf ( ":");
+	
+	return 0;
+}
+
+static int dez_node_output_default(DEZ_NODE *pdez_node)
+{
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	return 0;
+}
+
+static int dez_node_output_function(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE *node;
+	DEZ_NODE_FUNCTION *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_FUNCTION *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	printf ("%s", content->name);
+	
+	printf ( " (");
+	
+	for (node = content->param_node; node != NULL; node = node->next)
+	{
+		if (
+			content->op_array != NULL &&
+			content->op_array->arg_types != NULL &&
+			content->op_array->arg_types[node->zop->op1.u.constant.value.lval] == BYREF_FORCE
+		)
+		{
+			printf ("&");
+		}
+
+		dez_node_specs[node->dez_op].dez_node_output_func (node);
+		
+		if (node->next != NULL)
+		{
+			printf ( ", ");
+		}
+	}
+	
+	printf ( ")");
+	
+	return 0;
+}
+
+static int dez_node_output_var(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_VAR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_VAR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	if (content->property != NULL)
+	{
+		printf ("$%s", content->property->arKey);
+		
+		if (content->property->pData != NULL)
+		{
+			printf ( " = ");
+			
+			dez_dump_zval(**((zval **)(content->property->pData)), 1);
+		}
+	}
+	
+	return 0;
+}
+
+static int dez_node_output_unset(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	printf ( "($");
+	
+	if (content->op1_node != NULL)
+	{
+		dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), 0);
+	}
+	
+	printf ( ")");
+	
+	return 0;
+}
+
+static int dez_node_output_isset_or_empty(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	if (pdez_node->zop->op2.u.constant.value.lval == 1)
+	{
+		printf ("%s", dez_node_specs[DEZ_OP_ISSET].desc);
+	}
+	else
+	{
+		printf ("%s", dez_node_specs[DEZ_OP_EMPTY].desc);
+	}
+	
+	printf ( "(");
+	
+	if (content->op1_node != NULL)
+	{
+		dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), 1);
+	}
+	
+	printf ( ")");
+	
+	return 0;
+}
+
+static int dez_node_output_class(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE *node;
+	DEZ_NODE_CLASS *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_CLASS *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	printf ("%s", content->name);
+	
+	if (content->parent != NULL)
+	{
+		printf ( " extends %s", content->parent->name);
+	}
+	
+	return 0;
+}
+
+static int dez_node_output_double_arrow(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE *node;
+	DEZ_NODE_DA *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_DA *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	if (content->next_node != NULL)					/* is not the first element */
+	{
+		dez_node_output_double_arrow(content->next_node);
+		printf ( ", ");
+	}
+	
+	if (pdez_node->zop->op2.op_type != IS_UNUSED)
+	{
+		if (content->key_node != NULL)
+		{
+			dez_node_specs[content->key_node->dez_op].dez_node_output_func (content->key_node);
+		}
+		else
+		{
+			dez_dump_znode(&(pdez_node->zop->op2), 1);
+		}
+		
+		printf ("%s", dez_node_specs[DEZ_OP_DOUBLE_ARROW].desc);
+	}
+	
+	if (content->value_node != NULL)
+	{
+		if (content->value_node->zop->opcode == ZEND_FETCH_W)			/* refrence variable */
+		{
+			printf ( "&");
+		}
+		
+		dez_node_specs[content->value_node->dez_op].dez_node_output_func (content->value_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), 1);
+	}
+	
+	return 0;
+}
+
+static int dez_node_output_list(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_LIST *lc;
+	DEZ_NODE *le;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	lc = (DEZ_NODE_LIST *)(pdez_node->content);
+	if (lc == NULL)
+	{
+		return -1;
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	printf ( "(");
+	
+	le = lc->le_node;
+	while (le != NULL)
+	{
+		dez_node_specs[le->dez_op].dez_node_output_func (le);
+		
+		le = le->next;
+		
+		if (le != NULL)
+		{
+			printf ( ", ");
+		}
+	}
+	
+	printf ( ")");
+	
+	if (lc->dest_node != NULL)
+	{
+		DEZ_NODE *last_fetch, *next;
+		DEZ_NODE_EXPR *dc = (DEZ_NODE_EXPR *)(lc->dest_node->content);
+		
+		last_fetch = lc->dest_node;
+		while (last_fetch != NULL)
+		{
+			next = ((DEZ_NODE_EXPR *)(last_fetch->content))->op1_node;
+			if (
+				next == NULL ||
+				next->dez_op != DEZ_OP_FETCH_DIM
+			)
+			{
+				break;
+			}
+			
+			last_fetch = next;
+		}
+		
+		if (
+			last_fetch != NULL &&
+			(
+				((DEZ_NODE_EXPR *)(last_fetch->content))->op1_node != NULL ||
+				(last_fetch->zop->op1.op_type != IS_TMP_VAR && last_fetch->zop->op1.op_type != IS_VAR)
+			)
+		)
+		{
+			printf ("%s", dez_node_specs[DEZ_OP_ASSIGN].desc);
+			
+			if (dc->op1_node != NULL)
+			{
+				dez_node_specs[dc->op1_node->dez_op].dez_node_output_func (dc->op1_node);
+			}
+			else
+			{
+				dez_dump_znode(&(lc->dest_node->zop->op1), 1);
+			}
+		}
+	}
+
+	return 0;
+}
+
+static int dez_node_output_le(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_LE *lec;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	lec = (DEZ_NODE_LE *)(pdez_node->content);
+	if (lec == NULL)
+	{
+		return -1;
+	}
+	
+	if (lec->a_node != NULL)
+	{
+		if (lec->a_node->dez_op == DEZ_OP_LIST)
+		{
+			dez_node_specs[lec->a_node->dez_op].dez_node_output_func (lec->a_node);
+		}
+		else if (lec->a_node->dez_op == DEZ_OP_ASSIGN)
+		{
+			DEZ_NODE_EXPR *ac = (DEZ_NODE_EXPR *)(lec->a_node->content);
+			
+			if (ac->op1_node != NULL)
+			{
+				dez_node_specs[ac->op1_node->dez_op].dez_node_output_func (ac->op1_node);
+			}
+			else
+			{
+				dez_dump_znode(&(lec->a_node->zop->op1), 1);
+			}
+		}
+	}
+	
+	return 0;
+}
+
+static int dez_node_output_array(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_DA *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_DA *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	printf ( "(");
+	
+	pdez_node->dez_op = DEZ_OP_DOUBLE_ARROW;
+	dez_node_output_double_arrow(pdez_node);
+	pdez_node->dez_op = DEZ_OP_ARRAY;
+	
+	printf ( ")");
+	
+	return 0;
+}
+
+static int dez_node_output_heredoc(DEZ_NODE *pdez_node)
+{
+	/******************/
+	return 0;
+}
+
+static int dez_node_output_dollar_open_curly_braces(DEZ_NODE *pdez_node)
+{
+	/******************/
+	return 0;
+}
+
+static int dez_node_output_call_param(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	if (pdez_node->zop->opcode == ZEND_SEND_REF)
+	{
+		printf ( "&");
+	}
+	
+	if (content->op1_node != NULL)
+	{
+		dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), 1);
+	}
+	
+	return 0;
+}
+
+static int dez_node_output_call_init(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	if (pdez_node->zop->op1.op_type != IS_UNUSED)
+	{
+		if (content->op1_node != NULL)
+		{
+			dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+			
+			printf ( "->");
+		}
+		else
+		{
+			dez_dump_znode(&(pdez_node->zop->op1), 0);
+			
+			if (
+				pdez_node->zop->op1.op_type == IS_CONST		&&
+				pdez_node->zop->op1.u.constant.type == IS_STRING
+			)									/* class method calling */
+			{
+				printf ( "::");
+			}
+			else
+			{
+				printf ( "->");
+			}
+		}
+		
+	}
+	
+	if (content->op2_node != NULL)
+	{
+		dez_node_specs[content->op2_node->dez_op].dez_node_output_func (content->op2_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op2), 0);
+	}
+	
+	return 0;
+}
+
+static int dez_node_output_call(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+	DEZ_NODE *param;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	if (content->op1_node != NULL)
+	{
+		dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), 0);
+	}
+	
+	printf ( " (");
+	
+	for (param = content->op2_node; param != NULL; param = param->next)
+	{
+		dez_node_specs[param->dez_op].dez_node_output_func (param);
+		
+		if (param->next != NULL)
+		{
+			printf ( ", ");
+		}
+	}
+	
+	printf ( ")");
+	
+	return 0;
+}
+
+static int dez_node_output_call_ex(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+	DEZ_NODE *param;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	printf ("%s", dez_get_funcname(&(pdez_node->zop->op1)));
+	
+	printf ( " (");
+	
+	for (param = content->op2_node; param != NULL; param = param->next)
+	{
+		dez_node_specs[param->dez_op].dez_node_output_func (param);
+		
+		if (param->next != NULL)
+		{
+			printf ( ", ");
+		}
+	}
+	
+	printf ( ")");
+	
+	return 0;
+}
+
+static int dez_node_output_fetch_dim(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	if (content->op1_node != NULL)
+	{
+		dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op1), 1);
+	}
+	
+	printf ( "[");
+	
+	if (content->op2_node != NULL)
+	{
+		dez_node_specs[content->op2_node->dez_op].dez_node_output_func (content->op2_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->op2), 1);
+	}
+	
+	printf ( "]");
+	
+	return 0;
+}
+
+static int dez_node_output_init_string(DEZ_NODE *pdez_node)
+{
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	return 0;
+}
+
+static int dez_node_output_fetch_constant(DEZ_NODE *pdez_node)
+{
+	dez_dump_znode(&(pdez_node->zop->op1), 0);
+	
+	return 0;
+}
+
+static int dez_node_output_func_param(DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return -1;
+	}
+	
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content == NULL)
+	{
+		return -1;
+	}
+	
+	printf ("%s", dez_node_specs[pdez_node->dez_op].desc);
+	
+	if (content->op1_node != NULL)
+	{
+		dez_node_specs[content->op1_node->dez_op].dez_node_output_func (content->op1_node);
+	}
+	else
+	{
+		dez_dump_znode(&(pdez_node->zop->result), 1);
+	}
+	
+	if (pdez_node->zop->opcode == ZEND_RECV_INIT)
+	{
+		printf ( " = ");
+		
+		if (content->op2_node != NULL)
+		{
+			dez_node_specs[content->op2_node->dez_op].dez_node_output_func (content->op2_node);
+		}
+		else
+		{
+			dez_dump_znode(&(pdez_node->zop->op2), 1);
+		}
+	}
+		
+	return 0;
+}
+
+
+static int dez_node_output_unknown(DEZ_NODE *pdez_node)
+{
+	/******************/
+	return 0;
+}
+
+
+/*-- free all dez nodes --*/
+static void dez_node_free (void)
+{
+	if (m_dez_op_root != NULL)
+	{
+		dez_node_specs[m_dez_op_root->dez_op].dez_node_free_func(m_dez_op_root);
+		
+		m_dez_op_root = NULL;
+	}
+}
+
+
+/*-- free function for DEZ_NODE_NOP node --*/
+static void dez_node_free_nop (DEZ_NODE *pdez_node)
+{
+	if (pdez_node == NULL)
+	{
+		return;
+	}
+	
+	/*-- free the next node --*/
+	if (pdez_node->next != NULL)
+	{
+		dez_node_specs[pdez_node->next->dez_op].dez_node_free_func(pdez_node->next);
+	}
+	
+	/*-- free the node content --*/
+	if (pdez_node->content != NULL)
+	{
+		/**********/
+		
+		free(pdez_node->content);
+	}
+	
+	/*-- free the node self */
+	free(pdez_node);
+}
+
+static void dez_node_free_expr (DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return;
+	}
+	
+	/*-- free the next node --*/
+	if (pdez_node->next != NULL)
+	{
+		dez_node_specs[pdez_node->next->dez_op].dez_node_free_func(pdez_node->next);
+	}
+	
+	/*-- free the node content --*/
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content != NULL)
+	{
+		if (content->branch_node) dez_node_specs[content->branch_node->dez_op].dez_node_free_func(content->branch_node);
+		if (content->op1_node) dez_node_specs[content->op1_node->dez_op].dez_node_free_func(content->op1_node);
+		if (content->op2_node) dez_node_specs[content->op2_node->dez_op].dez_node_free_func(content->op2_node);
+		
+		free(content);
+	}
+	
+	/*-- free the node self */
+	free(pdez_node);
+}
+
+static void dez_node_free_if (DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_IF *content;
+
+	if (pdez_node == NULL)
+	{
+		return;
+	}
+	
+	/*-- free the next node --*/
+	if (pdez_node->next != NULL)
+	{
+		dez_node_specs[pdez_node->next->dez_op].dez_node_free_func(pdez_node->next);
+	}
+	
+	/*-- free the node content --*/
+	content = (DEZ_NODE_IF *)(pdez_node->content);
+	if (content != NULL)
+	{
+		if (content->branch_node) dez_node_specs[content->branch_node->dez_op].dez_node_free_func(content->branch_node);
+		if (content->op1_node) dez_node_specs[content->op1_node->dez_op].dez_node_free_func(content->op1_node);
+		if (content->op2_node) dez_node_specs[content->op2_node->dez_op].dez_node_free_func(content->op2_node);
+		
+		free(content);
+	}
+	
+	/*-- free the node self */
+	free(pdez_node);
+}
+
+static void dez_node_free_for (DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_FOR *content;
+
+	if (pdez_node == NULL)
+	{
+		return;
+	}
+	
+	/*-- free the next node --*/
+	if (pdez_node->next != NULL)
+	{
+		dez_node_specs[pdez_node->next->dez_op].dez_node_free_func(pdez_node->next);
+	}
+	
+	/*-- free the node content --*/
+	content = (DEZ_NODE_FOR *)(pdez_node->content);
+	if (content != NULL)
+	{
+		if (content->branch_node) dez_node_specs[content->branch_node->dez_op].dez_node_free_func(content->branch_node);
+		if (content->before_node) dez_node_specs[content->before_node->dez_op].dez_node_free_func(content->before_node);
+		if (content->cond_node) dez_node_specs[content->cond_node->dez_op].dez_node_free_func(content->cond_node);
+		if (content->after_node) dez_node_specs[content->after_node->dez_op].dez_node_free_func(content->after_node);
+		
+		free(content);
+	}
+	
+	/*-- free the node self */
+	free(pdez_node);
+}
+
+static void dez_node_free_foreach (DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_FOREACH *content;
+
+	if (pdez_node == NULL)
+	{
+		return;
+	}
+	
+	/*-- free the next node --*/
+	if (pdez_node->next != NULL)
+	{
+		dez_node_specs[pdez_node->next->dez_op].dez_node_free_func(pdez_node->next);
+	}
+	
+	/*-- free the node content --*/
+	content = (DEZ_NODE_FOREACH *)(pdez_node->content);
+	if (content != NULL)
+	{
+		if (content->branch_node) dez_node_specs[content->branch_node->dez_op].dez_node_free_func(content->branch_node);
+		if (content->source_node) dez_node_specs[content->source_node->dez_op].dez_node_free_func(content->source_node);
+		if (content->key_node) dez_node_specs[content->key_node->dez_op].dez_node_free_func(content->key_node);
+		if (content->value_node) dez_node_specs[content->value_node->dez_op].dez_node_free_func(content->value_node);
+		
+		free(content);
+	}
+	
+	/*-- free the node self */
+	free(pdez_node);
+}
+
+static void dez_node_free_case (DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return;
+	}
+	
+	/*-- free the next node --*/
+	if (pdez_node->next != NULL)
+	{
+		dez_node_specs[pdez_node->next->dez_op].dez_node_free_func(pdez_node->next);
+	}
+	
+	/*-- free the node content --*/
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content != NULL)
+	{
+		if (content->branch_node) dez_node_specs[content->branch_node->dez_op].dez_node_free_func(content->branch_node);
+		if (content->op2_node) dez_node_specs[content->op2_node->dez_op].dez_node_free_func(content->op2_node);
+		
+		free(content);
+	}
+	
+	/*-- free the node self */
+	free(pdez_node);
+}
+
+static void dez_node_free_default (DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_EXPR *content;
+
+	if (pdez_node == NULL)
+	{
+		return;
+	}
+	
+	/*-- free the next node --*/
+	if (pdez_node->next != NULL)
+	{
+		dez_node_specs[pdez_node->next->dez_op].dez_node_free_func(pdez_node->next);
+	}
+	
+	/*-- free the node content --*/
+	content = (DEZ_NODE_EXPR *)(pdez_node->content);
+	if (content != NULL)
+	{
+		if (content->branch_node) dez_node_specs[content->branch_node->dez_op].dez_node_free_func(content->branch_node);
+		
+		free(content);
+	}
+	
+	/*-- free the node self */
+	free(pdez_node);
+}
+
+static void dez_node_free_function (DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_FUNCTION *content;
+
+	if (pdez_node == NULL)
+	{
+		return;
+	}
+	
+	/*-- free the next node --*/
+	if (pdez_node->next != NULL)
+	{
+		dez_node_specs[pdez_node->next->dez_op].dez_node_free_func(pdez_node->next);
+	}
+	
+	/*-- free the node content --*/
+	content = (DEZ_NODE_FUNCTION *)(pdez_node->content);
+	if (content != NULL)
+	{
+		if (content->branch_node) dez_node_specs[content->branch_node->dez_op].dez_node_free_func(content->branch_node);
+		if (content->param_node) dez_node_specs[content->param_node->dez_op].dez_node_free_func(content->param_node);
+		
+		free(content);
+	}
+	
+	/*-- free the node self */
+	free(pdez_node);
+}
+
+static void dez_node_free_var (DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_VAR *content;
+
+	if (pdez_node == NULL)
+	{
+		return;
+	}
+	
+	/*-- free the next node --*/
+	if (pdez_node->next != NULL)
+	{
+		dez_node_specs[pdez_node->next->dez_op].dez_node_free_func(pdez_node->next);
+	}
+	
+	/*-- free the node content --*/
+	content = (DEZ_NODE_VAR *)(pdez_node->content);
+	if (content != NULL)
+	{
+		if (content->branch_node) dez_node_specs[content->branch_node->dez_op].dez_node_free_func(content->branch_node);
+		
+		free(content);
+	}
+	
+	/*-- free the node self */
+	free(pdez_node);
+}
+
+static void dez_node_free_class (DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_CLASS *content;
+
+	if (pdez_node == NULL)
+	{
+		return;
+	}
+	
+	/*-- free the next node --*/
+	if (pdez_node->next != NULL)
+	{
+		dez_node_specs[pdez_node->next->dez_op].dez_node_free_func(pdez_node->next);
+	}
+	
+	/*-- free the node content --*/
+	content = (DEZ_NODE_CLASS *)(pdez_node->content);
+	if (content != NULL)
+	{
+		if (content->branch_node) dez_node_specs[content->branch_node->dez_op].dez_node_free_func(content->branch_node);
+		
+		free(content);
+	}
+	
+	/*-- free the node self */
+	free(pdez_node);
+}
+
+static void dez_node_free_da (DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_DA *content;
+
+	if (pdez_node == NULL)
+	{
+		return;
+	}
+	
+	/*-- free the next node --*/
+	if (pdez_node->next != NULL)
+	{
+		dez_node_specs[pdez_node->next->dez_op].dez_node_free_func(pdez_node->next);
+	}
+	
+	/*-- free the node content --*/
+	content = (DEZ_NODE_DA *)(pdez_node->content);
+	if (content != NULL)
+	{
+		if (content->branch_node) dez_node_specs[content->branch_node->dez_op].dez_node_free_func(content->branch_node);
+		if (content->key_node) dez_node_specs[content->key_node->dez_op].dez_node_free_func(content->key_node);
+		if (content->value_node) dez_node_specs[content->value_node->dez_op].dez_node_free_func(content->value_node);
+		if (content->next_node) dez_node_specs[content->next_node->dez_op].dez_node_free_func(content->next_node);
+		
+		free(content);
+	}
+	
+	/*-- free the node self */
+	free(pdez_node);
+}
+
+static void dez_node_free_array (DEZ_NODE *pdez_node)
+{
+	if (pdez_node == NULL)
+	{
+		return;
+	}
+	
+	/*-- free the next node --*/
+	if (pdez_node->next != NULL)
+	{
+		dez_node_specs[pdez_node->next->dez_op].dez_node_free_func(pdez_node->next);
+	}
+	
+	/*-- free the node content --*/
+	if (pdez_node->content != NULL)
+	{
+		/**********/
+		
+		free(pdez_node->content);
+	}
+	
+	/*-- free the node self */
+	free(pdez_node);
+}
+
+static void dez_node_free_list (DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_LIST *content;
+
+	if (pdez_node == NULL)
+	{
+		return;
+	}
+	
+	/*-- free the next node --*/
+	if (pdez_node->next != NULL)
+	{
+		dez_node_specs[pdez_node->next->dez_op].dez_node_free_func(pdez_node->next);
+	}
+	
+	/*-- free the node content --*/
+	content = (DEZ_NODE_LIST *)(pdez_node->content);
+	if (content != NULL)
+	{
+		if (content->branch_node) dez_node_specs[content->branch_node->dez_op].dez_node_free_func(content->branch_node);
+		if (content->le_node) dez_node_specs[content->le_node->dez_op].dez_node_free_func(content->le_node);
+		if (content->dest_node) dez_node_specs[content->dest_node->dez_op].dez_node_free_func(content->dest_node);
+		
+		free(content);
+	}
+	
+	/*-- free the node self */
+	free(pdez_node);
+}
+
+static void dez_node_free_le (DEZ_NODE *pdez_node)
+{
+	DEZ_NODE_LE *content;
+
+	if (pdez_node == NULL)
+	{
+		return;
+	}
+	
+	/*-- free the next node --*/
+	if (pdez_node->next != NULL)
+	{
+		dez_node_specs[pdez_node->next->dez_op].dez_node_free_func(pdez_node->next);
+	}
+	
+	/*-- free the node content --*/
+	content = (DEZ_NODE_LE *)(pdez_node->content);
+	if (content != NULL)
+	{
+		if (content->branch_node) dez_node_specs[content->branch_node->dez_op].dez_node_free_func(content->branch_node);
+		if (content->a_node) dez_node_specs[content->a_node->dez_op].dez_node_free_func(content->a_node);
+		
+		free(content);
+	}
+	
+	/*-- free the node self */
+	free(pdez_node);
+}
+
+static void dez_node_free_heredoc (DEZ_NODE *pdez_node)
+{
+	if (pdez_node == NULL)
+	{
+		return;
+	}
+	
+	/*-- free the next node --*/
+	if (pdez_node->next != NULL)
+	{
+		dez_node_specs[pdez_node->next->dez_op].dez_node_free_func(pdez_node->next);
+	}
+	
+	/*-- free the node content --*/
+	if (pdez_node->content != NULL)
+	{
+		/**********/
+		
+		free(pdez_node->content);
+	}
+	
+	/*-- free the node self */
+	free(pdez_node);
+}
+
+static void dez_node_free_dollar_open_curly_braces (DEZ_NODE *pdez_node)
+{
+	if (pdez_node == NULL)
+	{
+		return;
+	}
+	
+	/*-- free the next node --*/
+	if (pdez_node->next != NULL)
+	{
+		dez_node_specs[pdez_node->next->dez_op].dez_node_free_func(pdez_node->next);
+	}
+	
+	/*-- free the node content --*/
+	if (pdez_node->content != NULL)
+	{
+		/**********/
+		
+		free(pdez_node->content);
+	}
+	
+	/*-- free the node self */
+	free(pdez_node);
+}
+
+static void dez_node_free_unknown (DEZ_NODE *pdez_node)
+{
+	if (pdez_node == NULL)
+	{
+		return;
+	}
+	
+	/*-- free the next node --*/
+	if (pdez_node->next != NULL)
+	{
+		dez_node_specs[pdez_node->next->dez_op].dez_node_free_func(pdez_node->next);
+	}
+	
+	/*-- free the node content --*/
+	if (pdez_node->content != NULL)
+	{
+		/**********/
+		
+		free(pdez_node->content);
+	}
+	
+	/*-- free the node self */
+	free(pdez_node);
+}
+
+
+/**********************************************************
+*  dez_dump_op: dump a dez op
+*
+*  @param dez_op: the dez op code need to be dumped
+*  @return 0: normal, 1: enter a branch, 2: exit the branch, 3: need to continue -1: error
+**********************************************************/
+static int dez_dump_op (unsigned char dez_op)
+{
+	return dez_node_specs[dez_op].dez_node_cvt_func (dez_op, m_op_buffer[0]);
+}
+
+
+/**********************************************************
+*  dez_dump_zend_op: dump a zend op
+*
+*  @param pzop:	pointer to the zend_op need to be dumped
+*  @return 0: normal, 1: enter a branch, 2: exit the branch, -1: error
+**********************************************************/
+static int dez_dump_zend_op (zend_op *pzop)
+{
+//printf ( "%u,", pzop->opcode);
+//return 0;
+
+	printf ( "    %6u:", ZEND_LINENUM(pzop));
+	
+	if (pzop->opcode >= sizeof(ZEND_OP_STRING)/sizeof(ZEND_OP_STRING[0]))
+	{
+		printf ( "<%u>     ", pzop->opcode);
+	}
+	else
+	{
+		printf ("%s", ZEND_OP_STRING[pzop->opcode]);
+	}
+
+	dez_dump_znode_ex(&(pzop->result), 1);
+	printf ( ", ");
+
+	dez_dump_znode_ex(&(pzop->op1), 1);
+	printf ( ", ");
+
+	dez_dump_znode_ex(&(pzop->op2), 1);
+	printf ( "\r\n");
+
+	return 0;
+	
+//	return dez_node_specs[DEZ_OP_UNKNOWN].dez_node_cvt_func (DEZ_OP_UNKNOWN, pzop);
+}
+
+
+/**********************************************************
+*  dez_deal_op: deal with a zend_op
+*
+*  @param pzop:	pointer to the zend_op would be dealed with. NULL means uninitialization
+*  @param match_n: used to retreive the number of matching zend_op
+*  @return 0: success, 1: enter a branch, 2: exit the branch, -1: error
+**********************************************************/
+static int dez_deal_op (zend_op *pzop, short *match_n)
+{
+	static unsigned char *op_masks = NULL;					/* each element: 0: need to continue, 1: not matching, 2: matching */
+	static int op_num = 0;
+	
+	register int i;
+	int needcontinues;
+	short mn;
+	int matching_i;
+	int r;
+	
+	*match_n = 0;
+	
+	if (op_masks == NULL)									/* initialization */
+	{
+		op_masks = (unsigned char *)malloc(sizeof(dez_op_types)/sizeof(dez_op_types[0]));
+		if (op_masks == NULL)								/* fail to alloc memery */
+		{
+			return -1;
+		}
+		
+		op_num = sizeof(dez_op_types)/sizeof(dez_op_types[0]);
+		
+		memset (op_masks, 0, op_num);						/* initialize op_masks */
+	}
+	
+	if (pzop != NULL)
+	{
+		if (dez_opc_push (pzop) != 0)						/* push the zend op into stack */
+		{													/* fail */
+			return -1;
+		}
+	}
+	
+	needcontinues	= 0;
+	mn				= 0;
+	for (i = 0; i < op_num; i++)
+	{
+		if (op_masks[i] == 0)								/* need to continue */
+		{
+			op_masks[i] = dez_opc_compare (dez_op_types[i].opcs, dez_op_types[i].opcs_len);
+		}
+		
+		switch (op_masks[i])
+		{
+			case 0:											/* need to continue */
+				needcontinues++;
+				break;
+			case 1:											/* not matching */
+				break;
+			case 2:											/* matching */
+				if (mn < dez_op_types[i].opcs_len)
+				{
+					mn				= dez_op_types[i].opcs_len;
+					matching_i		= i;
+				}
+				break;
+		}
+	}
+	
+	if (pzop == NULL)										/* uninitialization */
+	{
+		if (m_opc_num > 0)									/* the stack is not empty */
+		{
+			if (mn > 0)										/* any dez op is matching */
+			{
+				*match_n = mn;
+				dez_dump_op (dez_op_types[matching_i].dez_op);	/* dump the matching dez op */
+			}
+			else											/* all dez ops ara not matching */
+			{
+				mn = 1;
+				*match_n = mn;
+				dez_dump_zend_op (m_op_buffer[0]);			/* dump the zend op at the top of stack */
+			}
+			
+			memset (op_masks, 0, op_num);					/* reset op_masks */
+			
+			dez_opc_pop(mn);
+			
+			dez_deal_op (NULL, match_n);
+		}
+		else
+		{
+			if (op_masks != NULL)
+			{
+				free (op_masks);
+				op_masks = NULL;
+			}
+		}
+	}
+	else if (needcontinues == 0)							/* no one dez op need to continue */
+	{
+		if (mn > 0)											/* any dez op is matching */
+		{
+			*match_n = mn;
+			
+			do
+			{
+				r = dez_dump_op (dez_op_types[matching_i].dez_op);	/* dump the matching dez op */
+			} while(r == 3);								/* continue to deal with the zend op */
+		}
+		else												/* all dez ops ara not matching */
+		{
+			mn = 1;
+			*match_n = mn;
+			
+			r = dez_dump_zend_op (m_op_buffer[0]);			/* dump the zend op at the top of stack */
+		}
+		
+		memset (op_masks, 0, op_num);						/* reset op_masks */
+		
+		return r;
+	}
+	
+	return 0;
+}
+
+
+/**********************************************************
+*  dez_deal_op_end: end process
+*
+*  @param header: the header of dez nodes
+*  @param perant: the parent node
+*  @return 0: success; other: failed
+**********************************************************/
+static int dez_deal_node_end(DEZ_NODE *header, DEZ_NODE *parent)
+{
+	DEZ_NODE_EXPR *content;
+	DEZ_NODE *p, *next;
+	int begin, end, prevcond;
+	DEZ_BRK_CNT_NODE *pbcn_header, *pbcn, *pbcn_next;
+	
+	pbcn_header	= m_dez_brk_cnt_tail;
+	
+	begin		= 0;
+	end			= 100000;
+	prevcond	= -1;
+	
+	dez_branch_get_range(parent, &begin, &end);
+
+	if (parent != NULL && parent->dez_op == DEZ_OP_DO)
+	{
+		DEZ_NODE *prev, *sub;
+		
+		prev = dez_get_last_sub_node(parent);
+		
+		while(prev)
+		{
+			if (
+				prev->dez_op == DEZ_OP_DO	||										/* do{...}while() */
+				prev->dez_op == DEZ_OP_WHILE && prev->zop->opcode == ZEND_JMP		/* while(true) */
+			)
+			{
+				break;
+			}
+			
+			sub = dez_get_last_sub_node(prev);
+			
+			if (sub == NULL)
+			{
+				break;
+			}
+			
+			prev = sub;
+		}
+		
+		if (prev == NULL)							/* no sub branch */
+		{
+			prevcond = get_prev_zend_linenum(parent);
+		}
+		else
+		{
+			prevcond = get_zend_linenum(prev);
+		}
+	}
+	else if (parent != NULL && parent->dez_op == DEZ_OP_FOR)
+	{
+		DEZ_NODE *before_node = ((DEZ_NODE_FOR *)(parent->content))->before_node;
+		
+		if (before_node != NULL)
+		{
+			prevcond = get_zend_linenum(before_node);
+		}
+		else
+		{
+			prevcond = get_prev_zend_linenum(parent);
+		}
+	}
+	else
+	{
+		prevcond = get_prev_zend_linenum(parent);
+	}
+	
+	p = header;
+	
+	while(p != NULL)
+	{
+		content = (DEZ_NODE_EXPR *)(p->content);
+		
+		if (p->dez_op == DEZ_OP_IF && p->zop->opcode == ZEND_JMP)	/* if (false) node */
+		{
+			int dest;
+			
+			if (content != NULL && content->branch_node != NULL)	/* sub branch is exist */
+			{
+				dez_node_specs[content->branch_node->dez_op].dez_node_free_func(content->branch_node);	/* remove the sub branch */
+				content->branch_node = NULL;
+			}
+			
+			dest = p->zop->op1.u.opline_num;
+			
+			if (dest < begin || dest > end)							/* jmp out of the branch */
+			{
+				if (p->next != NULL)
+				{
+					dez_node_specs[p->next->dez_op].dez_node_free_func(p->next);	/* remove remainder nodes in this  branch */
+					p->next = NULL;
+				}
+			}
+
+			((DEZ_NODE_IF *)content)->dest = 0;						/* maybe break */
+			dez_brk_cnt_add(p);
+		}
+		else if (content != NULL && content->branch_node != NULL)	/* sub branch is exist */
+		{
+			dez_node_push(p);										/* for get_prev_zend_linenum() */
+			
+			dez_deal_node_end(content->branch_node, p);				/* deal with the sub branch */
+
+			dez_node_pop();											/* for get_prev_zend_linenum() */
+		}
+
+		p = p->next;
+	}
+	
+	if (pbcn_header != NULL)
+	{
+		pbcn = pbcn_header->next;
+	}
+	else
+	{
+		pbcn = m_dez_brk_cnt_root;
+	}
+	
+	while(pbcn != NULL)
+	{
+		DEZ_NODE *n;
+		DEZ_NODE_IF *c;
+		int dest;
+		int checked;
+		
+		pbcn_next = pbcn->next;
+		
+		n = (DEZ_NODE*)(pbcn->node);
+		c = (DEZ_NODE_IF *)(n->content);
+		dest = n->zop->op1.u.opline_num;
+		
+		checked = 0;
+		
+		if (
+			parent != NULL							&&
+			(
+				parent->dez_op == DEZ_OP_WHILE		||
+				parent->dez_op == DEZ_OP_DO			||
+				parent->dez_op == DEZ_OP_FOR		||
+				parent->dez_op == DEZ_OP_FOREACH	||
+				parent->dez_op == DEZ_OP_SWITCH
+			)
+		)														/* loop or switch */
+		{
+			int endcond;
+			if (parent->dez_op == DEZ_OP_WHILE && parent->zop->opcode == ZEND_JMP)	/* while(true) */
+			{
+				endcond = prevcond+1;
+			}
+			else
+			{
+				endcond = get_zend_linenum(parent);
+			}
+			
+			if (dest < begin || dest > end)						/* jmp out of the branch */
+			{
+				n->dez_op = DEZ_OP_BREAK;
+				c->dest++;
+				
+				checked = 1;
+			}
+			else if (
+				c->dest == 0					&&				/* maybe continue */
+				dest > prevcond && dest <= endcond				/* jmp to condition */
+			)
+			{
+				n->dez_op = DEZ_OP_CONTINUE;
+				
+				checked = 1;
+			}
+		}
+		else if (
+			parent != NULL						&&
+			parent->dez_op == DEZ_OP_IF
+		)
+		{
+			if (
+				n->dez_op == DEZ_OP_BREAK		&&
+				dest > prevcond					&&				/* jmp to condition */
+				dest <= get_zend_linenum(parent)				/*                  */
+			)
+			{
+				parent->dez_op = DEZ_OP_WHILE;					/* IF -> WHILE */
+			}
+		}
+		
+		if (checked != 0)										/* break or continue was found */
+		{
+#if 0
+			if (c != NULL && c->branch_node != NULL)			/* sub branch is exist */
+			{
+				DEZ_NODE *lastsubnode = c->branch_node;
+				while(lastsubnode->next != NULL)
+				{
+					lastsubnode = lastsubnode->next;
+				}
+				
+				lastsubnode->next = n->next;
+				if (lastsubnode->next != NULL) lastsubnode->next->prev = lastsubnode;
+				
+				n->next = c->branch_node->next;
+				if (n->next != NULL) n->next->prev = n;
+				
+				c->branch_node->next = NULL;
+				free(c->branch_node);
+				c->branch_node = NULL;
+			}
+#endif
+		}
+		
+		if (dest >= begin && dest <= end)						/* jmp within the branch */
+		{
+			dez_brk_cnt_del(pbcn);
+			
+			if (n->dez_op == DEZ_OP_IF)							/* not break/continue */
+			{
+				DEZ_DEL_NODE(n);
+			}
+			else if(n->dez_op == DEZ_OP_CONTINUE)				/* the continue node */
+			{
+				DEZ_NODE *lastsubnode = dez_get_last_sub_node(parent);
+				if (lastsubnode == n)							/* the continue node is last node in branch */
+				{
+					DEZ_DEL_NODE(n);
+				}
+			}
+		}
+		
+		pbcn = pbcn_next;
+	}
+	
+	return 0;
+}
+
+/**********************************************************
+*  dez_decompile: decompile some zend ops
+*
+*  @param ops:	the array of zend_ops would be decompiled
+*  @param n:	the number of ops
+*  @return 0: success; other: failed
+**********************************************************/
+static int dez_decompile (zend_op *ops, int n)
+{
+	int r;
+	DEZ_NODE_EXPR *content;
+	
+static struct _zend_executor_globals *zeg;
+	TSRMLS_FETCH(); 
+	dez_prep_zend_op(ops, n);						/* pre process the zend op */
+		
+	m_zend_op_start		= ops;
+	m_zend_op_end		= ops+n;
+	
+	m_zend_op_current	= m_zend_op_start;
+
+	while (m_zend_op_current < m_zend_op_end)
+	{
+zeg = (struct _zend_executor_globals *)&EG(return_value_ptr_ptr);
+//dez_dump_zend_op(m_zend_op_current);	/****** for debug */
+//m_zend_op_current++;
+//continue;
+
+		r = dez_deal_op (m_zend_op_current, &m_zend_op_match_n);	/* deal with a zend_op */
+
+		if (r == 0)									/* success to deal with the zend_op */
+		{
+			/* do nothing */
+		}
+		else if (r == 1)							/* enter a branch */
+		{
+			dez_enter_branch();
+		}
+		else if (r == 2)							/* exit the branch */
+		{
+			dez_exit_branch(1);						/* exit the branch */
+		}
+		else										/* error */
+		{
+			return r;
+		}
+		
+		dez_check_exit_branch();
+		
+		dez_opc_pop (m_zend_op_match_n);			/* pop the matching zend op */
+
+		if (m_opc_num > 0)							/* some zend_ops is in stack */
+		{
+			dez_opc_refresh();						/* update the opcodes in stack */
+		}
+		
+		m_zend_op_current++;
+	}
+	
+	dez_deal_op(NULL, &m_zend_op_match_n);			/* process the remainder zend op in stack */
+	
+	dez_check_exit_all();							/* exit all branch */
+
+	dez_deal_node_end(m_dez_op_root, NULL);			/* end process (make BREAK, CONTINUE node) */
+	
+	dez_brk_cnt_free();								/* free the break/continue list */
+
+	clear_or_recover_zend_op(NULL, 0, 0);			/* clear the opcodes cleared */
+	
+	return 0;
+}
+
+
+/**********************************************************
+*  dez_output: output the zend nodes
+*
+*  @param header: the header of dez nodes
+*  @param perant: the parent node
+*  @return 0: success; other: failed
+**********************************************************/
+static int dez_output (DEZ_NODE *header, DEZ_NODE *parent)
+{
+	static char m_tab[1024] = {' ',' ','\0'};
+	
+	static int m_dez_declare = 0;
+	static int m_dez_silence = 0;
+
+	DEZ_NODE_EXPR *content;
+	DEZ_NODE *p, *next;
+	DEZ_NODE *function_node;
+	
+	if (m_dez_declare > 0)
+	{
+		m_dez_declare++;
+	}
+	
+	p = header;
+	
+	while(p != NULL)
+	{
+		next = p->next;
+		 
+		if (
+			p->dez_op == DEZ_OP_NOP		||
+			p->dez_op == DEZ_OP_DECLARE
+		)
+		{
+			p = next;
+			continue;
+		}
+		else if (p->dez_op == DEZ_OP_BEGIN_SILENCE)
+		{
+			m_dez_silence = 1;
+			
+			p = next;
+			continue;
+		}
+		else if (p->dez_op == DEZ_OP_END_SILENCE)
+		{
+			m_dez_silence = 0;
+			
+			p = next;
+			continue;
+		}
+		
+		if (
+			next != NULL &&
+			next->dez_op == DEZ_OP_DECLARE
+		)
+		{
+			if (m_dez_declare == 0)
+			{
+				m_dez_declare = 1;									/* enter declare branch */
+				printf ("%s", m_tab);
+				dez_node_specs[next->dez_op].dez_node_output_func (next);
+				printf ("\r\n%s{\r\n", m_tab);
+				strcat(m_tab, "  ");
+			}
+		}
+		else
+		{
+			if (m_dez_declare == 1)
+			{
+				m_dez_declare = 0;									/* exit declare branch */
+				m_tab[strlen(m_tab)-2] = '\0';
+				printf ("%s}\r\n\r\n", m_tab);
+			}
+		}
+		
+		/*-- remove the last return in function() or main branch --*/
+		if (
+			next == NULL &&
+			(parent == NULL || parent->dez_op == DEZ_OP_FUNCTION) &&
+			p->dez_op == DEZ_OP_RETURN
+		)															/* the last return */
+		{
+			break;													/* skip the last return */
+		}
+		
+		if (p->dez_op == DEZ_OP_FUNCTION)
+		{
+			function_node = m_current_function;						/* save the old function node */
+			m_current_function = p;
+		}
+
+		printf ("%s", m_tab);
+		
+		if (m_dez_silence != 0)										/* silence */
+		{
+			printf ("%s", dez_node_specs[DEZ_OP_BEGIN_SILENCE].desc);
+		}
+		
+		dez_node_specs[p->dez_op].dez_node_output_func (p);
+		
+		content = (DEZ_NODE_EXPR *)(p->content);
+		
+		if (content != NULL && content->branch_node != NULL)		/* enter branch */
+		{
+			printf ("\r\n%s{\r\n", m_tab);
+			strcat(m_tab, "  ");
+			dez_output (content->branch_node, p);					/* output the branch */
+			m_tab[strlen(m_tab)-2] = '\0';
+			
+			if (p->dez_op == DEZ_OP_DO)
+			{
+				printf ( "%s}", m_tab);
+				p->dez_op = DEZ_OP_WHILE;
+				dez_node_output_if(p);								/* output while(...) */
+				p->dez_op = DEZ_OP_DO;
+				printf ( ";\r\n");
+			}
+			else
+			{
+				printf ( "%s}\r\n", m_tab);
+			}
+			
+			if (p->next != NULL && p->next->dez_op != DEZ_OP_ELSE)
+			{
+				printf ( "\r\n");
+			}
+		}
+		else
+		{
+			printf ( ";\r\n");
+		}
+
+		if (p->dez_op == DEZ_OP_FUNCTION)
+		{
+			m_current_function = function_node;						/* restore the old function node */
+		}
+		
+		p = next;
+	}
+	
+	if (m_dez_declare > 0)
+	{
+		m_dez_declare--;
+
+		if (m_dez_declare == 0)										/* exit declare branch */
+		{
+			m_tab[strlen(m_tab)-2] = '\0';
+			printf ( "%s}\r\n\r\n", m_tab);
+		}
+	}
+	
+	return 0;
+}
+
+
+/**********************************************************
+*  dez_property: decompile properties
+*
+*  @param ht: properties
+*  @return 0: success; other: failed
+**********************************************************/
+static int dez_property (HashTable *ht)
+{
+	DEZ_NODE *parent;
+	DEZ_NODE_CLASS *ccontent;
+
+	if (ht != NULL)
+	{
+		Bucket *p = ht->pListHead;
+		
+		parent = dez_node_get();
+		
+		/*-- decompile properties --*/
+		while(p != NULL)
+		{
+			DEZ_NODE *node;
+			DEZ_NODE_VAR *content;
+
+			if (
+				parent != NULL		&&
+				parent->dez_op == DEZ_OP_CLASS
+			)											/* property declaration */
+			{
+				ccontent = (DEZ_NODE_CLASS *)(parent->content);
+				
+				if (ccontent->parent != NULL)			/* extands */
+				{
+					HashTable *pht = &(ccontent->parent->default_properties);
+					
+					Bucket *pp = pht->pListHead;
+					
+					while(pp != NULL)
+					{
+						if (
+							strcmp((char *)(pp->arKey), (char *)(p->arKey)) == 0 &&
+							*((zval **)(pp->pData)) == *((zval **)(p->pData))
+						)								/* property for parent class */
+						{
+							break;
+						}
+						
+						pp = pp->pListNext;
+					}
+					
+					if (pp != NULL)						/* the method belongs parent class */
+					{
+						p = p->pListNext;
+						continue;
+					}
+				}
+			}
+
+			content = (DEZ_NODE_VAR *)malloc(sizeof(DEZ_NODE_VAR));
+			if (content == NULL)
+			{
+				return -1;
+			}
+			
+			node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+			if (node == NULL)
+			{
+				free(content);
+				return -1;
+			}
+			
+			content->branch_node	= NULL;
+			content->property		= p;
+			
+			node->dez_op			= DEZ_OP_VAR;
+			node->zop				= NULL;
+			node->content			= content;
+		
+			DEZ_ADD_NODE(node);
+			
+			p = p->pListNext;
+		}
+	}
+	
+	return 0;
+}
+
+
+/**********************************************************
+*  dez_function: decompile functions
+*
+*  @param ht: function_table
+*  @return 0: success; other: failed
+**********************************************************/
+static int dez_function (HashTable *ht)
+{
+	static zend_op_array *op_array;
+	DEZ_NODE *parent;
+	DEZ_NODE_CLASS *ccontent;
+
+	if (ht != NULL)
+	{
+		Bucket *p = ht->pListHead;
+		
+		parent = dez_node_get();
+		
+		/*-- decompile the user functions --*/
+		while(p != NULL)
+		{
+			op_array = (zend_op_array *)(p->pData);
+			
+			if (
+				op_array != NULL	&&
+				op_array->type == 2					/* user function */
+			)
+			{
+				DEZ_NODE *node;
+				DEZ_NODE_FUNCTION *content;
+				
+				if (
+					parent != NULL		&&
+					parent->dez_op == DEZ_OP_CLASS
+				)									/* method declaration */
+				{
+					ccontent = (DEZ_NODE_CLASS *)(parent->content);
+					
+					if (ccontent->parent != NULL)	/* extands */
+					{
+						HashTable *pht = &(ccontent->parent->function_table);
+						
+						Bucket *pp = pht->pListHead;
+						
+						while(pp != NULL)
+						{
+							if (((zend_op_array *)(pp->pData))->opcodes == op_array->opcodes)	/* function for parent class */
+							{
+								break;
+							}
+							
+							pp = pp->pListNext;
+						}
+						
+						if (pp != NULL)				/* the method belongs parent class */
+						{
+							p = p->pListNext;
+							continue;
+						}
+					}
+				}
+
+				content = (DEZ_NODE_FUNCTION *)malloc(sizeof(DEZ_NODE_FUNCTION));
+				if (content == NULL)
+				{
+					return -1;
+				}
+				
+				node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+				if (node == NULL)
+				{
+					free(content);
+					return -1;
+				}
+				
+				content->branch_node	= NULL;
+				content->param_node		= NULL;
+				content->name			= op_array->function_name;
+				content->m_dez_var_num	= 0;
+				content->op_array		= op_array;
+				
+				node->dez_op			= DEZ_OP_FUNCTION;
+				node->zop				= op_array->opcodes;
+				node->content			= content;
+			
+				DEZ_ADD_NODE(node);
+				
+//printf("*%s:\r\n", op_array->function_name);
+				m_current_function = node;
+				
+				dez_enter_branch();									/* enter function branch */
+				
+				dez_decompile (op_array->opcodes, op_array->size);	/* zend op -> dez op */
+				
+				dez_exit_branch(0);									/* exit function branch */
+				
+				m_current_function = NULL;
+			}
+			
+			p = p->pListNext;
+		}
+	}
+	
+	return 0;
+}
+
+
+/**********************************************************
+*  dez_class: decompile classes
+*
+*  @param none
+*  @return 0: success; other: failed
+**********************************************************/
+static int dez_class (void)
+{
+	static HashTable *ht;
+	static zend_class_entry *c_entry;
+	static zend_op_array *op_array;
+	TSRMLS_FETCH(); 
+	ht = (EG(class_table));
+	
+	if (ht != NULL)
+	{
+		Bucket *p = ht->pListHead;
+		
+		/*-- decompile the user functions --*/
+		while(p != NULL)
+		{
+			c_entry = (zend_class_entry *)(p->pData);
+			
+			if (
+				c_entry != NULL	&&
+				c_entry->type == ZEND_USER_CLASS				/* user class */
+			)
+			{
+				DEZ_NODE *node;
+				DEZ_NODE_CLASS *content;
+				
+				content = (DEZ_NODE_CLASS *)malloc(sizeof(DEZ_NODE_CLASS));
+				if (content == NULL)
+				{
+					return -1;
+				}
+				
+				node = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+				if (node == NULL)
+				{
+					free(content);
+					return -1;
+				}
+				
+				content->branch_node	= NULL;
+				content->name			= c_entry->name;
+				content->parent			= c_entry->parent;
+				
+				node->dez_op			= DEZ_OP_CLASS;
+
+				node->zop				= NULL;
+				node->content			= content;
+			
+				DEZ_ADD_NODE(node);
+				
+//printf("class %s:\r\n", c_entry->name);
+				
+				dez_enter_branch();									/* enter class branch */
+				
+				dez_property (&(c_entry->default_properties));		/* decompile the properties */
+				
+				dez_function (&(c_entry->function_table));			/* decompile the motheds */
+				
+				dez_exit_branch(0);									/* exit class branch */
+			}
+			
+			p = p->pListNext;
+		}
+	}
+	
+	return 0;
+}
+
+
+/**********************************************************
+*  dez_global: decompile global source
+*
+*  @param none
+*  @return 0: success; other: failed
+**********************************************************/
+static int dez_global (void)
+{
+	TSRMLS_FETCH(); 
+	m_current_function = NULL;
+	
+	return dez_decompile (EG(active_op_array)->opcodes, EG(active_op_array)->size);	/* zend op -> dez op */
+}
+
+
+/**********************************************************
+*  dez_main: decompile the zend op
+*
+*  @param none
+*  @return 0: success; other: failed
+**********************************************************/
+int dez_main (void)
+{
+	TSRMLS_FETCH(); 
+	static char *m_Header = 
+"/***********************************************************************/\r\n"
+"/*                                                                     */\r\n"
+"/*  This file is created by Dezender                                   */\r\n"
+"/*                                                                     */\r\n"
+"/*  Dezender (Decoder for Zend Encoder/SafeGuard):                     */\r\n"
+"/*    Version:      0.9.0.1                                            */\r\n"
+"/*    Author:       qinvent.com                                        */\r\n"
+"/*    Release Date: 2005.10.04                                         */\r\n"
+"/*                                                                     */\r\n"
+"/***********************************************************************/\r\n"
+"\r\n\r\n";
+
+	m_dez_op_root = (DEZ_NODE *)malloc(sizeof(DEZ_NODE));
+	if (m_dez_op_root == NULL)						/* fail to alloc memory */
+	{
+		return -1;
+	}
+	
+	m_dez_op_root->dez_op	= DEZ_OP_NOP;
+	m_dez_op_root->zop		= NULL;
+	m_dez_op_root->content	= NULL;
+	m_dez_op_root->prev		= NULL; 
+	m_dez_op_root->next		= NULL;
+	
+	m_dez_op_current		= m_dez_op_root;
+	
+	dez_class ();									/* decompile classes */
+	
+	dez_function (EG(function_table));				/* decompile functions */
+	
+	dez_global ();									/* decompile global source */
+	
+	m_current_function = NULL;
+	
+	printf ( "<?php\r\n%s", m_Header);
+	
+	dez_output(m_dez_op_root, NULL);				/* output the dez nodes */
+	
+	printf ( "?>\r\n");
+	
+	dez_node_free();								/* free dez nodes */
+	
+	return 0;
+}
+
+
+/************************************************
+ * @ dezender.c v1.0 log @
+ *
+ * Revision 1.0.0.0     lkq       2005/08/10
+ * create the file
+ * 
+ ***********************************************/
diff -Nur php-4.3.11/Zend/dezender/dezender.h php/Zend/dezender/dezender.h
--- php-4.3.11/Zend/dezender/dezender.h	1970-01-01 08:00:00.000000000 +0800
+++ php/Zend/dezender/dezender.h	2005-08-28 00:22:40.000000000 +0800
@@ -0,0 +1,33 @@
+/***********************************************************************/
+/*                                                                     */
+/*  FILE        :dezender.h                                            */
+/*  DATE        :2005/08/10                                            */
+/*  DESCRIPTION :opcode->php source code                               */
+/*  PROJECT     :deZender                                              */
+/*                                                                     */
+/***********************************************************************/
+
+
+#ifndef _DEZENDER_H_
+#define _DEZENDER_H_
+
+
+/**********************************************************
+*  dez_main: decompile the zend op
+*
+*  @param none
+*  @return 0: success; other: failed
+**********************************************************/
+int dez_main (void);
+
+
+#endif
+
+
+/************************************************
+ * @ dezender.h v1.0 log @
+ *
+ * Revision 1.0.0.0     lkq       2005/08/10
+ * create the file
+ * 
+ ***********************************************/
diff -Nur php-4.3.11/Zend/zend.c php/Zend/zend.c
--- php-4.3.11/Zend/zend.c	2005-01-23 04:36:34.000000000 +0800
+++ php/Zend/zend.c	2005-09-11 18:34:58.000000000 +0800
@@ -27,6 +27,8 @@
 #include "zend_API.h"
 #include "zend_builtin_functions.h"
 #include "zend_ini.h"
+#include "dezender/dezender.h"
+
 
 #ifdef ZTS
 #	define GLOBAL_FUNCTION_TABLE	global_function_table
@@ -907,6 +909,22 @@
 
 ZEND_API int zend_execute_scripts(int type TSRMLS_DC, zval **retval, int file_count, ...)
 {
+typedef struct dez_list_t
+{
+	struct dez_list_t *prev;
+	struct dez_list_t *next;
+	int len;
+	char data[1];
+} dez_list;
+
+static char *p1, *p2, *p3;
+static int n = 0;
+static char *tar = "lkqzzy", *prev;
+static dez_list *dl,*head, *tail;
+static char **dl1,**dl2;
+static struct _zend_executor_globals *zeg;
+static struct _zend_compiler_globals *zcg;
+
 	va_list files;
 	int i;
 	zend_file_handle *file_handle;
@@ -919,15 +937,133 @@
 		if (!file_handle) {
 			continue;
 		}
+/*
+zeg = (struct _zend_executor_globals *)&EG(return_value_ptr_ptr);
+zcg = (struct _zend_compiler_globals *)&CG(bp_stack);
+p1 = (char *)malloc(4);
+*/
 		EG(active_op_array) = zend_compile_file(file_handle, ZEND_INCLUDE TSRMLS_CC);
 		zend_destroy_file_handle(file_handle TSRMLS_CC);
+
+/*
+p2 = p1+0x20000;
+dl2 = (char **)p2;
+p1 = (char *)zcg;
+dl1 = (char **)p1;
+if (p1 > p2)
+{
+	p3 = p1;
+	p1 = p2;
+	p2 = p3;
+}
+while(p1 < p2)
+{
+	if (memcmp(p1,tar,strlen(tar)+1) == 0)
+	{
+		printf("debug:0x%x\r\n",p1);
+		n++;
+		break;
+	}
+	
+	p1++;
+}
+dl = (dez_list*)(p1-12);
+prev=dl->prev->data;
+printf("*debug:prev=0x%x\r\n",prev);
+
+head = dl;
+n = 0;
+while(1)
+{
+	if (head->prev && head->prev->next == head) head=head->prev;
+	else break;
+	n++;
+}
+printf("*debug:header(%u)=0x%x\r\n",n,head);
+
+tail = dl;
+n = 0;
+while(1)
+{
+	if (tail->next && tail->next->prev == tail) tail=tail->next;
+	else break;
+	n++;
+}
+printf("*debug:tail(%u)=0x%x\r\n",n,tail);
+
+if ((char *)head - (char *)zeg == 0x1040)
+{
+	printf("-------debug:ok------\r\n");
+}
+
+printf("*debug:0x%x~0x%x\r\n",dl1,dl2);
+printf("*debug:cg:0x%x~eg:0x%x\r\n",zcg,zeg);
+
+n=0;
+while(dl1 < dl2)
+{
+	if (*dl1 == head)
+	{
+		printf("*debug:0x%x->0x%x\r\n",dl1,head);
+		
+		if (dl1 >= (dez_list **)zcg && dl1 < (dez_list **)zeg)
+		{
+			printf("ok\r\n");
+			break;
+		}
+		head = (dez_list *)dl1;
+		dl1 = (dez_list **)zcg;
+		n++;
+		if (n == 8)break;
+	}
+
+	if (*dl1 == prev)
+	{
+		unsigned *pb = (unsigned *)dl1;
+		pb-=3;
+		while(pb>=(unsigned *)zcg)
+		{
+			if (
+				pb[0] >= (unsigned)zcg && pb[0] < (unsigned)dl2	&&
+				pb[1] >= (unsigned)zcg && pb[1] < (unsigned)dl2	&&
+				((unsigned *)(pb[0]))[1] == (unsigned)pb		&&
+				((unsigned *)(pb[1]))[0] == (unsigned)pb
+			)
+			{
+				break;
+			}
+			
+			pb--;
+		}
+		
+		if (pb < pb>=(unsigned *)zcg)
+		{
+			printf("--debug:0x%x->0x%x--\r\n",dl1,prev);
+			break;
+		}
+		else
+		{
+			printf("*debug:0x%x(0x%x+%x,size:%x)->0x%x\r\n",dl1,pb+3,(unsigned)dl1-(unsigned)(pb+3),pb[2],prev);
+		}
+		
+		prev = (char *)(pb+3);
+		dl1 = (char **)zcg;
+		continue;
+	}
+	dl1++;
+}
+*/
+
+
+//vld_dump_oparray(EG(active_op_array));		/* Added by lkq, 2005.8.10 */
+dez_main ();	/* Added by lkq, 2005.8.23 */
 		if (EG(active_op_array)) {
 			EG(return_value_ptr_ptr) = retval ? retval : &local_retval;
-			zend_execute(EG(active_op_array) TSRMLS_CC);
-			if (retval == NULL && *EG(return_value_ptr_ptr) != NULL) {
-				zval_ptr_dtor(EG(return_value_ptr_ptr));
-				local_retval = NULL;
-			}
+//			zend_execute(EG(active_op_array) TSRMLS_CC);
+//			if (retval == NULL && *EG(return_value_ptr_ptr) != NULL) {
+//				zval_ptr_dtor(EG(return_value_ptr_ptr));
+//				local_retval = NULL;
+//			}
 			destroy_op_array(EG(active_op_array));
 			efree(EG(active_op_array));
 		} else if (type==ZEND_REQUIRE) {
diff -Nur php-4.3.11/Zend/zend_config.h php/Zend/zend_config.h
--- php-4.3.11/Zend/zend_config.h	1970-01-01 08:00:00.000000000 +0800
+++ php/Zend/zend_config.h	2005-09-11 14:00:32.000000000 +0800
@@ -0,0 +1,4 @@
+#include <../main/php_config.h>
+#if defined(APACHE) && defined(PHP_API_VERSION)
+#undef HAVE_DLFCN_H
+#endif
diff -Nur php-4.3.11/Zend/zend_ini_parser.c php/Zend/zend_ini_parser.c
--- php-4.3.11/Zend/zend_ini_parser.c	2005-03-30 22:35:48.000000000 +0800
+++ php/Zend/zend_ini_parser.c	2007-07-23 21:44:28.000000000 +0800
@@ -1,1335 +1,1164 @@
-/* A Bison parser, made from Zend/zend_ini_parser.y
-   by GNU bison 1.35.  */
-
-#define YYBISON 1  /* Identify Bison output.  */
-
-#define yyparse ini_parse
-#define yylex ini_lex
-#define yyerror ini_error
-#define yylval ini_lval
-#define yychar ini_char
-#define yydebug ini_debug
-#define yynerrs ini_nerrs
-# define	TC_STRING	257
-# define	TC_ENCAPSULATED_STRING	258
-# define	SECTION	259
-# define	CFG_TRUE	260
-# define	CFG_FALSE	261
-
-
-/*
-   +----------------------------------------------------------------------+
-   | Zend Engine                                                          |
-   +----------------------------------------------------------------------+
-   | Copyright (c) 1998-2002 Zend Technologies Ltd. (http://www.zend.com) |
-   +----------------------------------------------------------------------+
-   | This source file is subject to version 2.00 of the Zend license,     |
-   | that is bundled with this package in the file LICENSE, and is        |
-   | available at through the world-wide-web at                           |
-   | http://www.zend.com/license/2_00.txt.                                |
-   | If you did not receive a copy of the Zend license and are unable to  |
-   | obtain it through the world-wide-web, please send a note to          |
-   | license@zend.com so we can mail you a copy immediately.              |
-   +----------------------------------------------------------------------+
-   | Author: Zeev Suraski <zeev@zend.com>                                 |
-   +----------------------------------------------------------------------+
-*/
-
-
-/* $Id: zend_ini_parser.y,v 1.18.2.8 2003/10/17 02:48:24 iliaa Exp $ */
-
-#define DEBUG_CFG_PARSER 0
-#include "zend.h"
-#include "zend_API.h"
-#include "zend_ini.h"
-#include "zend_constants.h"
-#include "zend_ini_scanner.h"
-#include "zend_extensions.h"
-
-
-#if WIN32
-#define WIN32_LEAN_AND_MEAN
-#include <windows.h>
-#include <winbase.h>
-#endif
-
-#define YYSTYPE zval
-
-#ifdef ZTS
-#define YYPARSE_PARAM tsrm_ls
-#define YYLEX_PARAM tsrm_ls
-#endif
-
-#define ZEND_INI_PARSER_CB	(CG(ini_parser_param))->ini_parser_cb
-#define ZEND_INI_PARSER_ARG	(CG(ini_parser_param))->arg
-
-int ini_lex(zval *ini_lval TSRMLS_DC);
-#ifdef ZTS
-int ini_parse(void *arg);
-#else
-int ini_parse(void);
-#endif
-
-zval yylval;
-
-#ifndef ZTS
-extern int ini_lex(zval *ini_lval TSRMLS_DC);
-extern FILE *ini_in;
-extern void init_cfg_scanner(void);
-#endif
-
-void zend_ini_do_op(char type, zval *result, zval *op1, zval *op2)
-{
-	int i_result;
-	int i_op1, i_op2;
-	char str_result[MAX_LENGTH_OF_LONG];
-
-	i_op1 = atoi(op1->value.str.val);
-	free(op1->value.str.val);
-	if (op2) {
-		i_op2 = atoi(op2->value.str.val);
-		free(op2->value.str.val);
-	} else {
-		i_op2 = 0;
-	}
-
-	switch (type) {
-		case '|':
-			i_result = i_op1 | i_op2;
-			break;
-		case '&':
-			i_result = i_op1 & i_op2;
-			break;
-		case '~':
-			i_result = ~i_op1;
-			break;
-		case '!':
-			i_result = !i_op1;
-			break;
-		default:
-			i_result = 0;
-			break;
-	}
-
-	result->value.str.len = zend_sprintf(str_result, "%d", i_result);
-	result->value.str.val = (char *) malloc(result->value.str.len+1);
-	memcpy(result->value.str.val, str_result, result->value.str.len);
-	result->value.str.val[result->value.str.len] = 0;
-	result->type = IS_STRING;
-}
-
-
-void zend_ini_get_constant(zval *result, zval *name)
-{
-	zval z_constant;
-	TSRMLS_FETCH();
-
-	if (zend_get_constant(name->value.str.val, name->value.str.len, &z_constant TSRMLS_CC)) {
-		/* z_constant is emalloc()'d */
-		convert_to_string(&z_constant);
-		result->value.str.val = zend_strndup(z_constant.value.str.val, z_constant.value.str.len);
-		result->value.str.len = z_constant.value.str.len;
-		result->type = z_constant.type;
-		zval_dtor(&z_constant);
-		free(name->value.str.val);	
-	} else {
-		*result = *name;
-	}
-}
-
-
-static void ini_error(char *str)
-{
-	char *error_buf;
-	int error_buf_len;
-	char *currently_parsed_filename;
-	TSRMLS_FETCH();
-
-	currently_parsed_filename = zend_ini_scanner_get_filename(TSRMLS_C);
-	error_buf_len = 128+strlen(currently_parsed_filename); /* should be more than enough */
-	error_buf = (char *) emalloc(error_buf_len);
-
-	sprintf(error_buf, "Error parsing %s on line %d\n", currently_parsed_filename, zend_ini_scanner_get_lineno(TSRMLS_C));
-
-	if (CG(ini_parser_unbuffered_errors)) {
-#ifdef PHP_WIN32
-		MessageBox(NULL, error_buf, "PHP Error", MB_OK|MB_TOPMOST|0x00200000L);
-#else
-		fprintf(stderr, "PHP:  %s", error_buf);
-#endif
-	} else {
-		zend_error(E_WARNING, "%s", error_buf);
-	}
-	efree(error_buf);
-}
-
-
-ZEND_API int zend_parse_ini_file(zend_file_handle *fh, zend_bool unbuffered_errors, zend_ini_parser_cb_t ini_parser_cb, void *arg)
-{
-	int retval;
-	zend_ini_parser_param ini_parser_param;
-	TSRMLS_FETCH();
-
-	ini_parser_param.ini_parser_cb = ini_parser_cb;
-	ini_parser_param.arg = arg;
-
-	CG(ini_parser_param) = &ini_parser_param;
-	if (zend_ini_open_file_for_scanning(fh TSRMLS_CC)==FAILURE) {
-		return FAILURE;
-	}
-
-	CG(ini_parser_unbuffered_errors) = unbuffered_errors;
-	retval = ini_parse(TSRMLS_C);
-
-	zend_ini_close_file(fh TSRMLS_CC);
-
-	if (retval==0) {
-		return SUCCESS;
-	} else {
-		return FAILURE;
-	}
-}
-
-
-#ifndef YYSTYPE
-# define YYSTYPE int
-# define YYSTYPE_IS_TRIVIAL 1
-#endif
-#ifndef YYDEBUG
-# define YYDEBUG 0
-#endif
-
-
-
-#define	YYFINAL		27
-#define	YYFLAG		-32768
-#define	YYNTBASE	16
-
-/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
-#define YYTRANSLATE(x) ((unsigned)(x) <= 261 ? yytranslate[x] : 21)
-
-/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
-static const char yytranslate[] =
-{
-       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-      13,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,    11,     2,     2,     2,     2,     9,     2,
-      14,    15,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,    12,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     8,     2,    10,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
-       6,     7
-};
-
-#if YYDEBUG
-static const short yyprhs[] =
-{
-       0,     0,     3,     4,     8,    10,    12,    14,    16,    18,
-      20,    22,    24,    25,    27,    31,    35,    38,    41,    45
-};
-static const short yyrhs[] =
-{
-      16,    17,     0,     0,     3,    12,    18,     0,     3,     0,
-       5,     0,    13,     0,    19,     0,     4,     0,     6,     0,
-       7,     0,    13,     0,     0,    20,     0,    19,     8,    19,
-       0,    19,     9,    19,     0,    10,    19,     0,    11,    19,
-       0,    14,    19,    15,     0,     3,     0
-};
-
-#endif
-
-#if YYDEBUG
-/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
-static const short yyrline[] =
-{
-       0,   189,   191,   194,   203,   204,   205,   209,   211,   212,
-     213,   214,   215,   218,   220,   221,   222,   223,   224,   227
-};
-#endif
-
-
-#if (YYDEBUG) || defined YYERROR_VERBOSE
-
-/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
-static const char *const yytname[] =
-{
-  "$", "error", "$undefined.", "TC_STRING", "TC_ENCAPSULATED_STRING", 
-  "SECTION", "CFG_TRUE", "CFG_FALSE", "'|'", "'&'", "'~'", "'!'", "'='", 
-  "'\\n'", "'('", "')'", "statement_list", "statement", "string_or_value", 
-  "expr", "constant_string", 0
-};
-#endif
-
-/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
-static const short yyr1[] =
-{
-       0,    16,    16,    17,    17,    17,    17,    18,    18,    18,
-      18,    18,    18,    19,    19,    19,    19,    19,    19,    20
-};
-
-/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
-static const short yyr2[] =
-{
-       0,     2,     0,     3,     1,     1,     1,     1,     1,     1,
-       1,     1,     0,     1,     3,     3,     2,     2,     3,     1
-};
-
-/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
-   doesn't specify something else to do.  Zero means the default is an
-   error. */
-static const short yydefact[] =
-{
-       2,     0,     4,     5,     6,     1,    12,    19,     8,     9,
-      10,     0,     0,    11,     0,     3,     7,    13,    16,    17,
-       0,     0,     0,    18,    14,    15,     0,     0
-};
-
-static const short yydefgoto[] =
-{
-       1,     5,    15,    16,    17
-};
-
-static const short yypact[] =
-{
-  -32768,     0,    -8,-32768,-32768,-32768,     4,-32768,-32768,-32768,
-  -32768,    13,    13,-32768,    13,-32768,    -7,-32768,-32768,-32768,
-      17,    13,    13,-32768,-32768,-32768,     6,-32768
-};
-
-static const short yypgoto[] =
-{
-  -32768,-32768,-32768,     8,-32768
-};
-
-
-#define	YYLAST		32
-
-
-static const short yytable[] =
-{
-      26,    21,    22,     2,     6,     3,    27,     7,     8,     0,
-       9,    10,     0,     4,    11,    12,     7,    13,    14,    18,
-      19,     0,    20,    11,    12,    21,    22,    14,     0,    24,
-      25,     0,    23
-};
-
-static const short yycheck[] =
-{
-       0,     8,     9,     3,    12,     5,     0,     3,     4,    -1,
-       6,     7,    -1,    13,    10,    11,     3,    13,    14,    11,
-      12,    -1,    14,    10,    11,     8,     9,    14,    -1,    21,
-      22,    -1,    15
-};
-#define YYPURE 1
-
-/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
-
-/* Skeleton output parser for bison,
-
-   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
-   Foundation, Inc.
-
-   This program is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with this program; if not, write to the Free Software
-   Foundation, Inc., 59 Temple Place - Suite 330,
-   Boston, MA 02111-1307, USA.  */
-
-/* As a special exception, when this file is copied by Bison into a
-   Bison output file, you may use that output file without restriction.
-   This special exception was added by the Free Software Foundation
-   in version 1.24 of Bison.  */
-
-/* This is the parser code that is written into each bison parser when
-   the %semantic_parser declaration is not specified in the grammar.
-   It was written by Richard Stallman by simplifying the hairy parser
-   used when %semantic_parser is specified.  */
-
-/* All symbols defined below should begin with yy or YY, to avoid
-   infringing on user name space.  This should be done even for local
-   variables, as they might otherwise be expanded by user macros.
-   There are some unavoidable exceptions within include files to
-   define necessary library symbols; they are noted "INFRINGES ON
-   USER NAME SPACE" below.  */
-
-#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)
-
-/* The parser invokes alloca or malloc; define the necessary symbols.  */
-
-# if YYSTACK_USE_ALLOCA
-#  define YYSTACK_ALLOC alloca
-# else
-#  ifndef YYSTACK_USE_ALLOCA
-#   if defined (alloca) || defined (_ALLOCA_H)
-#    define YYSTACK_ALLOC alloca
-#   else
-#    ifdef __GNUC__
-#     define YYSTACK_ALLOC __builtin_alloca
-#    endif
-#   endif
-#  endif
-# endif
-
-# ifdef YYSTACK_ALLOC
-   /* Pacify GCC's `empty if-body' warning. */
-#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
-# else
-#  if defined (__STDC__) || defined (__cplusplus)
-#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
-#   define YYSIZE_T size_t
-#  endif
-#  define YYSTACK_ALLOC malloc
-#  define YYSTACK_FREE free
-# endif
-#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */
-
-
-#if (! defined (yyoverflow) \
-     && (! defined (__cplusplus) \
-	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
-
-/* A type that is properly aligned for any stack member.  */
-union yyalloc
-{
-  short yyss;
-  YYSTYPE yyvs;
-# if YYLSP_NEEDED
-  YYLTYPE yyls;
-# endif
-};
-
-/* The size of the maximum gap between one aligned stack and the next.  */
-# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)
-
-/* The size of an array large to enough to hold all stacks, each with
-   N elements.  */
-# if YYLSP_NEEDED
-#  define YYSTACK_BYTES(N) \
-     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
-      + 2 * YYSTACK_GAP_MAX)
-# else
-#  define YYSTACK_BYTES(N) \
-     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
-      + YYSTACK_GAP_MAX)
-# endif
-
-/* Copy COUNT objects from FROM to TO.  The source and destination do
-   not overlap.  */
-# ifndef YYCOPY
-#  if 1 < __GNUC__
-#   define YYCOPY(To, From, Count) \
-      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
-#  else
-#   define YYCOPY(To, From, Count)		\
-      do					\
-	{					\
-	  register YYSIZE_T yyi;		\
-	  for (yyi = 0; yyi < (Count); yyi++)	\
-	    (To)[yyi] = (From)[yyi];		\
-	}					\
-      while (0)
-#  endif
-# endif
-
-/* Relocate STACK from its old location to the new one.  The
-   local variables YYSIZE and YYSTACKSIZE give the old and new number of
-   elements in the stack, and YYPTR gives the new location of the
-   stack.  Advance YYPTR to a properly aligned location for the next
-   stack.  */
-# define YYSTACK_RELOCATE(Stack)					\
-    do									\
-      {									\
-	YYSIZE_T yynewbytes;						\
-	YYCOPY (&yyptr->Stack, Stack, yysize);				\
-	Stack = &yyptr->Stack;						\
-	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
-	yyptr += yynewbytes / sizeof (*yyptr);				\
-      }									\
-    while (0)
-
-#endif
-
-
-#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
-# define YYSIZE_T __SIZE_TYPE__
-#endif
-#if ! defined (YYSIZE_T) && defined (size_t)
-# define YYSIZE_T size_t
-#endif
-#if ! defined (YYSIZE_T)
-# if defined (__STDC__) || defined (__cplusplus)
-#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
-#  define YYSIZE_T size_t
-# endif
-#endif
-#if ! defined (YYSIZE_T)
-# define YYSIZE_T unsigned int
-#endif
-
-#define yyerrok		(yyerrstatus = 0)
-#define yyclearin	(yychar = YYEMPTY)
-#define YYEMPTY		-2
-#define YYEOF		0
-#define YYACCEPT	goto yyacceptlab
-#define YYABORT 	goto yyabortlab
-#define YYERROR		goto yyerrlab1
-/* Like YYERROR except do call yyerror.  This remains here temporarily
-   to ease the transition to the new meaning of YYERROR, for GCC.
-   Once GCC version 2 has supplanted version 1, this can go.  */
-#define YYFAIL		goto yyerrlab
-#define YYRECOVERING()  (!!yyerrstatus)
-#define YYBACKUP(Token, Value)					\
-do								\
-  if (yychar == YYEMPTY && yylen == 1)				\
-    {								\
-      yychar = (Token);						\
-      yylval = (Value);						\
-      yychar1 = YYTRANSLATE (yychar);				\
-      YYPOPSTACK;						\
-      goto yybackup;						\
-    }								\
-  else								\
-    { 								\
-      yyerror ("syntax error: cannot back up");			\
-      YYERROR;							\
-    }								\
-while (0)
-
-#define YYTERROR	1
-#define YYERRCODE	256
-
-
-/* YYLLOC_DEFAULT -- Compute the default location (before the actions
-   are run).
-
-   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
-   first token.  By default, to implement support for ranges, extend
-   its range to the last symbol.  */
-
-#ifndef YYLLOC_DEFAULT
-# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
-   Current.last_line   = Rhs[N].last_line;	\
-   Current.last_column = Rhs[N].last_column;
-#endif
-
-
-/* YYLEX -- calling `yylex' with the right arguments.  */
-
-#if YYPURE
-# if YYLSP_NEEDED
-#  ifdef YYLEX_PARAM
-#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
-#  else
-#   define YYLEX		yylex (&yylval, &yylloc)
-#  endif
-# else /* !YYLSP_NEEDED */
-#  ifdef YYLEX_PARAM
-#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
-#  else
-#   define YYLEX		yylex (&yylval)
-#  endif
-# endif /* !YYLSP_NEEDED */
-#else /* !YYPURE */
-# define YYLEX			yylex ()
-#endif /* !YYPURE */
-
-
-/* Enable debugging if requested.  */
-#if YYDEBUG
-
-# ifndef YYFPRINTF
-#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
-#  define YYFPRINTF fprintf
-# endif
-
-# define YYDPRINTF(Args)			\
-do {						\
-  if (yydebug)					\
-    YYFPRINTF Args;				\
-} while (0)
-/* Nonzero means print parse trace.  It is left uninitialized so that
-   multiple parsers can coexist.  */
-int yydebug;
-#else /* !YYDEBUG */
-# define YYDPRINTF(Args)
-#endif /* !YYDEBUG */
-
-/* YYINITDEPTH -- initial size of the parser's stacks.  */
-#ifndef	YYINITDEPTH
-# define YYINITDEPTH 200
-#endif
-
-/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
-   if the built-in stack extension method is used).
-
-   Do not make this value too large; the results are undefined if
-   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
-   evaluated with infinite-precision integer arithmetic.  */
-
-#if YYMAXDEPTH == 0
-# undef YYMAXDEPTH
-#endif
-
-#ifndef YYMAXDEPTH
-# define YYMAXDEPTH 10000
-#endif
-
-#ifdef YYERROR_VERBOSE
-
-# ifndef yystrlen
-#  if defined (__GLIBC__) && defined (_STRING_H)
-#   define yystrlen strlen
-#  else
-/* Return the length of YYSTR.  */
-static YYSIZE_T
-#   if defined (__STDC__) || defined (__cplusplus)
-yystrlen (const char *yystr)
-#   else
-yystrlen (yystr)
-     const char *yystr;
-#   endif
-{
-  register const char *yys = yystr;
-
-  while (*yys++ != '\0')
-    continue;
-
-  return yys - yystr - 1;
-}
-#  endif
-# endif
-
-# ifndef yystpcpy
-#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
-#   define yystpcpy stpcpy
-#  else
-/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
-   YYDEST.  */
-static char *
-#   if defined (__STDC__) || defined (__cplusplus)
-yystpcpy (char *yydest, const char *yysrc)
-#   else
-yystpcpy (yydest, yysrc)
-     char *yydest;
-     const char *yysrc;
-#   endif
-{
-  register char *yyd = yydest;
-  register const char *yys = yysrc;
-
-  while ((*yyd++ = *yys++) != '\0')
-    continue;
-
-  return yyd - 1;
-}
-#  endif
-# endif
-#endif
-
-
-
-/* The user can define YYPARSE_PARAM as the name of an argument to be passed
-   into yyparse.  The argument should have type void *.
-   It should actually point to an object.
-   Grammar actions can access the variable by casting it
-   to the proper pointer type.  */
-
-#ifdef YYPARSE_PARAM
-# if defined (__STDC__) || defined (__cplusplus)
-#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
-#  define YYPARSE_PARAM_DECL
-# else
-#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
-#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
-# endif
-#else /* !YYPARSE_PARAM */
-# define YYPARSE_PARAM_ARG
-# define YYPARSE_PARAM_DECL
-#endif /* !YYPARSE_PARAM */
-
-/* Prevent warning if -Wstrict-prototypes.  */
-#ifdef __GNUC__
-# ifdef YYPARSE_PARAM
-int yyparse (void *);
-# else
-int yyparse (void);
-# endif
-#endif
-
-/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
-   variables are global, or local to YYPARSE.  */
-
-#define YY_DECL_NON_LSP_VARIABLES			\
-/* The lookahead symbol.  */				\
-int yychar;						\
-							\
-/* The semantic value of the lookahead symbol. */	\
-YYSTYPE yylval;						\
-							\
-/* Number of parse errors so far.  */			\
-int yynerrs;
-
-#if YYLSP_NEEDED
-# define YY_DECL_VARIABLES			\
-YY_DECL_NON_LSP_VARIABLES			\
-						\
-/* Location data for the lookahead symbol.  */	\
-YYLTYPE yylloc;
-#else
-# define YY_DECL_VARIABLES			\
-YY_DECL_NON_LSP_VARIABLES
-#endif
-
-
-/* If nonreentrant, generate the variables here. */
-
-#if !YYPURE
-YY_DECL_VARIABLES
-#endif  /* !YYPURE */
-
-int
-yyparse (YYPARSE_PARAM_ARG)
-     YYPARSE_PARAM_DECL
-{
-  /* If reentrant, generate the variables here. */
-#if YYPURE
-  YY_DECL_VARIABLES
-#endif  /* !YYPURE */
-
-  register int yystate;
-  register int yyn;
-  int yyresult;
-  /* Number of tokens to shift before error messages enabled.  */
-  int yyerrstatus;
-  /* Lookahead token as an internal (translated) token number.  */
-  int yychar1 = 0;
-
-  /* Three stacks and their tools:
-     `yyss': related to states,
-     `yyvs': related to semantic values,
-     `yyls': related to locations.
-
-     Refer to the stacks thru separate pointers, to allow yyoverflow
-     to reallocate them elsewhere.  */
-
-  /* The state stack. */
-  short	yyssa[YYINITDEPTH];
-  short *yyss = yyssa;
-  register short *yyssp;
-
-  /* The semantic value stack.  */
-  YYSTYPE yyvsa[YYINITDEPTH];
-  YYSTYPE *yyvs = yyvsa;
-  register YYSTYPE *yyvsp;
-
-#if YYLSP_NEEDED
-  /* The location stack.  */
-  YYLTYPE yylsa[YYINITDEPTH];
-  YYLTYPE *yyls = yylsa;
-  YYLTYPE *yylsp;
-#endif
-
-#if YYLSP_NEEDED
-# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
-#else
-# define YYPOPSTACK   (yyvsp--, yyssp--)
-#endif
-
-  YYSIZE_T yystacksize = YYINITDEPTH;
-
-
-  /* The variables used to return semantic value and location from the
-     action routines.  */
-  YYSTYPE yyval;
-#if YYLSP_NEEDED
-  YYLTYPE yyloc;
-#endif
-
-  /* When reducing, the number of symbols on the RHS of the reduced
-     rule. */
-  int yylen;
-
-  YYDPRINTF ((stderr, "Starting parse\n"));
-
-  yystate = 0;
-  yyerrstatus = 0;
-  yynerrs = 0;
-  yychar = YYEMPTY;		/* Cause a token to be read.  */
-
-  /* Initialize stack pointers.
-     Waste one element of value and location stack
-     so that they stay on the same level as the state stack.
-     The wasted elements are never initialized.  */
-
-  yyssp = yyss;
-  yyvsp = yyvs;
-#if YYLSP_NEEDED
-  yylsp = yyls;
-#endif
-  goto yysetstate;
-
-/*------------------------------------------------------------.
-| yynewstate -- Push a new state, which is found in yystate.  |
-`------------------------------------------------------------*/
- yynewstate:
-  /* In all cases, when you get here, the value and location stacks
-     have just been pushed. so pushing a state here evens the stacks.
-     */
-  yyssp++;
-
- yysetstate:
-  *yyssp = yystate;
-
-  if (yyssp >= yyss + yystacksize - 1)
-    {
-      /* Get the current used size of the three stacks, in elements.  */
-      YYSIZE_T yysize = yyssp - yyss + 1;
-
-#ifdef yyoverflow
-      {
-	/* Give user a chance to reallocate the stack. Use copies of
-	   these so that the &'s don't force the real ones into
-	   memory.  */
-	YYSTYPE *yyvs1 = yyvs;
-	short *yyss1 = yyss;
-
-	/* Each stack pointer address is followed by the size of the
-	   data in use in that stack, in bytes.  */
-# if YYLSP_NEEDED
-	YYLTYPE *yyls1 = yyls;
-	/* This used to be a conditional around just the two extra args,
-	   but that might be undefined if yyoverflow is a macro.  */
-	yyoverflow ("parser stack overflow",
-		    &yyss1, yysize * sizeof (*yyssp),
-		    &yyvs1, yysize * sizeof (*yyvsp),
-		    &yyls1, yysize * sizeof (*yylsp),
-		    &yystacksize);
-	yyls = yyls1;
-# else
-	yyoverflow ("parser stack overflow",
-		    &yyss1, yysize * sizeof (*yyssp),
-		    &yyvs1, yysize * sizeof (*yyvsp),
-		    &yystacksize);
-# endif
-	yyss = yyss1;
-	yyvs = yyvs1;
-      }
-#else /* no yyoverflow */
-# ifndef YYSTACK_RELOCATE
-      goto yyoverflowlab;
-# else
-      /* Extend the stack our own way.  */
-      if (yystacksize >= YYMAXDEPTH)
-	goto yyoverflowlab;
-      yystacksize *= 2;
-      if (yystacksize > YYMAXDEPTH)
-	yystacksize = YYMAXDEPTH;
-
-      {
-	short *yyss1 = yyss;
-	union yyalloc *yyptr =
-	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
-	if (! yyptr)
-	  goto yyoverflowlab;
-	YYSTACK_RELOCATE (yyss);
-	YYSTACK_RELOCATE (yyvs);
-# if YYLSP_NEEDED
-	YYSTACK_RELOCATE (yyls);
-# endif
-# undef YYSTACK_RELOCATE
-	if (yyss1 != yyssa)
-	  YYSTACK_FREE (yyss1);
-      }
-# endif
-#endif /* no yyoverflow */
-
-      yyssp = yyss + yysize - 1;
-      yyvsp = yyvs + yysize - 1;
-#if YYLSP_NEEDED
-      yylsp = yyls + yysize - 1;
-#endif
-
-      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
-		  (unsigned long int) yystacksize));
-
-      if (yyssp >= yyss + yystacksize - 1)
-	YYABORT;
-    }
-
-  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
-
-  goto yybackup;
-
-
-/*-----------.
-| yybackup.  |
-`-----------*/
-yybackup:
-
-/* Do appropriate processing given the current state.  */
-/* Read a lookahead token if we need one and don't already have one.  */
-/* yyresume: */
-
-  /* First try to decide what to do without reference to lookahead token.  */
-
-  yyn = yypact[yystate];
-  if (yyn == YYFLAG)
-    goto yydefault;
-
-  /* Not known => get a lookahead token if don't already have one.  */
-
-  /* yychar is either YYEMPTY or YYEOF
-     or a valid token in external form.  */
-
-  if (yychar == YYEMPTY)
-    {
-      YYDPRINTF ((stderr, "Reading a token: "));
-      yychar = YYLEX;
-    }
-
-  /* Convert token to internal form (in yychar1) for indexing tables with */
-
-  if (yychar <= 0)		/* This means end of input. */
-    {
-      yychar1 = 0;
-      yychar = YYEOF;		/* Don't call YYLEX any more */
-
-      YYDPRINTF ((stderr, "Now at end of input.\n"));
-    }
-  else
-    {
-      yychar1 = YYTRANSLATE (yychar);
-
-#if YYDEBUG
-     /* We have to keep this `#if YYDEBUG', since we use variables
-	which are defined only if `YYDEBUG' is set.  */
-      if (yydebug)
-	{
-	  YYFPRINTF (stderr, "Next token is %d (%s",
-		     yychar, yytname[yychar1]);
-	  /* Give the individual parser a way to print the precise
-	     meaning of a token, for further debugging info.  */
-# ifdef YYPRINT
-	  YYPRINT (stderr, yychar, yylval);
-# endif
-	  YYFPRINTF (stderr, ")\n");
-	}
-#endif
-    }
-
-  yyn += yychar1;
-  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
-    goto yydefault;
-
-  yyn = yytable[yyn];
-
-  /* yyn is what to do for this token type in this state.
-     Negative => reduce, -yyn is rule number.
-     Positive => shift, yyn is new state.
-       New state is final state => don't bother to shift,
-       just return success.
-     0, or most negative number => error.  */
-
-  if (yyn < 0)
-    {
-      if (yyn == YYFLAG)
-	goto yyerrlab;
-      yyn = -yyn;
-      goto yyreduce;
-    }
-  else if (yyn == 0)
-    goto yyerrlab;
-
-  if (yyn == YYFINAL)
-    YYACCEPT;
-
-  /* Shift the lookahead token.  */
-  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
-	      yychar, yytname[yychar1]));
-
-  /* Discard the token being shifted unless it is eof.  */
-  if (yychar != YYEOF)
-    yychar = YYEMPTY;
-
-  *++yyvsp = yylval;
-#if YYLSP_NEEDED
-  *++yylsp = yylloc;
-#endif
-
-  /* Count tokens shifted since error; after three, turn off error
-     status.  */
-  if (yyerrstatus)
-    yyerrstatus--;
-
-  yystate = yyn;
-  goto yynewstate;
-
-
-/*-----------------------------------------------------------.
-| yydefault -- do the default action for the current state.  |
-`-----------------------------------------------------------*/
-yydefault:
-  yyn = yydefact[yystate];
-  if (yyn == 0)
-    goto yyerrlab;
-  goto yyreduce;
-
-
-/*-----------------------------.
-| yyreduce -- Do a reduction.  |
-`-----------------------------*/
-yyreduce:
-  /* yyn is the number of a rule to reduce with.  */
-  yylen = yyr2[yyn];
-
-  /* If YYLEN is nonzero, implement the default value of the action:
-     `$$ = $1'.
-
-     Otherwise, the following line sets YYVAL to the semantic value of
-     the lookahead token.  This behavior is undocumented and Bison
-     users should not rely upon it.  Assigning to YYVAL
-     unconditionally makes the parser a bit smaller, and it avoids a
-     GCC warning that YYVAL may be used uninitialized.  */
-  yyval = yyvsp[1-yylen];
-
-#if YYLSP_NEEDED
-  /* Similarly for the default location.  Let the user run additional
-     commands if for instance locations are ranges.  */
-  yyloc = yylsp[1-yylen];
-  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
-#endif
-
-#if YYDEBUG
-  /* We have to keep this `#if YYDEBUG', since we use variables which
-     are defined only if `YYDEBUG' is set.  */
-  if (yydebug)
-    {
-      int yyi;
-
-      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
-		 yyn, yyrline[yyn]);
-
-      /* Print the symbols being reduced, and their result.  */
-      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
-	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
-      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
-    }
-#endif
-
-  switch (yyn) {
-
-case 3:
-{
-#if DEBUG_CFG_PARSER
-			printf("'%s' = '%s'\n", yyvsp[-2].value.str.val, yyvsp[0].value.str.val);
-#endif
-			ZEND_INI_PARSER_CB(&yyvsp[-2], &yyvsp[0], ZEND_INI_PARSER_ENTRY, ZEND_INI_PARSER_ARG);
-			free(yyvsp[-2].value.str.val);
-			free(yyvsp[0].value.str.val);
-		}
-    break;
-case 4:
-{ ZEND_INI_PARSER_CB(&yyvsp[0], NULL, ZEND_INI_PARSER_ENTRY, ZEND_INI_PARSER_ARG); free(yyvsp[0].value.str.val); }
-    break;
-case 5:
-{ ZEND_INI_PARSER_CB(&yyvsp[0], NULL, ZEND_INI_PARSER_SECTION, ZEND_INI_PARSER_ARG); free(yyvsp[0].value.str.val); }
-    break;
-case 7:
-{ yyval = yyvsp[0]; }
-    break;
-case 8:
-{ yyval = yyvsp[0]; }
-    break;
-case 9:
-{ yyval = yyvsp[0]; }
-    break;
-case 10:
-{ yyval = yyvsp[0]; }
-    break;
-case 11:
-{ yyval.value.str.val = strdup(""); yyval.value.str.len=0; yyval.type = IS_STRING; }
-    break;
-case 12:
-{ yyval.value.str.val = strdup(""); yyval.value.str.len=0; yyval.type = IS_STRING; }
-    break;
-case 13:
-{ yyval = yyvsp[0]; }
-    break;
-case 14:
-{ zend_ini_do_op('|', &yyval, &yyvsp[-2], &yyvsp[0]); }
-    break;
-case 15:
-{ zend_ini_do_op('&', &yyval, &yyvsp[-2], &yyvsp[0]); }
-    break;
-case 16:
-{ zend_ini_do_op('~', &yyval, &yyvsp[0], NULL); }
-    break;
-case 17:
-{ zend_ini_do_op('!', &yyval, &yyvsp[0], NULL); }
-    break;
-case 18:
-{ yyval = yyvsp[-1]; }
-    break;
-case 19:
-{ zend_ini_get_constant(&yyval, &yyvsp[0]); }
-    break;
-}
-
-
-
-  yyvsp -= yylen;
-  yyssp -= yylen;
-#if YYLSP_NEEDED
-  yylsp -= yylen;
-#endif
-
-#if YYDEBUG
-  if (yydebug)
-    {
-      short *yyssp1 = yyss - 1;
-      YYFPRINTF (stderr, "state stack now");
-      while (yyssp1 != yyssp)
-	YYFPRINTF (stderr, " %d", *++yyssp1);
-      YYFPRINTF (stderr, "\n");
-    }
-#endif
-
-  *++yyvsp = yyval;
-#if YYLSP_NEEDED
-  *++yylsp = yyloc;
-#endif
-
-  /* Now `shift' the result of the reduction.  Determine what state
-     that goes to, based on the state we popped back to and the rule
-     number reduced by.  */
-
-  yyn = yyr1[yyn];
-
-  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
-  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
-    yystate = yytable[yystate];
-  else
-    yystate = yydefgoto[yyn - YYNTBASE];
-
-  goto yynewstate;
-
-
-/*------------------------------------.
-| yyerrlab -- here on detecting error |
-`------------------------------------*/
-yyerrlab:
-  /* If not already recovering from an error, report this error.  */
-  if (!yyerrstatus)
-    {
-      ++yynerrs;
-
-#ifdef YYERROR_VERBOSE
-      yyn = yypact[yystate];
-
-      if (yyn > YYFLAG && yyn < YYLAST)
-	{
-	  YYSIZE_T yysize = 0;
-	  char *yymsg;
-	  int yyx, yycount;
-
-	  yycount = 0;
-	  /* Start YYX at -YYN if negative to avoid negative indexes in
-	     YYCHECK.  */
-	  for (yyx = yyn < 0 ? -yyn : 0;
-	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
-	    if (yycheck[yyx + yyn] == yyx)
-	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
-	  yysize += yystrlen ("parse error, unexpected ") + 1;
-	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
-	  yymsg = (char *) YYSTACK_ALLOC (yysize);
-	  if (yymsg != 0)
-	    {
-	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
-	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);
-
-	      if (yycount < 5)
-		{
-		  yycount = 0;
-		  for (yyx = yyn < 0 ? -yyn : 0;
-		       yyx < (int) (sizeof (yytname) / sizeof (char *));
-		       yyx++)
-		    if (yycheck[yyx + yyn] == yyx)
-		      {
-			const char *yyq = ! yycount ? ", expecting " : " or ";
-			yyp = yystpcpy (yyp, yyq);
-			yyp = yystpcpy (yyp, yytname[yyx]);
-			yycount++;
-		      }
-		}
-	      yyerror (yymsg);
-	      YYSTACK_FREE (yymsg);
-	    }
-	  else
-	    yyerror ("parse error; also virtual memory exhausted");
-	}
-      else
-#endif /* defined (YYERROR_VERBOSE) */
-	yyerror ("parse error");
-    }
-  goto yyerrlab1;
-
-
-/*--------------------------------------------------.
-| yyerrlab1 -- error raised explicitly by an action |
-`--------------------------------------------------*/
-yyerrlab1:
-  if (yyerrstatus == 3)
-    {
-      /* If just tried and failed to reuse lookahead token after an
-	 error, discard it.  */
-
-      /* return failure if at end of input */
-      if (yychar == YYEOF)
-	YYABORT;
-      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
-		  yychar, yytname[yychar1]));
-      yychar = YYEMPTY;
-    }
-
-  /* Else will try to reuse lookahead token after shifting the error
-     token.  */
-
-  yyerrstatus = 3;		/* Each real token shifted decrements this */
-
-  goto yyerrhandle;
-
-
-/*-------------------------------------------------------------------.
-| yyerrdefault -- current state does not do anything special for the |
-| error token.                                                       |
-`-------------------------------------------------------------------*/
-yyerrdefault:
-#if 0
-  /* This is wrong; only states that explicitly want error tokens
-     should shift them.  */
-
-  /* If its default is to accept any token, ok.  Otherwise pop it.  */
-  yyn = yydefact[yystate];
-  if (yyn)
-    goto yydefault;
-#endif
-
-
-/*---------------------------------------------------------------.
-| yyerrpop -- pop the current state because it cannot handle the |
-| error token                                                    |
-`---------------------------------------------------------------*/
-yyerrpop:
-  if (yyssp == yyss)
-    YYABORT;
-  yyvsp--;
-  yystate = *--yyssp;
-#if YYLSP_NEEDED
-  yylsp--;
-#endif
-
-#if YYDEBUG
-  if (yydebug)
-    {
-      short *yyssp1 = yyss - 1;
-      YYFPRINTF (stderr, "Error: state stack now");
-      while (yyssp1 != yyssp)
-	YYFPRINTF (stderr, " %d", *++yyssp1);
-      YYFPRINTF (stderr, "\n");
-    }
-#endif
-
-/*--------------.
-| yyerrhandle.  |
-`--------------*/
-yyerrhandle:
-  yyn = yypact[yystate];
-  if (yyn == YYFLAG)
-    goto yyerrdefault;
-
-  yyn += YYTERROR;
-  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
-    goto yyerrdefault;
-
-  yyn = yytable[yyn];
-  if (yyn < 0)
-    {
-      if (yyn == YYFLAG)
-	goto yyerrpop;
-      yyn = -yyn;
-      goto yyreduce;
-    }
-  else if (yyn == 0)
-    goto yyerrpop;
-
-  if (yyn == YYFINAL)
-    YYACCEPT;
-
-  YYDPRINTF ((stderr, "Shifting error token, "));
-
-  *++yyvsp = yylval;
-#if YYLSP_NEEDED
-  *++yylsp = yylloc;
-#endif
-
-  yystate = yyn;
-  goto yynewstate;
-
-
-/*-------------------------------------.
-| yyacceptlab -- YYACCEPT comes here.  |
-`-------------------------------------*/
-yyacceptlab:
-  yyresult = 0;
-  goto yyreturn;
-
-/*-----------------------------------.
-| yyabortlab -- YYABORT comes here.  |
-`-----------------------------------*/
-yyabortlab:
-  yyresult = 1;
-  goto yyreturn;
-
-/*---------------------------------------------.
-| yyoverflowab -- parser overflow comes here.  |
-`---------------------------------------------*/
-yyoverflowlab:
-  yyerror ("parser stack overflow");
-  yyresult = 2;
-  /* Fall through.  */
-
-yyreturn:
-#ifndef yyoverflow
-  if (yyss != yyssa)
-    YYSTACK_FREE (yyss);
-#endif
-  return yyresult;
-}
+
+/*  A Bison parser, made from zend_ini_parser.y
+ by  GNU Bison version 1.27
+  */
+
+#define YYBISON 1  /* Identify Bison output.  */
+
+#define yyparse ini_parse
+#define yylex ini_lex
+#define yyerror ini_error
+#define yylval ini_lval
+#define yychar ini_char
+#define yydebug ini_debug
+#define yynerrs ini_nerrs
+#define	TC_STRING	257
+#define	TC_ENCAPSULATED_STRING	258
+#define	SECTION	259
+#define	CFG_TRUE	260
+#define	CFG_FALSE	261
+
+#line 1 "zend_ini_parser.y"
+
+/*
+   +----------------------------------------------------------------------+
+   | Zend Engine                                                          |
+   +----------------------------------------------------------------------+
+   | Copyright (c) 1998-2002 Zend Technologies Ltd. (http://www.zend.com) |
+   +----------------------------------------------------------------------+
+   | This source file is subject to version 2.00 of the Zend license,     |
+   | that is bundled with this package in the file LICENSE, and is        |
+   | available at through the world-wide-web at                           |
+   | http://www.zend.com/license/2_00.txt.                                |
+   | If you did not receive a copy of the Zend license and are unable to  |
+   | obtain it through the world-wide-web, please send a note to          |
+   | license@zend.com so we can mail you a copy immediately.              |
+   +----------------------------------------------------------------------+
+   | Author: Zeev Suraski <zeev@zend.com>                                 |
+   +----------------------------------------------------------------------+
+*/
+
+
+/* $Id: zend_ini_parser.y,v 1.18.2.8 2003/10/17 02:48:24 iliaa Exp $ */
+
+#define DEBUG_CFG_PARSER 0
+#include "zend.h"
+#include "zend_API.h"
+#include "zend_ini.h"
+#include "zend_constants.h"
+#include "zend_ini_scanner.h"
+#include "zend_extensions.h"
+
+
+#if WIN32
+#define WIN32_LEAN_AND_MEAN
+#include <windows.h>
+#include <winbase.h>
+#endif
+
+#define YYSTYPE zval
+
+#ifdef ZTS
+#define YYPARSE_PARAM tsrm_ls
+#define YYLEX_PARAM tsrm_ls
+#endif
+
+#define ZEND_INI_PARSER_CB	(CG(ini_parser_param))->ini_parser_cb
+#define ZEND_INI_PARSER_ARG	(CG(ini_parser_param))->arg
+
+int ini_lex(zval *ini_lval TSRMLS_DC);
+#ifdef ZTS
+int ini_parse(void *arg);
+#else
+int ini_parse(void);
+#endif
+
+zval yylval;
+
+#ifndef ZTS
+extern int ini_lex(zval *ini_lval TSRMLS_DC);
+extern FILE *ini_in;
+extern void init_cfg_scanner(void);
+#endif
+
+void zend_ini_do_op(char type, zval *result, zval *op1, zval *op2)
+{
+	int i_result;
+	int i_op1, i_op2;
+	char str_result[MAX_LENGTH_OF_LONG];
+
+	i_op1 = atoi(op1->value.str.val);
+	free(op1->value.str.val);
+	if (op2) {
+		i_op2 = atoi(op2->value.str.val);
+		free(op2->value.str.val);
+	} else {
+		i_op2 = 0;
+	}
+
+	switch (type) {
+		case '|':
+			i_result = i_op1 | i_op2;
+			break;
+		case '&':
+			i_result = i_op1 & i_op2;
+			break;
+		case '~':
+			i_result = ~i_op1;
+			break;
+		case '!':
+			i_result = !i_op1;
+			break;
+		default:
+			i_result = 0;
+			break;
+	}
+
+	result->value.str.len = zend_sprintf(str_result, "%d", i_result);
+	result->value.str.val = (char *) malloc(result->value.str.len+1);
+	memcpy(result->value.str.val, str_result, result->value.str.len);
+	result->value.str.val[result->value.str.len] = 0;
+	result->type = IS_STRING;
+}
+
+
+void zend_ini_get_constant(zval *result, zval *name)
+{
+	zval z_constant;
+	TSRMLS_FETCH();
+
+	if (zend_get_constant(name->value.str.val, name->value.str.len, &z_constant TSRMLS_CC)) {
+		/* z_constant is emalloc()'d */
+		convert_to_string(&z_constant);
+		result->value.str.val = zend_strndup(z_constant.value.str.val, z_constant.value.str.len);
+		result->value.str.len = z_constant.value.str.len;
+		result->type = z_constant.type;
+		zval_dtor(&z_constant);
+		free(name->value.str.val);	
+	} else {
+		*result = *name;
+	}
+}
+
+
+static void ini_error(char *str)
+{
+	char *error_buf;
+	int error_buf_len;
+	char *currently_parsed_filename;
+	TSRMLS_FETCH();
+
+	currently_parsed_filename = zend_ini_scanner_get_filename(TSRMLS_C);
+	error_buf_len = 128+strlen(currently_parsed_filename); /* should be more than enough */
+	error_buf = (char *) emalloc(error_buf_len);
+
+	sprintf(error_buf, "Error parsing %s on line %d\n", currently_parsed_filename, zend_ini_scanner_get_lineno(TSRMLS_C));
+
+	if (CG(ini_parser_unbuffered_errors)) {
+#ifdef PHP_WIN32
+		MessageBox(NULL, error_buf, "PHP Error", MB_OK|MB_TOPMOST|0x00200000L);
+#else
+		fprintf(stderr, "PHP:  %s", error_buf);
+#endif
+	} else {
+		zend_error(E_WARNING, "%s", error_buf);
+	}
+	efree(error_buf);
+}
+
+
+ZEND_API int zend_parse_ini_file(zend_file_handle *fh, zend_bool unbuffered_errors, zend_ini_parser_cb_t ini_parser_cb, void *arg)
+{
+	int retval;
+	zend_ini_parser_param ini_parser_param;
+	TSRMLS_FETCH();
+
+	ini_parser_param.ini_parser_cb = ini_parser_cb;
+	ini_parser_param.arg = arg;
+
+	CG(ini_parser_param) = &ini_parser_param;
+	if (zend_ini_open_file_for_scanning(fh TSRMLS_CC)==FAILURE) {
+		return FAILURE;
+	}
+
+	CG(ini_parser_unbuffered_errors) = unbuffered_errors;
+	retval = ini_parse(TSRMLS_C);
+
+	zend_ini_close_file(fh TSRMLS_CC);
+
+	if (retval==0) {
+		return SUCCESS;
+	} else {
+		return FAILURE;
+	}
+}
+
+
+#ifndef YYSTYPE
+#define YYSTYPE int
+#endif
+#include <stdio.h>
+
+#ifndef __cplusplus
+#ifndef __STDC__
+#define const
+#endif
+#endif
+
+
+
+#define	YYFINAL		27
+#define	YYFLAG		-32768
+#define	YYNTBASE	16
+
+#define YYTRANSLATE(x) ((unsigned)(x) <= 261 ? yytranslate[x] : 21)
+
+static const char yytranslate[] = {     0,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,    13,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,    11,     2,     2,     2,     2,     9,     2,    14,
+    15,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+    12,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     8,     2,    10,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
+     7
+};
+
+#if YYDEBUG != 0
+static const short yyprhs[] = {     0,
+     0,     3,     4,     8,    10,    12,    14,    16,    18,    20,
+    22,    24,    25,    27,    31,    35,    38,    41,    45
+};
+
+static const short yyrhs[] = {    16,
+    17,     0,     0,     3,    12,    18,     0,     3,     0,     5,
+     0,    13,     0,    19,     0,     4,     0,     6,     0,     7,
+     0,    13,     0,     0,    20,     0,    19,     8,    19,     0,
+    19,     9,    19,     0,    10,    19,     0,    11,    19,     0,
+    14,    19,    15,     0,     3,     0
+};
+
+#endif
+
+#if YYDEBUG != 0
+static const short yyrline[] = { 0,
+   189,   191,   194,   203,   204,   205,   209,   211,   212,   213,
+   214,   215,   218,   220,   221,   222,   223,   224,   227
+};
+#endif
+
+
+#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)
+
+static const char * const yytname[] = {   "$","error","$undefined.","TC_STRING",
+"TC_ENCAPSULATED_STRING","SECTION","CFG_TRUE","CFG_FALSE","'|'","'&'","'~'",
+"'!'","'='","'\\n'","'('","')'","statement_list","statement","string_or_value",
+"expr","constant_string", NULL
+};
+#endif
+
+static const short yyr1[] = {     0,
+    16,    16,    17,    17,    17,    17,    18,    18,    18,    18,
+    18,    18,    19,    19,    19,    19,    19,    19,    20
+};
+
+static const short yyr2[] = {     0,
+     2,     0,     3,     1,     1,     1,     1,     1,     1,     1,
+     1,     0,     1,     3,     3,     2,     2,     3,     1
+};
+
+static const short yydefact[] = {     2,
+     0,     4,     5,     6,     1,    12,    19,     8,     9,    10,
+     0,     0,    11,     0,     3,     7,    13,    16,    17,     0,
+     0,     0,    18,    14,    15,     0,     0
+};
+
+static const short yydefgoto[] = {     1,
+     5,    15,    16,    17
+};
+
+static const short yypact[] = {-32768,
+     0,    -8,-32768,-32768,-32768,     4,-32768,-32768,-32768,-32768,
+    13,    13,-32768,    13,-32768,    -7,-32768,-32768,-32768,    17,
+    13,    13,-32768,-32768,-32768,     6,-32768
+};
+
+static const short yypgoto[] = {-32768,
+-32768,-32768,     8,-32768
+};
+
+
+#define	YYLAST		32
+
+
+static const short yytable[] = {    26,
+    21,    22,     2,     6,     3,    27,     7,     8,     0,     9,
+    10,     0,     4,    11,    12,     7,    13,    14,    18,    19,
+     0,    20,    11,    12,    21,    22,    14,     0,    24,    25,
+     0,    23
+};
+
+static const short yycheck[] = {     0,
+     8,     9,     3,    12,     5,     0,     3,     4,    -1,     6,
+     7,    -1,    13,    10,    11,     3,    13,    14,    11,    12,
+    -1,    14,    10,    11,     8,     9,    14,    -1,    21,    22,
+    -1,    15
+};
+#define YYPURE 1
+
+/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
+#line 3 "bison.simple"
+/* This file comes from bison-1.27.  */
+
+/* Skeleton output parser for bison,
+   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
+
+/* As a special exception, when this file is copied by Bison into a
+   Bison output file, you may use that output file without restriction.
+   This special exception was added by the Free Software Foundation
+   in version 1.24 of Bison.  */
+
+/* This is the parser code that is written into each bison parser
+  when the %semantic_parser declaration is not specified in the grammar.
+  It was written by Richard Stallman by simplifying the hairy parser
+  used when %semantic_parser is specified.  */
+
+#ifndef YYSTACK_USE_ALLOCA
+#ifdef alloca
+#define YYSTACK_USE_ALLOCA
+#else /* alloca not defined */
+#ifdef __GNUC__
+#define YYSTACK_USE_ALLOCA
+#define alloca __builtin_alloca
+#else /* not GNU C.  */
+#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
+#define YYSTACK_USE_ALLOCA
+#include <alloca.h>
+#else /* not sparc */
+/* We think this test detects Watcom and Microsoft C.  */
+/* This used to test MSDOS, but that is a bad idea
+   since that symbol is in the user namespace.  */
+#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
+#if 0 /* No need for malloc.h, which pollutes the namespace;
+	 instead, just don't use alloca.  */
+#include <malloc.h>
+#endif
+#else /* not MSDOS, or __TURBOC__ */
+#if defined(_AIX)
+/* I don't know what this was needed for, but it pollutes the namespace.
+   So I turned it off.   rms, 2 May 1997.  */
+/* #include <malloc.h>  */
+ #pragma alloca
+#define YYSTACK_USE_ALLOCA
+#else /* not MSDOS, or __TURBOC__, or _AIX */
+#if 0
+#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
+		 and on HPUX 10.  Eventually we can turn this on.  */
+#define YYSTACK_USE_ALLOCA
+#define alloca __builtin_alloca
+#endif /* __hpux */
+#endif
+#endif /* not _AIX */
+#endif /* not MSDOS, or __TURBOC__ */
+#endif /* not sparc */
+#endif /* not GNU C */
+#endif /* alloca not defined */
+#endif /* YYSTACK_USE_ALLOCA not defined */
+
+#ifdef YYSTACK_USE_ALLOCA
+#define YYSTACK_ALLOC alloca
+#else
+#define YYSTACK_ALLOC malloc
+#endif
+
+/* Note: there must be only one dollar sign in this file.
+   It is replaced by the list of actions, each action
+   as one case of the switch.  */
+
+#define yyerrok		(yyerrstatus = 0)
+#define yyclearin	(yychar = YYEMPTY)
+#define YYEMPTY		-2
+#define YYEOF		0
+#define YYACCEPT	goto yyacceptlab
+#define YYABORT 	goto yyabortlab
+#define YYERROR		goto yyerrlab1
+/* Like YYERROR except do call yyerror.
+   This remains here temporarily to ease the
+   transition to the new meaning of YYERROR, for GCC.
+   Once GCC version 2 has supplanted version 1, this can go.  */
+#define YYFAIL		goto yyerrlab
+#define YYRECOVERING()  (!!yyerrstatus)
+#define YYBACKUP(token, value) \
+do								\
+  if (yychar == YYEMPTY && yylen == 1)				\
+    { yychar = (token), yylval = (value);			\
+      yychar1 = YYTRANSLATE (yychar);				\
+      YYPOPSTACK;						\
+      goto yybackup;						\
+    }								\
+  else								\
+    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
+while (0)
+
+#define YYTERROR	1
+#define YYERRCODE	256
+
+#ifndef YYPURE
+#define YYLEX		yylex()
+#endif
+
+#ifdef YYPURE
+#ifdef YYLSP_NEEDED
+#ifdef YYLEX_PARAM
+#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
+#else
+#define YYLEX		yylex(&yylval, &yylloc)
+#endif
+#else /* not YYLSP_NEEDED */
+#ifdef YYLEX_PARAM
+#define YYLEX		yylex(&yylval, YYLEX_PARAM)
+#else
+#define YYLEX		yylex(&yylval)
+#endif
+#endif /* not YYLSP_NEEDED */
+#endif
+
+/* If nonreentrant, generate the variables here */
+
+#ifndef YYPURE
+
+int	yychar;			/*  the lookahead symbol		*/
+YYSTYPE	yylval;			/*  the semantic value of the		*/
+				/*  lookahead symbol			*/
+
+#ifdef YYLSP_NEEDED
+YYLTYPE yylloc;			/*  location data for the lookahead	*/
+				/*  symbol				*/
+#endif
+
+int yynerrs;			/*  number of parse errors so far       */
+#endif  /* not YYPURE */
+
+#if YYDEBUG != 0
+int yydebug;			/*  nonzero means print parse trace	*/
+/* Since this is uninitialized, it does not stop multiple parsers
+   from coexisting.  */
+#endif
+
+/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/
+
+#ifndef	YYINITDEPTH
+#define YYINITDEPTH 200
+#endif
+
+/*  YYMAXDEPTH is the maximum size the stacks can grow to
+    (effective only if the built-in stack extension method is used).  */
+
+#if YYMAXDEPTH == 0
+#undef YYMAXDEPTH
+#endif
+
+#ifndef YYMAXDEPTH
+#define YYMAXDEPTH 10000
+#endif
+
+/* Define __yy_memcpy.  Note that the size argument
+   should be passed with type unsigned int, because that is what the non-GCC
+   definitions require.  With GCC, __builtin_memcpy takes an arg
+   of type size_t, but it can handle unsigned int.  */
+
+#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
+#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
+#else				/* not GNU C or C++ */
+#ifndef __cplusplus
+
+/* This is the most reliable way to avoid incompatibilities
+   in available built-in functions on various systems.  */
+static void
+__yy_memcpy (to, from, count)
+     char *to;
+     char *from;
+     unsigned int count;
+{
+  register char *f = from;
+  register char *t = to;
+  register int i = count;
+
+  while (i-- > 0)
+    *t++ = *f++;
+}
+
+#else /* __cplusplus */
+
+/* This is the most reliable way to avoid incompatibilities
+   in available built-in functions on various systems.  */
+static void
+__yy_memcpy (char *to, char *from, unsigned int count)
+{
+  register char *t = to;
+  register char *f = from;
+  register int i = count;
+
+  while (i-- > 0)
+    *t++ = *f++;
+}
+
+#endif
+#endif
+
+#line 216 "bison.simple"
+
+/* The user can define YYPARSE_PARAM as the name of an argument to be passed
+   into yyparse.  The argument should have type void *.
+   It should actually point to an object.
+   Grammar actions can access the variable by casting it
+   to the proper pointer type.  */
+
+#ifdef YYPARSE_PARAM
+#ifdef __cplusplus
+#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
+#define YYPARSE_PARAM_DECL
+#else /* not __cplusplus */
+#define YYPARSE_PARAM_ARG YYPARSE_PARAM
+#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
+#endif /* not __cplusplus */
+#else /* not YYPARSE_PARAM */
+#define YYPARSE_PARAM_ARG
+#define YYPARSE_PARAM_DECL
+#endif /* not YYPARSE_PARAM */
+
+/* Prevent warning if -Wstrict-prototypes.  */
+#ifdef __GNUC__
+#ifdef YYPARSE_PARAM
+int yyparse (void *);
+#else
+int yyparse (void);
+#endif
+#endif
+
+int
+yyparse(YYPARSE_PARAM_ARG)
+     YYPARSE_PARAM_DECL
+{
+  register int yystate;
+  register int yyn;
+  register short *yyssp;
+  register YYSTYPE *yyvsp;
+  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
+  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */
+
+  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
+  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/
+
+  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
+  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */
+
+#ifdef YYLSP_NEEDED
+  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
+  YYLTYPE *yyls = yylsa;
+  YYLTYPE *yylsp;
+
+#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
+#else
+#define YYPOPSTACK   (yyvsp--, yyssp--)
+#endif
+
+  int yystacksize = YYINITDEPTH;
+  int yyfree_stacks = 0;
+
+#ifdef YYPURE
+  int yychar;
+  YYSTYPE yylval;
+  int yynerrs;
+#ifdef YYLSP_NEEDED
+  YYLTYPE yylloc;
+#endif
+#endif
+
+  YYSTYPE yyval;		/*  the variable used to return		*/
+				/*  semantic values from the action	*/
+				/*  routines				*/
+
+  int yylen;
+
+#if YYDEBUG != 0
+  if (yydebug)
+    fprintf(stderr, "Starting parse\n");
+#endif
+
+  yystate = 0;
+  yyerrstatus = 0;
+  yynerrs = 0;
+  yychar = YYEMPTY;		/* Cause a token to be read.  */
+
+  /* Initialize stack pointers.
+     Waste one element of value and location stack
+     so that they stay on the same level as the state stack.
+     The wasted elements are never initialized.  */
+
+  yyssp = yyss - 1;
+  yyvsp = yyvs;
+#ifdef YYLSP_NEEDED
+  yylsp = yyls;
+#endif
+
+/* Push a new state, which is found in  yystate  .  */
+/* In all cases, when you get here, the value and location stacks
+   have just been pushed. so pushing a state here evens the stacks.  */
+yynewstate:
+
+  *++yyssp = yystate;
+
+  if (yyssp >= yyss + yystacksize - 1)
+    {
+      /* Give user a chance to reallocate the stack */
+      /* Use copies of these so that the &'s don't force the real ones into memory. */
+      YYSTYPE *yyvs1 = yyvs;
+      short *yyss1 = yyss;
+#ifdef YYLSP_NEEDED
+      YYLTYPE *yyls1 = yyls;
+#endif
+
+      /* Get the current used size of the three stacks, in elements.  */
+      int size = yyssp - yyss + 1;
+
+#ifdef yyoverflow
+      /* Each stack pointer address is followed by the size of
+	 the data in use in that stack, in bytes.  */
+#ifdef YYLSP_NEEDED
+      /* This used to be a conditional around just the two extra args,
+	 but that might be undefined if yyoverflow is a macro.  */
+      yyoverflow("parser stack overflow",
+		 &yyss1, size * sizeof (*yyssp),
+		 &yyvs1, size * sizeof (*yyvsp),
+		 &yyls1, size * sizeof (*yylsp),
+		 &yystacksize);
+#else
+      yyoverflow("parser stack overflow",
+		 &yyss1, size * sizeof (*yyssp),
+		 &yyvs1, size * sizeof (*yyvsp),
+		 &yystacksize);
+#endif
+
+      yyss = yyss1; yyvs = yyvs1;
+#ifdef YYLSP_NEEDED
+      yyls = yyls1;
+#endif
+#else /* no yyoverflow */
+      /* Extend the stack our own way.  */
+      if (yystacksize >= YYMAXDEPTH)
+	{
+	  yyerror("parser stack overflow");
+	  if (yyfree_stacks)
+	    {
+	      free (yyss);
+	      free (yyvs);
+#ifdef YYLSP_NEEDED
+	      free (yyls);
+#endif
+	    }
+	  return 2;
+	}
+      yystacksize *= 2;
+      if (yystacksize > YYMAXDEPTH)
+	yystacksize = YYMAXDEPTH;
+#ifndef YYSTACK_USE_ALLOCA
+      yyfree_stacks = 1;
+#endif
+      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
+      __yy_memcpy ((char *)yyss, (char *)yyss1,
+		   size * (unsigned int) sizeof (*yyssp));
+      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
+      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
+		   size * (unsigned int) sizeof (*yyvsp));
+#ifdef YYLSP_NEEDED
+      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
+      __yy_memcpy ((char *)yyls, (char *)yyls1,
+		   size * (unsigned int) sizeof (*yylsp));
+#endif
+#endif /* no yyoverflow */
+
+      yyssp = yyss + size - 1;
+      yyvsp = yyvs + size - 1;
+#ifdef YYLSP_NEEDED
+      yylsp = yyls + size - 1;
+#endif
+
+#if YYDEBUG != 0
+      if (yydebug)
+	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
+#endif
+
+      if (yyssp >= yyss + yystacksize - 1)
+	YYABORT;
+    }
+
+#if YYDEBUG != 0
+  if (yydebug)
+    fprintf(stderr, "Entering state %d\n", yystate);
+#endif
+
+  goto yybackup;
+ yybackup:
+
+/* Do appropriate processing given the current state.  */
+/* Read a lookahead token if we need one and don't already have one.  */
+/* yyresume: */
+
+  /* First try to decide what to do without reference to lookahead token.  */
+
+  yyn = yypact[yystate];
+  if (yyn == YYFLAG)
+    goto yydefault;
+
+  /* Not known => get a lookahead token if don't already have one.  */
+
+  /* yychar is either YYEMPTY or YYEOF
+     or a valid token in external form.  */
+
+  if (yychar == YYEMPTY)
+    {
+#if YYDEBUG != 0
+      if (yydebug)
+	fprintf(stderr, "Reading a token: ");
+#endif
+      yychar = YYLEX;
+    }
+
+  /* Convert token to internal form (in yychar1) for indexing tables with */
+
+  if (yychar <= 0)		/* This means end of input. */
+    {
+      yychar1 = 0;
+      yychar = YYEOF;		/* Don't call YYLEX any more */
+
+#if YYDEBUG != 0
+      if (yydebug)
+	fprintf(stderr, "Now at end of input.\n");
+#endif
+    }
+  else
+    {
+      yychar1 = YYTRANSLATE(yychar);
+
+#if YYDEBUG != 0
+      if (yydebug)
+	{
+	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
+	  /* Give the individual parser a way to print the precise meaning
+	     of a token, for further debugging info.  */
+#ifdef YYPRINT
+	  YYPRINT (stderr, yychar, yylval);
+#endif
+	  fprintf (stderr, ")\n");
+	}
+#endif
+    }
+
+  yyn += yychar1;
+  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
+    goto yydefault;
+
+  yyn = yytable[yyn];
+
+  /* yyn is what to do for this token type in this state.
+     Negative => reduce, -yyn is rule number.
+     Positive => shift, yyn is new state.
+       New state is final state => don't bother to shift,
+       just return success.
+     0, or most negative number => error.  */
+
+  if (yyn < 0)
+    {
+      if (yyn == YYFLAG)
+	goto yyerrlab;
+      yyn = -yyn;
+      goto yyreduce;
+    }
+  else if (yyn == 0)
+    goto yyerrlab;
+
+  if (yyn == YYFINAL)
+    YYACCEPT;
+
+  /* Shift the lookahead token.  */
+
+#if YYDEBUG != 0
+  if (yydebug)
+    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
+#endif
+
+  /* Discard the token being shifted unless it is eof.  */
+  if (yychar != YYEOF)
+    yychar = YYEMPTY;
+
+  *++yyvsp = yylval;
+#ifdef YYLSP_NEEDED
+  *++yylsp = yylloc;
+#endif
+
+  /* count tokens shifted since error; after three, turn off error status.  */
+  if (yyerrstatus) yyerrstatus--;
+
+  yystate = yyn;
+  goto yynewstate;
+
+/* Do the default action for the current state.  */
+yydefault:
+
+  yyn = yydefact[yystate];
+  if (yyn == 0)
+    goto yyerrlab;
+
+/* Do a reduction.  yyn is the number of a rule to reduce with.  */
+yyreduce:
+  yylen = yyr2[yyn];
+  if (yylen > 0)
+    yyval = yyvsp[1-yylen]; /* implement default value of the action */
+
+#if YYDEBUG != 0
+  if (yydebug)
+    {
+      int i;
+
+      fprintf (stderr, "Reducing via rule %d (line %d), ",
+	       yyn, yyrline[yyn]);
+
+      /* Print the symbols being reduced, and their result.  */
+      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
+	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
+      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
+    }
+#endif
+
+
+  switch (yyn) {
+
+case 3:
+#line 195 "zend_ini_parser.y"
+{
+#if DEBUG_CFG_PARSER
+			printf("'%s' = '%s'\n", yyvsp[-2].value.str.val, yyvsp[0].value.str.val);
+#endif
+			ZEND_INI_PARSER_CB(&yyvsp[-2], &yyvsp[0], ZEND_INI_PARSER_ENTRY, ZEND_INI_PARSER_ARG);
+			free(yyvsp[-2].value.str.val);
+			free(yyvsp[0].value.str.val);
+		;
+    break;}
+case 4:
+#line 203 "zend_ini_parser.y"
+{ ZEND_INI_PARSER_CB(&yyvsp[0], NULL, ZEND_INI_PARSER_ENTRY, ZEND_INI_PARSER_ARG); free(yyvsp[0].value.str.val); ;
+    break;}
+case 5:
+#line 204 "zend_ini_parser.y"
+{ ZEND_INI_PARSER_CB(&yyvsp[0], NULL, ZEND_INI_PARSER_SECTION, ZEND_INI_PARSER_ARG); free(yyvsp[0].value.str.val); ;
+    break;}
+case 7:
+#line 210 "zend_ini_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 8:
+#line 211 "zend_ini_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 9:
+#line 212 "zend_ini_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 10:
+#line 213 "zend_ini_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 11:
+#line 214 "zend_ini_parser.y"
+{ yyval.value.str.val = strdup(""); yyval.value.str.len=0; yyval.type = IS_STRING; ;
+    break;}
+case 12:
+#line 215 "zend_ini_parser.y"
+{ yyval.value.str.val = strdup(""); yyval.value.str.len=0; yyval.type = IS_STRING; ;
+    break;}
+case 13:
+#line 219 "zend_ini_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 14:
+#line 220 "zend_ini_parser.y"
+{ zend_ini_do_op('|', &yyval, &yyvsp[-2], &yyvsp[0]); ;
+    break;}
+case 15:
+#line 221 "zend_ini_parser.y"
+{ zend_ini_do_op('&', &yyval, &yyvsp[-2], &yyvsp[0]); ;
+    break;}
+case 16:
+#line 222 "zend_ini_parser.y"
+{ zend_ini_do_op('~', &yyval, &yyvsp[0], NULL); ;
+    break;}
+case 17:
+#line 223 "zend_ini_parser.y"
+{ zend_ini_do_op('!', &yyval, &yyvsp[0], NULL); ;
+    break;}
+case 18:
+#line 224 "zend_ini_parser.y"
+{ yyval = yyvsp[-1]; ;
+    break;}
+case 19:
+#line 228 "zend_ini_parser.y"
+{ zend_ini_get_constant(&yyval, &yyvsp[0]); ;
+    break;}
+}
+   /* the action file gets copied in in place of this dollarsign */
+#line 542 "bison.simple"
+
+  yyvsp -= yylen;
+  yyssp -= yylen;
+#ifdef YYLSP_NEEDED
+  yylsp -= yylen;
+#endif
+
+#if YYDEBUG != 0
+  if (yydebug)
+    {
+      short *ssp1 = yyss - 1;
+      fprintf (stderr, "state stack now");
+      while (ssp1 != yyssp)
+	fprintf (stderr, " %d", *++ssp1);
+      fprintf (stderr, "\n");
+    }
+#endif
+
+  *++yyvsp = yyval;
+
+#ifdef YYLSP_NEEDED
+  yylsp++;
+  if (yylen == 0)
+    {
+      yylsp->first_line = yylloc.first_line;
+      yylsp->first_column = yylloc.first_column;
+      yylsp->last_line = (yylsp-1)->last_line;
+      yylsp->last_column = (yylsp-1)->last_column;
+      yylsp->text = 0;
+    }
+  else
+    {
+      yylsp->last_line = (yylsp+yylen-1)->last_line;
+      yylsp->last_column = (yylsp+yylen-1)->last_column;
+    }
+#endif
+
+  /* Now "shift" the result of the reduction.
+     Determine what state that goes to,
+     based on the state we popped back to
+     and the rule number reduced by.  */
+
+  yyn = yyr1[yyn];
+
+  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
+  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
+    yystate = yytable[yystate];
+  else
+    yystate = yydefgoto[yyn - YYNTBASE];
+
+  goto yynewstate;
+
+yyerrlab:   /* here on detecting error */
+
+  if (! yyerrstatus)
+    /* If not already recovering from an error, report this error.  */
+    {
+      ++yynerrs;
+
+#ifdef YYERROR_VERBOSE
+      yyn = yypact[yystate];
+
+      if (yyn > YYFLAG && yyn < YYLAST)
+	{
+	  int size = 0;
+	  char *msg;
+	  int x, count;
+
+	  count = 0;
+	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
+	  for (x = (yyn < 0 ? -yyn : 0);
+	       x < (sizeof(yytname) / sizeof(char *)); x++)
+	    if (yycheck[x + yyn] == x)
+	      size += strlen(yytname[x]) + 15, count++;
+	  msg = (char *) malloc(size + 15);
+	  if (msg != 0)
+	    {
+	      strcpy(msg, "parse error");
+
+	      if (count < 5)
+		{
+		  count = 0;
+		  for (x = (yyn < 0 ? -yyn : 0);
+		       x < (sizeof(yytname) / sizeof(char *)); x++)
+		    if (yycheck[x + yyn] == x)
+		      {
+			strcat(msg, count == 0 ? ", expecting `" : " or `");
+			strcat(msg, yytname[x]);
+			strcat(msg, "'");
+			count++;
+		      }
+		}
+	      yyerror(msg);
+	      free(msg);
+	    }
+	  else
+	    yyerror ("parse error; also virtual memory exceeded");
+	}
+      else
+#endif /* YYERROR_VERBOSE */
+	yyerror("parse error");
+    }
+
+  goto yyerrlab1;
+yyerrlab1:   /* here on error raised explicitly by an action */
+
+  if (yyerrstatus == 3)
+    {
+      /* if just tried and failed to reuse lookahead token after an error, discard it.  */
+
+      /* return failure if at end of input */
+      if (yychar == YYEOF)
+	YYABORT;
+
+#if YYDEBUG != 0
+      if (yydebug)
+	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
+#endif
+
+      yychar = YYEMPTY;
+    }
+
+  /* Else will try to reuse lookahead token
+     after shifting the error token.  */
+
+  yyerrstatus = 3;		/* Each real token shifted decrements this */
+
+  goto yyerrhandle;
+
+yyerrdefault:  /* current state does not do anything special for the error token. */
+
+#if 0
+  /* This is wrong; only states that explicitly want error tokens
+     should shift them.  */
+  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
+  if (yyn) goto yydefault;
+#endif
+
+yyerrpop:   /* pop the current state because it cannot handle the error token */
+
+  if (yyssp == yyss) YYABORT;
+  yyvsp--;
+  yystate = *--yyssp;
+#ifdef YYLSP_NEEDED
+  yylsp--;
+#endif
+
+#if YYDEBUG != 0
+  if (yydebug)
+    {
+      short *ssp1 = yyss - 1;
+      fprintf (stderr, "Error: state stack now");
+      while (ssp1 != yyssp)
+	fprintf (stderr, " %d", *++ssp1);
+      fprintf (stderr, "\n");
+    }
+#endif
+
+yyerrhandle:
+
+  yyn = yypact[yystate];
+  if (yyn == YYFLAG)
+    goto yyerrdefault;
+
+  yyn += YYTERROR;
+  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
+    goto yyerrdefault;
+
+  yyn = yytable[yyn];
+  if (yyn < 0)
+    {
+      if (yyn == YYFLAG)
+	goto yyerrpop;
+      yyn = -yyn;
+      goto yyreduce;
+    }
+  else if (yyn == 0)
+    goto yyerrpop;
+
+  if (yyn == YYFINAL)
+    YYACCEPT;
+
+#if YYDEBUG != 0
+  if (yydebug)
+    fprintf(stderr, "Shifting error token, ");
+#endif
+
+  *++yyvsp = yylval;
+#ifdef YYLSP_NEEDED
+  *++yylsp = yylloc;
+#endif
+
+  yystate = yyn;
+  goto yynewstate;
+
+ yyacceptlab:
+  /* YYACCEPT comes here.  */
+  if (yyfree_stacks)
+    {
+      free (yyss);
+      free (yyvs);
+#ifdef YYLSP_NEEDED
+      free (yyls);
+#endif
+    }
+  return 0;
+
+ yyabortlab:
+  /* YYABORT comes here.  */
+  if (yyfree_stacks)
+    {
+      free (yyss);
+      free (yyvs);
+#ifdef YYLSP_NEEDED
+      free (yyls);
+#endif
+    }
+  return 1;
+}
+#line 236 "zend_ini_parser.y"
diff -Nur php-4.3.11/Zend/zend_ini_parser.h php/Zend/zend_ini_parser.h
--- php-4.3.11/Zend/zend_ini_parser.h	2005-03-30 22:35:48.000000000 +0800
+++ php/Zend/zend_ini_parser.h	2007-07-23 21:44:28.000000000 +0800
@@ -1,15 +1,9 @@
-#ifndef BISON_ZEND_ZEND_INI_PARSER_H
-# define BISON_ZEND_ZEND_INI_PARSER_H
-
-# ifndef YYSTYPE
-#  define YYSTYPE int
-#  define YYSTYPE_IS_TRIVIAL 1
-# endif
-# define	TC_STRING	257
-# define	TC_ENCAPSULATED_STRING	258
-# define	SECTION	259
-# define	CFG_TRUE	260
-# define	CFG_FALSE	261
-
-
-#endif /* not BISON_ZEND_ZEND_INI_PARSER_H */
+#ifndef YYSTYPE
+#define YYSTYPE int
+#endif
+#define	TC_STRING	257
+#define	TC_ENCAPSULATED_STRING	258
+#define	SECTION	259
+#define	CFG_TRUE	260
+#define	CFG_FALSE	261
+
diff -Nur php-4.3.11/Zend/zend_ini_parser.output php/Zend/zend_ini_parser.output
--- php-4.3.11/Zend/zend_ini_parser.output	2005-03-30 22:35:48.000000000 +0800
+++ php/Zend/zend_ini_parser.output	1970-01-01 08:00:00.000000000 +0800
@@ -1,363 +0,0 @@
-Conflict in state 18 between rule 16 and token '|' resolved as reduce.
-Conflict in state 18 between rule 16 and token '&' resolved as reduce.
-Conflict in state 19 between rule 17 and token '|' resolved as reduce.
-Conflict in state 19 between rule 17 and token '&' resolved as reduce.
-Conflict in state 24 between rule 14 and token '|' resolved as reduce.
-Conflict in state 24 between rule 14 and token '&' resolved as reduce.
-Conflict in state 25 between rule 15 and token '|' resolved as reduce.
-Conflict in state 25 between rule 15 and token '&' resolved as reduce.
-
-
-State 6 contains 2 shift/reduce conflicts.
-
-
-Grammar
-
-  Number, Line, Rule
-    1 189 statement_list -> statement_list statement
-    2 191 statement_list -> /* empty */
-    3 194 statement -> TC_STRING '=' string_or_value
-    4 203 statement -> TC_STRING
-    5 204 statement -> SECTION
-    6 205 statement -> '\n'
-    7 209 string_or_value -> expr
-    8 211 string_or_value -> TC_ENCAPSULATED_STRING
-    9 212 string_or_value -> CFG_TRUE
-   10 213 string_or_value -> CFG_FALSE
-   11 214 string_or_value -> '\n'
-   12 215 string_or_value -> /* empty */
-   13 218 expr -> constant_string
-   14 220 expr -> expr '|' expr
-   15 221 expr -> expr '&' expr
-   16 222 expr -> '~' expr
-   17 223 expr -> '!' expr
-   18 224 expr -> '(' expr ')'
-   19 227 constant_string -> TC_STRING
-
-
-Terminals, with rules where they appear
-
-$ (-1)
-'\n' (10) 6 11
-'!' (33) 17
-'&' (38) 15
-'(' (40) 18
-')' (41) 18
-'=' (61) 3
-'|' (124) 14
-'~' (126) 16
-error (256)
-TC_STRING (257) 3 4 19
-TC_ENCAPSULATED_STRING (258) 8
-SECTION (259) 5
-CFG_TRUE (260) 9
-CFG_FALSE (261) 10
-
-
-Nonterminals, with rules where they appear
-
-statement_list (16)
-    on left: 1 2, on right: 1
-statement (17)
-    on left: 3 4 5 6, on right: 1
-string_or_value (18)
-    on left: 7 8 9 10 11 12, on right: 3
-expr (19)
-    on left: 13 14 15 16 17 18, on right: 7 14 15 16 17 18
-constant_string (20)
-    on left: 19, on right: 13
-
-
-state 0
-
-    $default	reduce using rule 2 (statement_list)
-
-    statement_list	go to state 1
-
-
-
-state 1
-
-    statement_list  ->  statement_list . statement   (rule 1)
-
-    $   	go to state 26
-    TC_STRING	shift, and go to state 2
-    SECTION	shift, and go to state 3
-    '\n'	shift, and go to state 4
-
-    statement	go to state 5
-
-
-
-state 2
-
-    statement  ->  TC_STRING . '=' string_or_value   (rule 3)
-    statement  ->  TC_STRING .   (rule 4)
-
-    '=' 	shift, and go to state 6
-
-    $default	reduce using rule 4 (statement)
-
-
-
-state 3
-
-    statement  ->  SECTION .   (rule 5)
-
-    $default	reduce using rule 5 (statement)
-
-
-
-state 4
-
-    statement  ->  '\n' .   (rule 6)
-
-    $default	reduce using rule 6 (statement)
-
-
-
-state 5
-
-    statement_list  ->  statement_list statement .   (rule 1)
-
-    $default	reduce using rule 1 (statement_list)
-
-
-
-state 6
-
-    statement  ->  TC_STRING '=' . string_or_value   (rule 3)
-
-    TC_STRING	shift, and go to state 7
-    TC_ENCAPSULATED_STRING	shift, and go to state 8
-    CFG_TRUE	shift, and go to state 9
-    CFG_FALSE	shift, and go to state 10
-    '~' 	shift, and go to state 11
-    '!' 	shift, and go to state 12
-    '\n'	shift, and go to state 13
-    '(' 	shift, and go to state 14
-
-    TC_STRING	[reduce using rule 12 (string_or_value)]
-    '\n'	[reduce using rule 12 (string_or_value)]
-    $default	reduce using rule 12 (string_or_value)
-
-    string_or_value	go to state 15
-    expr	go to state 16
-    constant_string	go to state 17
-
-
-
-state 7
-
-    constant_string  ->  TC_STRING .   (rule 19)
-
-    $default	reduce using rule 19 (constant_string)
-
-
-
-state 8
-
-    string_or_value  ->  TC_ENCAPSULATED_STRING .   (rule 8)
-
-    $default	reduce using rule 8 (string_or_value)
-
-
-
-state 9
-
-    string_or_value  ->  CFG_TRUE .   (rule 9)
-
-    $default	reduce using rule 9 (string_or_value)
-
-
-
-state 10
-
-    string_or_value  ->  CFG_FALSE .   (rule 10)
-
-    $default	reduce using rule 10 (string_or_value)
-
-
-
-state 11
-
-    expr  ->  '~' . expr   (rule 16)
-
-    TC_STRING	shift, and go to state 7
-    '~' 	shift, and go to state 11
-    '!' 	shift, and go to state 12
-    '(' 	shift, and go to state 14
-
-    expr	go to state 18
-    constant_string	go to state 17
-
-
-
-state 12
-
-    expr  ->  '!' . expr   (rule 17)
-
-    TC_STRING	shift, and go to state 7
-    '~' 	shift, and go to state 11
-    '!' 	shift, and go to state 12
-    '(' 	shift, and go to state 14
-
-    expr	go to state 19
-    constant_string	go to state 17
-
-
-
-state 13
-
-    string_or_value  ->  '\n' .   (rule 11)
-
-    $default	reduce using rule 11 (string_or_value)
-
-
-
-state 14
-
-    expr  ->  '(' . expr ')'   (rule 18)
-
-    TC_STRING	shift, and go to state 7
-    '~' 	shift, and go to state 11
-    '!' 	shift, and go to state 12
-    '(' 	shift, and go to state 14
-
-    expr	go to state 20
-    constant_string	go to state 17
-
-
-
-state 15
-
-    statement  ->  TC_STRING '=' string_or_value .   (rule 3)
-
-    $default	reduce using rule 3 (statement)
-
-
-
-state 16
-
-    string_or_value  ->  expr .   (rule 7)
-    expr  ->  expr . '|' expr   (rule 14)
-    expr  ->  expr . '&' expr   (rule 15)
-
-    '|' 	shift, and go to state 21
-    '&' 	shift, and go to state 22
-
-    $default	reduce using rule 7 (string_or_value)
-
-
-
-state 17
-
-    expr  ->  constant_string .   (rule 13)
-
-    $default	reduce using rule 13 (expr)
-
-
-
-state 18
-
-    expr  ->  expr . '|' expr   (rule 14)
-    expr  ->  expr . '&' expr   (rule 15)
-    expr  ->  '~' expr .   (rule 16)
-
-
-    $default	reduce using rule 16 (expr)
-
-
-
-state 19
-
-    expr  ->  expr . '|' expr   (rule 14)
-    expr  ->  expr . '&' expr   (rule 15)
-    expr  ->  '!' expr .   (rule 17)
-
-
-    $default	reduce using rule 17 (expr)
-
-
-
-state 20
-
-    expr  ->  expr . '|' expr   (rule 14)
-    expr  ->  expr . '&' expr   (rule 15)
-    expr  ->  '(' expr . ')'   (rule 18)
-
-    '|' 	shift, and go to state 21
-    '&' 	shift, and go to state 22
-    ')' 	shift, and go to state 23
-
-
-
-state 21
-
-    expr  ->  expr '|' . expr   (rule 14)
-
-    TC_STRING	shift, and go to state 7
-    '~' 	shift, and go to state 11
-    '!' 	shift, and go to state 12
-    '(' 	shift, and go to state 14
-
-    expr	go to state 24
-    constant_string	go to state 17
-
-
-
-state 22
-
-    expr  ->  expr '&' . expr   (rule 15)
-
-    TC_STRING	shift, and go to state 7
-    '~' 	shift, and go to state 11
-    '!' 	shift, and go to state 12
-    '(' 	shift, and go to state 14
-
-    expr	go to state 25
-    constant_string	go to state 17
-
-
-
-state 23
-
-    expr  ->  '(' expr ')' .   (rule 18)
-
-    $default	reduce using rule 18 (expr)
-
-
-
-state 24
-
-    expr  ->  expr . '|' expr   (rule 14)
-    expr  ->  expr '|' expr .   (rule 14)
-    expr  ->  expr . '&' expr   (rule 15)
-
-
-    $default	reduce using rule 14 (expr)
-
-
-
-state 25
-
-    expr  ->  expr . '|' expr   (rule 14)
-    expr  ->  expr . '&' expr   (rule 15)
-    expr  ->  expr '&' expr .   (rule 15)
-
-
-    $default	reduce using rule 15 (expr)
-
-
-
-state 26
-
-    $   	go to state 27
-
-
-
-state 27
-
-    $default	accept
-
-
diff -Nur php-4.3.11/Zend/zend_ini_scanner.c php/Zend/zend_ini_scanner.c
--- php-4.3.11/Zend/zend_ini_scanner.c	2005-03-30 22:35:48.000000000 +0800
+++ php/Zend/zend_ini_scanner.c	2007-07-23 21:44:28.000000000 +0800
@@ -1,1903 +1,1910 @@
-#define yy_create_buffer ini__create_buffer
-#define yy_delete_buffer ini__delete_buffer
-#define yy_scan_buffer ini__scan_buffer
-#define yy_scan_string ini__scan_string
-#define yy_scan_bytes ini__scan_bytes
-#define yy_flex_debug ini__flex_debug
-#define yy_init_buffer ini__init_buffer
-#define yy_flush_buffer ini__flush_buffer
-#define yy_load_buffer_state ini__load_buffer_state
-#define yy_switch_to_buffer ini__switch_to_buffer
-#define yyin ini_in
-#define yyleng ini_leng
-#define yylex ini_lex
-#define yyout ini_out
-#define yyrestart ini_restart
-#define yytext ini_text
-
-/* A Lexical scanner generated by flex */
-
-/* Scanner skeleton version:
- * $Header: /repository/Zend/Attic/flex.skl,v 1.27.4.4 2003/05/31 01:37:43 sniper Exp $
- */
-
-#define FLEX_SCANNER
-#define YY_FLEX_MAJOR_VERSION 2
-#define YY_FLEX_MINOR_VERSION 5
-
-
-/* for HAVE_* */
-#include "zend.h"
-
-/* for recv */
-#ifdef HAVE_SYS_TYPES_H
-# include <sys/types.h>
-#endif
-#ifdef HAVE_SYS_SOCKET_H
-# include <sys/socket.h> 
-#endif
-
-/* for read */
-#ifdef HAVE_UNISTD_H
-# include <unistd.h>
-#endif
-#include <stdio.h>
-
-
-/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
-#ifdef c_plusplus
-#ifndef __cplusplus
-#define __cplusplus
-#endif
-#endif
-
-
-#ifdef __cplusplus
-
-#include <stdlib.h>
-#if HAVE_UNISTD_H
-#include <unistd.h>
-#endif
-
-/* Use prototypes in function declarations. */
-#define YY_USE_PROTOS
-
-/* The "const" storage-class-modifier is valid. */
-#define YY_USE_CONST
-
-#else	/* ! __cplusplus */
-
-#if __STDC__
-
-#define YY_USE_PROTOS
-#define YY_USE_CONST
-
-#endif	/* __STDC__ */
-#endif	/* ! __cplusplus */
-
-#ifdef __TURBOC__
- #pragma warn -rch
- #pragma warn -use
-#include <io.h>
-#include <stdlib.h>
-#define YY_USE_CONST
-#define YY_USE_PROTOS
-#endif
-
-#ifdef YY_USE_CONST
-#define yyconst const
-#else
-#define yyconst
-#endif
-
-#undef YY_USE_PROTOS
-#define YY_USE_PROTOS
-
-#ifdef YY_USE_PROTOS
-#define YY_PROTO(proto) proto
-#else
-#define YY_PROTO(proto) ()
-#endif
-
-/* Returned upon end-of-file. */
-#define YY_NULL 0
-
-/* Promotes a possibly negative, possibly signed char to an unsigned
- * integer for use as an array index.  If the signed char is negative,
- * we want to instead treat it as an 8-bit unsigned char, hence the
- * double cast.
- */
-#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
-
-/* Enter a start condition.  This macro really ought to take a parameter,
- * but we do it the disgusting crufty way forced on us by the ()-less
- * definition of BEGIN.
- */
-#define BEGIN yy_start = 1 + 2 *
-
-/* Translate the current start state into a value that can be later handed
- * to BEGIN to return to the state.  The YYSTATE alias is for lex
- * compatibility.
- */
-#define YY_START ((yy_start - 1) / 2)
-#define YYSTATE YY_START
-
-/* Action number for EOF rule of a given start state. */
-#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
-
-/* Special action meaning "start processing a new file". */
-#define YY_NEW_FILE yyrestart( SCNG(yy_in) TSRMLS_CC )
-
-#define YY_END_OF_BUFFER_CHAR 0
-
-/* Size of default input buffer. */
-#define YY_BUF_SIZE 16384
-
-typedef struct yy_buffer_state *YY_BUFFER_STATE;
-
-extern int yyleng;
-
-
-#define EOB_ACT_CONTINUE_SCAN 0
-#define EOB_ACT_END_OF_FILE 1
-#define EOB_ACT_LAST_MATCH 2
-
-/* The funky do-while in the following #define is used to turn the definition
- * int a single C statement (which needs a semi-colon terminator).  This
- * avoids problems with code like:
- *
- * 	if ( condition_holds )
- *		yyless( 5 );
- *	else
- *		do_something_else();
- *
- * Prior to using the do-while the compiler would get upset at the
- * "else" because it interpreted the "if" statement as being all
- * done when it reached the ';' after the yyless() call.
- */
-
-/* Return all but the first 'n' matched characters back to the input stream. */
-
-#define yyless(n) \
-	do \
-		{ \
-		/* Undo effects of setting up yytext. */ \
-		*yy_cp = yy_hold_char; \
-		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
-		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
-		} \
-	while ( 0 )
-
-#define unput(c) yyunput( c, yytext_ptr TSRMLS_CC )
-
-/* The following is because we cannot portably get our hands on size_t
- * (without autoconf's help, which isn't available because we want
- * flex-generated scanners to compile on their own).
- */
-typedef unsigned int yy_size_t;
-
-
-struct yy_buffer_state
-	{
-	struct _zend_file_handle *yy_input_file;
-
-	char *yy_ch_buf;		/* input buffer */
-	char *yy_buf_pos;		/* current position in input buffer */
-
-	/* Size of input buffer in bytes, not including room for EOB
-	 * characters.
-	 */
-	yy_size_t yy_buf_size;
-
-	/* Number of characters read into yy_ch_buf, not including EOB
-	 * characters.
-	 */
-	int yy_n_chars;
-
-	/* Whether we "own" the buffer - i.e., we know we created it,
-	 * and can realloc() it to grow it, and should free() it to
-	 * delete it.
-	 */
-	int yy_is_our_buffer;
-
-	/* Whether we're considered to be at the beginning of a line.
-	 * If so, '^' rules will be active on the next match, otherwise
-	 * not.
-	 */
-	int yy_at_bol;
-
-	/* Whether to try to fill the input buffer when we reach the
-	 * end of it.
-	 */
-	int yy_fill_buffer;
-
-	int yy_buffer_status;
-#define YY_BUFFER_NEW 0
-#define YY_BUFFER_NORMAL 1
-	/* When an EOF's been seen but there's still some text to process
-	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
-	 * shouldn't try reading from the input source any more.  We might
-	 * still have a bunch of tokens to match, though, because of
-	 * possible backing-up.
-	 *
-	 * When we actually see the EOF, we change the status to "new"
-	 * (via yyrestart()), so that the user can continue scanning by
-	 * just pointing yyin at a new input file.
-	 */
-#define YY_BUFFER_EOF_PENDING 2
-	};
-
-#define yy_current_buffer SCNG(current_buffer)
-#define yy_hold_char SCNG(_yy_hold_char)
-
-/* We provide macros for accessing buffer states in case in the
- * future we want to put the buffer states in a more general
- * "scanner state".
- */
-#define YY_CURRENT_BUFFER yy_current_buffer
-
-
-/* yy_hold_char holds the character lost when yytext is formed. */
-
-#if 0
-static char yy_hold_char;
-
-static int yy_n_chars;		/* number of characters read into yy_ch_buf */
-#endif
-
-/* Points to current character in buffer. */
-#define yy_c_buf_p SCNG(c_buf_p)
-#define yy_init SCNG(init)
-#define yy_start SCNG(start)
-
-/* Flag which is used to allow yywrap()'s to do buffer switches
- * instead of setting up a fresh yyin.  A bit of a hack ...
- */
-/* static int yy_did_buffer_switch_on_eof; */
-#define yy_did_buffer_switch_on_eof SCNG(_yy_did_buffer_switch_on_eof)
-
-void yyrestart YY_PROTO(( struct _zend_file_handle  *input_file TSRMLS_DC ));
-
-void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer TSRMLS_DC ));
-void yy_load_buffer_state YY_PROTO(( TSRMLS_D ));
-YY_BUFFER_STATE yy_create_buffer YY_PROTO(( struct _zend_file_handle *file, int size TSRMLS_DC ));
-void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b TSRMLS_DC ));
-void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, struct _zend_file_handle *file TSRMLS_DC ));
-void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b TSRMLS_DC ));
-#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer TSRMLS_CC )
-
-YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size TSRMLS_DC ));
-YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str TSRMLS_DC ));
-YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len TSRMLS_DC ));
-
-
-static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
-static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
-static void yy_flex_free YY_PROTO(( void * ));
-
-#define yy_new_buffer yy_create_buffer
-
-#define yy_set_interactive(is_interactive) \
-	{ \
-	if ( ! yy_current_buffer ) \
-		yy_current_buffer = yy_create_buffer( SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC ); \
-	}
-
-#define yy_set_bol(at_bol) \
-	{ \
-	if ( ! yy_current_buffer ) \
-		yy_current_buffer = yy_create_buffer( SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC ); \
-	yy_current_buffer->yy_at_bol = at_bol; \
-	}
-
-#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
-
-
-#define yywrap() 1
-#define YY_SKIP_YYWRAP
-typedef unsigned char YY_CHAR;
-FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
-typedef int yy_state_type;
-extern char *yytext;
-#define yytext_ptr yytext
-#undef yyleng
-#define yyleng SCNG(yy_leng)
-#undef yytext
-#define yytext SCNG(yy_text)
-#undef yytext_ptr
-#define yytext_ptr SCNG(yy_text)
-#undef yyin
-#define yyin SCNG(yy_in)
-#undef yyout
-#define yyout SCNG(yy_out)
-#undef yy_last_accepting_state
-#define yy_last_accepting_state SCNG(_yy_last_accepting_state)
-#undef yy_last_accepting_cpos
-#define yy_last_accepting_cpos SCNG(_yy_last_accepting_cpos)
-#undef yy_more_flag
-#define yy_more_flag SCNG(_yy_more_flag)
-#undef yy_more_len
-#define yy_more_len SCNG(_yy_more_len)
-
-
-static yy_state_type yy_get_previous_state YY_PROTO(( TSRMLS_D ));
-static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state TSRMLS_DC ));
-static int yy_get_next_buffer YY_PROTO(( TSRMLS_D ));
-static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));
-
-/* Done after the current pattern has been matched and before the
- * corresponding action - sets up yytext.
- */
-#define YY_DO_BEFORE_ACTION \
-	yytext_ptr = yy_bp; \
-	yyleng = (int) (yy_cp - yy_bp); \
-	yy_hold_char = *yy_cp; \
-	*yy_cp = '\0'; \
-	yy_c_buf_p = yy_cp;
-
-#undef yyleng
-#undef yytext
-#undef yytext_ptr
-#undef yyin
-#undef yyout
-#undef yy_last_accepting_state
-#undef yy_last_accepting_cpos
-#undef yy_more_flag
-#undef yy_more_len
-
-
-#define YY_NUM_RULES 12
-#define YY_END_OF_BUFFER 13
-static yyconst short int yy_accept[54] =
-    {   0,
-        0,    0,   13,    6,   10,    7,    8,    6,    5,   11,
-        9,    7,    6,    6,    6,    6,    6,    6,    6,    8,
-        6,    6,    6,    6,    6,    6,    0,    4,    9,    9,
-        9,    6,    0,    6,    2,    6,    1,    6,    6,    3,
-        3,    6,    2,    6,    2,    1,    6,    3,    3,    3,
-        3,    6,    0
-    } ;
-
-static yyconst int yy_ec[256] =
-    {   0,
-        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
-        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    5,    6,    7,    1,    1,    1,    6,    1,    6,
-        6,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    8,    1,
-        9,    1,    1,    1,   12,    1,    1,    1,   13,   14,
-        1,    1,    1,    1,    1,   15,    1,   16,   17,    1,
-        1,   18,   19,   20,   21,    1,    1,    1,   22,    1,
-       10,    1,   11,    1,    1,    1,   12,    1,    1,    1,
-
-       13,   14,    1,    1,    1,    1,    1,   15,    1,   16,
-       17,    1,    1,   18,   19,   20,   21,    1,    1,    1,
-       22,    1,    1,    6,    1,    6,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1
-    } ;
-
-static yyconst int yy_meta[23] =
-    {   0,
-        1,    2,    3,    4,    1,    2,    2,    2,    2,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1
-    } ;
-
-static yyconst short int yy_base[59] =
-    {   0,
-        0,    0,  104,    0,  105,  105,  100,   18,  105,   95,
-       21,  105,   39,   89,   83,   12,   81,   85,    0,  105,
-        0,   85,   79,   13,   77,   81,   86,  105,   27,  105,
-       89,   49,   80,   75,   28,   75,   83,   66,   66,   58,
-       61,   62,   54,   41,   47,   44,   29,  105,   36,   64,
-       67,   24,  105,   35,   72,   74,   78,   82
-    } ;
-
-static yyconst short int yy_def[59] =
-    {   0,
-       53,    1,   53,   54,   53,   53,   53,   54,   53,   55,
-       56,   53,   57,   54,   54,   54,   54,   54,   54,   53,
-        8,   54,   54,   54,   54,   54,   55,   53,   56,   53,
-       53,   57,   58,   54,   54,   54,   54,   54,   54,   54,
-       53,   54,   54,   54,   54,   54,   54,   53,   53,   54,
-       53,   54,    0,   53,   53,   53,   53,   53
-    } ;
-
-static yyconst short int yy_nxt[128] =
-    {   0,
-        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
-        4,    4,    4,   14,    4,   15,   16,    4,    4,   17,
-        4,   18,   21,   30,   31,   36,   36,   37,   37,   30,
-       31,   22,   43,   23,   24,   19,   45,   25,   48,   26,
-       33,   37,   33,   44,   33,   33,   33,   33,   46,   19,
-       33,   43,   33,   45,   33,   33,   33,   33,   43,   40,
-       48,   49,   50,   48,   49,   51,   48,   49,   50,   48,
-       49,   51,   27,   27,   29,   29,   29,   29,   32,   32,
-       52,   32,   33,   33,   37,   33,   47,   46,   45,   42,
-       41,   30,   28,   39,   38,   35,   34,   39,   38,   35,
-
-       34,   28,   20,   53,    3,   53,   53,   53,   53,   53,
-       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
-       53,   53,   53,   53,   53,   53,   53
-    } ;
-
-static yyconst short int yy_chk[128] =
-    {   0,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    8,   11,   11,   16,   24,   16,   24,   29,
-       29,    8,   35,    8,    8,   54,   52,    8,   49,    8,
-       13,   47,   13,   35,   13,   13,   13,   13,   46,   13,
-       32,   45,   32,   44,   32,   32,   32,   32,   43,   32,
-       40,   40,   40,   41,   41,   41,   50,   50,   50,   51,
-       51,   51,   55,   55,   56,   56,   56,   56,   57,   57,
-       42,   57,   58,   58,   39,   58,   38,   37,   36,   34,
-       33,   31,   27,   26,   25,   23,   22,   18,   17,   15,
-
-       14,   10,    7,    3,   53,   53,   53,   53,   53,   53,
-       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
-       53,   53,   53,   53,   53,   53,   53
-    } ;
-
-static yy_state_type yy_last_accepting_state;
-static char *yy_last_accepting_cpos;
-
-/* The intent behind this definition is that it'll catch
- * any uses of REJECT which flex missed.
- */
-#define REJECT reject_used_but_not_detected
-#define yymore() yymore_used_but_not_detected
-#define YY_MORE_ADJ 0
-#define YY_RESTORE_YY_MORE_OFFSET
-char *yytext;
-#define INITIAL 0
-/*
-   +----------------------------------------------------------------------+
-   | Zend Engine                                                          |
-   +----------------------------------------------------------------------+
-   | Copyright (c) 1998-2002 Zend Technologies Ltd. (http://www.zend.com) |
-   +----------------------------------------------------------------------+
-   | This source file is subject to version 2.00 of the Zend license,     |
-   | that is bundled with this package in the file LICENSE, and is        |
-   | available at through the world-wide-web at                           |
-   | http://www.zend.com/license/2_00.txt.                                |
-   | If you did not receive a copy of the Zend license and are unable to  |
-   | obtain it through the world-wide-web, please send a note to          |
-   | license@zend.com so we can mail you a copy immediately.              |
-   +----------------------------------------------------------------------+
-   | Author: Zeev Suraski <zeev@zend.com>                                 |
-   +----------------------------------------------------------------------+
-*/
-
-/* $Id: zend_ini_scanner.l,v 1.26.2.10 2005/02/06 23:50:47 zeev Exp $ */
-
-#define yyleng SCNG(yy_leng)
-#define yytext SCNG(yy_text)
-#define yytext_ptr SCNG(yy_text)
-#define yyin SCNG(yy_in)
-#define yyout SCNG(yy_out)
-#define yy_last_accepting_state SCNG(_yy_last_accepting_state)
-#define yy_last_accepting_cpos SCNG(_yy_last_accepting_cpos)
-#define yy_more_flag SCNG(_yy_more_flag)
-#define yy_more_len SCNG(_yy_more_len)
-
-#include <errno.h>
-#include "zend.h"
-#include "zend_globals.h"
-#include <zend_ini_parser.h>
-#include "zend_ini_scanner.h"
-
-#ifdef HAVE_UNISTD_H
-# include <unistd.h>
-#endif
-
-#undef YYSTYPE
-#define YYSTYPE zval
-
-#define YY_DECL int ini_lex(zval *ini_lval TSRMLS_DC)
-
-/* Globals Macros */
-#define SCNG	INI_SCNG
-#ifdef ZTS
-ZEND_API ts_rsrc_id ini_scanner_globals_id;
-#else
-ZEND_API zend_scanner_globals ini_scanner_globals;
-#endif
-
-#ifdef ZEND_WIN32
-#include <io.h>
-#endif
-
-static char *ini_filename;
-
-void init_ini_scanner(TSRMLS_D)
-{
-	SCNG(lineno)=1;
-}
-
-
-int zend_ini_scanner_get_lineno(TSRMLS_D)
-{
-	return SCNG(lineno);
-}
-
-
-char *zend_ini_scanner_get_filename(TSRMLS_D)
-{
-	return ini_filename;
-}
-
-
-int zend_ini_open_file_for_scanning(zend_file_handle *fh TSRMLS_DC)
-{
-	switch (fh->type) {
-		case ZEND_HANDLE_FILENAME:
-			fh->type = ZEND_HANDLE_FP;
-			fh->handle.fp = zend_fopen(fh->filename, NULL);
-			break;
-	}
-
-	if (!ZEND_IS_VALID_FILE_HANDLE(fh))
-		return FAILURE;
-
-	init_ini_scanner(TSRMLS_C);
-	yyin = fh;
-	yy_switch_to_buffer(yy_create_buffer(yyin, YY_BUF_SIZE TSRMLS_CC) TSRMLS_CC);
-	ini_filename = fh->filename;
-	return SUCCESS;
-}
-
-void zend_ini_close_file(zend_file_handle *fh TSRMLS_DC)
-{
-	switch (fh->type) {
-		case ZEND_HANDLE_SOCKET_FD:
-#ifdef ZEND_WIN32
-			closesocket(fh->handle.fd);
-			break;
-#endif
-		/* fall-through */
-		case ZEND_HANDLE_FD:
-			close(fh->handle.fd);
-			break;
-		case ZEND_HANDLE_FP:
-			fclose(fh->handle.fp);
-			break;
-	}
-}
-
-
-#define YY_NEVER_INTERACTIVE 1
-
-/* Macros after this point can all be overridden by user definitions in
- * section 1.
- */
-
-#ifndef YY_SKIP_YYWRAP
-#ifdef __cplusplus
-extern "C" int yywrap YY_PROTO(( void ));
-#else
-extern int yywrap YY_PROTO(( void ));
-#endif
-#endif
-
-#ifndef YY_NO_UNPUT
-static void yyunput YY_PROTO(( int c, char *buf_ptr TSRMLS_DC ));
-#endif
-
-#ifndef yytext_ptr
-static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
-#endif
-
-#ifdef YY_NEED_STRLEN
-static int yy_flex_strlen YY_PROTO(( yyconst char * ));
-#endif
-
-#ifndef YY_NO_INPUT
-#ifdef __cplusplus
-static int 3 YY_PROTO(( TSRMLS_D ));
-#else
-static int input YY_PROTO(( TSRMLS_D ));
-#endif
-#endif
-
-#if YY_STACK_USED
-#define yy_start_stack_ptr SCNG(yy_start_stack_ptr)
-#define yy_start_stack_depth SCNG(yy_start_stack_depth)
-#define yy_start_stack SCNG(yy_start_stack)
-/*
-static int yy_start_stack_ptr = 0;
-static int yy_start_stack_depth = 0;
-static int *yy_start_stack = 0;
-*/
-#ifndef YY_NO_PUSH_STATE
-static void yy_push_state YY_PROTO(( int new_state TSRMLS_DC ));
-#endif
-#ifndef YY_NO_POP_STATE
-static void yy_pop_state YY_PROTO(( TSRMLS_D ));
-#endif
-#ifndef YY_NO_TOP_STATE
-static int yy_top_state YY_PROTO(( TSRMLS_D ));
-#endif
-
-#else
-#define YY_NO_PUSH_STATE 1
-#define YY_NO_POP_STATE 1
-#define YY_NO_TOP_STATE 1
-#endif
-
-#ifdef YY_MALLOC_DECL
-YY_MALLOC_DECL
-#else
-#if __STDC__
-#ifndef __cplusplus
-#include <stdlib.h>
-#endif
-#else
-/* Just try to get by without declaring the routines.  This will fail
- * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
- * or sizeof(void*) != sizeof(int).
- */
-#endif
-#endif
-
-/* Amount of stuff to slurp up with each read. */
-#ifndef YY_READ_BUF_SIZE
-#define YY_READ_BUF_SIZE 8192
-#endif
-
-/* Copy whatever the last rule matched to the standard output. */
-
-#ifndef ECHO
-#define ECHO
-#endif
-
-/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
- * is returned in "result".
- */
-
-#define YY_INPUT(buf,result,max_size) do {				\
-	result = yyin->type == ZEND_HANDLE_FD ? 			\
-			read(yyin->handle.fd, buf, max_size)		\
-			: yyin->type == ZEND_HANDLE_FP ? 			\
-			fread(buf, 1, max_size, yyin->handle.fp)	\
-			: yyin->type == ZEND_HANDLE_SOCKET_FD ?		\
-			recv(yyin->handle.fd, buf, max_size, 0)		\
-			: -1;										\
-	if (result < 0)										\
-		YY_FATAL_ERROR("input in flex scanner failed");	\
-} while (0)
-
-#ifndef YY_INPUT
-#define YY_INPUT(buf,result,max_size) \
-	if ( yy_current_buffer->yy_is_interactive ) \
-		{ \
-		int c = '*', n; \
-		for ( n = 0; n < max_size && \
-			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
-			buf[n] = (char) c; \
-		if ( c == '\n' ) \
-			buf[n++] = (char) c; \
-		if ( c == EOF && ferror( yyin ) ) \
-			YY_FATAL_ERROR( "input in flex scanner failed" ); \
-		result = n; \
-		} \
-	else \
-		{ \
-		errno=0; \
-		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
-			{ \
-			if( errno != EINTR) \
-				{ \
-				YY_FATAL_ERROR( "input in flex scanner failed" ); \
-				break; \
-				} \
-			errno=0; \
-			clearerr(yyin); \
-			} \
-		}
-#endif
-
-/* No semi-colon after return; correct usage is to write "yyterminate();" -
- * we don't want an extra ';' after the "return" because that will cause
- * some compilers to complain about unreachable statements.
- */
-#ifndef yyterminate
-#define yyterminate() return YY_NULL
-#endif
-
-/* Number of entries by which start-condition stack grows. */
-#ifndef YY_START_STACK_INCR
-#define YY_START_STACK_INCR 25
-#endif
-
-/* Report a fatal error. */
-#ifndef YY_FATAL_ERROR
-#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
-#endif
-
-
-/* Default declaration of generated scanner - a define so the user can
- * easily add parameters.
- */
-#ifndef YY_DECL
-#define YY_DECL int yylex YY_PROTO(( void ))
-#endif
-
-/* Code executed at the beginning of each rule, after yytext and yyleng
- * have been set up.
- */
-#ifndef YY_USER_ACTION
-#define YY_USER_ACTION
-#endif
-
-/* Code executed at the end of each rule. */
-#ifndef YY_BREAK
-#define YY_BREAK break;
-#endif
-
-#define YY_RULE_SETUP \
-	YY_USER_ACTION
-
-YY_DECL
-	{
-	register yy_state_type yy_current_state;
-	register char *yy_cp, *yy_bp;
-	register int yy_act;
-
-
-
-
-
-	if ( yy_init )
-		{
-		yy_init = 0;
-
-#ifdef YY_USER_INIT
-		YY_USER_INIT;
-#endif
-
-		if ( ! yy_start )
-			yy_start = 1;	/* first start state */
-
-#if 0
-		if ( ! SCNG(yy_in) )
-			SCNG(yy_in) = stdin;
-
-		if ( ! SCNG(yy_out) )
-			SCNG(yy_out) = stdout;
-#endif
-
-		if ( ! yy_current_buffer )
-			yy_current_buffer =
-				yy_create_buffer( SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC );
-
-		yy_load_buffer_state(TSRMLS_C);
-		}
-
-	while ( 1 )		/* loops until end-of-file is reached */
-		{
-		yy_cp = yy_c_buf_p;
-
-		/* Support of yytext. */
-		*yy_cp = yy_hold_char;
-
-		/* yy_bp points to the position in yy_ch_buf of the start of
-		 * the current run.
-		 */
-		yy_bp = yy_cp;
-
-		yy_current_state = yy_start;
-yy_match:
-		do
-			{
-			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
-			if ( yy_accept[yy_current_state] )
-				{
-				yy_last_accepting_state = yy_current_state;
-				yy_last_accepting_cpos = yy_cp;
-				}
-			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
-				{
-				yy_current_state = (int) yy_def[yy_current_state];
-				if ( yy_current_state >= 54 )
-					yy_c = yy_meta[(unsigned int) yy_c];
-				}
-			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
-			++yy_cp;
-			}
-		while ( yy_base[yy_current_state] != 105 );
-
-yy_find_action:
-		yy_act = yy_accept[yy_current_state];
-		if ( yy_act == 0 )
-			{ /* have to back up */
-			yy_cp = yy_last_accepting_cpos;
-			yy_current_state = yy_last_accepting_state;
-			yy_act = yy_accept[yy_current_state];
-			}
-
-		YY_DO_BEFORE_ACTION;
-
-
-do_action:	/* This label is used only to access EOF actions. */
-
-
-		switch ( yy_act )
-	{ /* beginning of action switch */
-			case 0: /* must back up */
-			/* undo the effects of YY_DO_BEFORE_ACTION */
-			*yy_cp = yy_hold_char;
-			yy_cp = yy_last_accepting_cpos;
-			yy_current_state = yy_last_accepting_state;
-			goto yy_find_action;
-
-case 1:
-YY_RULE_SETUP
-{
-	ini_lval->value.str.val = zend_strndup("1", 1);
-	ini_lval->value.str.len = 1;
-	ini_lval->type = IS_STRING;
-	return CFG_TRUE;
-}
-	YY_BREAK
-case 2:
-YY_RULE_SETUP
-{
-	ini_lval->value.str.val = zend_strndup("", 0);
-	ini_lval->value.str.len = 0;
-	ini_lval->type = IS_STRING;
-	return CFG_FALSE;
-}
-	YY_BREAK
-case 3:
-YY_RULE_SETUP
-{
-	/* SECTION */
-
-	/* eat trailing ] and spaces */
-	while (yyleng>0 && (yytext[yyleng-1]=='\n' || yytext[yyleng-1]=='\r' || yytext[yyleng-1]==']' || yytext[yyleng-1]==' ')) {
-		yyleng--;
-		yytext[yyleng]=0;
-	}
-
-	SCNG(lineno)++;
-
-	/* eat leading [ */
-	yytext++;
-	yyleng--;
-
-	ini_lval->value.str.val = zend_strndup(yytext, yyleng);
-	ini_lval->value.str.len = yyleng;
-	ini_lval->type = IS_STRING;
-	return SECTION;
-}
-	YY_BREAK
-case 4:
-YY_RULE_SETUP
-{
-	/* ENCAPSULATED TC_STRING */
-
-	/* eat trailing " */
-	yytext[yyleng-1]=0;
-
-	/* eat leading " */
-	yytext++;
-
-	ini_lval->value.str.val = zend_strndup(yytext, yyleng - 2);
-	ini_lval->value.str.len = yyleng - 2;
-	ini_lval->type = IS_STRING;
-	return TC_ENCAPSULATED_STRING;
-}
-	YY_BREAK
-case 5:
-YY_RULE_SETUP
-{
-	return yytext[0];
-}
-	YY_BREAK
-case 6:
-YY_RULE_SETUP
-{
-	/* STRING */
-	register int i;
-
-	/* eat trailing whitespace */
-	for (i=yyleng-1; i>=0; i--) {
-		if (yytext[i]==' ' || yytext[i]=='\t') {
-			yytext[i]=0;
-			yyleng--;
-		} else {
-			break;
-		}
-	}
-	/* eat leading whitespace */
-	while (yytext[0]) {
-		if (yytext[0]==' ' || yytext[0]=='\t') {
-			yytext++;
-			yyleng--;
-		} else {
-			break;
-		}
-	}
-	if (yyleng!=0) {
-		ini_lval->value.str.val = zend_strndup(yytext, yyleng);
-		ini_lval->value.str.len = yyleng;
-		ini_lval->type = IS_STRING;
-		return TC_STRING;
-	} else {
-		/* whitespace */
-	}
-}
-	YY_BREAK
-case 7:
-YY_RULE_SETUP
-{
-	if (yytext[0] == '\n') {
-		SCNG(lineno)++;
-	}	
-	return yytext[0];
-}
-	YY_BREAK
-case 8:
-YY_RULE_SETUP
-{
-	SCNG(lineno)++;
-	return '\n';
-}
-	YY_BREAK
-case 9:
-YY_RULE_SETUP
-{
-	/* comment */
-	SCNG(lineno)++;
-	return '\n';
-}
-	YY_BREAK
-case 10:
-YY_RULE_SETUP
-{
-	/* eat whitespace */
-}
-	YY_BREAK
-case 11:
-YY_RULE_SETUP
-{
-#if DEBUG
-	php_error(E_NOTICE,"Unexpected character on line %d:  '%s' (ASCII %d)\n", yylineno, yytext, yytext[0]);
-#endif
-}
-	YY_BREAK
-case YY_STATE_EOF(INITIAL):
-{
-	yy_delete_buffer(YY_CURRENT_BUFFER TSRMLS_CC);
-	yyterminate();
-}
-	YY_BREAK
-case 12:
-YY_RULE_SETUP
-ECHO;
-	YY_BREAK
-
-	case YY_END_OF_BUFFER:
-		{
-		/* Amount of text matched not including the EOB char. */
-		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;
-
-		/* Undo the effects of YY_DO_BEFORE_ACTION. */
-		*yy_cp = yy_hold_char;
-
-		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
-			{
-			/* We're scanning a new file or input source.  It's
-			 * possible that this happened because the user
-			 * just pointed yyin at a new source and called
-			 * yylex().  If so, then we have to assure
-			 * consistency between yy_current_buffer and our
-			 * globals.  Here is the right place to do so, because
-			 * this is the first action (other than possibly a
-			 * back-up) that will match for the new input source.
-			 */
-			SCNG(yy_n_chars) = yy_current_buffer->yy_n_chars;
-			yy_current_buffer->yy_input_file = SCNG(yy_in);
-			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
-			}
-
-		/* Note that here we test for yy_c_buf_p "<=" to the position
-		 * of the first EOB in the buffer, since yy_c_buf_p will
-		 * already have been incremented past the NUL character
-		 * (since all states make transitions on EOB to the
-		 * end-of-buffer state).  Contrast this with the test
-		 * in input().
-		 */
-		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars)] )
-			{ /* This was really a NUL. */
-			yy_state_type yy_next_state;
-
-			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;
-
-			yy_current_state = yy_get_previous_state(TSRMLS_C);
-
-			/* Okay, we're now positioned to make the NUL
-			 * transition.  We couldn't have
-			 * yy_get_previous_state() go ahead and do it
-			 * for us because it doesn't know how to deal
-			 * with the possibility of jamming (and we don't
-			 * want to build jamming into it because then it
-			 * will run more slowly).
-			 */
-
-			yy_next_state = yy_try_NUL_trans( yy_current_state TSRMLS_CC );
-
-			yy_bp = yytext_ptr + YY_MORE_ADJ;
-
-			if ( yy_next_state )
-				{
-				/* Consume the NUL. */
-				yy_cp = ++yy_c_buf_p;
-				yy_current_state = yy_next_state;
-				goto yy_match;
-				}
-
-			else
-				{
-				yy_cp = yy_c_buf_p;
-				goto yy_find_action;
-				}
-			}
-
-		else switch ( yy_get_next_buffer(TSRMLS_C) )
-			{
-			case EOB_ACT_END_OF_FILE:
-				{
-				yy_did_buffer_switch_on_eof = 0;
-
-				if ( yywrap() )
-					{
-					/* Note: because we've taken care in
-					 * yy_get_next_buffer() to have set up
-					 * yytext, we can now set up
-					 * yy_c_buf_p so that if some total
-					 * hoser (like flex itself) wants to
-					 * call the scanner after we return the
-					 * YY_NULL, it'll still work - another
-					 * YY_NULL will get returned.
-					 */
-					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
-
-					yy_act = YY_STATE_EOF(YY_START);
-					goto do_action;
-					}
-
-				else
-					{
-					if ( ! yy_did_buffer_switch_on_eof )
-						YY_NEW_FILE;
-					}
-				break;
-				}
-
-			case EOB_ACT_CONTINUE_SCAN:
-				yy_c_buf_p =
-					yytext_ptr + yy_amount_of_matched_text;
-
-				yy_current_state = yy_get_previous_state(TSRMLS_C);
-
-				yy_cp = yy_c_buf_p;
-				yy_bp = yytext_ptr + YY_MORE_ADJ;
-				goto yy_match;
-
-			case EOB_ACT_LAST_MATCH:
-				yy_c_buf_p =
-				&yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars)];
-
-				yy_current_state = yy_get_previous_state(TSRMLS_C);
-
-				yy_cp = yy_c_buf_p;
-				yy_bp = yytext_ptr + YY_MORE_ADJ;
-				goto yy_find_action;
-			}
-		break;
-		}
-
-	default:
-		YY_FATAL_ERROR(
-			"fatal flex scanner internal error--no action found" );
-	} /* end of action switch */
-		} /* end of scanning one token */
-	} /* end of yylex */
-
-
-/* yy_get_next_buffer - try to read in a new buffer
- *
- * Returns a code representing an action:
- *	EOB_ACT_LAST_MATCH -
- *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
- *	EOB_ACT_END_OF_FILE - end of file
- */
-
-static int yy_get_next_buffer(TSRMLS_D)
-	{
-	register char *dest = yy_current_buffer->yy_ch_buf;
-	register char *source = yytext_ptr;
-	register int number_to_move, i;
-	int ret_val;
-
-	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars) + 1] )
-		YY_FATAL_ERROR(
-		"fatal flex scanner internal error--end of buffer missed" );
-
-	if ( yy_current_buffer->yy_fill_buffer == 0 )
-		{ /* Don't try to fill the buffer, so this is an EOF. */
-		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
-			{
-			/* We matched a single character, the EOB, so
-			 * treat this as a final EOF.
-			 */
-			return EOB_ACT_END_OF_FILE;
-			}
-
-		else
-			{
-			/* We matched some text prior to the EOB, first
-			 * process it.
-			 */
-			return EOB_ACT_LAST_MATCH;
-			}
-		}
-
-	/* Try to read more data. */
-
-	/* First move last chars to start of buffer. */
-	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;
-
-	for ( i = 0; i < number_to_move; ++i )
-		*(dest++) = *(source++);
-
-	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
-		/* don't do the read, it's not guaranteed to return an EOF,
-		 * just force an EOF
-		 */
-		yy_current_buffer->yy_n_chars = SCNG(yy_n_chars) = 0;
-
-	else
-		{
-		int num_to_read =
-			yy_current_buffer->yy_buf_size - number_to_move - 1;
-
-		while ( num_to_read <= 0 )
-			{ /* Not enough room in the buffer - grow it. */
-#ifdef YY_USES_REJECT
-			YY_FATAL_ERROR(
-"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
-#else
-
-			/* just a shorter name for the current buffer */
-			YY_BUFFER_STATE b = yy_current_buffer;
-
-			int yy_c_buf_p_offset =
-				(int) (yy_c_buf_p - b->yy_ch_buf);
-
-			if ( b->yy_is_our_buffer )
-				{
-				int new_size = b->yy_buf_size * 2;
-
-				if ( new_size <= 0 )
-					b->yy_buf_size += b->yy_buf_size / 8;
-				else
-					b->yy_buf_size *= 2;
-
-				b->yy_ch_buf = (char *)
-					/* Include room in for 2 EOB chars. */
-					yy_flex_realloc( (void *) b->yy_ch_buf,
-							 b->yy_buf_size + 2 );
-				}
-			else
-				/* Can't grow it, we don't own it. */
-				b->yy_ch_buf = 0;
-
-			if ( ! b->yy_ch_buf )
-				YY_FATAL_ERROR(
-				"fatal error - scanner input buffer overflow" );
-
-			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
-
-			num_to_read = yy_current_buffer->yy_buf_size -
-						number_to_move - 1;
-#endif
-			}
-
-		if ( num_to_read > YY_READ_BUF_SIZE )
-			num_to_read = YY_READ_BUF_SIZE;
-
-		/* Read in more data. */
-		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
-			SCNG(yy_n_chars), num_to_read );
-
-		yy_current_buffer->yy_n_chars = SCNG(yy_n_chars);
-		}
-
-	if ( SCNG(yy_n_chars) == 0 )
-		{
-		if ( number_to_move == YY_MORE_ADJ )
-			{
-			ret_val = EOB_ACT_END_OF_FILE;
-			yyrestart( SCNG(yy_in) TSRMLS_CC );
-			}
-
-		else
-			{
-			ret_val = EOB_ACT_LAST_MATCH;
-			yy_current_buffer->yy_buffer_status =
-				YY_BUFFER_EOF_PENDING;
-			}
-		}
-
-	else
-		ret_val = EOB_ACT_CONTINUE_SCAN;
-
-	SCNG(yy_n_chars) += number_to_move;
-	yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
-	yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
-
-	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];
-
-	return ret_val;
-	}
-
-
-/* yy_get_previous_state - get the state just before the EOB char was reached */
-
-static yy_state_type yy_get_previous_state(TSRMLS_D)
-	{
-	register yy_state_type yy_current_state;
-	register char *yy_cp;
-
-	yy_current_state = yy_start;
-
-	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
-		{
-		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
-		if ( yy_accept[yy_current_state] )
-			{
-			yy_last_accepting_state = yy_current_state;
-			yy_last_accepting_cpos = yy_cp;
-			}
-		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
-			{
-			yy_current_state = (int) yy_def[yy_current_state];
-			if ( yy_current_state >= 54 )
-				yy_c = yy_meta[(unsigned int) yy_c];
-			}
-		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
-		}
-
-	return yy_current_state;
-	}
-
-
-/* yy_try_NUL_trans - try to make a transition on the NUL character
- *
- * synopsis
- *	next_state = yy_try_NUL_trans( current_state );
- */
-
-#ifdef YY_USE_PROTOS
-static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state TSRMLS_DC )
-#else
-static yy_state_type yy_try_NUL_trans( yy_current_state TSRMLS_CC )
-yy_state_type yy_current_state;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	register int yy_is_jam;
-	register char *yy_cp = yy_c_buf_p;
-
-	register YY_CHAR yy_c = 1;
-	if ( yy_accept[yy_current_state] )
-		{
-		yy_last_accepting_state = yy_current_state;
-		yy_last_accepting_cpos = yy_cp;
-		}
-	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
-		{
-		yy_current_state = (int) yy_def[yy_current_state];
-		if ( yy_current_state >= 54 )
-			yy_c = yy_meta[(unsigned int) yy_c];
-		}
-	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
-	yy_is_jam = (yy_current_state == 53);
-
-	return yy_is_jam ? 0 : yy_current_state;
-	}
-
-
-#ifndef YY_NO_UNPUT
-#ifdef YY_USE_PROTOS
-static void yyunput( int c, register char *yy_bp TSRMLS_DC )
-#else
-static void yyunput( c, yy_bp TSRMLS_CC )
-int c;
-register char *yy_bp;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	register char *yy_cp = yy_c_buf_p;
-
-	/* undo effects of setting up yytext */
-	*yy_cp = yy_hold_char;
-
-	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
-		{ /* need to shift things up to make room */
-		/* +2 for EOB chars. */
-		register int number_to_move = SCNG(yy_n_chars) + 2;
-		register char *dest = &yy_current_buffer->yy_ch_buf[
-					yy_current_buffer->yy_buf_size + 2];
-		register char *source =
-				&yy_current_buffer->yy_ch_buf[number_to_move];
-
-		while ( source > yy_current_buffer->yy_ch_buf )
-			*--dest = *--source;
-
-		yy_cp += (int) (dest - source);
-		yy_bp += (int) (dest - source);
-		yy_current_buffer->yy_n_chars =
-			SCNG(yy_n_chars) = yy_current_buffer->yy_buf_size;
-
-		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
-			YY_FATAL_ERROR( "flex scanner push-back overflow" );
-		}
-
-	*--yy_cp = (char) c;
-
-
-	yytext_ptr = yy_bp;
-	yy_hold_char = *yy_cp;
-	yy_c_buf_p = yy_cp;
-	}
-#endif	/* ifndef YY_NO_UNPUT */
-
-
-#ifdef __cplusplus
-static int yyinput(TSRMLS_D)
-#else
-static int input(TSRMLS_C)
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	int c;
-
-	*yy_c_buf_p = yy_hold_char;
-
-	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
-		{
-		/* yy_c_buf_p now points to the character we want to return.
-		 * If this occurs *before* the EOB characters, then it's a
-		 * valid NUL; if not, then we've hit the end of the buffer.
-		 */
-		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars)] )
-			/* This was really a NUL. */
-			*yy_c_buf_p = '\0';
-
-		else
-			{ /* need more input */
-			int offset = yy_c_buf_p - yytext_ptr;
-			++yy_c_buf_p;
-
-			switch ( yy_get_next_buffer(TSRMLS_C) )
-				{
-				case EOB_ACT_LAST_MATCH:
-					/* This happens because yy_g_n_b()
-					 * sees that we've accumulated a
-					 * token and flags that we need to
-					 * try matching the token before
-					 * proceeding.  But for input(),
-					 * there's no matching to consider.
-					 * So convert the EOB_ACT_LAST_MATCH
-					 * to EOB_ACT_END_OF_FILE.
-					 */
-
-					/* Reset buffer status. */
-					yyrestart( SCNG(yy_in) TSRMLS_CC );
-
-					/* fall through */
-
-				case EOB_ACT_END_OF_FILE:
-					{
-					if ( yywrap() )
-						return EOF;
-
-					if ( ! yy_did_buffer_switch_on_eof )
-						YY_NEW_FILE;
-#ifdef __cplusplus
-					return yyinput(TSRMLS_C);
-#else
-					return input(TSRMLS_C);
-#endif
-					}
-
-				case EOB_ACT_CONTINUE_SCAN:
-					yy_c_buf_p = yytext_ptr + offset;
-					break;
-				}
-			}
-		}
-
-	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
-	*yy_c_buf_p = '\0';	/* preserve yytext */
-	yy_hold_char = *++yy_c_buf_p;
-
-
-	return c;
-	}
-
-
-#ifdef YY_USE_PROTOS
-void yyrestart( struct _zend_file_handle *input_file TSRMLS_DC )
-#else
-void yyrestart( input_file TSRMLS_CC )
-struct _zend_file_handle *input_file;
-#endif
-	{
-	if ( ! yy_current_buffer )
-		yy_current_buffer = yy_create_buffer( SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC );
-
-	yy_init_buffer( yy_current_buffer, input_file TSRMLS_CC );
-	yy_load_buffer_state(TSRMLS_C);
-	}
-
-
-#ifdef YY_USE_PROTOS
-void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer TSRMLS_DC)
-#else
-void yy_switch_to_buffer( new_buffer TSRMLS_CC)
-YY_BUFFER_STATE new_buffer;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	if ( yy_current_buffer == new_buffer )
-		return;
-
-	if ( yy_current_buffer )
-		{
-		/* Flush out information for old buffer. */
-		*yy_c_buf_p = yy_hold_char;
-		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
-		yy_current_buffer->yy_n_chars = SCNG(yy_n_chars);
-		}
-
-	yy_current_buffer = new_buffer;
-	yy_load_buffer_state(TSRMLS_C);
-
-	/* We don't actually know whether we did this switch during
-	 * EOF (yywrap()) processing, but the only time this flag
-	 * is looked at is after yywrap() is called, so it's safe
-	 * to go ahead and always set it.
-	 */
-	yy_did_buffer_switch_on_eof = 1;
-	}
-
-
-#ifdef YY_USE_PROTOS
-void yy_load_buffer_state( TSRMLS_D )
-#else
-void yy_load_buffer_state(TSRMLS_C)
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	SCNG(yy_n_chars) = yy_current_buffer->yy_n_chars;
-	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
-	SCNG(yy_in) = yy_current_buffer->yy_input_file;
-	yy_hold_char = *yy_c_buf_p;
-	}
-
-
-#ifdef YY_USE_PROTOS
-YY_BUFFER_STATE yy_create_buffer( struct _zend_file_handle *file, int size TSRMLS_DC )
-#else
-YY_BUFFER_STATE yy_create_buffer( file, size TSRMLS_CC )
-struct _zend_file_handle *file;
-int size;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	YY_BUFFER_STATE b;
-
-	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
-	if ( ! b )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
-
-	b->yy_buf_size = size;
-
-	/* yy_ch_buf has to be 2 characters longer than the size given because
-	 * we need to put in 2 end-of-buffer characters.
-	 */
-	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
-	if ( ! b->yy_ch_buf )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
-
-	b->yy_is_our_buffer = 1;
-
-	yy_init_buffer( b, file TSRMLS_CC );
-
-	return b;
-	}
-
-
-#ifdef YY_USE_PROTOS
-void yy_delete_buffer( YY_BUFFER_STATE b TSRMLS_DC )
-#else
-void yy_delete_buffer( b TSRMLS_CC )
-YY_BUFFER_STATE b;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	if ( ! b )
-		return;
-
-	if ( b == yy_current_buffer )
-		yy_current_buffer = (YY_BUFFER_STATE) 0;
-
-	if ( b->yy_is_our_buffer )
-		yy_flex_free( (void *) b->yy_ch_buf );
-
-	yy_flex_free( (void *) b );
-	}
-
-
-#ifndef YY_ALWAYS_INTERACTIVE
-#ifndef YY_NEVER_INTERACTIVE
-#endif
-#endif
-
-#ifdef YY_USE_PROTOS
-void yy_init_buffer( YY_BUFFER_STATE b, struct _zend_file_handle *file TSRMLS_DC )
-#else
-void yy_init_buffer( b, file TSRMLS_CC )
-YY_BUFFER_STATE b;
-struct _zend_file_handle *file;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-
-
-	{
-	yy_flush_buffer( b TSRMLS_CC );
-
-	b->yy_input_file = file;
-	b->yy_fill_buffer = 1;
-
-	}
-
-
-#ifdef YY_USE_PROTOS
-void yy_flush_buffer( YY_BUFFER_STATE b TSRMLS_DC )
-#else
-void yy_flush_buffer( b TSRMLS_CC )
-YY_BUFFER_STATE b;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-
-	{
-	if ( ! b )
-		return;
-
-	b->yy_n_chars = 0;
-
-	/* We always need two end-of-buffer characters.  The first causes
-	 * a transition to the end-of-buffer state.  The second causes
-	 * a jam in that state.
-	 */
-	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
-	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
-
-	b->yy_buf_pos = &b->yy_ch_buf[0];
-
-	b->yy_at_bol = 1;
-	b->yy_buffer_status = YY_BUFFER_NEW;
-
-	if ( b == yy_current_buffer )
-		yy_load_buffer_state(TSRMLS_C);
-	}
-
-
-#ifndef YY_NO_SCAN_BUFFER
-#ifdef YY_USE_PROTOS
-YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size TSRMLS_DC )
-#else
-YY_BUFFER_STATE yy_scan_buffer( base, size TSRMLS_CC )
-char *base;
-yy_size_t size;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	YY_BUFFER_STATE b;
-
-	if ( size < 2 ||
-	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
-	     base[size-1] != YY_END_OF_BUFFER_CHAR )
-		/* They forgot to leave room for the EOB's. */
-		return 0;
-
-	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
-	if ( ! b )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
-
-	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
-	b->yy_buf_pos = b->yy_ch_buf = base;
-	b->yy_is_our_buffer = 0;
-	b->yy_input_file = 0;
-	b->yy_n_chars = b->yy_buf_size;
-	b->yy_at_bol = 1;
-	b->yy_fill_buffer = 0;
-	b->yy_buffer_status = YY_BUFFER_NEW;
-
-	yy_switch_to_buffer( b TSRMLS_CC );
-
-	return b;
-	}
-#endif
-
-
-#ifndef YY_NO_SCAN_STRING
-#ifdef YY_USE_PROTOS
-YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str TSRMLS_DC )
-#else
-YY_BUFFER_STATE yy_scan_string( yy_str TSRMLS_CC )
-yyconst char *yy_str;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	int len;
-	for ( len = 0; yy_str[len]; ++len )
-		;
-
-	return yy_scan_bytes( yy_str, len TSRMLS_CC );
-	}
-#endif
-
-
-#ifndef YY_NO_SCAN_BYTES
-#ifdef YY_USE_PROTOS
-YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len TSRMLS_DC )
-#else
-YY_BUFFER_STATE yy_scan_bytes( bytes, len TSRMLS_CC )
-yyconst char *bytes;
-int len;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	YY_BUFFER_STATE b;
-	char *buf;
-	yy_size_t n;
-	int i;
-
-	/* Get memory for full buffer, including space for trailing EOB's. */
-	n = len + 2;
-	buf = (char *) yy_flex_alloc( n );
-	if ( ! buf )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
-
-	for ( i = 0; i < len; ++i )
-		buf[i] = bytes[i];
-
-	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;
-
-	b = yy_scan_buffer( buf, n TSRMLS_CC);
-	if ( ! b )
-		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
-
-	/* It's okay to grow etc. this buffer, and we should throw it
-	 * away when we're done.
-	 */
-	b->yy_is_our_buffer = 1;
-
-	return b;
-	}
-#endif
-
-
-#ifndef YY_NO_PUSH_STATE
-#ifdef YY_USE_PROTOS
-static void yy_push_state( int new_state TSRMLS_DC )
-#else
-static void yy_push_state( new_state TSRMLS_CC )
-int new_state;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	if ( yy_start_stack_ptr >= yy_start_stack_depth )
-		{
-		yy_size_t new_size;
-
-		yy_start_stack_depth += YY_START_STACK_INCR;
-		new_size = yy_start_stack_depth * sizeof( int );
-
-		if ( ! yy_start_stack )
-			yy_start_stack = (int *) yy_flex_alloc( new_size );
-
-		else
-			yy_start_stack = (int *) yy_flex_realloc(
-					(void *) yy_start_stack, new_size );
-
-		if ( ! yy_start_stack )
-			YY_FATAL_ERROR(
-			"out of memory expanding start-condition stack" );
-		}
-
-	yy_start_stack[yy_start_stack_ptr++] = YY_START;
-
-	BEGIN(new_state);
-	}
-#endif
-
-
-#ifndef YY_NO_POP_STATE
-static void yy_pop_state(TSRMLS_D)
-	{
-	if ( --yy_start_stack_ptr < 0 )
-		YY_FATAL_ERROR( "start-condition stack underflow" );
-
-	BEGIN(yy_start_stack[yy_start_stack_ptr]);
-	}
-#endif
-
-
-#ifndef YY_NO_TOP_STATE
-static int yy_top_state(TSRMLS_D)
-	{
-	return yy_start_stack[yy_start_stack_ptr - 1];
-	}
-#endif
-
-#ifndef YY_EXIT_FAILURE
-#define YY_EXIT_FAILURE 2
-#endif
-
-#ifdef YY_USE_PROTOS
-static void yy_fatal_error( yyconst char msg[] )
-#else
-static void yy_fatal_error( msg )
-char msg[];
-#endif
-	{
-	(void) fprintf( stderr, "%s\n", msg );
-	exit( YY_EXIT_FAILURE );
-	}
-
-
-
-/* Redefine yyless() so it works in section 3 code. */
-
-#undef yyless
-#define yyless(n) \
-	do \
-		{ \
-		/* Undo effects of setting up yytext. */ \
-		yytext[yyleng] = yy_hold_char; \
-		yy_c_buf_p = yytext + n; \
-		yy_hold_char = *yy_c_buf_p; \
-		*yy_c_buf_p = '\0'; \
-		yyleng = n; \
-		} \
-	while ( 0 )
-
-
-/* Internal utility routines. */
-
-#ifndef yytext_ptr
-#ifdef YY_USE_PROTOS
-static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
-#else
-static void yy_flex_strncpy( s1, s2, n )
-char *s1;
-yyconst char *s2;
-int n;
-#endif
-	{
-	register int i;
-	for ( i = 0; i < n; ++i )
-		s1[i] = s2[i];
-	}
-#endif
-
-#ifdef YY_NEED_STRLEN
-#ifdef YY_USE_PROTOS
-static int yy_flex_strlen( yyconst char *s )
-#else
-static int yy_flex_strlen( s )
-yyconst char *s;
-#endif
-	{
-	register int n;
-	for ( n = 0; s[n]; ++n )
-		;
-
-	return n;
-	}
-#endif
-
-
-#ifdef YY_USE_PROTOS
-static void *yy_flex_alloc( yy_size_t size )
-#else
-static void *yy_flex_alloc( size )
-yy_size_t size;
-#endif
-	{
-	return (void *) malloc( size );
-	}
-
-#ifdef YY_USE_PROTOS
-static void *yy_flex_realloc( void *ptr, yy_size_t size )
-#else
-static void *yy_flex_realloc( ptr, size )
-void *ptr;
-yy_size_t size;
-#endif
-	{
-	/* The cast to (char *) in the following accommodates both
-	 * implementations that use char* generic pointers, and those
-	 * that use void* generic pointers.  It works with the latter
-	 * because both ANSI C and C++ allow castless assignment from
-	 * any pointer type to void*, and deal with argument conversions
-	 * as though doing an assignment.
-	 */
-	return (void *) realloc( (char *) ptr, size );
-	}
-
-#ifdef YY_USE_PROTOS
-static void yy_flex_free( void *ptr )
-#else
-static void yy_flex_free( ptr )
-void *ptr;
-#endif
-	{
-	free( ptr );
-	}
-
-#if YY_MAIN
-int main()
-	{
-	yylex();
-	return 0;
-	}
-#endif
+#define yy_create_buffer ini__create_buffer
+#define yy_delete_buffer ini__delete_buffer
+#define yy_scan_buffer ini__scan_buffer
+#define yy_scan_string ini__scan_string
+#define yy_scan_bytes ini__scan_bytes
+#define yy_flex_debug ini__flex_debug
+#define yy_init_buffer ini__init_buffer
+#define yy_flush_buffer ini__flush_buffer
+#define yy_load_buffer_state ini__load_buffer_state
+#define yy_switch_to_buffer ini__switch_to_buffer
+#define yyin ini_in
+#define yyleng ini_leng
+#define yylex ini_lex
+#define yyout ini_out
+#define yyrestart ini_restart
+#define yytext ini_text
+
+#line 19 "zend_ini_scanner.c"
+/* A Lexical scanner generated by flex */
+
+/* Scanner skeleton version:
+ * $Header: /repository/Zend/Attic/flex.skl,v 1.27.4.4 2003/05/31 01:37:43 sniper Exp $
+ */
+
+#define FLEX_SCANNER
+#define YY_FLEX_MAJOR_VERSION 2
+#define YY_FLEX_MINOR_VERSION 5
+
+
+/* for HAVE_* */
+#include "zend.h"
+
+/* for recv */
+#ifdef HAVE_SYS_TYPES_H
+# include <sys/types.h>
+#endif
+#ifdef HAVE_SYS_SOCKET_H
+# include <sys/socket.h> 
+#endif
+
+/* for read */
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
+#include <stdio.h>
+
+
+/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
+#ifdef c_plusplus
+#ifndef __cplusplus
+#define __cplusplus
+#endif
+#endif
+
+
+#ifdef __cplusplus
+
+#include <stdlib.h>
+#if HAVE_UNISTD_H
+#include <unistd.h>
+#endif
+
+/* Use prototypes in function declarations. */
+#define YY_USE_PROTOS
+
+/* The "const" storage-class-modifier is valid. */
+#define YY_USE_CONST
+
+#else	/* ! __cplusplus */
+
+#if __STDC__
+
+#define YY_USE_PROTOS
+#define YY_USE_CONST
+
+#endif	/* __STDC__ */
+#endif	/* ! __cplusplus */
+
+#ifdef __TURBOC__
+ #pragma warn -rch
+ #pragma warn -use
+#include <io.h>
+#include <stdlib.h>
+#define YY_USE_CONST
+#define YY_USE_PROTOS
+#endif
+
+#ifdef YY_USE_CONST
+#define yyconst const
+#else
+#define yyconst
+#endif
+
+#undef YY_USE_PROTOS
+#define YY_USE_PROTOS
+
+#ifdef YY_USE_PROTOS
+#define YY_PROTO(proto) proto
+#else
+#define YY_PROTO(proto) ()
+#endif
+
+/* Returned upon end-of-file. */
+#define YY_NULL 0
+
+/* Promotes a possibly negative, possibly signed char to an unsigned
+ * integer for use as an array index.  If the signed char is negative,
+ * we want to instead treat it as an 8-bit unsigned char, hence the
+ * double cast.
+ */
+#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
+
+/* Enter a start condition.  This macro really ought to take a parameter,
+ * but we do it the disgusting crufty way forced on us by the ()-less
+ * definition of BEGIN.
+ */
+#define BEGIN yy_start = 1 + 2 *
+
+/* Translate the current start state into a value that can be later handed
+ * to BEGIN to return to the state.  The YYSTATE alias is for lex
+ * compatibility.
+ */
+#define YY_START ((yy_start - 1) / 2)
+#define YYSTATE YY_START
+
+/* Action number for EOF rule of a given start state. */
+#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
+
+/* Special action meaning "start processing a new file". */
+#define YY_NEW_FILE yyrestart( SCNG(yy_in) TSRMLS_CC )
+
+#define YY_END_OF_BUFFER_CHAR 0
+
+/* Size of default input buffer. */
+#define YY_BUF_SIZE 16384
+
+typedef struct yy_buffer_state *YY_BUFFER_STATE;
+
+extern int yyleng;
+
+
+#define EOB_ACT_CONTINUE_SCAN 0
+#define EOB_ACT_END_OF_FILE 1
+#define EOB_ACT_LAST_MATCH 2
+
+/* The funky do-while in the following #define is used to turn the definition
+ * int a single C statement (which needs a semi-colon terminator).  This
+ * avoids problems with code like:
+ *
+ * 	if ( condition_holds )
+ *		yyless( 5 );
+ *	else
+ *		do_something_else();
+ *
+ * Prior to using the do-while the compiler would get upset at the
+ * "else" because it interpreted the "if" statement as being all
+ * done when it reached the ';' after the yyless() call.
+ */
+
+/* Return all but the first 'n' matched characters back to the input stream. */
+
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up yytext. */ \
+		*yy_cp = yy_hold_char; \
+		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
+		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
+		} \
+	while ( 0 )
+
+#define unput(c) yyunput( c, yytext_ptr TSRMLS_CC )
+
+/* The following is because we cannot portably get our hands on size_t
+ * (without autoconf's help, which isn't available because we want
+ * flex-generated scanners to compile on their own).
+ */
+typedef unsigned int yy_size_t;
+
+
+struct yy_buffer_state
+	{
+	struct _zend_file_handle *yy_input_file;
+
+	char *yy_ch_buf;		/* input buffer */
+	char *yy_buf_pos;		/* current position in input buffer */
+
+	/* Size of input buffer in bytes, not including room for EOB
+	 * characters.
+	 */
+	yy_size_t yy_buf_size;
+
+	/* Number of characters read into yy_ch_buf, not including EOB
+	 * characters.
+	 */
+	int yy_n_chars;
+
+	/* Whether we "own" the buffer - i.e., we know we created it,
+	 * and can realloc() it to grow it, and should free() it to
+	 * delete it.
+	 */
+	int yy_is_our_buffer;
+
+	/* Whether we're considered to be at the beginning of a line.
+	 * If so, '^' rules will be active on the next match, otherwise
+	 * not.
+	 */
+	int yy_at_bol;
+
+	/* Whether to try to fill the input buffer when we reach the
+	 * end of it.
+	 */
+	int yy_fill_buffer;
+
+	int yy_buffer_status;
+#define YY_BUFFER_NEW 0
+#define YY_BUFFER_NORMAL 1
+	/* When an EOF's been seen but there's still some text to process
+	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
+	 * shouldn't try reading from the input source any more.  We might
+	 * still have a bunch of tokens to match, though, because of
+	 * possible backing-up.
+	 *
+	 * When we actually see the EOF, we change the status to "new"
+	 * (via yyrestart()), so that the user can continue scanning by
+	 * just pointing yyin at a new input file.
+	 */
+#define YY_BUFFER_EOF_PENDING 2
+	};
+
+#define yy_current_buffer SCNG(current_buffer)
+#define yy_hold_char SCNG(_yy_hold_char)
+
+/* We provide macros for accessing buffer states in case in the
+ * future we want to put the buffer states in a more general
+ * "scanner state".
+ */
+#define YY_CURRENT_BUFFER yy_current_buffer
+
+
+/* yy_hold_char holds the character lost when yytext is formed. */
+
+#if 0
+static char yy_hold_char;
+
+static int yy_n_chars;		/* number of characters read into yy_ch_buf */
+#endif
+
+/* Points to current character in buffer. */
+#define yy_c_buf_p SCNG(c_buf_p)
+#define yy_init SCNG(init)
+#define yy_start SCNG(start)
+
+/* Flag which is used to allow yywrap()'s to do buffer switches
+ * instead of setting up a fresh yyin.  A bit of a hack ...
+ */
+/* static int yy_did_buffer_switch_on_eof; */
+#define yy_did_buffer_switch_on_eof SCNG(_yy_did_buffer_switch_on_eof)
+
+void yyrestart YY_PROTO(( struct _zend_file_handle  *input_file TSRMLS_DC ));
+
+void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer TSRMLS_DC ));
+void yy_load_buffer_state YY_PROTO(( TSRMLS_D ));
+YY_BUFFER_STATE yy_create_buffer YY_PROTO(( struct _zend_file_handle *file, int size TSRMLS_DC ));
+void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b TSRMLS_DC ));
+void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, struct _zend_file_handle *file TSRMLS_DC ));
+void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b TSRMLS_DC ));
+#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer TSRMLS_CC )
+
+YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size TSRMLS_DC ));
+YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str TSRMLS_DC ));
+YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len TSRMLS_DC ));
+
+
+static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
+static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
+static void yy_flex_free YY_PROTO(( void * ));
+
+#define yy_new_buffer yy_create_buffer
+
+#define yy_set_interactive(is_interactive) \
+	{ \
+	if ( ! yy_current_buffer ) \
+		yy_current_buffer = yy_create_buffer( SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC ); \
+	}
+
+#define yy_set_bol(at_bol) \
+	{ \
+	if ( ! yy_current_buffer ) \
+		yy_current_buffer = yy_create_buffer( SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC ); \
+	yy_current_buffer->yy_at_bol = at_bol; \
+	}
+
+#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
+
+
+#define yywrap() 1
+#define YY_SKIP_YYWRAP
+typedef unsigned char YY_CHAR;
+FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
+typedef int yy_state_type;
+extern char *yytext;
+#define yytext_ptr yytext
+#undef yyleng
+#define yyleng SCNG(yy_leng)
+#undef yytext
+#define yytext SCNG(yy_text)
+#undef yytext_ptr
+#define yytext_ptr SCNG(yy_text)
+#undef yyin
+#define yyin SCNG(yy_in)
+#undef yyout
+#define yyout SCNG(yy_out)
+#undef yy_last_accepting_state
+#define yy_last_accepting_state SCNG(_yy_last_accepting_state)
+#undef yy_last_accepting_cpos
+#define yy_last_accepting_cpos SCNG(_yy_last_accepting_cpos)
+#undef yy_more_flag
+#define yy_more_flag SCNG(_yy_more_flag)
+#undef yy_more_len
+#define yy_more_len SCNG(_yy_more_len)
+
+
+static yy_state_type yy_get_previous_state YY_PROTO(( TSRMLS_D ));
+static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state TSRMLS_DC ));
+static int yy_get_next_buffer YY_PROTO(( TSRMLS_D ));
+static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));
+
+/* Done after the current pattern has been matched and before the
+ * corresponding action - sets up yytext.
+ */
+#define YY_DO_BEFORE_ACTION \
+	yytext_ptr = yy_bp; \
+	yyleng = (int) (yy_cp - yy_bp); \
+	yy_hold_char = *yy_cp; \
+	*yy_cp = '\0'; \
+	yy_c_buf_p = yy_cp;
+
+#undef yyleng
+#undef yytext
+#undef yytext_ptr
+#undef yyin
+#undef yyout
+#undef yy_last_accepting_state
+#undef yy_last_accepting_cpos
+#undef yy_more_flag
+#undef yy_more_len
+
+
+#define YY_NUM_RULES 12
+#define YY_END_OF_BUFFER 13
+static yyconst short int yy_accept[54] =
+    {   0,
+        0,    0,   13,    6,   10,    7,    8,    6,    5,   11,
+        9,    7,    6,    6,    6,    6,    6,    6,    6,    8,
+        6,    6,    6,    6,    6,    6,    0,    4,    9,    9,
+        9,    6,    0,    6,    2,    6,    1,    6,    6,    3,
+        3,    6,    2,    6,    2,    1,    6,    3,    3,    3,
+        3,    6,    0
+    } ;
+
+static yyconst int yy_ec[256] =
+    {   0,
+        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
+        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    5,    6,    7,    1,    1,    1,    6,    1,    6,
+        6,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    8,    1,
+        9,    1,    1,    1,   12,    1,    1,    1,   13,   14,
+        1,    1,    1,    1,    1,   15,    1,   16,   17,    1,
+        1,   18,   19,   20,   21,    1,    1,    1,   22,    1,
+       10,    1,   11,    1,    1,    1,   12,    1,    1,    1,
+
+       13,   14,    1,    1,    1,    1,    1,   15,    1,   16,
+       17,    1,    1,   18,   19,   20,   21,    1,    1,    1,
+       22,    1,    1,    6,    1,    6,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1
+    } ;
+
+static yyconst int yy_meta[23] =
+    {   0,
+        1,    2,    3,    4,    1,    2,    2,    2,    2,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1
+    } ;
+
+static yyconst short int yy_base[59] =
+    {   0,
+        0,    0,  104,    0,  105,  105,  100,   18,  105,   95,
+       21,  105,   39,   89,   83,   12,   81,   85,    0,  105,
+        0,   85,   79,   13,   77,   81,   86,  105,   27,  105,
+       89,   49,   80,   75,   28,   75,   83,   66,   66,   58,
+       61,   62,   54,   41,   47,   44,   29,  105,   36,   64,
+       67,   24,  105,   35,   72,   74,   78,   82
+    } ;
+
+static yyconst short int yy_def[59] =
+    {   0,
+       53,    1,   53,   54,   53,   53,   53,   54,   53,   55,
+       56,   53,   57,   54,   54,   54,   54,   54,   54,   53,
+        8,   54,   54,   54,   54,   54,   55,   53,   56,   53,
+       53,   57,   58,   54,   54,   54,   54,   54,   54,   54,
+       53,   54,   54,   54,   54,   54,   54,   53,   53,   54,
+       53,   54,    0,   53,   53,   53,   53,   53
+    } ;
+
+static yyconst short int yy_nxt[128] =
+    {   0,
+        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
+        4,    4,    4,   14,    4,   15,   16,    4,    4,   17,
+        4,   18,   21,   30,   31,   36,   36,   37,   37,   30,
+       31,   22,   43,   23,   24,   19,   45,   25,   48,   26,
+       33,   37,   33,   44,   33,   33,   33,   33,   46,   19,
+       33,   43,   33,   45,   33,   33,   33,   33,   43,   40,
+       48,   49,   50,   48,   49,   51,   48,   49,   50,   48,
+       49,   51,   27,   27,   29,   29,   29,   29,   32,   32,
+       52,   32,   33,   33,   37,   33,   47,   46,   45,   42,
+       41,   30,   28,   39,   38,   35,   34,   39,   38,   35,
+
+       34,   28,   20,   53,    3,   53,   53,   53,   53,   53,
+       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
+       53,   53,   53,   53,   53,   53,   53
+    } ;
+
+static yyconst short int yy_chk[128] =
+    {   0,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    8,   11,   11,   16,   24,   16,   24,   29,
+       29,    8,   35,    8,    8,   54,   52,    8,   49,    8,
+       13,   47,   13,   35,   13,   13,   13,   13,   46,   13,
+       32,   45,   32,   44,   32,   32,   32,   32,   43,   32,
+       40,   40,   40,   41,   41,   41,   50,   50,   50,   51,
+       51,   51,   55,   55,   56,   56,   56,   56,   57,   57,
+       42,   57,   58,   58,   39,   58,   38,   37,   36,   34,
+       33,   31,   27,   26,   25,   23,   22,   18,   17,   15,
+
+       14,   10,    7,    3,   53,   53,   53,   53,   53,   53,
+       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
+       53,   53,   53,   53,   53,   53,   53
+    } ;
+
+static yy_state_type yy_last_accepting_state;
+static char *yy_last_accepting_cpos;
+
+/* The intent behind this definition is that it'll catch
+ * any uses of REJECT which flex missed.
+ */
+#define REJECT reject_used_but_not_detected
+#define yymore() yymore_used_but_not_detected
+#define YY_MORE_ADJ 0
+#define YY_RESTORE_YY_MORE_OFFSET
+char *yytext;
+#line 1 "zend_ini_scanner.l"
+#define INITIAL 0
+#line 2 "zend_ini_scanner.l"
+/*
+   +----------------------------------------------------------------------+
+   | Zend Engine                                                          |
+   +----------------------------------------------------------------------+
+   | Copyright (c) 1998-2002 Zend Technologies Ltd. (http://www.zend.com) |
+   +----------------------------------------------------------------------+
+   | This source file is subject to version 2.00 of the Zend license,     |
+   | that is bundled with this package in the file LICENSE, and is        |
+   | available at through the world-wide-web at                           |
+   | http://www.zend.com/license/2_00.txt.                                |
+   | If you did not receive a copy of the Zend license and are unable to  |
+   | obtain it through the world-wide-web, please send a note to          |
+   | license@zend.com so we can mail you a copy immediately.              |
+   +----------------------------------------------------------------------+
+   | Author: Zeev Suraski <zeev@zend.com>                                 |
+   +----------------------------------------------------------------------+
+*/
+
+/* $Id: zend_ini_scanner.l,v 1.26.2.10 2005/02/06 23:50:47 zeev Exp $ */
+
+#define yyleng SCNG(yy_leng)
+#define yytext SCNG(yy_text)
+#define yytext_ptr SCNG(yy_text)
+#define yyin SCNG(yy_in)
+#define yyout SCNG(yy_out)
+#define yy_last_accepting_state SCNG(_yy_last_accepting_state)
+#define yy_last_accepting_cpos SCNG(_yy_last_accepting_cpos)
+#define yy_more_flag SCNG(_yy_more_flag)
+#define yy_more_len SCNG(_yy_more_len)
+
+#include <errno.h>
+#include "zend.h"
+#include "zend_globals.h"
+#include <zend_ini_parser.h>
+#include "zend_ini_scanner.h"
+
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
+
+#undef YYSTYPE
+#define YYSTYPE zval
+
+#define YY_DECL int ini_lex(zval *ini_lval TSRMLS_DC)
+
+/* Globals Macros */
+#define SCNG	INI_SCNG
+#ifdef ZTS
+ZEND_API ts_rsrc_id ini_scanner_globals_id;
+#else
+ZEND_API zend_scanner_globals ini_scanner_globals;
+#endif
+
+#ifdef ZEND_WIN32
+#include <io.h>
+#endif
+
+static char *ini_filename;
+
+void init_ini_scanner(TSRMLS_D)
+{
+	SCNG(lineno)=1;
+}
+
+
+int zend_ini_scanner_get_lineno(TSRMLS_D)
+{
+	return SCNG(lineno);
+}
+
+
+char *zend_ini_scanner_get_filename(TSRMLS_D)
+{
+	return ini_filename;
+}
+
+
+int zend_ini_open_file_for_scanning(zend_file_handle *fh TSRMLS_DC)
+{
+	switch (fh->type) {
+		case ZEND_HANDLE_FILENAME:
+			fh->type = ZEND_HANDLE_FP;
+			fh->handle.fp = zend_fopen(fh->filename, NULL);
+			break;
+	}
+
+	if (!ZEND_IS_VALID_FILE_HANDLE(fh))
+		return FAILURE;
+
+	init_ini_scanner(TSRMLS_C);
+	yyin = fh;
+	yy_switch_to_buffer(yy_create_buffer(yyin, YY_BUF_SIZE TSRMLS_CC) TSRMLS_CC);
+	ini_filename = fh->filename;
+	return SUCCESS;
+}
+
+void zend_ini_close_file(zend_file_handle *fh TSRMLS_DC)
+{
+	switch (fh->type) {
+		case ZEND_HANDLE_SOCKET_FD:
+#ifdef ZEND_WIN32
+			closesocket(fh->handle.fd);
+			break;
+#endif
+		/* fall-through */
+		case ZEND_HANDLE_FD:
+			close(fh->handle.fd);
+			break;
+		case ZEND_HANDLE_FP:
+			fclose(fh->handle.fp);
+			break;
+	}
+}
+
+
+#define YY_NEVER_INTERACTIVE 1
+#line 588 "zend_ini_scanner.c"
+
+/* Macros after this point can all be overridden by user definitions in
+ * section 1.
+ */
+
+#ifndef YY_SKIP_YYWRAP
+#ifdef __cplusplus
+extern "C" int yywrap YY_PROTO(( void ));
+#else
+extern int yywrap YY_PROTO(( void ));
+#endif
+#endif
+
+#ifndef YY_NO_UNPUT
+static void yyunput YY_PROTO(( int c, char *buf_ptr TSRMLS_DC ));
+#endif
+
+#ifndef yytext_ptr
+static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
+#endif
+
+#ifdef YY_NEED_STRLEN
+static int yy_flex_strlen YY_PROTO(( yyconst char * ));
+#endif
+
+#ifndef YY_NO_INPUT
+#ifdef __cplusplus
+static int 3 YY_PROTO(( TSRMLS_D ));
+#else
+static int input YY_PROTO(( TSRMLS_D ));
+#endif
+#endif
+
+#if YY_STACK_USED
+#define yy_start_stack_ptr SCNG(yy_start_stack_ptr)
+#define yy_start_stack_depth SCNG(yy_start_stack_depth)
+#define yy_start_stack SCNG(yy_start_stack)
+/*
+static int yy_start_stack_ptr = 0;
+static int yy_start_stack_depth = 0;
+static int *yy_start_stack = 0;
+*/
+#ifndef YY_NO_PUSH_STATE
+static void yy_push_state YY_PROTO(( int new_state TSRMLS_DC ));
+#endif
+#ifndef YY_NO_POP_STATE
+static void yy_pop_state YY_PROTO(( TSRMLS_D ));
+#endif
+#ifndef YY_NO_TOP_STATE
+static int yy_top_state YY_PROTO(( TSRMLS_D ));
+#endif
+
+#else
+#define YY_NO_PUSH_STATE 1
+#define YY_NO_POP_STATE 1
+#define YY_NO_TOP_STATE 1
+#endif
+
+#ifdef YY_MALLOC_DECL
+YY_MALLOC_DECL
+#else
+#if __STDC__
+#ifndef __cplusplus
+#include <stdlib.h>
+#endif
+#else
+/* Just try to get by without declaring the routines.  This will fail
+ * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
+ * or sizeof(void*) != sizeof(int).
+ */
+#endif
+#endif
+
+/* Amount of stuff to slurp up with each read. */
+#ifndef YY_READ_BUF_SIZE
+#define YY_READ_BUF_SIZE 8192
+#endif
+
+/* Copy whatever the last rule matched to the standard output. */
+
+#ifndef ECHO
+#define ECHO
+#endif
+
+/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
+ * is returned in "result".
+ */
+
+#define YY_INPUT(buf,result,max_size) do {				\
+	result = yyin->type == ZEND_HANDLE_FD ? 			\
+			read(yyin->handle.fd, buf, max_size)		\
+			: yyin->type == ZEND_HANDLE_FP ? 			\
+			fread(buf, 1, max_size, yyin->handle.fp)	\
+			: yyin->type == ZEND_HANDLE_SOCKET_FD ?		\
+			recv(yyin->handle.fd, buf, max_size, 0)		\
+			: -1;										\
+	if (result < 0)										\
+		YY_FATAL_ERROR("input in flex scanner failed");	\
+} while (0)
+
+#ifndef YY_INPUT
+#define YY_INPUT(buf,result,max_size) \
+	if ( yy_current_buffer->yy_is_interactive ) \
+		{ \
+		int c = '*', n; \
+		for ( n = 0; n < max_size && \
+			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
+			buf[n] = (char) c; \
+		if ( c == '\n' ) \
+			buf[n++] = (char) c; \
+		if ( c == EOF && ferror( yyin ) ) \
+			YY_FATAL_ERROR( "input in flex scanner failed" ); \
+		result = n; \
+		} \
+	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
+		  && ferror( yyin ) ) \
+		YY_FATAL_ERROR( "input in flex scanner failed" );
+#endif
+
+/* No semi-colon after return; correct usage is to write "yyterminate();" -
+ * we don't want an extra ';' after the "return" because that will cause
+ * some compilers to complain about unreachable statements.
+ */
+#ifndef yyterminate
+#define yyterminate() return YY_NULL
+#endif
+
+/* Number of entries by which start-condition stack grows. */
+#ifndef YY_START_STACK_INCR
+#define YY_START_STACK_INCR 25
+#endif
+
+/* Report a fatal error. */
+#ifndef YY_FATAL_ERROR
+#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
+#endif
+
+
+/* Default declaration of generated scanner - a define so the user can
+ * easily add parameters.
+ */
+#ifndef YY_DECL
+#define YY_DECL int yylex YY_PROTO(( void ))
+#endif
+
+/* Code executed at the beginning of each rule, after yytext and yyleng
+ * have been set up.
+ */
+#ifndef YY_USER_ACTION
+#define YY_USER_ACTION
+#endif
+
+/* Code executed at the end of each rule. */
+#ifndef YY_BREAK
+#define YY_BREAK break;
+#endif
+
+#define YY_RULE_SETUP \
+	YY_USER_ACTION
+
+YY_DECL
+	{
+	register yy_state_type yy_current_state;
+	register char *yy_cp, *yy_bp;
+	register int yy_act;
+
+#line 124 "zend_ini_scanner.l"
+
+
+
+#line 759 "zend_ini_scanner.c"
+
+	if ( yy_init )
+		{
+		yy_init = 0;
+
+#ifdef YY_USER_INIT
+		YY_USER_INIT;
+#endif
+
+		if ( ! yy_start )
+			yy_start = 1;	/* first start state */
+
+#if 0
+		if ( ! SCNG(yy_in) )
+			SCNG(yy_in) = stdin;
+
+		if ( ! SCNG(yy_out) )
+			SCNG(yy_out) = stdout;
+#endif
+
+		if ( ! yy_current_buffer )
+			yy_current_buffer =
+				yy_create_buffer( SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC );
+
+		yy_load_buffer_state(TSRMLS_C);
+		}
+
+	while ( 1 )		/* loops until end-of-file is reached */
+		{
+		yy_cp = yy_c_buf_p;
+
+		/* Support of yytext. */
+		*yy_cp = yy_hold_char;
+
+		/* yy_bp points to the position in yy_ch_buf of the start of
+		 * the current run.
+		 */
+		yy_bp = yy_cp;
+
+		yy_current_state = yy_start;
+yy_match:
+		do
+			{
+			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
+			if ( yy_accept[yy_current_state] )
+				{
+				yy_last_accepting_state = yy_current_state;
+				yy_last_accepting_cpos = yy_cp;
+				}
+			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+				{
+				yy_current_state = (int) yy_def[yy_current_state];
+				if ( yy_current_state >= 54 )
+					yy_c = yy_meta[(unsigned int) yy_c];
+				}
+			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+			++yy_cp;
+			}
+		while ( yy_current_state != 53 );
+		yy_cp = yy_last_accepting_cpos;
+		yy_current_state = yy_last_accepting_state;
+
+yy_find_action:
+		yy_act = yy_accept[yy_current_state];
+
+		YY_DO_BEFORE_ACTION;
+
+
+do_action:	/* This label is used only to access EOF actions. */
+
+
+		switch ( yy_act )
+	{ /* beginning of action switch */
+			case 0: /* must back up */
+			/* undo the effects of YY_DO_BEFORE_ACTION */
+			*yy_cp = yy_hold_char;
+			yy_cp = yy_last_accepting_cpos;
+			yy_current_state = yy_last_accepting_state;
+			goto yy_find_action;
+
+case 1:
+YY_RULE_SETUP
+#line 127 "zend_ini_scanner.l"
+{
+	ini_lval->value.str.val = zend_strndup("1", 1);
+	ini_lval->value.str.len = 1;
+	ini_lval->type = IS_STRING;
+	return CFG_TRUE;
+}
+	YY_BREAK
+case 2:
+YY_RULE_SETUP
+#line 135 "zend_ini_scanner.l"
+{
+	ini_lval->value.str.val = zend_strndup("", 0);
+	ini_lval->value.str.len = 0;
+	ini_lval->type = IS_STRING;
+	return CFG_FALSE;
+}
+	YY_BREAK
+case 3:
+YY_RULE_SETUP
+#line 142 "zend_ini_scanner.l"
+{
+	/* SECTION */
+
+	/* eat trailing ] and spaces */
+	while (yyleng>0 && (yytext[yyleng-1]=='\n' || yytext[yyleng-1]=='\r' || yytext[yyleng-1]==']' || yytext[yyleng-1]==' ')) {
+		yyleng--;
+		yytext[yyleng]=0;
+	}
+
+	SCNG(lineno)++;
+
+	/* eat leading [ */
+	yytext++;
+	yyleng--;
+
+	ini_lval->value.str.val = zend_strndup(yytext, yyleng);
+	ini_lval->value.str.len = yyleng;
+	ini_lval->type = IS_STRING;
+	return SECTION;
+}
+	YY_BREAK
+case 4:
+YY_RULE_SETUP
+#line 164 "zend_ini_scanner.l"
+{
+	/* ENCAPSULATED TC_STRING */
+
+	/* eat trailing " */
+	yytext[yyleng-1]=0;
+
+	/* eat leading " */
+	yytext++;
+
+	ini_lval->value.str.val = zend_strndup(yytext, yyleng - 2);
+	ini_lval->value.str.len = yyleng - 2;
+	ini_lval->type = IS_STRING;
+	return TC_ENCAPSULATED_STRING;
+}
+	YY_BREAK
+case 5:
+YY_RULE_SETUP
+#line 179 "zend_ini_scanner.l"
+{
+	return yytext[0];
+}
+	YY_BREAK
+case 6:
+YY_RULE_SETUP
+#line 184 "zend_ini_scanner.l"
+{
+	/* STRING */
+	register int i;
+
+	/* eat trailing whitespace */
+	for (i=yyleng-1; i>=0; i--) {
+		if (yytext[i]==' ' || yytext[i]=='\t') {
+			yytext[i]=0;
+			yyleng--;
+		} else {
+			break;
+		}
+	}
+	/* eat leading whitespace */
+	while (yytext[0]) {
+		if (yytext[0]==' ' || yytext[0]=='\t') {
+			yytext++;
+			yyleng--;
+		} else {
+			break;
+		}
+	}
+	if (yyleng!=0) {
+		ini_lval->value.str.val = zend_strndup(yytext, yyleng);
+		ini_lval->value.str.len = yyleng;
+		ini_lval->type = IS_STRING;
+		return TC_STRING;
+	} else {
+		/* whitespace */
+	}
+}
+	YY_BREAK
+case 7:
+YY_RULE_SETUP
+#line 216 "zend_ini_scanner.l"
+{
+	if (yytext[0] == '\n') {
+		SCNG(lineno)++;
+	}	
+	return yytext[0];
+}
+	YY_BREAK
+case 8:
+YY_RULE_SETUP
+#line 223 "zend_ini_scanner.l"
+{
+	SCNG(lineno)++;
+	return '\n';
+}
+	YY_BREAK
+case 9:
+YY_RULE_SETUP
+#line 228 "zend_ini_scanner.l"
+{
+	/* comment */
+	SCNG(lineno)++;
+	return '\n';
+}
+	YY_BREAK
+case 10:
+YY_RULE_SETUP
+#line 234 "zend_ini_scanner.l"
+{
+	/* eat whitespace */
+}
+	YY_BREAK
+case 11:
+YY_RULE_SETUP
+#line 238 "zend_ini_scanner.l"
+{
+#if DEBUG
+	php_error(E_NOTICE,"Unexpected character on line %d:  '%s' (ASCII %d)\n", yylineno, yytext, yytext[0]);
+#endif
+}
+	YY_BREAK
+case YY_STATE_EOF(INITIAL):
+#line 244 "zend_ini_scanner.l"
+{
+	yy_delete_buffer(YY_CURRENT_BUFFER TSRMLS_CC);
+	yyterminate();
+}
+	YY_BREAK
+case 12:
+YY_RULE_SETUP
+#line 248 "zend_ini_scanner.l"
+ECHO;
+	YY_BREAK
+#line 999 "zend_ini_scanner.c"
+
+	case YY_END_OF_BUFFER:
+		{
+		/* Amount of text matched not including the EOB char. */
+		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;
+
+		/* Undo the effects of YY_DO_BEFORE_ACTION. */
+		*yy_cp = yy_hold_char;
+
+		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
+			{
+			/* We're scanning a new file or input source.  It's
+			 * possible that this happened because the user
+			 * just pointed yyin at a new source and called
+			 * yylex().  If so, then we have to assure
+			 * consistency between yy_current_buffer and our
+			 * globals.  Here is the right place to do so, because
+			 * this is the first action (other than possibly a
+			 * back-up) that will match for the new input source.
+			 */
+			SCNG(yy_n_chars) = yy_current_buffer->yy_n_chars;
+			yy_current_buffer->yy_input_file = SCNG(yy_in);
+			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
+			}
+
+		/* Note that here we test for yy_c_buf_p "<=" to the position
+		 * of the first EOB in the buffer, since yy_c_buf_p will
+		 * already have been incremented past the NUL character
+		 * (since all states make transitions on EOB to the
+		 * end-of-buffer state).  Contrast this with the test
+		 * in input().
+		 */
+		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars)] )
+			{ /* This was really a NUL. */
+			yy_state_type yy_next_state;
+
+			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;
+
+			yy_current_state = yy_get_previous_state(TSRMLS_C);
+
+			/* Okay, we're now positioned to make the NUL
+			 * transition.  We couldn't have
+			 * yy_get_previous_state() go ahead and do it
+			 * for us because it doesn't know how to deal
+			 * with the possibility of jamming (and we don't
+			 * want to build jamming into it because then it
+			 * will run more slowly).
+			 */
+
+			yy_next_state = yy_try_NUL_trans( yy_current_state TSRMLS_CC );
+
+			yy_bp = yytext_ptr + YY_MORE_ADJ;
+
+			if ( yy_next_state )
+				{
+				/* Consume the NUL. */
+				yy_cp = ++yy_c_buf_p;
+				yy_current_state = yy_next_state;
+				goto yy_match;
+				}
+
+			else
+				{
+				yy_cp = yy_last_accepting_cpos;
+				yy_current_state = yy_last_accepting_state;
+				goto yy_find_action;
+				}
+			}
+
+		else switch ( yy_get_next_buffer(TSRMLS_C) )
+			{
+			case EOB_ACT_END_OF_FILE:
+				{
+				yy_did_buffer_switch_on_eof = 0;
+
+				if ( yywrap() )
+					{
+					/* Note: because we've taken care in
+					 * yy_get_next_buffer() to have set up
+					 * yytext, we can now set up
+					 * yy_c_buf_p so that if some total
+					 * hoser (like flex itself) wants to
+					 * call the scanner after we return the
+					 * YY_NULL, it'll still work - another
+					 * YY_NULL will get returned.
+					 */
+					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
+
+					yy_act = YY_STATE_EOF(YY_START);
+					goto do_action;
+					}
+
+				else
+					{
+					if ( ! yy_did_buffer_switch_on_eof )
+						YY_NEW_FILE;
+					}
+				break;
+				}
+
+			case EOB_ACT_CONTINUE_SCAN:
+				yy_c_buf_p =
+					yytext_ptr + yy_amount_of_matched_text;
+
+				yy_current_state = yy_get_previous_state(TSRMLS_C);
+
+				yy_cp = yy_c_buf_p;
+				yy_bp = yytext_ptr + YY_MORE_ADJ;
+				goto yy_match;
+
+			case EOB_ACT_LAST_MATCH:
+				yy_c_buf_p =
+				&yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars)];
+
+				yy_current_state = yy_get_previous_state(TSRMLS_C);
+
+				yy_cp = yy_c_buf_p;
+				yy_bp = yytext_ptr + YY_MORE_ADJ;
+				goto yy_find_action;
+			}
+		break;
+		}
+
+	default:
+		YY_FATAL_ERROR(
+			"fatal flex scanner internal error--no action found" );
+	} /* end of action switch */
+		} /* end of scanning one token */
+	} /* end of yylex */
+
+
+/* yy_get_next_buffer - try to read in a new buffer
+ *
+ * Returns a code representing an action:
+ *	EOB_ACT_LAST_MATCH -
+ *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
+ *	EOB_ACT_END_OF_FILE - end of file
+ */
+
+static int yy_get_next_buffer(TSRMLS_D)
+	{
+	register char *dest = yy_current_buffer->yy_ch_buf;
+	register char *source = yytext_ptr;
+	register int number_to_move, i;
+	int ret_val;
+
+	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars) + 1] )
+		YY_FATAL_ERROR(
+		"fatal flex scanner internal error--end of buffer missed" );
+
+	if ( yy_current_buffer->yy_fill_buffer == 0 )
+		{ /* Don't try to fill the buffer, so this is an EOF. */
+		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
+			{
+			/* We matched a single character, the EOB, so
+			 * treat this as a final EOF.
+			 */
+			return EOB_ACT_END_OF_FILE;
+			}
+
+		else
+			{
+			/* We matched some text prior to the EOB, first
+			 * process it.
+			 */
+			return EOB_ACT_LAST_MATCH;
+			}
+		}
+
+	/* Try to read more data. */
+
+	/* First move last chars to start of buffer. */
+	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;
+
+	for ( i = 0; i < number_to_move; ++i )
+		*(dest++) = *(source++);
+
+	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
+		/* don't do the read, it's not guaranteed to return an EOF,
+		 * just force an EOF
+		 */
+		yy_current_buffer->yy_n_chars = SCNG(yy_n_chars) = 0;
+
+	else
+		{
+		int num_to_read =
+			yy_current_buffer->yy_buf_size - number_to_move - 1;
+
+		while ( num_to_read <= 0 )
+			{ /* Not enough room in the buffer - grow it. */
+#ifdef YY_USES_REJECT
+			YY_FATAL_ERROR(
+"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
+#else
+
+			/* just a shorter name for the current buffer */
+			YY_BUFFER_STATE b = yy_current_buffer;
+
+			int yy_c_buf_p_offset =
+				(int) (yy_c_buf_p - b->yy_ch_buf);
+
+			if ( b->yy_is_our_buffer )
+				{
+				int new_size = b->yy_buf_size * 2;
+
+				if ( new_size <= 0 )
+					b->yy_buf_size += b->yy_buf_size / 8;
+				else
+					b->yy_buf_size *= 2;
+
+				b->yy_ch_buf = (char *)
+					/* Include room in for 2 EOB chars. */
+					yy_flex_realloc( (void *) b->yy_ch_buf,
+							 b->yy_buf_size + 2 );
+				}
+			else
+				/* Can't grow it, we don't own it. */
+				b->yy_ch_buf = 0;
+
+			if ( ! b->yy_ch_buf )
+				YY_FATAL_ERROR(
+				"fatal error - scanner input buffer overflow" );
+
+			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
+
+			num_to_read = yy_current_buffer->yy_buf_size -
+						number_to_move - 1;
+#endif
+			}
+
+		if ( num_to_read > YY_READ_BUF_SIZE )
+			num_to_read = YY_READ_BUF_SIZE;
+
+		/* Read in more data. */
+		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
+			SCNG(yy_n_chars), num_to_read );
+
+		yy_current_buffer->yy_n_chars = SCNG(yy_n_chars);
+		}
+
+	if ( SCNG(yy_n_chars) == 0 )
+		{
+		if ( number_to_move == YY_MORE_ADJ )
+			{
+			ret_val = EOB_ACT_END_OF_FILE;
+			yyrestart( SCNG(yy_in) TSRMLS_CC );
+			}
+
+		else
+			{
+			ret_val = EOB_ACT_LAST_MATCH;
+			yy_current_buffer->yy_buffer_status =
+				YY_BUFFER_EOF_PENDING;
+			}
+		}
+
+	else
+		ret_val = EOB_ACT_CONTINUE_SCAN;
+
+	SCNG(yy_n_chars) += number_to_move;
+	yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
+	yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
+
+	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];
+
+	return ret_val;
+	}
+
+
+/* yy_get_previous_state - get the state just before the EOB char was reached */
+
+static yy_state_type yy_get_previous_state(TSRMLS_D)
+	{
+	register yy_state_type yy_current_state;
+	register char *yy_cp;
+
+	yy_current_state = yy_start;
+
+	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
+		{
+		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
+		if ( yy_accept[yy_current_state] )
+			{
+			yy_last_accepting_state = yy_current_state;
+			yy_last_accepting_cpos = yy_cp;
+			}
+		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+			{
+			yy_current_state = (int) yy_def[yy_current_state];
+			if ( yy_current_state >= 54 )
+				yy_c = yy_meta[(unsigned int) yy_c];
+			}
+		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+		}
+
+	return yy_current_state;
+	}
+
+
+/* yy_try_NUL_trans - try to make a transition on the NUL character
+ *
+ * synopsis
+ *	next_state = yy_try_NUL_trans( current_state );
+ */
+
+#ifdef YY_USE_PROTOS
+static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state TSRMLS_DC )
+#else
+static yy_state_type yy_try_NUL_trans( yy_current_state TSRMLS_CC )
+yy_state_type yy_current_state;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	register int yy_is_jam;
+	register char *yy_cp = yy_c_buf_p;
+
+	register YY_CHAR yy_c = 1;
+	if ( yy_accept[yy_current_state] )
+		{
+		yy_last_accepting_state = yy_current_state;
+		yy_last_accepting_cpos = yy_cp;
+		}
+	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+		{
+		yy_current_state = (int) yy_def[yy_current_state];
+		if ( yy_current_state >= 54 )
+			yy_c = yy_meta[(unsigned int) yy_c];
+		}
+	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+	yy_is_jam = (yy_current_state == 53);
+
+	return yy_is_jam ? 0 : yy_current_state;
+	}
+
+
+#ifndef YY_NO_UNPUT
+#ifdef YY_USE_PROTOS
+static void yyunput( int c, register char *yy_bp TSRMLS_DC )
+#else
+static void yyunput( c, yy_bp TSRMLS_CC )
+int c;
+register char *yy_bp;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	register char *yy_cp = yy_c_buf_p;
+
+	/* undo effects of setting up yytext */
+	*yy_cp = yy_hold_char;
+
+	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
+		{ /* need to shift things up to make room */
+		/* +2 for EOB chars. */
+		register int number_to_move = SCNG(yy_n_chars) + 2;
+		register char *dest = &yy_current_buffer->yy_ch_buf[
+					yy_current_buffer->yy_buf_size + 2];
+		register char *source =
+				&yy_current_buffer->yy_ch_buf[number_to_move];
+
+		while ( source > yy_current_buffer->yy_ch_buf )
+			*--dest = *--source;
+
+		yy_cp += (int) (dest - source);
+		yy_bp += (int) (dest - source);
+		yy_current_buffer->yy_n_chars =
+			SCNG(yy_n_chars) = yy_current_buffer->yy_buf_size;
+
+		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
+			YY_FATAL_ERROR( "flex scanner push-back overflow" );
+		}
+
+	*--yy_cp = (char) c;
+
+
+	yytext_ptr = yy_bp;
+	yy_hold_char = *yy_cp;
+	yy_c_buf_p = yy_cp;
+	}
+#endif	/* ifndef YY_NO_UNPUT */
+
+
+#ifdef __cplusplus
+static int yyinput(TSRMLS_D)
+#else
+static int input(TSRMLS_C)
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	int c;
+
+	*yy_c_buf_p = yy_hold_char;
+
+	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
+		{
+		/* yy_c_buf_p now points to the character we want to return.
+		 * If this occurs *before* the EOB characters, then it's a
+		 * valid NUL; if not, then we've hit the end of the buffer.
+		 */
+		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars)] )
+			/* This was really a NUL. */
+			*yy_c_buf_p = '\0';
+
+		else
+			{ /* need more input */
+			int offset = yy_c_buf_p - yytext_ptr;
+			++yy_c_buf_p;
+
+			switch ( yy_get_next_buffer(TSRMLS_C) )
+				{
+				case EOB_ACT_LAST_MATCH:
+					/* This happens because yy_g_n_b()
+					 * sees that we've accumulated a
+					 * token and flags that we need to
+					 * try matching the token before
+					 * proceeding.  But for input(),
+					 * there's no matching to consider.
+					 * So convert the EOB_ACT_LAST_MATCH
+					 * to EOB_ACT_END_OF_FILE.
+					 */
+
+					/* Reset buffer status. */
+					yyrestart( SCNG(yy_in) TSRMLS_CC );
+
+					/* fall through */
+
+				case EOB_ACT_END_OF_FILE:
+					{
+					if ( yywrap() )
+						return EOF;
+
+					if ( ! yy_did_buffer_switch_on_eof )
+						YY_NEW_FILE;
+#ifdef __cplusplus
+					return yyinput(TSRMLS_C);
+#else
+					return input(TSRMLS_C);
+#endif
+					}
+
+				case EOB_ACT_CONTINUE_SCAN:
+					yy_c_buf_p = yytext_ptr + offset;
+					break;
+				}
+			}
+		}
+
+	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
+	*yy_c_buf_p = '\0';	/* preserve yytext */
+	yy_hold_char = *++yy_c_buf_p;
+
+
+	return c;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yyrestart( struct _zend_file_handle *input_file TSRMLS_DC )
+#else
+void yyrestart( input_file TSRMLS_CC )
+struct _zend_file_handle *input_file;
+#endif
+	{
+	if ( ! yy_current_buffer )
+		yy_current_buffer = yy_create_buffer( SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC );
+
+	yy_init_buffer( yy_current_buffer, input_file TSRMLS_CC );
+	yy_load_buffer_state(TSRMLS_C);
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer TSRMLS_DC)
+#else
+void yy_switch_to_buffer( new_buffer TSRMLS_CC)
+YY_BUFFER_STATE new_buffer;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	if ( yy_current_buffer == new_buffer )
+		return;
+
+	if ( yy_current_buffer )
+		{
+		/* Flush out information for old buffer. */
+		*yy_c_buf_p = yy_hold_char;
+		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
+		yy_current_buffer->yy_n_chars = SCNG(yy_n_chars);
+		}
+
+	yy_current_buffer = new_buffer;
+	yy_load_buffer_state(TSRMLS_C);
+
+	/* We don't actually know whether we did this switch during
+	 * EOF (yywrap()) processing, but the only time this flag
+	 * is looked at is after yywrap() is called, so it's safe
+	 * to go ahead and always set it.
+	 */
+	yy_did_buffer_switch_on_eof = 1;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_load_buffer_state( TSRMLS_D )
+#else
+void yy_load_buffer_state(TSRMLS_C)
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	SCNG(yy_n_chars) = yy_current_buffer->yy_n_chars;
+	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
+	SCNG(yy_in) = yy_current_buffer->yy_input_file;
+	yy_hold_char = *yy_c_buf_p;
+	}
+
+
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_create_buffer( struct _zend_file_handle *file, int size TSRMLS_DC )
+#else
+YY_BUFFER_STATE yy_create_buffer( file, size TSRMLS_CC )
+struct _zend_file_handle *file;
+int size;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	YY_BUFFER_STATE b;
+
+	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+
+	b->yy_buf_size = size;
+
+	/* yy_ch_buf has to be 2 characters longer than the size given because
+	 * we need to put in 2 end-of-buffer characters.
+	 */
+	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
+	if ( ! b->yy_ch_buf )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+
+	b->yy_is_our_buffer = 1;
+
+	yy_init_buffer( b, file TSRMLS_CC );
+
+	return b;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_delete_buffer( YY_BUFFER_STATE b TSRMLS_DC )
+#else
+void yy_delete_buffer( b TSRMLS_CC )
+YY_BUFFER_STATE b;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	if ( ! b )
+		return;
+
+	if ( b == yy_current_buffer )
+		yy_current_buffer = (YY_BUFFER_STATE) 0;
+
+	if ( b->yy_is_our_buffer )
+		yy_flex_free( (void *) b->yy_ch_buf );
+
+	yy_flex_free( (void *) b );
+	}
+
+
+#ifndef YY_ALWAYS_INTERACTIVE
+#ifndef YY_NEVER_INTERACTIVE
+#endif
+#endif
+
+#ifdef YY_USE_PROTOS
+void yy_init_buffer( YY_BUFFER_STATE b, struct _zend_file_handle *file TSRMLS_DC )
+#else
+void yy_init_buffer( b, file TSRMLS_CC )
+YY_BUFFER_STATE b;
+struct _zend_file_handle *file;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+
+
+	{
+	yy_flush_buffer( b TSRMLS_CC );
+
+	b->yy_input_file = file;
+	b->yy_fill_buffer = 1;
+
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_flush_buffer( YY_BUFFER_STATE b TSRMLS_DC )
+#else
+void yy_flush_buffer( b TSRMLS_CC )
+YY_BUFFER_STATE b;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+
+	{
+	if ( ! b )
+		return;
+
+	b->yy_n_chars = 0;
+
+	/* We always need two end-of-buffer characters.  The first causes
+	 * a transition to the end-of-buffer state.  The second causes
+	 * a jam in that state.
+	 */
+	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
+	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
+
+	b->yy_buf_pos = &b->yy_ch_buf[0];
+
+	b->yy_at_bol = 1;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	if ( b == yy_current_buffer )
+		yy_load_buffer_state(TSRMLS_C);
+	}
+
+
+#ifndef YY_NO_SCAN_BUFFER
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size TSRMLS_DC )
+#else
+YY_BUFFER_STATE yy_scan_buffer( base, size TSRMLS_CC )
+char *base;
+yy_size_t size;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	YY_BUFFER_STATE b;
+
+	if ( size < 2 ||
+	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
+	     base[size-1] != YY_END_OF_BUFFER_CHAR )
+		/* They forgot to leave room for the EOB's. */
+		return 0;
+
+	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
+
+	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
+	b->yy_buf_pos = b->yy_ch_buf = base;
+	b->yy_is_our_buffer = 0;
+	b->yy_input_file = 0;
+	b->yy_n_chars = b->yy_buf_size;
+	b->yy_at_bol = 1;
+	b->yy_fill_buffer = 0;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	yy_switch_to_buffer( b TSRMLS_CC );
+
+	return b;
+	}
+#endif
+
+
+#ifndef YY_NO_SCAN_STRING
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str TSRMLS_DC )
+#else
+YY_BUFFER_STATE yy_scan_string( yy_str TSRMLS_CC )
+yyconst char *yy_str;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	int len;
+	for ( len = 0; yy_str[len]; ++len )
+		;
+
+	return yy_scan_bytes( yy_str, len TSRMLS_CC );
+	}
+#endif
+
+
+#ifndef YY_NO_SCAN_BYTES
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len TSRMLS_DC )
+#else
+YY_BUFFER_STATE yy_scan_bytes( bytes, len TSRMLS_CC )
+yyconst char *bytes;
+int len;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	YY_BUFFER_STATE b;
+	char *buf;
+	yy_size_t n;
+	int i;
+
+	/* Get memory for full buffer, including space for trailing EOB's. */
+	n = len + 2;
+	buf = (char *) yy_flex_alloc( n );
+	if ( ! buf )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
+
+	for ( i = 0; i < len; ++i )
+		buf[i] = bytes[i];
+
+	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;
+
+	b = yy_scan_buffer( buf, n TSRMLS_CC);
+	if ( ! b )
+		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
+
+	/* It's okay to grow etc. this buffer, and we should throw it
+	 * away when we're done.
+	 */
+	b->yy_is_our_buffer = 1;
+
+	return b;
+	}
+#endif
+
+
+#ifndef YY_NO_PUSH_STATE
+#ifdef YY_USE_PROTOS
+static void yy_push_state( int new_state TSRMLS_DC )
+#else
+static void yy_push_state( new_state TSRMLS_CC )
+int new_state;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	if ( yy_start_stack_ptr >= yy_start_stack_depth )
+		{
+		yy_size_t new_size;
+
+		yy_start_stack_depth += YY_START_STACK_INCR;
+		new_size = yy_start_stack_depth * sizeof( int );
+
+		if ( ! yy_start_stack )
+			yy_start_stack = (int *) yy_flex_alloc( new_size );
+
+		else
+			yy_start_stack = (int *) yy_flex_realloc(
+					(void *) yy_start_stack, new_size );
+
+		if ( ! yy_start_stack )
+			YY_FATAL_ERROR(
+			"out of memory expanding start-condition stack" );
+		}
+
+	yy_start_stack[yy_start_stack_ptr++] = YY_START;
+
+	BEGIN(new_state);
+	}
+#endif
+
+
+#ifndef YY_NO_POP_STATE
+static void yy_pop_state(TSRMLS_D)
+	{
+	if ( --yy_start_stack_ptr < 0 )
+		YY_FATAL_ERROR( "start-condition stack underflow" );
+
+	BEGIN(yy_start_stack[yy_start_stack_ptr]);
+	}
+#endif
+
+
+#ifndef YY_NO_TOP_STATE
+static int yy_top_state(TSRMLS_D)
+	{
+	return yy_start_stack[yy_start_stack_ptr - 1];
+	}
+#endif
+
+#ifndef YY_EXIT_FAILURE
+#define YY_EXIT_FAILURE 2
+#endif
+
+#ifdef YY_USE_PROTOS
+static void yy_fatal_error( yyconst char msg[] )
+#else
+static void yy_fatal_error( msg )
+char msg[];
+#endif
+	{
+	(void) fprintf( stderr, "%s\n", msg );
+	exit( YY_EXIT_FAILURE );
+	}
+
+
+
+/* Redefine yyless() so it works in section 3 code. */
+
+#undef yyless
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up yytext. */ \
+		yytext[yyleng] = yy_hold_char; \
+		yy_c_buf_p = yytext + n; \
+		yy_hold_char = *yy_c_buf_p; \
+		*yy_c_buf_p = '\0'; \
+		yyleng = n; \
+		} \
+	while ( 0 )
+
+
+/* Internal utility routines. */
+
+#ifndef yytext_ptr
+#ifdef YY_USE_PROTOS
+static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
+#else
+static void yy_flex_strncpy( s1, s2, n )
+char *s1;
+yyconst char *s2;
+int n;
+#endif
+	{
+	register int i;
+	for ( i = 0; i < n; ++i )
+		s1[i] = s2[i];
+	}
+#endif
+
+#ifdef YY_NEED_STRLEN
+#ifdef YY_USE_PROTOS
+static int yy_flex_strlen( yyconst char *s )
+#else
+static int yy_flex_strlen( s )
+yyconst char *s;
+#endif
+	{
+	register int n;
+	for ( n = 0; s[n]; ++n )
+		;
+
+	return n;
+	}
+#endif
+
+
+#ifdef YY_USE_PROTOS
+static void *yy_flex_alloc( yy_size_t size )
+#else
+static void *yy_flex_alloc( size )
+yy_size_t size;
+#endif
+	{
+	return (void *) malloc( size );
+	}
+
+#ifdef YY_USE_PROTOS
+static void *yy_flex_realloc( void *ptr, yy_size_t size )
+#else
+static void *yy_flex_realloc( ptr, size )
+void *ptr;
+yy_size_t size;
+#endif
+	{
+	/* The cast to (char *) in the following accommodates both
+	 * implementations that use char* generic pointers, and those
+	 * that use void* generic pointers.  It works with the latter
+	 * because both ANSI C and C++ allow castless assignment from
+	 * any pointer type to void*, and deal with argument conversions
+	 * as though doing an assignment.
+	 */
+	return (void *) realloc( (char *) ptr, size );
+	}
+
+#ifdef YY_USE_PROTOS
+static void yy_flex_free( void *ptr )
+#else
+static void yy_flex_free( ptr )
+void *ptr;
+#endif
+	{
+	free( ptr );
+	}
+
+#if YY_MAIN
+int main()
+	{
+	yylex();
+	return 0;
+	}
+#endif
+#line 248 "zend_ini_scanner.l"
diff -Nur php-4.3.11/Zend/zend_language_parser.c php/Zend/zend_language_parser.c
--- php-4.3.11/Zend/zend_language_parser.c	2005-03-30 22:35:48.000000000 +0800
+++ php/Zend/zend_language_parser.c	2007-07-23 21:44:27.000000000 +0800
@@ -1,3338 +1,3442 @@
-/* A Bison parser, made from Zend/zend_language_parser.y
-   by GNU bison 1.35.  */
-
-#define YYBISON 1  /* Identify Bison output.  */
-
-#define yyparse zendparse
-#define yylex zendlex
-#define yyerror zenderror
-#define yylval zendlval
-#define yychar zendchar
-#define yydebug zenddebug
-#define yynerrs zendnerrs
-# define	T_INCLUDE	257
-# define	T_INCLUDE_ONCE	258
-# define	T_EVAL	259
-# define	T_REQUIRE	260
-# define	T_REQUIRE_ONCE	261
-# define	T_LOGICAL_OR	262
-# define	T_LOGICAL_XOR	263
-# define	T_LOGICAL_AND	264
-# define	T_PRINT	265
-# define	T_PLUS_EQUAL	266
-# define	T_MINUS_EQUAL	267
-# define	T_MUL_EQUAL	268
-# define	T_DIV_EQUAL	269
-# define	T_CONCAT_EQUAL	270
-# define	T_MOD_EQUAL	271
-# define	T_AND_EQUAL	272
-# define	T_OR_EQUAL	273
-# define	T_XOR_EQUAL	274
-# define	T_SL_EQUAL	275
-# define	T_SR_EQUAL	276
-# define	T_BOOLEAN_OR	277
-# define	T_BOOLEAN_AND	278
-# define	T_IS_EQUAL	279
-# define	T_IS_NOT_EQUAL	280
-# define	T_IS_IDENTICAL	281
-# define	T_IS_NOT_IDENTICAL	282
-# define	T_IS_SMALLER_OR_EQUAL	283
-# define	T_IS_GREATER_OR_EQUAL	284
-# define	T_SL	285
-# define	T_SR	286
-# define	T_INC	287
-# define	T_DEC	288
-# define	T_INT_CAST	289
-# define	T_DOUBLE_CAST	290
-# define	T_STRING_CAST	291
-# define	T_ARRAY_CAST	292
-# define	T_OBJECT_CAST	293
-# define	T_BOOL_CAST	294
-# define	T_UNSET_CAST	295
-# define	T_NEW	296
-# define	T_EXIT	297
-# define	T_IF	298
-# define	T_ELSEIF	299
-# define	T_ELSE	300
-# define	T_ENDIF	301
-# define	T_LNUMBER	302
-# define	T_DNUMBER	303
-# define	T_STRING	304
-# define	T_STRING_VARNAME	305
-# define	T_VARIABLE	306
-# define	T_NUM_STRING	307
-# define	T_INLINE_HTML	308
-# define	T_CHARACTER	309
-# define	T_BAD_CHARACTER	310
-# define	T_ENCAPSED_AND_WHITESPACE	311
-# define	T_CONSTANT_ENCAPSED_STRING	312
-# define	T_ECHO	313
-# define	T_DO	314
-# define	T_WHILE	315
-# define	T_ENDWHILE	316
-# define	T_FOR	317
-# define	T_ENDFOR	318
-# define	T_FOREACH	319
-# define	T_ENDFOREACH	320
-# define	T_DECLARE	321
-# define	T_ENDDECLARE	322
-# define	T_AS	323
-# define	T_SWITCH	324
-# define	T_ENDSWITCH	325
-# define	T_CASE	326
-# define	T_DEFAULT	327
-# define	T_BREAK	328
-# define	T_CONTINUE	329
-# define	T_OLD_FUNCTION	330
-# define	T_FUNCTION	331
-# define	T_CONST	332
-# define	T_RETURN	333
-# define	T_USE	334
-# define	T_GLOBAL	335
-# define	T_STATIC	336
-# define	T_VAR	337
-# define	T_UNSET	338
-# define	T_ISSET	339
-# define	T_EMPTY	340
-# define	T_CLASS	341
-# define	T_EXTENDS	342
-# define	T_OBJECT_OPERATOR	343
-# define	T_DOUBLE_ARROW	344
-# define	T_LIST	345
-# define	T_ARRAY	346
-# define	T_CLASS_C	347
-# define	T_FUNC_C	348
-# define	T_LINE	349
-# define	T_FILE	350
-# define	T_COMMENT	351
-# define	T_ML_COMMENT	352
-# define	T_OPEN_TAG	353
-# define	T_OPEN_TAG_WITH_ECHO	354
-# define	T_CLOSE_TAG	355
-# define	T_WHITESPACE	356
-# define	T_START_HEREDOC	357
-# define	T_END_HEREDOC	358
-# define	T_DOLLAR_OPEN_CURLY_BRACES	359
-# define	T_CURLY_OPEN	360
-# define	T_PAAMAYIM_NEKUDOTAYIM	361
-
-
-/*
-   +----------------------------------------------------------------------+
-   | Zend Engine                                                          |
-   +----------------------------------------------------------------------+
-   | Copyright (c) 1998-2002 Zend Technologies Ltd. (http://www.zend.com) |
-   +----------------------------------------------------------------------+
-   | This source file is subject to version 2.00 of the Zend license,     |
-   | that is bundled with this package in the file LICENSE, and is        | 
-   | available at through the world-wide-web at                           |
-   | http://www.zend.com/license/2_00.txt.                                |
-   | If you did not receive a copy of the Zend license and are unable to  |
-   | obtain it through the world-wide-web, please send a note to          |
-   | license@zend.com so we can mail you a copy immediately.              |
-   +----------------------------------------------------------------------+
-   | Authors: Andi Gutmans <andi@zend.com>                                |
-   |          Zeev Suraski <zeev@zend.com>                                |
-   +----------------------------------------------------------------------+
-*/
-
-/* 
- * LALR shift/reduce conflicts and how they are resolved:
- *
- * - 2 shift/reduce conflicts due to the dangeling elseif/else ambiguity.  Solved by shift.
- * - 1 shift/reduce conflict due to arrays within encapsulated strings. Solved by shift. 
- * - 1 shift/reduce conflict due to objects within encapsulated strings.  Solved by shift.
- * 
- */
-
-
-#include "zend_compile.h"
-#include "zend.h"
-#include "zend_list.h"
-#include "zend_globals.h"
-#include "zend_API.h"
-
-#define YYERROR_VERBOSE
-#define YYSTYPE znode
-#ifdef ZTS
-# define YYPARSE_PARAM tsrm_ls
-# define YYLEX_PARAM tsrm_ls
-#endif
-
-
-#ifndef YYSTYPE
-# define YYSTYPE int
-# define YYSTYPE_IS_TRIVIAL 1
-#endif
-#ifndef YYDEBUG
-# define YYDEBUG 0
-#endif
-
-
-
-#define	YYFINAL		664
-#define	YYFLAG		-32768
-#define	YYNTBASE	137
-
-/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
-#define YYTRANSLATE(x) ((unsigned)(x) <= 361 ? yytranslate[x] : 263)
-
-/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
-static const short yytranslate[] =
-{
-       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,    48,   134,     2,   132,    47,    31,   135,
-     129,   130,    45,    42,     8,    43,    44,    46,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,    26,   131,
-      36,    13,    38,    25,    59,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,    60,     2,   136,    30,     2,   133,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,   127,    29,   128,    49,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
-       6,     7,     9,    10,    11,    12,    14,    15,    16,    17,
-      18,    19,    20,    21,    22,    23,    24,    27,    28,    32,
-      33,    34,    35,    37,    39,    40,    41,    50,    51,    52,
-      53,    54,    55,    56,    57,    58,    61,    62,    63,    64,
-      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
-      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
-      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
-      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
-     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
-     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
-     125,   126
-};
-
-#if YYDEBUG
-static const short yyprhs[] =
-{
-       0,     0,     2,     3,     7,     8,    10,    12,    13,    17,
-      18,    20,    22,    24,    28,    29,    30,    40,    41,    42,
-      55,    56,    57,    65,    66,    67,    77,    78,    79,    80,
-      93,    94,   101,   104,   108,   111,   115,   118,   122,   126,
-     130,   134,   138,   140,   143,   147,   153,   154,   155,   166,
-     167,   168,   179,   180,   187,   189,   191,   195,   197,   199,
-     203,   205,   206,   207,   219,   220,   221,   232,   233,   240,
-     241,   250,   251,   254,   256,   261,   263,   268,   270,   275,
-     279,   285,   289,   294,   299,   305,   306,   307,   314,   315,
-     321,   323,   325,   327,   332,   333,   334,   342,   343,   344,
-     353,   354,   357,   358,   362,   364,   365,   367,   370,   373,
-     377,   381,   386,   391,   397,   399,   400,   402,   404,   407,
-     411,   415,   420,   424,   426,   428,   431,   436,   440,   446,
-     448,   452,   455,   456,   460,   461,   462,   474,   475,   476,
-     487,   488,   490,   494,   500,   502,   506,   507,   511,   513,
-     514,   516,   517,   522,   524,   525,   533,   537,   542,   547,
-     548,   556,   557,   562,   566,   570,   574,   578,   582,   586,
-     590,   594,   598,   602,   606,   609,   612,   615,   618,   619,
-     624,   625,   630,   631,   636,   637,   642,   646,   650,   654,
-     658,   662,   666,   670,   674,   678,   682,   686,   690,   693,
-     696,   699,   702,   706,   710,   714,   718,   722,   726,   730,
-     734,   738,   739,   740,   748,   750,   752,   755,   758,   761,
-     764,   767,   770,   773,   776,   777,   781,   783,   788,   792,
-     795,   796,   802,   803,   809,   810,   818,   820,   822,   823,
-     826,   830,   831,   835,   837,   839,   841,   843,   845,   847,
-     849,   851,   853,   856,   859,   864,   866,   868,   870,   874,
-     878,   882,   883,   886,   887,   889,   895,   899,   903,   905,
-     907,   909,   911,   913,   915,   917,   918,   923,   925,   928,
-     933,   938,   940,   942,   947,   948,   950,   952,   953,   958,
-     960,   961,   964,   969,   974,   976,   978,   982,   984,   987,
-     991,   993,   995,   996,  1002,  1003,  1004,  1007,  1013,  1017,
-    1021,  1023,  1030,  1035,  1040,  1043,  1046,  1049,  1052,  1055,
-    1058,  1061,  1064,  1067,  1070,  1073,  1076,  1077,  1079,  1080,
-    1086,  1090,  1094,  1101,  1105,  1107,  1109,  1111,  1116,  1121,
-    1124,  1127,  1132,  1135,  1138,  1140,  1141
-};
-static const short yyrhs[] =
-{
-     138,     0,     0,   138,   139,   140,     0,     0,   144,     0,
-     166,     0,     0,   141,   142,   143,     0,     0,   144,     0,
-     166,     0,   145,     0,   127,   141,   128,     0,     0,     0,
-      63,   129,   234,   130,   146,   144,   147,   185,   189,     0,
-       0,     0,    63,   129,   234,   130,    26,   148,   141,   149,
-     187,   190,    66,   131,     0,     0,     0,    80,   129,   150,
-     234,   130,   151,   184,     0,     0,     0,    79,   152,   144,
-      80,   129,   153,   234,   130,   131,     0,     0,     0,     0,
-      82,   129,   207,   131,   154,   207,   131,   155,   207,   130,
-     156,   175,     0,     0,    89,   129,   234,   130,   157,   179,
-       0,    93,   131,     0,    93,   234,   131,     0,    94,   131,
-       0,    94,   234,   131,     0,    98,   131,     0,    98,   210,
-     131,     0,    98,   238,   131,     0,   100,   195,   131,     0,
-     101,   197,   131,     0,    78,   206,   131,     0,    73,     0,
-     234,   131,     0,    99,   165,   131,     0,   103,   129,   163,
-     130,   131,     0,     0,     0,    84,   129,   236,    88,   158,
-     236,   174,   130,   159,   176,     0,     0,     0,    84,   129,
-     210,    88,   160,   236,   174,   130,   161,   176,     0,     0,
-      86,   162,   129,   178,   130,   177,     0,   131,     0,   164,
-       0,   163,     8,   164,     0,   238,     0,    77,     0,   129,
-      77,   130,     0,   167,     0,     0,     0,    96,   168,   204,
-      69,   169,   129,   191,   130,   127,   141,   128,     0,     0,
-       0,    95,   170,   204,    69,   171,   191,   129,   141,   130,
-     131,     0,     0,   106,    69,   172,   127,   198,   128,     0,
-       0,   106,    69,   107,    69,   173,   127,   198,   128,     0,
-       0,   109,   236,     0,   144,     0,    26,   141,    83,   131,
-       0,   144,     0,    26,   141,    85,   131,     0,   144,     0,
-      26,   141,    87,   131,     0,    69,    13,   229,     0,   178,
-       8,    69,    13,   229,     0,   127,   180,   128,     0,   127,
-     131,   180,   128,     0,    26,   180,    90,   131,     0,    26,
-     131,   180,    90,   131,     0,     0,     0,   180,    91,   234,
-     183,   181,   141,     0,     0,   180,    92,   183,   182,   141,
-       0,    26,     0,   131,     0,   144,     0,    26,   141,    81,
-     131,     0,     0,     0,   185,    64,   129,   234,   130,   186,
-     144,     0,     0,     0,   187,    64,   129,   234,   130,    26,
-     188,   141,     0,     0,    65,   144,     0,     0,    65,    26,
-     141,     0,   192,     0,     0,    71,     0,    31,    71,     0,
-      97,    71,     0,    71,    13,   229,     0,   192,     8,    71,
-       0,   192,     8,    31,    71,     0,   192,     8,    97,    71,
-       0,   192,     8,    71,    13,   229,     0,   194,     0,     0,
-     210,     0,   238,     0,    31,   236,     0,   194,     8,   210,
-       0,   194,     8,   238,     0,   194,     8,    31,   236,     0,
-     195,     8,   196,     0,   196,     0,    71,     0,   132,   235,
-       0,   132,   127,   234,   128,     0,   197,     8,    71,     0,
-     197,     8,    71,    13,   229,     0,    71,     0,    71,    13,
-     229,     0,   198,   199,     0,     0,   102,   205,   131,     0,
-       0,     0,    96,   200,   204,    69,   201,   129,   191,   130,
-     127,   141,   128,     0,     0,     0,    95,   202,   204,    69,
-     203,   191,   129,   141,   130,   131,     0,     0,    31,     0,
-     205,     8,    71,     0,   205,     8,    71,    13,   229,     0,
-      71,     0,    71,    13,   229,     0,     0,   206,     8,   234,
-       0,   234,     0,     0,   208,     0,     0,   208,     8,   209,
-     234,     0,   234,     0,     0,   110,   129,   211,   251,   130,
-      13,   234,     0,   238,    13,   234,     0,   238,    13,    31,
-     236,     0,   238,    13,    31,   221,     0,     0,   238,    13,
-      31,    61,   225,   212,   227,     0,     0,    61,   225,   213,
-     227,     0,   238,    14,   234,     0,   238,    15,   234,     0,
-     238,    16,   234,     0,   238,    17,   234,     0,   238,    18,
-     234,     0,   238,    19,   234,     0,   238,    20,   234,     0,
-     238,    21,   234,     0,   238,    22,   234,     0,   238,    23,
-     234,     0,   238,    24,   234,     0,   237,    50,     0,    50,
-     237,     0,   237,    51,     0,    51,   237,     0,     0,   234,
-      27,   214,   234,     0,     0,   234,    28,   215,   234,     0,
-       0,   234,     9,   216,   234,     0,     0,   234,    11,   217,
-     234,     0,   234,    10,   234,     0,   234,    29,   234,     0,
-     234,    31,   234,     0,   234,    30,   234,     0,   234,    44,
-     234,     0,   234,    42,   234,     0,   234,    43,   234,     0,
-     234,    45,   234,     0,   234,    46,   234,     0,   234,    47,
-     234,     0,   234,    40,   234,     0,   234,    41,   234,     0,
-      42,   234,     0,    43,   234,     0,    48,   234,     0,    49,
-     234,     0,   234,    34,   234,     0,   234,    35,   234,     0,
-     234,    32,   234,     0,   234,    33,   234,     0,   234,    36,
-     234,     0,   234,    37,   234,     0,   234,    38,   234,     0,
-     234,    39,   234,     0,   129,   234,   130,     0,     0,     0,
-     234,    25,   218,   234,    26,   219,   234,     0,   221,     0,
-     260,     0,    52,   234,     0,    53,   234,     0,    54,   234,
-       0,    55,   234,     0,    56,   234,     0,    57,   234,     0,
-      58,   234,     0,    62,   226,     0,     0,    59,   220,   234,
-       0,   230,     0,   111,   129,   254,   130,     0,   133,   256,
-     133,     0,    12,   234,     0,     0,    69,   129,   222,   193,
-     130,     0,     0,   238,   129,   223,   193,   130,     0,     0,
-      69,   126,   225,   129,   224,   193,   130,     0,    69,     0,
-     235,     0,     0,   129,   130,     0,   129,   234,   130,     0,
-       0,   129,   193,   130,     0,    67,     0,    68,     0,    77,
-       0,   114,     0,   115,     0,   112,     0,   113,     0,   228,
-       0,    69,     0,    42,   229,     0,    43,   229,     0,   111,
-     129,   231,   130,     0,    69,     0,    70,     0,   228,     0,
-     134,   256,   134,     0,   135,   256,   135,     0,   122,   256,
-     123,     0,     0,   233,   232,     0,     0,     8,     0,   233,
-       8,   229,   109,   229,     0,   233,     8,   229,     0,   229,
-     109,   229,     0,   229,     0,   235,     0,   210,     0,   238,
-       0,   238,     0,   238,     0,   240,     0,     0,   240,   108,
-     239,   244,     0,   241,     0,   250,   241,     0,   241,    60,
-     243,   136,     0,   241,   127,   234,   128,     0,   242,     0,
-      71,     0,   132,   127,   234,   128,     0,     0,   234,     0,
-     246,     0,     0,   244,   108,   245,   246,     0,   248,     0,
-       0,   240,   247,     0,   248,    60,   243,   136,     0,   248,
-     127,   234,   128,     0,   249,     0,    69,     0,   127,   234,
-     128,     0,   132,     0,   250,   132,     0,   251,     8,   252,
-       0,   252,     0,   238,     0,     0,   110,   129,   253,   251,
-     130,     0,     0,     0,   255,   232,     0,   255,     8,   234,
-     109,   234,     0,   255,     8,   234,     0,   234,   109,   234,
-       0,   234,     0,   255,     8,   234,   109,    31,   236,     0,
-     255,     8,    31,   236,     0,   234,   109,    31,   236,     0,
-      31,   236,     0,   256,   257,     0,   256,    69,     0,   256,
-      72,     0,   256,    76,     0,   256,    74,     0,   256,    75,
-       0,   256,    60,     0,   256,   136,     0,   256,   127,     0,
-     256,   128,     0,   256,   108,     0,     0,    71,     0,     0,
-      71,    60,   258,   259,   136,     0,    71,   108,    69,     0,
-     124,   234,   128,     0,   124,    70,    60,   234,   136,   128,
-       0,   125,   238,   128,     0,    69,     0,    72,     0,    71,
-       0,   104,   129,   261,   130,     0,   105,   129,   238,   130,
-       0,     3,   234,     0,     4,   234,     0,     5,   129,   234,
-     130,     0,     6,   234,     0,     7,   234,     0,   238,     0,
-       0,   261,     8,   262,   238,     0
-};
-
-#endif
-
-#if YYDEBUG
-/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
-static const short yyrline[] =
-{
-       0,   139,   143,   143,   145,   149,   151,   155,   155,   157,
-     161,   163,   167,   172,   174,   174,   174,   175,   175,   175,
-     176,   176,   176,   177,   177,   177,   178,   178,   178,   178,
-     187,   187,   188,   189,   190,   191,   192,   193,   194,   195,
-     196,   197,   198,   199,   200,   201,   202,   202,   202,   203,
-     203,   203,   204,   204,   205,   208,   210,   213,   217,   219,
-     223,   228,   228,   228,   231,   231,   231,   233,   233,   234,
-     234,   238,   240,   244,   246,   250,   252,   256,   258,   262,
-     264,   268,   270,   271,   272,   276,   278,   278,   279,   279,
-     283,   285,   289,   291,   296,   298,   298,   302,   304,   304,
-     308,   310,   314,   316,   320,   322,   326,   328,   329,   330,
-     331,   332,   333,   334,   338,   340,   344,   346,   347,   348,
-     349,   350,   353,   355,   359,   361,   362,   366,   368,   369,
-     370,   375,   377,   381,   383,   383,   383,   385,   385,   385,
-     390,   392,   395,   397,   398,   399,   403,   404,   405,   409,
-     411,   414,   414,   416,   420,   420,   422,   423,   424,   425,
-     425,   426,   426,   427,   428,   429,   430,   431,   432,   433,
-     434,   435,   436,   437,   438,   439,   440,   441,   442,   442,
-     443,   443,   444,   444,   445,   445,   446,   447,   448,   449,
-     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
-     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
-     470,   471,   471,   471,   474,   475,   476,   477,   478,   479,
-     480,   481,   482,   483,   484,   484,   485,   486,   487,   488,
-     491,   491,   495,   495,   498,   498,   504,   506,   510,   512,
-     513,   517,   519,   523,   525,   526,   527,   528,   529,   530,
-     534,   536,   537,   538,   539,   543,   545,   546,   547,   548,
-     549,   553,   555,   558,   560,   563,   565,   566,   567,   570,
-     572,   576,   581,   586,   591,   593,   593,   597,   599,   603,
-     605,   606,   610,   612,   615,   617,   620,   622,   622,   625,
-     627,   627,   630,   632,   633,   636,   638,   642,   644,   647,
-     649,   653,   655,   655,   656,   660,   662,   665,   667,   668,
-     669,   670,   671,   672,   673,   676,   678,   679,   680,   681,
-     682,   683,   684,   685,   686,   687,   688,   694,   696,   696,
-     697,   698,   699,   700,   704,   706,   707,   711,   713,   714,
-     715,   716,   717,   718,   721,   723,   723
-};
-#endif
-
-
-#if (YYDEBUG) || defined YYERROR_VERBOSE
-
-/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
-static const char *const yytname[] =
-{
-  "$", "error", "$undefined.", "T_INCLUDE", "T_INCLUDE_ONCE", "T_EVAL", 
-  "T_REQUIRE", "T_REQUIRE_ONCE", "','", "T_LOGICAL_OR", "T_LOGICAL_XOR", 
-  "T_LOGICAL_AND", "T_PRINT", "'='", "T_PLUS_EQUAL", "T_MINUS_EQUAL", 
-  "T_MUL_EQUAL", "T_DIV_EQUAL", "T_CONCAT_EQUAL", "T_MOD_EQUAL", 
-  "T_AND_EQUAL", "T_OR_EQUAL", "T_XOR_EQUAL", "T_SL_EQUAL", "T_SR_EQUAL", 
-  "'?'", "':'", "T_BOOLEAN_OR", "T_BOOLEAN_AND", "'|'", "'^'", "'&'", 
-  "T_IS_EQUAL", "T_IS_NOT_EQUAL", "T_IS_IDENTICAL", "T_IS_NOT_IDENTICAL", 
-  "'<'", "T_IS_SMALLER_OR_EQUAL", "'>'", "T_IS_GREATER_OR_EQUAL", "T_SL", 
-  "T_SR", "'+'", "'-'", "'.'", "'*'", "'/'", "'%'", "'!'", "'~'", "T_INC", 
-  "T_DEC", "T_INT_CAST", "T_DOUBLE_CAST", "T_STRING_CAST", "T_ARRAY_CAST", 
-  "T_OBJECT_CAST", "T_BOOL_CAST", "T_UNSET_CAST", "'@'", "'['", "T_NEW", 
-  "T_EXIT", "T_IF", "T_ELSEIF", "T_ELSE", "T_ENDIF", "T_LNUMBER", 
-  "T_DNUMBER", "T_STRING", "T_STRING_VARNAME", "T_VARIABLE", 
-  "T_NUM_STRING", "T_INLINE_HTML", "T_CHARACTER", "T_BAD_CHARACTER", 
-  "T_ENCAPSED_AND_WHITESPACE", "T_CONSTANT_ENCAPSED_STRING", "T_ECHO", 
-  "T_DO", "T_WHILE", "T_ENDWHILE", "T_FOR", "T_ENDFOR", "T_FOREACH", 
-  "T_ENDFOREACH", "T_DECLARE", "T_ENDDECLARE", "T_AS", "T_SWITCH", 
-  "T_ENDSWITCH", "T_CASE", "T_DEFAULT", "T_BREAK", "T_CONTINUE", 
-  "T_OLD_FUNCTION", "T_FUNCTION", "T_CONST", "T_RETURN", "T_USE", 
-  "T_GLOBAL", "T_STATIC", "T_VAR", "T_UNSET", "T_ISSET", "T_EMPTY", 
-  "T_CLASS", "T_EXTENDS", "T_OBJECT_OPERATOR", "T_DOUBLE_ARROW", "T_LIST", 
-  "T_ARRAY", "T_CLASS_C", "T_FUNC_C", "T_LINE", "T_FILE", "T_COMMENT", 
-  "T_ML_COMMENT", "T_OPEN_TAG", "T_OPEN_TAG_WITH_ECHO", "T_CLOSE_TAG", 
-  "T_WHITESPACE", "T_START_HEREDOC", "T_END_HEREDOC", 
-  "T_DOLLAR_OPEN_CURLY_BRACES", "T_CURLY_OPEN", "T_PAAMAYIM_NEKUDOTAYIM", 
-  "'{'", "'}'", "'('", "')'", "';'", "'$'", "'`'", "'\\\"'", "'\\''", 
-  "']'", "start", "top_statement_list", "@1", "top_statement", 
-  "inner_statement_list", "@2", "inner_statement", "statement", 
-  "unticked_statement", "@3", "@4", "@5", "@6", "@7", "@8", "@9", "@10", 
-  "@11", "@12", "@13", "@14", "@15", "@16", "@17", "@18", "@19", 
-  "unset_variables", "unset_variable", "use_filename", 
-  "declaration_statement", "unticked_declaration_statement", "@20", "@21", 
-  "@22", "@23", "@24", "@25", "foreach_optional_arg", "for_statement", 
-  "foreach_statement", "declare_statement", "declare_list", 
-  "switch_case_list", "case_list", "@26", "@27", "case_separator", 
-  "while_statement", "elseif_list", "@28", "new_elseif_list", "@29", 
-  "else_single", "new_else_single", "parameter_list", 
-  "non_empty_parameter_list", "function_call_parameter_list", 
-  "non_empty_function_call_parameter_list", "global_var_list", 
-  "global_var", "static_var_list", "class_statement_list", 
-  "class_statement", "@30", "@31", "@32", "@33", "is_reference", 
-  "class_variable_decleration", "echo_expr_list", "for_expr", 
-  "non_empty_for_expr", "@34", "expr_without_variable", "@35", "@36", 
-  "@37", "@38", "@39", "@40", "@41", "@42", "@43", "@44", "function_call", 
-  "@45", "@46", "@47", "static_or_variable_string", "exit_expr", 
-  "ctor_arguments", "common_scalar", "static_scalar", "scalar", 
-  "static_array_pair_list", "possible_comma", 
-  "non_empty_static_array_pair_list", "expr", "r_cvar", "w_cvar", 
-  "rw_cvar", "cvar", "@48", "cvar_without_objects", "reference_variable", 
-  "compound_variable", "dim_offset", "ref_list", "@49", "object_property", 
-  "@50", "object_dim_list", "variable_name", "simple_indirect_reference", 
-  "assignment_list", "assignment_list_element", "@51", "array_pair_list", 
-  "non_empty_array_pair_list", "encaps_list", "encaps_var", "@52", 
-  "encaps_var_offset", "internal_functions_in_yacc", "isset_variables", 
-  "@53", 0
-};
-#endif
-
-/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
-static const short yyr1[] =
-{
-       0,   137,   139,   138,   138,   140,   140,   142,   141,   141,
-     143,   143,   144,   145,   146,   147,   145,   148,   149,   145,
-     150,   151,   145,   152,   153,   145,   154,   155,   156,   145,
-     157,   145,   145,   145,   145,   145,   145,   145,   145,   145,
-     145,   145,   145,   145,   145,   145,   158,   159,   145,   160,
-     161,   145,   162,   145,   145,   163,   163,   164,   165,   165,
-     166,   168,   169,   167,   170,   171,   167,   172,   167,   173,
-     167,   174,   174,   175,   175,   176,   176,   177,   177,   178,
-     178,   179,   179,   179,   179,   180,   181,   180,   182,   180,
-     183,   183,   184,   184,   185,   186,   185,   187,   188,   187,
-     189,   189,   190,   190,   191,   191,   192,   192,   192,   192,
-     192,   192,   192,   192,   193,   193,   194,   194,   194,   194,
-     194,   194,   195,   195,   196,   196,   196,   197,   197,   197,
-     197,   198,   198,   199,   200,   201,   199,   202,   203,   199,
-     204,   204,   205,   205,   205,   205,   206,   206,   206,   207,
-     207,   209,   208,   208,   211,   210,   210,   210,   210,   212,
-     210,   213,   210,   210,   210,   210,   210,   210,   210,   210,
-     210,   210,   210,   210,   210,   210,   210,   210,   214,   210,
-     215,   210,   216,   210,   217,   210,   210,   210,   210,   210,
-     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
-     210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
-     210,   218,   219,   210,   210,   210,   210,   210,   210,   210,
-     210,   210,   210,   210,   220,   210,   210,   210,   210,   210,
-     222,   221,   223,   221,   224,   221,   225,   225,   226,   226,
-     226,   227,   227,   228,   228,   228,   228,   228,   228,   228,
-     229,   229,   229,   229,   229,   230,   230,   230,   230,   230,
-     230,   231,   231,   232,   232,   233,   233,   233,   233,   234,
-     234,   235,   236,   237,   238,   239,   238,   240,   240,   241,
-     241,   241,   242,   242,   243,   243,   244,   245,   244,   246,
-     247,   246,   248,   248,   248,   249,   249,   250,   250,   251,
-     251,   252,   253,   252,   252,   254,   254,   255,   255,   255,
-     255,   255,   255,   255,   255,   256,   256,   256,   256,   256,
-     256,   256,   256,   256,   256,   256,   256,   257,   258,   257,
-     257,   257,   257,   257,   259,   259,   259,   260,   260,   260,
-     260,   260,   260,   260,   261,   262,   261
-};
-
-/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
-static const short yyr2[] =
-{
-       0,     1,     0,     3,     0,     1,     1,     0,     3,     0,
-       1,     1,     1,     3,     0,     0,     9,     0,     0,    12,
-       0,     0,     7,     0,     0,     9,     0,     0,     0,    12,
-       0,     6,     2,     3,     2,     3,     2,     3,     3,     3,
-       3,     3,     1,     2,     3,     5,     0,     0,    10,     0,
-       0,    10,     0,     6,     1,     1,     3,     1,     1,     3,
-       1,     0,     0,    11,     0,     0,    10,     0,     6,     0,
-       8,     0,     2,     1,     4,     1,     4,     1,     4,     3,
-       5,     3,     4,     4,     5,     0,     0,     6,     0,     5,
-       1,     1,     1,     4,     0,     0,     7,     0,     0,     8,
-       0,     2,     0,     3,     1,     0,     1,     2,     2,     3,
-       3,     4,     4,     5,     1,     0,     1,     1,     2,     3,
-       3,     4,     3,     1,     1,     2,     4,     3,     5,     1,
-       3,     2,     0,     3,     0,     0,    11,     0,     0,    10,
-       0,     1,     3,     5,     1,     3,     0,     3,     1,     0,
-       1,     0,     4,     1,     0,     7,     3,     4,     4,     0,
-       7,     0,     4,     3,     3,     3,     3,     3,     3,     3,
-       3,     3,     3,     3,     2,     2,     2,     2,     0,     4,
-       0,     4,     0,     4,     0,     4,     3,     3,     3,     3,
-       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
-       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
-       3,     0,     0,     7,     1,     1,     2,     2,     2,     2,
-       2,     2,     2,     2,     0,     3,     1,     4,     3,     2,
-       0,     5,     0,     5,     0,     7,     1,     1,     0,     2,
-       3,     0,     3,     1,     1,     1,     1,     1,     1,     1,
-       1,     1,     2,     2,     4,     1,     1,     1,     3,     3,
-       3,     0,     2,     0,     1,     5,     3,     3,     1,     1,
-       1,     1,     1,     1,     1,     0,     4,     1,     2,     4,
-       4,     1,     1,     4,     0,     1,     1,     0,     4,     1,
-       0,     2,     4,     4,     1,     1,     3,     1,     2,     3,
-       1,     1,     0,     5,     0,     0,     2,     5,     3,     3,
-       1,     6,     4,     4,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     0,     1,     0,     5,
-       3,     3,     6,     3,     1,     1,     1,     4,     4,     2,
-       2,     4,     2,     2,     1,     0,     4
-};
-
-/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
-   doesn't specify something else to do.  Zero means the default is an
-   error. */
-static const short yydefact[] =
-{
-       4,     2,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,   224,     0,   238,     0,   243,   244,   255,   256,
-     282,    42,   245,   146,    23,     0,     0,     0,    52,     0,
-       0,     0,    64,    61,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   248,   249,   246,   247,   326,     9,
-       0,    54,   297,   326,   326,   326,     3,     5,    12,     6,
-      60,   270,   214,   257,   226,     0,   269,     0,   271,   274,
-     277,   281,     0,   215,   339,   340,     0,   342,   343,   229,
-     198,   199,   200,   201,   175,   273,   177,   216,   217,   218,
-     219,   220,   221,   222,     0,   236,   161,   237,   271,     0,
-     223,     0,     0,   230,     0,   148,     0,    20,   149,     0,
-       0,     0,    32,     0,    34,     0,   140,   140,    36,   270,
-       0,   271,    58,     0,     0,   124,     0,     0,   123,   129,
-       0,     0,     0,     0,    67,   154,   305,     0,     7,     0,
-       0,     0,     0,     0,   182,     0,   184,   211,   178,   180,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,    43,
-     174,   176,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,   232,   275,   284,     0,   298,   278,
-       0,   225,   241,   239,     0,     0,     0,   115,     0,    41,
-       0,     0,     0,   150,   153,   270,     0,   271,     0,     0,
-      33,    35,   141,     0,     0,    37,    38,     0,    44,     0,
-     125,     0,    39,     0,     0,    40,     0,    55,    57,   344,
-       0,     0,     0,     0,   304,     0,   310,     0,   263,   321,
-     316,   327,   317,   319,   320,   318,   325,   260,     0,     0,
-     323,   324,   322,   315,    13,     0,   210,     0,   228,   258,
-     259,     0,   186,     0,     0,     0,     0,   187,   189,   188,
-     204,   205,   202,   203,   206,   207,   208,   209,   196,   197,
-     191,   192,   190,   193,   194,   195,     0,   156,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,   173,   115,
-       0,   285,     0,     0,   341,   115,   162,   240,    14,   234,
-       0,     0,   114,   270,   271,   147,     0,     0,    26,   151,
-      49,    46,     0,     0,    30,    65,    62,    59,     0,   122,
-       0,     0,   251,     0,   250,   130,   127,     0,     0,   345,
-     337,   338,    69,   132,     0,   301,     0,   300,   314,   272,
-       0,   227,   264,   306,   328,     0,   256,     0,     0,     8,
-      10,    11,   283,   183,   185,     0,   179,   181,     0,     0,
-     158,   157,   272,     0,   295,     0,   290,   276,   286,   289,
-     294,   279,   280,     0,    17,     0,   115,   118,   231,     0,
-      24,    21,   149,     0,     0,     0,     0,     0,     0,     0,
-     105,     0,   126,   252,   253,   261,     0,    56,    45,     0,
-       0,     0,   302,   304,     0,     0,   309,     0,   308,     0,
-     330,     0,   331,   333,   212,   159,   233,     0,   291,   287,
-     284,     0,   242,     9,    15,     0,     0,   270,   271,     0,
-       0,     0,   152,    71,    71,    79,     0,     9,    77,    53,
-      85,    85,    31,     0,   106,     0,     0,   104,   105,   268,
-       0,   263,   128,   346,   132,   137,   134,     0,    68,   131,
-     304,   299,     0,   313,   312,     0,   334,   336,   335,     0,
-       0,     0,   241,   296,     0,     0,     0,     7,    94,   235,
-     121,     0,     9,    92,    22,    27,     0,     0,     0,     0,
-       7,    85,     0,    85,     0,   107,     0,   108,     9,     0,
-       0,     0,   254,   264,   262,     0,   140,   140,   144,     0,
-       0,   155,     0,   307,   329,     0,   213,   160,   288,   292,
-     293,    97,   100,     0,     7,   149,    72,    50,    47,    80,
-       0,     0,     0,     0,     0,     0,    81,   109,     7,     0,
-     110,     0,     0,   267,   266,    70,     0,     0,     0,     0,
-     133,   303,   311,   332,   102,     0,     0,    16,    25,     0,
-       0,     0,     0,    78,     0,    83,     0,    90,    91,    88,
-      82,     0,   111,     0,   112,     9,     0,   138,   135,   145,
-     142,     0,     0,     0,     0,   101,    93,    28,     9,    75,
-      51,    48,    84,    86,     9,    66,   113,     7,   265,   105,
-       0,     0,     0,     9,     0,     0,     0,     7,     9,     7,
-      63,     0,   105,   143,     0,     7,    19,    95,     9,    73,
-      29,     0,     7,     9,     0,     0,     0,     7,    76,     7,
-       0,    98,    96,     0,     0,     9,     9,    74,   139,     7,
-       7,   136,     0,     0,     0
-};
-
-static const short yydefgoto[] =
-{
-     662,     1,     2,    66,   148,   265,   369,   609,    68,   395,
-     498,   443,   541,   211,   450,   116,   449,   402,   545,   626,
-     409,   405,   582,   404,   581,   120,   236,   237,   134,    69,
-      70,   127,   411,   126,   410,   243,   420,   507,   640,   610,
-     459,   333,   462,   512,   628,   614,   589,   504,   542,   646,
-     574,   656,   577,   603,   466,   467,   321,   322,   137,   138,
-     140,   421,   479,   527,   620,   526,   619,   223,   529,   114,
-     212,   213,   403,    71,   244,   492,   202,   275,   276,   271,
-     273,   274,   491,   104,    72,   207,   309,   396,   106,   110,
-     316,    73,   345,    74,   470,   363,   471,    75,    76,   216,
-      77,    78,   310,    79,    80,    81,   312,   387,   494,   388,
-     438,   389,   390,    82,   356,   357,   480,   247,   248,   147,
-     263,   429,   489,    83,   240,   419
-};
-
-static const short yypact[] =
-{
-  -32768,    39,   604,  2039,  2039,   -83,  2039,  2039,  2039,  2039,
-    2039,  2039,  2039,   -16,   -16,  2039,  2039,  2039,  2039,  2039,
-    2039,  2039,-32768,   -20,   -81,   -76,-32768,-32768,   -42,-32768,
-  -32768,-32768,-32768,  2039,-32768,   -72,   -40,    -9,-32768,    -4,
-    1282,  1314,-32768,-32768,  1427,   -23,    11,    34,     8,    23,
-      76,    58,    83,    91,-32768,-32768,-32768,-32768,-32768,-32768,
-    2039,-32768,     3,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-  -32768,-32768,-32768,-32768,-32768,  2316,-32768,   159,   731,    46,
-     -33,-32768,    12,-32768,  3385,  3385,  2039,  3385,  3385,  3483,
-      95,    95,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-  -32768,-32768,-32768,-32768,  2039,-32768,-32768,-32768,-32768,  1459,
-  -32768,  2039,   -20,-32768,    14,  3385,  1169,-32768,  2039,  2039,
-     101,  2039,-32768,  2371,-32768,  2421,   206,   206,-32768,   124,
-    3385,   547,-32768,   163,   138,-32768,     4,    16,-32768,   257,
-      18,   -16,   -16,   -16,   170,-32768,  1572,   393,   150,  2476,
-    2039,   846,   959,  1072,-32768,  2039,-32768,-32768,-32768,-32768,
-    2039,  2039,  2039,  2039,  2039,  2039,  2039,  2039,  2039,  2039,
-    2039,  2039,  2039,  2039,  2039,  2039,  2039,  2039,  2039,-32768,
-  -32768,-32768,  1604,  2039,  2039,  2039,  2039,  2039,  2039,  2039,
-    2039,  2039,  2039,  2039,-32768,-32768,  2039,  2039,     3,   -33,
-    2526,-32768,   151,-32768,  2580,  2630,   165,  1717,  2039,-32768,
-     216,  2039,   171,   293,  3385,   220,   222,   562,   242,  2684,
-  -32768,-32768,-32768,   243,   244,-32768,-32768,   187,-32768,  2039,
-  -32768,    11,-32768,   429,   247,-32768,    26,-32768,-32768,-32768,
-      27,   192,   254,   198,   -15,   -16,  3248,   194,   318,-32768,
-  -32768,    25,-32768,-32768,-32768,-32768,-32768,-32768,  2152,   -16,
-  -32768,-32768,-32768,-32768,-32768,   604,-32768,  2942,-32768,-32768,
-  -32768,  2039,  3460,  2039,  2039,  2039,  2039,  3542,  3559,   593,
-    2332,  2332,  2332,  2332,   246,   246,   246,   246,   286,   286,
-      95,    95,    95,-32768,-32768,-32768,   -19,  3483,  3483,  3483,
-    3483,  3483,  3483,  3483,  3483,  3483,  3483,  3483,  3483,  1717,
-     -24,  3385,   199,  2996,-32768,  1717,-32768,-32768,   310,-32768,
-     -16,   207,   330,    69,    50,  3385,   213,  2734,-32768,-32768,
-  -32768,-32768,   331,    70,-32768,-32768,-32768,-32768,  3044,-32768,
-     429,   429,-32768,   214,-32768,-32768,   332,   -16,   217,-32768,
-  -32768,-32768,-32768,-32768,   218,-32768,    71,-32768,-32768,-32768,
-    1749,-32768,  1862,-32768,-32768,   280,   290,  3098,   223,-32768,
-  -32768,-32768,-32768,  3423,  3483,  3341,  3524,  2146,   -20,   -42,
-  -32768,-32768,   226,   228,-32768,  2039,-32768,   251,-32768,   -31,
-  -32768,-32768,-32768,   231,-32768,  1169,  1717,-32768,-32768,  1894,
-  -32768,-32768,  2039,  2039,   -16,   -16,   429,   283,   717,    -1,
-       5,   234,-32768,-32768,-32768,   429,   429,-32768,-32768,   -16,
-     237,   136,-32768,   -15,   352,   -16,  3385,   -16,  3302,   185,
-  -32768,  2039,-32768,-32768,-32768,-32768,-32768,  3146,-32768,-32768,
-    2039,  2039,-32768,-32768,-32768,   239,   -16,    72,   359,  2039,
-     830,   240,  3385,   261,   261,-32768,   375,-32768,-32768,-32768,
-     258,   259,-32768,   321,   382,   326,   269,   396,     5,   298,
-     278,   404,-32768,-32768,-32768,-32768,-32768,   342,-32768,-32768,
-     -15,-32768,  2039,-32768,-32768,  2007,-32768,-32768,-32768,   279,
-    2206,  2039,   151,-32768,   -24,   281,  3200,   161,-32768,-32768,
-  -32768,  2788,-32768,-32768,-32768,-32768,   -16,   291,   292,   429,
-     329,-32768,   157,-32768,     1,-32768,   429,-32768,-32768,   175,
-     295,   429,-32768,   429,-32768,   140,   206,   206,   407,    20,
-      73,  3483,   -16,  3385,-32768,   299,  3504,-32768,-32768,-32768,
-  -32768,-32768,   179,   297,   345,  2039,-32768,-32768,-32768,-32768,
-     301,   208,   303,  2039,    -3,   131,-32768,-32768,   300,   364,
-     410,   365,   311,-32768,   328,-32768,   373,   374,   429,   376,
-  -32768,-32768,-32768,-32768,   197,   315,  1169,-32768,-32768,   314,
-     320,   943,   943,-32768,   323,-32768,  2266,-32768,-32768,-32768,
-  -32768,   324,-32768,   429,-32768,-32768,   429,-32768,-32768,-32768,
-     438,   334,   431,   392,  2039,-32768,-32768,-32768,-32768,-32768,
-  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   346,-32768,     5,
-     341,   429,  2039,-32768,   344,  2838,  1056,   388,-32768,     7,
-  -32768,   348,     5,-32768,  2892,   394,-32768,-32768,-32768,-32768,
-  -32768,   347,   125,-32768,   349,   433,  1169,   397,-32768,   353,
-     357,-32768,-32768,   355,   361,-32768,-32768,-32768,-32768,   362,
-     201,-32768,   495,   499,-32768
-};
-
-static const short yypgoto[] =
-{
-  -32768,-32768,-32768,-32768,  -162,-32768,-32768,    -2,-32768,-32768,
-  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   153,-32768,   238,
-  -32768,-32768,-32768,-32768,-32768,-32768,-32768,    53,-32768,   -80,
-  -32768,-32768,-32768,  -423,-32768,-32768,   -82,-32768,-32768,-32768,
-  -32768,-32768,-32768,-32768,  -438,-32768,  -272,-32768,-32768,   284,
-  -32768,    35,-32768,-32768,-32768,-32768,-32768,  -126,-32768,-32768,
-    -397,-32768,-32768,   -12,-32768,-32768,-32768,-32768,-32768,-32768,
-  -32768,-32768,-32768,-32768,   215,-32768,-32768,-32768,   -99,-32768,
-      30,  -202,  -182,-32768,-32768,    41,-32768,     0,   -21,  -186,
-      48,   109,-32768,  -296,   428,-32768,    79,-32768,-32768,    29,
-  -32768,-32768,-32768,-32768,    44,   102,-32768,-32768,-32768,   241,
-  -32768,-32768,-32768,-32768,-32768,-32768
-};
-
-
-#define	YYLAST		3606
-
-
-static const short yytable[] =
-{
-      67,   224,   107,    84,    85,   451,    87,    88,    89,    90,
-      91,    92,    93,   206,   386,    97,    98,    99,   100,   101,
-     102,   103,   208,   587,   231,   460,   234,   196,   569,   440,
-     520,   344,   129,   115,   347,   349,   463,   383,   514,    -1,
-     123,   125,   378,   393,   130,   384,    86,    30,   109,   105,
-     379,    30,    30,   111,   132,    30,    30,   117,  -117,   358,
-     149,    94,    96,   182,   183,   184,   185,   186,   187,   188,
-     189,   190,   191,   192,   193,    30,   464,  -116,   407,   423,
-    -119,   423,   135,    30,   112,   364,   200,   113,   551,   118,
-     555,   107,   553,   554,   197,   354,   441,   -89,   -89,   -89,
-    -273,  -273,   465,   385,   201,   139,   133,   215,    62,   204,
-     381,   205,    62,    62,   210,   230,    62,    62,   214,   130,
-     119,   219,    95,    95,   445,   121,   461,   144,   588,   556,
-     150,   229,   108,   365,   397,   -89,    62,   141,   344,   344,
-     176,   177,   178,   136,   198,   209,   246,   232,   580,   235,
-     267,   570,   142,   131,   195,   272,   348,   350,   413,   414,
-     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
-     287,   288,   289,   290,   291,   292,   293,   294,   295,   194,
-    -117,   631,   297,   298,   299,   300,   301,   302,   303,   304,
-     305,   306,   307,   308,   644,   323,   311,   313,   386,  -116,
-     408,   424,  -119,   571,   344,   143,   559,   130,   325,   180,
-     181,   327,   145,   344,   344,   -87,   -87,   -87,   453,   454,
-     146,   108,   553,   554,   455,   -18,   -18,   -18,   217,   338,
-     218,   475,   476,   469,   472,   475,   476,   222,   477,   483,
-     227,   484,   477,   575,   576,   108,   560,   552,   553,   554,
-     238,   239,   241,   -87,   486,   225,   487,   488,   367,   590,
-     500,   601,   602,   370,   478,   -99,   -99,   -99,   565,   228,
-     233,   373,   561,   374,   375,   376,   377,   242,   264,   435,
-     315,   497,-32768,-32768,-32768,-32768,   171,   172,   173,   174,
-     175,   176,   177,   178,   319,   510,   326,   323,   584,   553,
-     554,   329,   328,   323,   151,   152,   153,   344,   330,   130,
-     331,   332,   335,   336,   344,   130,   324,   337,   346,   344,
-     546,   344,   351,   352,   361,   353,   362,   549,   173,   174,
-     175,   176,   177,   178,   557,   391,   394,   398,   399,   563,
-     544,   564,   400,   415,   406,   416,   572,   422,   418,   430,
-     431,   433,   456,   355,   359,   194,   558,   107,   436,   439,
-     426,   442,   428,   468,   474,   482,   344,  -120,   368,   499,
-     506,   505,   182,   183,   184,   185,   186,   187,   188,   189,
-     190,   191,   192,   193,   323,   437,   599,   447,   509,   511,
-     513,   344,   515,   444,   344,   516,   130,   517,   518,   130,
-     566,   567,   214,   452,   519,   382,   458,   521,   522,  -273,
-    -273,   616,   523,   528,   618,   534,   550,   539,   324,   344,
-     568,   547,   548,   593,   324,   562,   579,   573,   578,   359,
-     591,   490,   583,   617,   585,   592,   594,   596,   595,   633,
-     311,   496,   597,   598,   604,   606,   627,   600,   503,   501,
-     607,   621,   629,   249,   612,   615,   238,   623,   624,   651,
-    -103,   635,   250,   622,   251,   252,   642,   253,   254,   255,
-     632,   340,   341,   641,   630,   636,   647,   643,   648,   650,
-     653,   649,   531,   654,   655,   533,   657,   108,   194,  -120,
-     661,   536,   658,   659,   660,   663,    26,    27,   342,   664,
-     417,   256,   611,   371,   613,   324,    32,   508,   448,   525,
-     199,   380,   524,   359,   359,   339,   257,   258,   259,   495,
-     260,   261,   537,   538,   530,   481,     0,     0,   473,   262,
-       0,     0,   355,     0,   359,     0,   359,     0,     0,     0,
-     343,    54,    55,    56,    57,   214,     0,     0,     0,     0,
-       0,     0,     0,   586,     0,   359,     0,     0,     0,     0,
-     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
-     192,   193,     0,     0,   605,   182,   183,   184,   185,   186,
-     187,   188,   189,   190,   191,   192,   193,     0,     0,   355,
-       0,     0,     0,     0,     0,     0,     0,  -273,  -273,     0,
-       0,     0,     0,     0,   625,     0,     0,     3,     4,     5,
-       6,     7,  -273,  -273,     0,   359,     8,     0,     0,     0,
-       0,     0,   634,     0,   639,   163,   164,   165,   166,   167,
-     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
-     178,   359,     0,     0,   652,     0,     9,    10,     0,     0,
-    -272,     0,    11,    12,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,     0,    23,    24,    25,     0,     0,
-       0,    26,    27,    28,    29,    30,   194,    31,   226,     0,
-       0,    32,    33,    34,    35,     0,    36,     0,    37,     0,
-      38,   194,     0,    39,     0,     0,     0,    40,    41,    42,
-      43,     0,    44,    45,    46,    47,     0,    48,    49,    50,
-      51,     0,     0,     0,    52,    53,    54,    55,    56,    57,
-       3,     4,     5,     6,     7,     0,    58,     0,     0,     8,
-       0,    59,     0,    60,     0,    61,    62,    63,    64,    65,
-       0,     0,     0,   457,   182,   183,   184,   185,   186,   187,
-     188,   189,   190,   191,   192,   193,     0,     0,     0,     9,
-      10,     0,     0,     0,     0,    11,    12,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,     0,    23,    24,
-      25,  -273,  -273,     0,    26,    27,    28,    29,    30,     0,
-      31,     0,     0,     0,    32,    33,    34,    35,     0,    36,
-       0,    37,     0,    38,     0,     0,    39,     0,     0,     0,
-      40,    41,     0,     0,     0,    44,    45,    46,    47,     0,
-      48,    49,    50,     0,     0,     0,     0,    52,    53,    54,
-      55,    56,    57,     3,     4,     5,     6,     7,     0,    58,
-       0,     0,     8,     0,    59,     0,    60,     0,    61,    62,
-      63,    64,    65,     0,     0,     0,   502,     0,     0,     0,
-     194,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     9,    10,     0,     0,     0,     0,    11,    12,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-       0,    23,    24,    25,     0,     0,     0,    26,    27,    28,
-      29,    30,     0,    31,     0,     0,   249,    32,    33,    34,
-      35,     0,    36,     0,    37,   250,    38,   251,   252,    39,
-     253,   254,   255,    40,    41,     0,     0,     0,    44,    45,
-      46,    47,     0,    48,    49,    50,     0,     0,     0,     0,
-      52,    53,    54,    55,    56,    57,     3,     4,     5,     6,
-       7,     0,    58,     0,   256,     8,     0,    59,     0,    60,
-       0,    61,    62,    63,    64,    65,     0,     0,     0,   608,
-     258,   259,     0,   260,   261,     0,     0,     0,     0,   268,
-       0,     0,   262,     0,     0,     9,    10,     0,     0,     0,
-       0,    11,    12,    13,    14,    15,    16,    17,    18,    19,
-      20,    21,    22,     0,    23,    24,    25,     0,     0,     0,
-      26,    27,    28,    29,    30,     0,    31,     0,     0,   249,
-      32,    33,    34,    35,     0,    36,     0,    37,   250,    38,
-     251,   252,    39,   253,   254,   255,    40,    41,     0,     0,
-       0,    44,    45,    46,    47,     0,    48,    49,    50,     0,
-       0,     0,     0,    52,    53,    54,    55,    56,    57,     3,
-       4,     5,     6,     7,     0,    58,     0,   256,     8,     0,
-      59,     0,    60,     0,    61,    62,    63,    64,    65,     0,
-       0,     0,   638,   258,   259,     0,   260,   261,     0,     0,
-       0,     0,     0,   269,     0,   262,     0,     0,     9,    10,
-       0,     0,     0,     0,    11,    12,    13,    14,    15,    16,
-      17,    18,    19,    20,    21,    22,     0,    23,    24,    25,
-       0,     0,     0,    26,    27,    28,    29,    30,     0,    31,
-       0,     0,   249,    32,    33,    34,    35,     0,    36,     0,
-      37,   250,    38,   251,   252,    39,   253,   254,   255,    40,
-      41,     0,     0,     0,    44,    45,    46,    47,     0,    48,
-      49,    50,     0,     0,     0,     0,    52,    53,    54,    55,
-      56,    57,     3,     4,     5,     6,     7,     0,    58,     0,
-     256,     8,     0,    59,     0,    60,     0,    61,    62,    63,
-      64,    65,     0,     0,     0,     0,   258,   259,     0,   260,
-     261,     0,     0,     0,     0,     0,     0,   270,   262,     0,
-       0,     9,    10,     0,     0,     0,     0,    11,    12,    13,
-      14,    15,    16,    17,    18,    19,    20,    21,    22,     0,
-      23,    24,    25,     0,     0,     0,    26,    27,    28,    29,
-      30,     0,    31,     0,     0,     0,    32,    33,    34,    35,
-       0,    36,     0,    37,     0,    38,     0,     0,    39,     0,
-       0,     0,    40,    41,     0,     0,     0,    44,    45,    46,
-      47,     0,    48,    49,    50,     0,     0,     0,     0,    52,
-      53,    54,    55,    56,    57,     3,     4,     5,     6,     7,
-       0,    58,     0,     0,     8,     0,    59,     0,    60,     0,
-      61,    62,    63,    64,    65,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     3,     4,     5,
-       6,     7,     0,     0,     9,    10,     8,     0,     0,     0,
-      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
-      21,    22,     0,    23,    24,     0,     0,     0,     0,    26,
-      27,    28,    29,    30,     0,     0,     9,    10,     0,    32,
-       0,     0,    11,    12,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,     0,    23,    24,     0,     0,     0,
-       0,    26,    27,    28,    29,    30,    49,    50,     0,     0,
-       0,    32,    52,    53,    54,    55,    56,    57,     0,     0,
-       0,     0,     0,     0,    58,     0,     0,     0,     0,     0,
-       0,    60,     0,   122,    62,    63,    64,    65,    49,    50,
-       0,     0,     0,     0,    52,    53,    54,    55,    56,    57,
-       3,     4,     5,     6,     7,     0,    58,     0,     0,     8,
-       0,     0,     0,    60,     0,   124,    62,    63,    64,    65,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     3,     4,     5,     6,     7,     0,     0,     9,
-      10,     8,     0,     0,     0,    11,    12,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,     0,    23,    24,
-       0,     0,     0,     0,    26,    27,    28,    29,    30,     0,
-       0,     9,    10,     0,    32,     0,     0,    11,    12,    13,
-      14,    15,    16,    17,    18,    19,    20,    21,    22,     0,
-      23,    24,     0,     0,     0,     0,    26,    27,    28,    29,
-      30,    49,    50,     0,     0,     0,    32,    52,    53,    54,
-      55,    56,    57,     0,     0,     0,     0,     0,     0,    58,
-       0,     0,     0,     0,     0,     0,    60,     0,   128,    62,
-      63,    64,    65,    49,    50,     0,     0,     0,     0,    52,
-      53,    54,    55,    56,    57,     3,     4,     5,     6,     7,
-       0,    58,     0,     0,     8,     0,     0,     0,    60,   203,
-       0,    62,    63,    64,    65,     0,     0,     0,     0,     0,
-       0,     0,     0,   245,     0,     0,     0,     3,     4,     5,
-       6,     7,     0,     0,     9,    10,     8,     0,     0,     0,
-      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
-      21,    22,     0,    23,    24,   296,     0,     0,     0,    26,
-      27,    28,    29,    30,     0,     0,     9,    10,     0,    32,
-       0,     0,    11,    12,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,     0,    23,    24,     0,     0,     0,
-       0,    26,    27,    28,    29,    30,    49,    50,     0,     0,
-       0,    32,    52,    53,    54,    55,    56,    57,     0,     0,
-       0,     0,     0,     0,    58,     0,     0,     0,     0,     0,
-       0,    60,     0,     0,    62,    63,    64,    65,    49,    50,
-       0,     0,     0,     0,    52,    53,    54,    55,    56,    57,
-       3,     4,     5,     6,     7,     0,    58,     0,     0,     8,
-       0,     0,     0,    60,     0,     0,    62,    63,    64,    65,
-       0,     0,     0,     0,     0,     0,     0,     0,   320,     0,
-       0,     0,     3,     4,     5,     6,     7,     0,     0,     9,
-      10,     8,     0,     0,     0,    11,    12,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,     0,    23,    24,
-     425,     0,     0,     0,    26,    27,    28,    29,    30,     0,
-       0,     9,    10,     0,    32,     0,     0,    11,    12,    13,
-      14,    15,    16,    17,    18,    19,    20,    21,    22,     0,
-      23,    24,     0,     0,     0,     0,    26,    27,    28,    29,
-      30,    49,    50,     0,     0,     0,    32,    52,    53,    54,
-      55,    56,    57,     0,     0,     0,     0,     0,     0,    58,
-       0,     0,     0,     0,     0,     0,    60,     0,     0,    62,
-      63,    64,    65,    49,    50,     0,     0,     0,     0,    52,
-      53,    54,    55,    56,    57,     3,     4,     5,     6,     7,
-       0,    58,     0,     0,     8,     0,     0,     0,    60,     0,
-       0,    62,    63,    64,    65,     0,     0,     0,     0,     0,
-       0,     0,     0,   427,     0,     0,     0,     3,     4,     5,
-       6,     7,     0,     0,     9,    10,     8,     0,     0,     0,
-      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
-      21,    22,     0,    23,    24,   446,     0,     0,     0,    26,
-      27,    28,    29,    30,     0,     0,     9,    10,     0,    32,
-       0,     0,    11,    12,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,     0,    23,    24,     0,     0,     0,
-       0,    26,    27,    28,    29,    30,    49,    50,     0,     0,
-       0,    32,    52,    53,    54,    55,    56,    57,     0,     0,
-       0,     0,     0,     0,    58,     0,     0,     0,     0,     0,
-       0,    60,     0,     0,    62,    63,    64,    65,    49,    50,
-       0,     0,     0,     0,    52,    53,    54,    55,    56,    57,
-       3,     4,     5,     6,     7,     0,    58,     0,     0,     8,
-       0,     0,     0,    60,     0,     0,    62,    63,    64,    65,
-       0,     0,     0,     0,     0,     0,     0,     0,   532,     0,
-       0,     0,     3,     4,     5,     6,     7,     0,     0,     9,
-      10,     8,     0,     0,     0,    11,    12,    13,    14,    15,
-      16,    17,    18,    19,    20,    21,    22,     0,    23,    24,
-       0,     0,     0,     0,    26,    27,    28,    29,    30,     0,
-       0,     9,    10,     0,    32,     0,     0,    11,    12,    13,
-      14,    15,    16,    17,    18,    19,    20,    21,    22,     0,
-      23,    24,     0,     0,     0,     0,    26,    27,    28,    29,
-      30,    49,    50,     0,     0,     0,    32,    52,    53,    54,
-      55,    56,    57,     0,     0,     0,     0,     0,     0,    58,
-       0,     0,     0,     0,     0,     0,    60,     0,     0,    62,
-      63,    64,    65,    49,    50,     0,     0,     0,     0,    52,
-      53,    54,    55,    56,    57,     3,     4,     5,     6,     7,
-       0,    58,     0,     0,     8,     0,     0,     0,    60,     0,
-       0,    62,    63,    64,    65,   160,   161,   162,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,   177,   178,     9,    10,     0,     0,     0,     0,
-      11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
-      21,    22,     0,    23,    24,   154,   155,   156,     0,    26,
-      27,    28,   366,    30,     0,     0,     0,     0,     0,    32,
-       0,   157,     0,   158,   159,   160,   161,   162,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,   177,   178,     0,     0,    49,    50,     0,     0,
-       0,     0,    52,    53,    54,    55,    56,    57,     0,     0,
-       0,     0,     0,     0,    58,   154,   155,   156,     0,     0,
-       0,    60,     0,     0,    62,    63,    64,    65,     0,     0,
-       0,   157,   587,   158,   159,   160,   161,   162,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,   177,   178,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   154,   155,   156,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   157,   535,   158,   159,   160,   161,   162,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,   177,   178,-32768,-32768,-32768,-32768,   167,   168,
-     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
-     154,   155,   156,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   157,   588,   158,   159,
-     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
-     170,   171,   172,   173,   174,   175,   176,   177,   178,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     154,   155,   156,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,   157,   179,   158,   159,
-     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
-     170,   171,   172,   173,   174,   175,   176,   177,   178,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   154,   155,   156,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   157,   220,   158,   159,   160,   161,   162,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,   177,   178,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   154,   155,   156,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   157,   221,   158,   159,   160,   161,   162,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,   177,   178,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   154,
-     155,   156,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   157,   266,   158,   159,   160,
-     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
-     171,   172,   173,   174,   175,   176,   177,   178,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   154,
-     155,   156,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   157,   314,   158,   159,   160,
-     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
-     171,   172,   173,   174,   175,   176,   177,   178,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   154,   155,   156,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   157,
-     317,   158,   159,   160,   161,   162,   163,   164,   165,   166,
-     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
-     177,   178,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   154,   155,   156,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   157,
-     318,   158,   159,   160,   161,   162,   163,   164,   165,   166,
-     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
-     177,   178,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   154,   155,   156,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   157,   334,   158,   159,   160,   161,   162,
-     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
-     173,   174,   175,   176,   177,   178,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   154,   155,   156,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   157,   401,   158,   159,   160,   161,   162,
-     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
-     173,   174,   175,   176,   177,   178,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   154,   155,   156,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   157,   543,   158,
-     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
-     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   154,   155,   156,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   157,   637,   158,
-     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
-     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   154,   155,   156,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   157,   645,   158,   159,   160,   161,   162,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,   177,   178,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   154,   155,   156,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   157,
-     372,   158,   159,   160,   161,   162,   163,   164,   165,   166,
-     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
-     177,   178,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   154,   155,   156,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   157,   392,   158,   159,   160,   161,   162,
-     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
-     173,   174,   175,   176,   177,   178,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   154,   155,   156,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   157,   412,   158,   159,   160,   161,   162,   163,   164,
-     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
-     175,   176,   177,   178,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,   154,
-     155,   156,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   157,   432,   158,   159,   160,
-     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
-     171,   172,   173,   174,   175,   176,   177,   178,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   154,   155,   156,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,   157,   493,   158,   159,   160,   161,   162,
-     163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
-     173,   174,   175,   176,   177,   178,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,   154,   155,   156,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,   157,   540,   158,
-     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
-     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
-     154,   155,   156,     0,     0,     0,     0,   360,     0,     0,
-       0,     0,     0,     0,     0,     0,   157,   434,   158,   159,
-     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
-     170,   171,   172,   173,   174,   175,   176,   177,   178,     0,
-       0,     0,     0,     0,   154,   155,   156,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
-     157,   485,   158,   159,   160,   161,   162,   163,   164,   165,
-     166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
-     176,   177,   178,   155,   156,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,     0,     0,     0,   157,     0,
-     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
-     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
-     178,   156,     0,     0,     0,     0,     0,     0,     0,     0,
-       0,     0,     0,     0,     0,   157,     0,   158,   159,   160,
-     161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
-     171,   172,   173,   174,   175,   176,   177,   178,   157,     0,
-     158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
-     168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
-     178,   158,   159,   160,   161,   162,   163,   164,   165,   166,
-     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
-     177,   178,   159,   160,   161,   162,   163,   164,   165,   166,
-     167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
-     177,   178,   161,   162,   163,   164,   165,   166,   167,   168,
-     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
-     162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
-     172,   173,   174,   175,   176,   177,   178
-};
-
-static const short yycheck[] =
-{
-       2,   127,    23,     3,     4,   402,     6,     7,     8,     9,
-      10,    11,    12,   112,   310,    15,    16,    17,    18,    19,
-      20,    21,     8,    26,     8,    26,     8,    60,     8,    60,
-     468,   233,    44,    33,     8,     8,    31,   309,   461,     0,
-      40,    41,    61,   315,    44,    69,   129,    71,   129,    69,
-      69,    71,    71,   129,    77,    71,    71,   129,     8,   245,
-      60,    13,    14,    13,    14,    15,    16,    17,    18,    19,
-      20,    21,    22,    23,    24,    71,    71,     8,     8,     8,
-       8,     8,    71,    71,   126,    60,    86,   129,   511,   129,
-     513,   112,    91,    92,   127,   110,   127,    90,    91,    92,
-      50,    51,    97,   127,   104,    71,   129,   119,   132,   109,
-     296,   111,   132,   132,   116,   136,   132,   132,   118,   119,
-     129,   121,    13,    14,   396,   129,   127,    69,   131,   128,
-     127,   127,    23,   108,   320,   128,   132,   129,   340,   341,
-      45,    46,    47,   132,   132,   131,   146,   131,   545,   131,
-     150,   131,   129,    44,   108,   155,   130,   130,   340,   341,
-     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
-     170,   171,   172,   173,   174,   175,   176,   177,   178,   129,
-     130,   619,   182,   183,   184,   185,   186,   187,   188,   189,
-     190,   191,   192,   193,   632,   207,   196,   197,   494,   130,
-     130,   130,   130,   130,   406,   129,    31,   207,   208,    50,
-      51,   211,   129,   415,   416,    90,    91,    92,   404,   405,
-     129,   112,    91,    92,   406,    64,    65,    66,   119,   229,
-     129,    95,    96,   415,   416,    95,    96,    31,   102,   425,
-      77,   427,   102,    64,    65,   136,    71,    90,    91,    92,
-     141,   142,   143,   128,    69,   131,    71,    72,   258,   128,
-     446,    64,    65,   265,   128,    64,    65,    66,   128,   131,
-      13,   271,    97,   273,   274,   275,   276,   107,   128,   378,
-     129,   443,    36,    37,    38,    39,    40,    41,    42,    43,
-      44,    45,    46,    47,   129,   457,    80,   309,    90,    91,
-      92,     8,   131,   315,    63,    64,    65,   509,    88,   309,
-      88,    69,    69,    69,   516,   315,   207,   130,    71,   521,
-     506,   523,   130,    69,   130,   127,     8,   509,    42,    43,
-      44,    45,    46,    47,   516,   136,    26,   130,     8,   521,
-     502,   523,   129,   129,    13,    13,   532,   129,   131,    69,
-      60,   128,    69,   244,   245,   129,   518,   378,   130,   108,
-     360,   130,   362,   129,   127,    13,   568,     8,   259,   130,
-     109,   131,    13,    14,    15,    16,    17,    18,    19,    20,
-      21,    22,    23,    24,   396,   385,   568,   399,    13,   131,
-     131,   593,    71,   395,   596,    13,   396,    71,   129,   399,
-     526,   527,   402,   403,     8,   296,   408,   109,   130,    50,
-      51,   593,     8,    71,   596,   136,    87,   136,   309,   621,
-      13,   130,   130,    13,   315,   130,    81,   128,   131,   320,
-     130,   431,   131,   595,   131,    71,    71,   109,   127,   621,
-     440,   441,    69,    69,   129,   131,   608,    71,   450,   449,
-     130,    13,   614,    60,   131,   131,   347,    26,    66,    26,
-      66,   623,    69,   129,    71,    72,   628,    74,    75,    76,
-     129,    42,    43,    85,   128,   131,   638,   129,   131,   130,
-      83,   643,   482,   130,   127,   485,   131,   378,   129,   130,
-     128,   491,   131,   655,   656,     0,    67,    68,    69,     0,
-     347,   108,   582,   265,   586,   396,    77,   454,   399,   474,
-      82,   296,   471,   404,   405,   231,   123,   124,   125,   440,
-     127,   128,   492,   494,   480,   423,    -1,    -1,   419,   136,
-      -1,    -1,   423,    -1,   425,    -1,   427,    -1,    -1,    -1,
-     111,   112,   113,   114,   115,   545,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,   553,    -1,   446,    -1,    -1,    -1,    -1,
-      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
-      23,    24,    -1,    -1,   576,    13,    14,    15,    16,    17,
-      18,    19,    20,    21,    22,    23,    24,    -1,    -1,   480,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    -1,
-      -1,    -1,    -1,    -1,   604,    -1,    -1,     3,     4,     5,
-       6,     7,    50,    51,    -1,   506,    12,    -1,    -1,    -1,
-      -1,    -1,   622,    -1,   626,    32,    33,    34,    35,    36,
-      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
-      47,   532,    -1,    -1,   646,    -1,    42,    43,    -1,    -1,
-      88,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
-      56,    57,    58,    59,    -1,    61,    62,    63,    -1,    -1,
-      -1,    67,    68,    69,    70,    71,   129,    73,   131,    -1,
-      -1,    77,    78,    79,    80,    -1,    82,    -1,    84,    -1,
-      86,   129,    -1,    89,    -1,    -1,    -1,    93,    94,    95,
-      96,    -1,    98,    99,   100,   101,    -1,   103,   104,   105,
-     106,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
-       3,     4,     5,     6,     7,    -1,   122,    -1,    -1,    12,
-      -1,   127,    -1,   129,    -1,   131,   132,   133,   134,   135,
-      -1,    -1,    -1,    26,    13,    14,    15,    16,    17,    18,
-      19,    20,    21,    22,    23,    24,    -1,    -1,    -1,    42,
-      43,    -1,    -1,    -1,    -1,    48,    49,    50,    51,    52,
-      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
-      63,    50,    51,    -1,    67,    68,    69,    70,    71,    -1,
-      73,    -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,
-      -1,    84,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,
-      93,    94,    -1,    -1,    -1,    98,    99,   100,   101,    -1,
-     103,   104,   105,    -1,    -1,    -1,    -1,   110,   111,   112,
-     113,   114,   115,     3,     4,     5,     6,     7,    -1,   122,
-      -1,    -1,    12,    -1,   127,    -1,   129,    -1,   131,   132,
-     133,   134,   135,    -1,    -1,    -1,    26,    -1,    -1,    -1,
-     129,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    42,    43,    -1,    -1,    -1,    -1,    48,    49,
-      50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
-      -1,    61,    62,    63,    -1,    -1,    -1,    67,    68,    69,
-      70,    71,    -1,    73,    -1,    -1,    60,    77,    78,    79,
-      80,    -1,    82,    -1,    84,    69,    86,    71,    72,    89,
-      74,    75,    76,    93,    94,    -1,    -1,    -1,    98,    99,
-     100,   101,    -1,   103,   104,   105,    -1,    -1,    -1,    -1,
-     110,   111,   112,   113,   114,   115,     3,     4,     5,     6,
-       7,    -1,   122,    -1,   108,    12,    -1,   127,    -1,   129,
-      -1,   131,   132,   133,   134,   135,    -1,    -1,    -1,    26,
-     124,   125,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
-      -1,    -1,   136,    -1,    -1,    42,    43,    -1,    -1,    -1,
-      -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
-      57,    58,    59,    -1,    61,    62,    63,    -1,    -1,    -1,
-      67,    68,    69,    70,    71,    -1,    73,    -1,    -1,    60,
-      77,    78,    79,    80,    -1,    82,    -1,    84,    69,    86,
-      71,    72,    89,    74,    75,    76,    93,    94,    -1,    -1,
-      -1,    98,    99,   100,   101,    -1,   103,   104,   105,    -1,
-      -1,    -1,    -1,   110,   111,   112,   113,   114,   115,     3,
-       4,     5,     6,     7,    -1,   122,    -1,   108,    12,    -1,
-     127,    -1,   129,    -1,   131,   132,   133,   134,   135,    -1,
-      -1,    -1,    26,   124,   125,    -1,   127,   128,    -1,    -1,
-      -1,    -1,    -1,   134,    -1,   136,    -1,    -1,    42,    43,
-      -1,    -1,    -1,    -1,    48,    49,    50,    51,    52,    53,
-      54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
-      -1,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,
-      -1,    -1,    60,    77,    78,    79,    80,    -1,    82,    -1,
-      84,    69,    86,    71,    72,    89,    74,    75,    76,    93,
-      94,    -1,    -1,    -1,    98,    99,   100,   101,    -1,   103,
-     104,   105,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
-     114,   115,     3,     4,     5,     6,     7,    -1,   122,    -1,
-     108,    12,    -1,   127,    -1,   129,    -1,   131,   132,   133,
-     134,   135,    -1,    -1,    -1,    -1,   124,   125,    -1,   127,
-     128,    -1,    -1,    -1,    -1,    -1,    -1,   135,   136,    -1,
-      -1,    42,    43,    -1,    -1,    -1,    -1,    48,    49,    50,
-      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
-      61,    62,    63,    -1,    -1,    -1,    67,    68,    69,    70,
-      71,    -1,    73,    -1,    -1,    -1,    77,    78,    79,    80,
-      -1,    82,    -1,    84,    -1,    86,    -1,    -1,    89,    -1,
-      -1,    -1,    93,    94,    -1,    -1,    -1,    98,    99,   100,
-     101,    -1,   103,   104,   105,    -1,    -1,    -1,    -1,   110,
-     111,   112,   113,   114,   115,     3,     4,     5,     6,     7,
-      -1,   122,    -1,    -1,    12,    -1,   127,    -1,   129,    -1,
-     131,   132,   133,   134,   135,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,
-       6,     7,    -1,    -1,    42,    43,    12,    -1,    -1,    -1,
-      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
-      58,    59,    -1,    61,    62,    -1,    -1,    -1,    -1,    67,
-      68,    69,    70,    71,    -1,    -1,    42,    43,    -1,    77,
-      -1,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
-      56,    57,    58,    59,    -1,    61,    62,    -1,    -1,    -1,
-      -1,    67,    68,    69,    70,    71,   104,   105,    -1,    -1,
-      -1,    77,   110,   111,   112,   113,   114,   115,    -1,    -1,
-      -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,
-      -1,   129,    -1,   131,   132,   133,   134,   135,   104,   105,
-      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
-       3,     4,     5,     6,     7,    -1,   122,    -1,    -1,    12,
-      -1,    -1,    -1,   129,    -1,   131,   132,   133,   134,   135,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,     3,     4,     5,     6,     7,    -1,    -1,    42,
-      43,    12,    -1,    -1,    -1,    48,    49,    50,    51,    52,
-      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
-      -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,    -1,
-      -1,    42,    43,    -1,    77,    -1,    -1,    48,    49,    50,
-      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
-      61,    62,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
-      71,   104,   105,    -1,    -1,    -1,    77,   110,   111,   112,
-     113,   114,   115,    -1,    -1,    -1,    -1,    -1,    -1,   122,
-      -1,    -1,    -1,    -1,    -1,    -1,   129,    -1,   131,   132,
-     133,   134,   135,   104,   105,    -1,    -1,    -1,    -1,   110,
-     111,   112,   113,   114,   115,     3,     4,     5,     6,     7,
-      -1,   122,    -1,    -1,    12,    -1,    -1,    -1,   129,   130,
-      -1,   132,   133,   134,   135,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    31,    -1,    -1,    -1,     3,     4,     5,
-       6,     7,    -1,    -1,    42,    43,    12,    -1,    -1,    -1,
-      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
-      58,    59,    -1,    61,    62,    31,    -1,    -1,    -1,    67,
-      68,    69,    70,    71,    -1,    -1,    42,    43,    -1,    77,
-      -1,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
-      56,    57,    58,    59,    -1,    61,    62,    -1,    -1,    -1,
-      -1,    67,    68,    69,    70,    71,   104,   105,    -1,    -1,
-      -1,    77,   110,   111,   112,   113,   114,   115,    -1,    -1,
-      -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,
-      -1,   129,    -1,    -1,   132,   133,   134,   135,   104,   105,
-      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
-       3,     4,     5,     6,     7,    -1,   122,    -1,    -1,    12,
-      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,   135,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
-      -1,    -1,     3,     4,     5,     6,     7,    -1,    -1,    42,
-      43,    12,    -1,    -1,    -1,    48,    49,    50,    51,    52,
-      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
-      31,    -1,    -1,    -1,    67,    68,    69,    70,    71,    -1,
-      -1,    42,    43,    -1,    77,    -1,    -1,    48,    49,    50,
-      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
-      61,    62,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
-      71,   104,   105,    -1,    -1,    -1,    77,   110,   111,   112,
-     113,   114,   115,    -1,    -1,    -1,    -1,    -1,    -1,   122,
-      -1,    -1,    -1,    -1,    -1,    -1,   129,    -1,    -1,   132,
-     133,   134,   135,   104,   105,    -1,    -1,    -1,    -1,   110,
-     111,   112,   113,   114,   115,     3,     4,     5,     6,     7,
-      -1,   122,    -1,    -1,    12,    -1,    -1,    -1,   129,    -1,
-      -1,   132,   133,   134,   135,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    31,    -1,    -1,    -1,     3,     4,     5,
-       6,     7,    -1,    -1,    42,    43,    12,    -1,    -1,    -1,
-      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
-      58,    59,    -1,    61,    62,    31,    -1,    -1,    -1,    67,
-      68,    69,    70,    71,    -1,    -1,    42,    43,    -1,    77,
-      -1,    -1,    48,    49,    50,    51,    52,    53,    54,    55,
-      56,    57,    58,    59,    -1,    61,    62,    -1,    -1,    -1,
-      -1,    67,    68,    69,    70,    71,   104,   105,    -1,    -1,
-      -1,    77,   110,   111,   112,   113,   114,   115,    -1,    -1,
-      -1,    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,
-      -1,   129,    -1,    -1,   132,   133,   134,   135,   104,   105,
-      -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,
-       3,     4,     5,     6,     7,    -1,   122,    -1,    -1,    12,
-      -1,    -1,    -1,   129,    -1,    -1,   132,   133,   134,   135,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,
-      -1,    -1,     3,     4,     5,     6,     7,    -1,    -1,    42,
-      43,    12,    -1,    -1,    -1,    48,    49,    50,    51,    52,
-      53,    54,    55,    56,    57,    58,    59,    -1,    61,    62,
-      -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,    -1,
-      -1,    42,    43,    -1,    77,    -1,    -1,    48,    49,    50,
-      51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
-      61,    62,    -1,    -1,    -1,    -1,    67,    68,    69,    70,
-      71,   104,   105,    -1,    -1,    -1,    77,   110,   111,   112,
-     113,   114,   115,    -1,    -1,    -1,    -1,    -1,    -1,   122,
-      -1,    -1,    -1,    -1,    -1,    -1,   129,    -1,    -1,   132,
-     133,   134,   135,   104,   105,    -1,    -1,    -1,    -1,   110,
-     111,   112,   113,   114,   115,     3,     4,     5,     6,     7,
-      -1,   122,    -1,    -1,    12,    -1,    -1,    -1,   129,    -1,
-      -1,   132,   133,   134,   135,    29,    30,    31,    32,    33,
-      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
-      44,    45,    46,    47,    42,    43,    -1,    -1,    -1,    -1,
-      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
-      58,    59,    -1,    61,    62,     9,    10,    11,    -1,    67,
-      68,    69,    70,    71,    -1,    -1,    -1,    -1,    -1,    77,
-      -1,    25,    -1,    27,    28,    29,    30,    31,    32,    33,
-      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
-      44,    45,    46,    47,    -1,    -1,   104,   105,    -1,    -1,
-      -1,    -1,   110,   111,   112,   113,   114,   115,    -1,    -1,
-      -1,    -1,    -1,    -1,   122,     9,    10,    11,    -1,    -1,
-      -1,   129,    -1,    -1,   132,   133,   134,   135,    -1,    -1,
-      -1,    25,    26,    27,    28,    29,    30,    31,    32,    33,
-      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
-      44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,     9,    10,    11,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    25,   136,    27,    28,    29,    30,    31,    32,    33,
-      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
-      44,    45,    46,    47,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
-       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    25,   131,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-       9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    25,   131,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,     9,    10,    11,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    25,   131,    27,    28,    29,    30,    31,    32,    33,
-      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
-      44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,     9,    10,    11,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    25,   131,    27,    28,    29,    30,    31,    32,    33,
-      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
-      44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,
-      10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    25,   130,    27,    28,    29,
-      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,    43,    44,    45,    46,    47,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,
-      10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    25,   130,    27,    28,    29,
-      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,    43,    44,    45,    46,    47,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,     9,    10,    11,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,
-     130,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
-      46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,     9,    10,    11,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,
-     130,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
-      46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    25,   130,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    25,   130,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,   130,    27,
-      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,   130,    27,
-      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,     9,    10,    11,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    25,   130,    27,    28,    29,    30,    31,    32,    33,
-      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
-      44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,     9,    10,    11,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,
-     128,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
-      46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    25,   128,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,     9,    10,    11,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    25,   128,    27,    28,    29,    30,    31,    32,    33,
-      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
-      44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,
-      10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    25,   128,    27,    28,    29,
-      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,    43,    44,    45,    46,    47,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    25,   128,    27,    28,    29,    30,    31,
-      32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
-      42,    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,   128,    27,
-      28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
-       9,    10,    11,    -1,    -1,    -1,    -1,   109,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    25,    26,    27,    28,
-      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
-      39,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
-      -1,    -1,    -1,    -1,     9,    10,    11,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      25,   109,    27,    28,    29,    30,    31,    32,    33,    34,
-      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
-      45,    46,    47,    10,    11,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,
-      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
-      47,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
-      -1,    -1,    -1,    -1,    -1,    25,    -1,    27,    28,    29,
-      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
-      40,    41,    42,    43,    44,    45,    46,    47,    25,    -1,
-      27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
-      37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
-      47,    27,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
-      46,    47,    28,    29,    30,    31,    32,    33,    34,    35,
-      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
-      46,    47,    30,    31,    32,    33,    34,    35,    36,    37,
-      38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
-      31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
-      41,    42,    43,    44,    45,    46,    47
-};
-#define YYPURE 1
-
-/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
-
-/* Skeleton output parser for bison,
-
-   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
-   Foundation, Inc.
-
-   This program is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with this program; if not, write to the Free Software
-   Foundation, Inc., 59 Temple Place - Suite 330,
-   Boston, MA 02111-1307, USA.  */
-
-/* As a special exception, when this file is copied by Bison into a
-   Bison output file, you may use that output file without restriction.
-   This special exception was added by the Free Software Foundation
-   in version 1.24 of Bison.  */
-
-/* This is the parser code that is written into each bison parser when
-   the %semantic_parser declaration is not specified in the grammar.
-   It was written by Richard Stallman by simplifying the hairy parser
-   used when %semantic_parser is specified.  */
-
-/* All symbols defined below should begin with yy or YY, to avoid
-   infringing on user name space.  This should be done even for local
-   variables, as they might otherwise be expanded by user macros.
-   There are some unavoidable exceptions within include files to
-   define necessary library symbols; they are noted "INFRINGES ON
-   USER NAME SPACE" below.  */
-
-#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)
-
-/* The parser invokes alloca or malloc; define the necessary symbols.  */
-
-# if YYSTACK_USE_ALLOCA
-#  define YYSTACK_ALLOC alloca
-# else
-#  ifndef YYSTACK_USE_ALLOCA
-#   if defined (alloca) || defined (_ALLOCA_H)
-#    define YYSTACK_ALLOC alloca
-#   else
-#    ifdef __GNUC__
-#     define YYSTACK_ALLOC __builtin_alloca
-#    endif
-#   endif
-#  endif
-# endif
-
-# ifdef YYSTACK_ALLOC
-   /* Pacify GCC's `empty if-body' warning. */
-#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
-# else
-#  if defined (__STDC__) || defined (__cplusplus)
-#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
-#   define YYSIZE_T size_t
-#  endif
-#  define YYSTACK_ALLOC malloc
-#  define YYSTACK_FREE free
-# endif
-#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */
-
-
-#if (! defined (yyoverflow) \
-     && (! defined (__cplusplus) \
-	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
-
-/* A type that is properly aligned for any stack member.  */
-union yyalloc
-{
-  short yyss;
-  YYSTYPE yyvs;
-# if YYLSP_NEEDED
-  YYLTYPE yyls;
-# endif
-};
-
-/* The size of the maximum gap between one aligned stack and the next.  */
-# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)
-
-/* The size of an array large to enough to hold all stacks, each with
-   N elements.  */
-# if YYLSP_NEEDED
-#  define YYSTACK_BYTES(N) \
-     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
-      + 2 * YYSTACK_GAP_MAX)
-# else
-#  define YYSTACK_BYTES(N) \
-     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
-      + YYSTACK_GAP_MAX)
-# endif
-
-/* Copy COUNT objects from FROM to TO.  The source and destination do
-   not overlap.  */
-# ifndef YYCOPY
-#  if 1 < __GNUC__
-#   define YYCOPY(To, From, Count) \
-      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
-#  else
-#   define YYCOPY(To, From, Count)		\
-      do					\
-	{					\
-	  register YYSIZE_T yyi;		\
-	  for (yyi = 0; yyi < (Count); yyi++)	\
-	    (To)[yyi] = (From)[yyi];		\
-	}					\
-      while (0)
-#  endif
-# endif
-
-/* Relocate STACK from its old location to the new one.  The
-   local variables YYSIZE and YYSTACKSIZE give the old and new number of
-   elements in the stack, and YYPTR gives the new location of the
-   stack.  Advance YYPTR to a properly aligned location for the next
-   stack.  */
-# define YYSTACK_RELOCATE(Stack)					\
-    do									\
-      {									\
-	YYSIZE_T yynewbytes;						\
-	YYCOPY (&yyptr->Stack, Stack, yysize);				\
-	Stack = &yyptr->Stack;						\
-	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
-	yyptr += yynewbytes / sizeof (*yyptr);				\
-      }									\
-    while (0)
-
-#endif
-
-
-#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
-# define YYSIZE_T __SIZE_TYPE__
-#endif
-#if ! defined (YYSIZE_T) && defined (size_t)
-# define YYSIZE_T size_t
-#endif
-#if ! defined (YYSIZE_T)
-# if defined (__STDC__) || defined (__cplusplus)
-#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
-#  define YYSIZE_T size_t
-# endif
-#endif
-#if ! defined (YYSIZE_T)
-# define YYSIZE_T unsigned int
-#endif
-
-#define yyerrok		(yyerrstatus = 0)
-#define yyclearin	(yychar = YYEMPTY)
-#define YYEMPTY		-2
-#define YYEOF		0
-#define YYACCEPT	goto yyacceptlab
-#define YYABORT 	goto yyabortlab
-#define YYERROR		goto yyerrlab1
-/* Like YYERROR except do call yyerror.  This remains here temporarily
-   to ease the transition to the new meaning of YYERROR, for GCC.
-   Once GCC version 2 has supplanted version 1, this can go.  */
-#define YYFAIL		goto yyerrlab
-#define YYRECOVERING()  (!!yyerrstatus)
-#define YYBACKUP(Token, Value)					\
-do								\
-  if (yychar == YYEMPTY && yylen == 1)				\
-    {								\
-      yychar = (Token);						\
-      yylval = (Value);						\
-      yychar1 = YYTRANSLATE (yychar);				\
-      YYPOPSTACK;						\
-      goto yybackup;						\
-    }								\
-  else								\
-    { 								\
-      yyerror ("syntax error: cannot back up");			\
-      YYERROR;							\
-    }								\
-while (0)
-
-#define YYTERROR	1
-#define YYERRCODE	256
-
-
-/* YYLLOC_DEFAULT -- Compute the default location (before the actions
-   are run).
-
-   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
-   first token.  By default, to implement support for ranges, extend
-   its range to the last symbol.  */
-
-#ifndef YYLLOC_DEFAULT
-# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
-   Current.last_line   = Rhs[N].last_line;	\
-   Current.last_column = Rhs[N].last_column;
-#endif
-
-
-/* YYLEX -- calling `yylex' with the right arguments.  */
-
-#if YYPURE
-# if YYLSP_NEEDED
-#  ifdef YYLEX_PARAM
-#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
-#  else
-#   define YYLEX		yylex (&yylval, &yylloc)
-#  endif
-# else /* !YYLSP_NEEDED */
-#  ifdef YYLEX_PARAM
-#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
-#  else
-#   define YYLEX		yylex (&yylval)
-#  endif
-# endif /* !YYLSP_NEEDED */
-#else /* !YYPURE */
-# define YYLEX			yylex ()
-#endif /* !YYPURE */
-
-
-/* Enable debugging if requested.  */
-#if YYDEBUG
-
-# ifndef YYFPRINTF
-#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
-#  define YYFPRINTF fprintf
-# endif
-
-# define YYDPRINTF(Args)			\
-do {						\
-  if (yydebug)					\
-    YYFPRINTF Args;				\
-} while (0)
-/* Nonzero means print parse trace.  It is left uninitialized so that
-   multiple parsers can coexist.  */
-int yydebug;
-#else /* !YYDEBUG */
-# define YYDPRINTF(Args)
-#endif /* !YYDEBUG */
-
-/* YYINITDEPTH -- initial size of the parser's stacks.  */
-#ifndef	YYINITDEPTH
-# define YYINITDEPTH 200
-#endif
-
-/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
-   if the built-in stack extension method is used).
-
-   Do not make this value too large; the results are undefined if
-   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
-   evaluated with infinite-precision integer arithmetic.  */
-
-#if YYMAXDEPTH == 0
-# undef YYMAXDEPTH
-#endif
-
-#ifndef YYMAXDEPTH
-# define YYMAXDEPTH 10000
-#endif
-
-#ifdef YYERROR_VERBOSE
-
-# ifndef yystrlen
-#  if defined (__GLIBC__) && defined (_STRING_H)
-#   define yystrlen strlen
-#  else
-/* Return the length of YYSTR.  */
-static YYSIZE_T
-#   if defined (__STDC__) || defined (__cplusplus)
-yystrlen (const char *yystr)
-#   else
-yystrlen (yystr)
-     const char *yystr;
-#   endif
-{
-  register const char *yys = yystr;
-
-  while (*yys++ != '\0')
-    continue;
-
-  return yys - yystr - 1;
-}
-#  endif
-# endif
-
-# ifndef yystpcpy
-#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
-#   define yystpcpy stpcpy
-#  else
-/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
-   YYDEST.  */
-static char *
-#   if defined (__STDC__) || defined (__cplusplus)
-yystpcpy (char *yydest, const char *yysrc)
-#   else
-yystpcpy (yydest, yysrc)
-     char *yydest;
-     const char *yysrc;
-#   endif
-{
-  register char *yyd = yydest;
-  register const char *yys = yysrc;
-
-  while ((*yyd++ = *yys++) != '\0')
-    continue;
-
-  return yyd - 1;
-}
-#  endif
-# endif
-#endif
-
-
-
-/* The user can define YYPARSE_PARAM as the name of an argument to be passed
-   into yyparse.  The argument should have type void *.
-   It should actually point to an object.
-   Grammar actions can access the variable by casting it
-   to the proper pointer type.  */
-
-#ifdef YYPARSE_PARAM
-# if defined (__STDC__) || defined (__cplusplus)
-#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
-#  define YYPARSE_PARAM_DECL
-# else
-#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
-#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
-# endif
-#else /* !YYPARSE_PARAM */
-# define YYPARSE_PARAM_ARG
-# define YYPARSE_PARAM_DECL
-#endif /* !YYPARSE_PARAM */
-
-/* Prevent warning if -Wstrict-prototypes.  */
-#ifdef __GNUC__
-# ifdef YYPARSE_PARAM
-int yyparse (void *);
-# else
-int yyparse (void);
-# endif
-#endif
-
-/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
-   variables are global, or local to YYPARSE.  */
-
-#define YY_DECL_NON_LSP_VARIABLES			\
-/* The lookahead symbol.  */				\
-int yychar;						\
-							\
-/* The semantic value of the lookahead symbol. */	\
-YYSTYPE yylval;						\
-							\
-/* Number of parse errors so far.  */			\
-int yynerrs;
-
-#if YYLSP_NEEDED
-# define YY_DECL_VARIABLES			\
-YY_DECL_NON_LSP_VARIABLES			\
-						\
-/* Location data for the lookahead symbol.  */	\
-YYLTYPE yylloc;
-#else
-# define YY_DECL_VARIABLES			\
-YY_DECL_NON_LSP_VARIABLES
-#endif
-
-
-/* If nonreentrant, generate the variables here. */
-
-#if !YYPURE
-YY_DECL_VARIABLES
-#endif  /* !YYPURE */
-
-int
-yyparse (YYPARSE_PARAM_ARG)
-     YYPARSE_PARAM_DECL
-{
-  /* If reentrant, generate the variables here. */
-#if YYPURE
-  YY_DECL_VARIABLES
-#endif  /* !YYPURE */
-
-  register int yystate;
-  register int yyn;
-  int yyresult;
-  /* Number of tokens to shift before error messages enabled.  */
-  int yyerrstatus;
-  /* Lookahead token as an internal (translated) token number.  */
-  int yychar1 = 0;
-
-  /* Three stacks and their tools:
-     `yyss': related to states,
-     `yyvs': related to semantic values,
-     `yyls': related to locations.
-
-     Refer to the stacks thru separate pointers, to allow yyoverflow
-     to reallocate them elsewhere.  */
-
-  /* The state stack. */
-  short	yyssa[YYINITDEPTH];
-  short *yyss = yyssa;
-  register short *yyssp;
-
-  /* The semantic value stack.  */
-  YYSTYPE yyvsa[YYINITDEPTH];
-  YYSTYPE *yyvs = yyvsa;
-  register YYSTYPE *yyvsp;
-
-#if YYLSP_NEEDED
-  /* The location stack.  */
-  YYLTYPE yylsa[YYINITDEPTH];
-  YYLTYPE *yyls = yylsa;
-  YYLTYPE *yylsp;
-#endif
-
-#if YYLSP_NEEDED
-# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
-#else
-# define YYPOPSTACK   (yyvsp--, yyssp--)
-#endif
-
-  YYSIZE_T yystacksize = YYINITDEPTH;
-
-
-  /* The variables used to return semantic value and location from the
-     action routines.  */
-  YYSTYPE yyval;
-#if YYLSP_NEEDED
-  YYLTYPE yyloc;
-#endif
-
-  /* When reducing, the number of symbols on the RHS of the reduced
-     rule. */
-  int yylen;
-
-  YYDPRINTF ((stderr, "Starting parse\n"));
-
-  yystate = 0;
-  yyerrstatus = 0;
-  yynerrs = 0;
-  yychar = YYEMPTY;		/* Cause a token to be read.  */
-
-  /* Initialize stack pointers.
-     Waste one element of value and location stack
-     so that they stay on the same level as the state stack.
-     The wasted elements are never initialized.  */
-
-  yyssp = yyss;
-  yyvsp = yyvs;
-#if YYLSP_NEEDED
-  yylsp = yyls;
-#endif
-  goto yysetstate;
-
-/*------------------------------------------------------------.
-| yynewstate -- Push a new state, which is found in yystate.  |
-`------------------------------------------------------------*/
- yynewstate:
-  /* In all cases, when you get here, the value and location stacks
-     have just been pushed. so pushing a state here evens the stacks.
-     */
-  yyssp++;
-
- yysetstate:
-  *yyssp = yystate;
-
-  if (yyssp >= yyss + yystacksize - 1)
-    {
-      /* Get the current used size of the three stacks, in elements.  */
-      YYSIZE_T yysize = yyssp - yyss + 1;
-
-#ifdef yyoverflow
-      {
-	/* Give user a chance to reallocate the stack. Use copies of
-	   these so that the &'s don't force the real ones into
-	   memory.  */
-	YYSTYPE *yyvs1 = yyvs;
-	short *yyss1 = yyss;
-
-	/* Each stack pointer address is followed by the size of the
-	   data in use in that stack, in bytes.  */
-# if YYLSP_NEEDED
-	YYLTYPE *yyls1 = yyls;
-	/* This used to be a conditional around just the two extra args,
-	   but that might be undefined if yyoverflow is a macro.  */
-	yyoverflow ("parser stack overflow",
-		    &yyss1, yysize * sizeof (*yyssp),
-		    &yyvs1, yysize * sizeof (*yyvsp),
-		    &yyls1, yysize * sizeof (*yylsp),
-		    &yystacksize);
-	yyls = yyls1;
-# else
-	yyoverflow ("parser stack overflow",
-		    &yyss1, yysize * sizeof (*yyssp),
-		    &yyvs1, yysize * sizeof (*yyvsp),
-		    &yystacksize);
-# endif
-	yyss = yyss1;
-	yyvs = yyvs1;
-      }
-#else /* no yyoverflow */
-# ifndef YYSTACK_RELOCATE
-      goto yyoverflowlab;
-# else
-      /* Extend the stack our own way.  */
-      if (yystacksize >= YYMAXDEPTH)
-	goto yyoverflowlab;
-      yystacksize *= 2;
-      if (yystacksize > YYMAXDEPTH)
-	yystacksize = YYMAXDEPTH;
-
-      {
-	short *yyss1 = yyss;
-	union yyalloc *yyptr =
-	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
-	if (! yyptr)
-	  goto yyoverflowlab;
-	YYSTACK_RELOCATE (yyss);
-	YYSTACK_RELOCATE (yyvs);
-# if YYLSP_NEEDED
-	YYSTACK_RELOCATE (yyls);
-# endif
-# undef YYSTACK_RELOCATE
-	if (yyss1 != yyssa)
-	  YYSTACK_FREE (yyss1);
-      }
-# endif
-#endif /* no yyoverflow */
-
-      yyssp = yyss + yysize - 1;
-      yyvsp = yyvs + yysize - 1;
-#if YYLSP_NEEDED
-      yylsp = yyls + yysize - 1;
-#endif
-
-      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
-		  (unsigned long int) yystacksize));
-
-      if (yyssp >= yyss + yystacksize - 1)
-	YYABORT;
-    }
-
-  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
-
-  goto yybackup;
-
-
-/*-----------.
-| yybackup.  |
-`-----------*/
-yybackup:
-
-/* Do appropriate processing given the current state.  */
-/* Read a lookahead token if we need one and don't already have one.  */
-/* yyresume: */
-
-  /* First try to decide what to do without reference to lookahead token.  */
-
-  yyn = yypact[yystate];
-  if (yyn == YYFLAG)
-    goto yydefault;
-
-  /* Not known => get a lookahead token if don't already have one.  */
-
-  /* yychar is either YYEMPTY or YYEOF
-     or a valid token in external form.  */
-
-  if (yychar == YYEMPTY)
-    {
-      YYDPRINTF ((stderr, "Reading a token: "));
-      yychar = YYLEX;
-    }
-
-  /* Convert token to internal form (in yychar1) for indexing tables with */
-
-  if (yychar <= 0)		/* This means end of input. */
-    {
-      yychar1 = 0;
-      yychar = YYEOF;		/* Don't call YYLEX any more */
-
-      YYDPRINTF ((stderr, "Now at end of input.\n"));
-    }
-  else
-    {
-      yychar1 = YYTRANSLATE (yychar);
-
-#if YYDEBUG
-     /* We have to keep this `#if YYDEBUG', since we use variables
-	which are defined only if `YYDEBUG' is set.  */
-      if (yydebug)
-	{
-	  YYFPRINTF (stderr, "Next token is %d (%s",
-		     yychar, yytname[yychar1]);
-	  /* Give the individual parser a way to print the precise
-	     meaning of a token, for further debugging info.  */
-# ifdef YYPRINT
-	  YYPRINT (stderr, yychar, yylval);
-# endif
-	  YYFPRINTF (stderr, ")\n");
-	}
-#endif
-    }
-
-  yyn += yychar1;
-  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
-    goto yydefault;
-
-  yyn = yytable[yyn];
-
-  /* yyn is what to do for this token type in this state.
-     Negative => reduce, -yyn is rule number.
-     Positive => shift, yyn is new state.
-       New state is final state => don't bother to shift,
-       just return success.
-     0, or most negative number => error.  */
-
-  if (yyn < 0)
-    {
-      if (yyn == YYFLAG)
-	goto yyerrlab;
-      yyn = -yyn;
-      goto yyreduce;
-    }
-  else if (yyn == 0)
-    goto yyerrlab;
-
-  if (yyn == YYFINAL)
-    YYACCEPT;
-
-  /* Shift the lookahead token.  */
-  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
-	      yychar, yytname[yychar1]));
-
-  /* Discard the token being shifted unless it is eof.  */
-  if (yychar != YYEOF)
-    yychar = YYEMPTY;
-
-  *++yyvsp = yylval;
-#if YYLSP_NEEDED
-  *++yylsp = yylloc;
-#endif
-
-  /* Count tokens shifted since error; after three, turn off error
-     status.  */
-  if (yyerrstatus)
-    yyerrstatus--;
-
-  yystate = yyn;
-  goto yynewstate;
-
-
-/*-----------------------------------------------------------.
-| yydefault -- do the default action for the current state.  |
-`-----------------------------------------------------------*/
-yydefault:
-  yyn = yydefact[yystate];
-  if (yyn == 0)
-    goto yyerrlab;
-  goto yyreduce;
-
-
-/*-----------------------------.
-| yyreduce -- Do a reduction.  |
-`-----------------------------*/
-yyreduce:
-  /* yyn is the number of a rule to reduce with.  */
-  yylen = yyr2[yyn];
-
-  /* If YYLEN is nonzero, implement the default value of the action:
-     `$$ = $1'.
-
-     Otherwise, the following line sets YYVAL to the semantic value of
-     the lookahead token.  This behavior is undocumented and Bison
-     users should not rely upon it.  Assigning to YYVAL
-     unconditionally makes the parser a bit smaller, and it avoids a
-     GCC warning that YYVAL may be used uninitialized.  */
-  yyval = yyvsp[1-yylen];
-
-#if YYLSP_NEEDED
-  /* Similarly for the default location.  Let the user run additional
-     commands if for instance locations are ranges.  */
-  yyloc = yylsp[1-yylen];
-  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
-#endif
-
-#if YYDEBUG
-  /* We have to keep this `#if YYDEBUG', since we use variables which
-     are defined only if `YYDEBUG' is set.  */
-  if (yydebug)
-    {
-      int yyi;
-
-      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
-		 yyn, yyrline[yyn]);
-
-      /* Print the symbols being reduced, and their result.  */
-      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
-	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
-      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
-    }
-#endif
-
-  switch (yyn) {
-
-case 2:
-{ zend_do_extended_info(TSRMLS_C); }
-    break;
-case 3:
-{ HANDLE_INTERACTIVE(); }
-    break;
-case 6:
-{ zend_do_early_binding(TSRMLS_C); }
-    break;
-case 7:
-{ zend_do_extended_info(TSRMLS_C); }
-    break;
-case 8:
-{ HANDLE_INTERACTIVE(); }
-    break;
-case 12:
-{ zend_do_ticks(TSRMLS_C); }
-    break;
-case 14:
-{ zend_do_if_cond(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 15:
-{ zend_do_if_after_statement(&yyvsp[-2], 1 TSRMLS_CC); }
-    break;
-case 16:
-{ zend_do_if_end(TSRMLS_C); }
-    break;
-case 17:
-{ zend_do_if_cond(&yyvsp[-2], &yyvsp[-1] TSRMLS_CC); }
-    break;
-case 18:
-{ zend_do_if_after_statement(&yyvsp[-3], 1 TSRMLS_CC); }
-    break;
-case 19:
-{ zend_do_if_end(TSRMLS_C); }
-    break;
-case 20:
-{ yyvsp[-1].u.opline_num = get_next_op_number(CG(active_op_array));  }
-    break;
-case 21:
-{ zend_do_while_cond(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 22:
-{ zend_do_while_end(&yyvsp[-6], &yyvsp[-2] TSRMLS_CC); }
-    break;
-case 23:
-{ yyvsp[0].u.opline_num = get_next_op_number(CG(active_op_array));  zend_do_do_while_begin(TSRMLS_C); }
-    break;
-case 24:
-{ yyvsp[0].u.opline_num = get_next_op_number(CG(active_op_array)); }
-    break;
-case 25:
-{ zend_do_do_while_end(&yyvsp[-8], &yyvsp[-4], &yyvsp[-2] TSRMLS_CC); }
-    break;
-case 26:
-{ zend_do_free(&yyvsp[-1] TSRMLS_CC); yyvsp[0].u.opline_num = get_next_op_number(CG(active_op_array)); }
-    break;
-case 27:
-{ zend_do_extended_info(TSRMLS_C); zend_do_for_cond(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 28:
-{ zend_do_free(&yyvsp[-1] TSRMLS_CC); zend_do_for_before_statement(&yyvsp[-6], &yyvsp[-3] TSRMLS_CC); }
-    break;
-case 29:
-{ zend_do_for_end(&yyvsp[-5] TSRMLS_CC); }
-    break;
-case 30:
-{ zend_do_switch_cond(&yyvsp[-1] TSRMLS_CC); }
-    break;
-case 31:
-{ zend_do_switch_end(&yyvsp[0] TSRMLS_CC); }
-    break;
-case 32:
-{ zend_do_brk_cont(ZEND_BRK, NULL TSRMLS_CC); }
-    break;
-case 33:
-{ zend_do_brk_cont(ZEND_BRK, &yyvsp[-1] TSRMLS_CC); }
-    break;
-case 34:
-{ zend_do_brk_cont(ZEND_CONT, NULL TSRMLS_CC); }
-    break;
-case 35:
-{ zend_do_brk_cont(ZEND_CONT, &yyvsp[-1] TSRMLS_CC); }
-    break;
-case 36:
-{ zend_do_return(NULL, 0 TSRMLS_CC); }
-    break;
-case 37:
-{ zend_do_return(&yyvsp[-1], 0 TSRMLS_CC); }
-    break;
-case 38:
-{ zend_do_return(&yyvsp[-1], 1 TSRMLS_CC); }
-    break;
-case 42:
-{ zend_do_echo(&yyvsp[0] TSRMLS_CC); }
-    break;
-case 43:
-{ zend_do_free(&yyvsp[-1] TSRMLS_CC); }
-    break;
-case 44:
-{ zend_error(E_COMPILE_ERROR,"use: Not yet supported. Please use include_once() or require_once()");  zval_dtor(&yyvsp[-1].u.constant); }
-    break;
-case 46:
-{ zend_do_foreach_begin(&yyvsp[-3], &yyvsp[-1], &yyvsp[-2], &yyvsp[0], 1 TSRMLS_CC); }
-    break;
-case 47:
-{ zend_do_foreach_cont(&yyvsp[-2], &yyvsp[-1], &yyvsp[-4], &yyvsp[-7] TSRMLS_CC); }
-    break;
-case 48:
-{ zend_do_foreach_end(&yyvsp[-9], &yyvsp[-8] TSRMLS_CC); }
-    break;
-case 49:
-{ zend_do_foreach_begin(&yyvsp[-3], &yyvsp[-1], &yyvsp[-2], &yyvsp[0], 0 TSRMLS_CC); }
-    break;
-case 50:
-{ zend_do_foreach_cont(&yyvsp[-2], &yyvsp[-1], &yyvsp[-4], &yyvsp[-7] TSRMLS_CC); }
-    break;
-case 51:
-{ zend_do_foreach_end(&yyvsp[-9], &yyvsp[-8] TSRMLS_CC); }
-    break;
-case 52:
-{ yyvsp[0].u.opline_num = get_next_op_number(CG(active_op_array)); zend_do_declare_begin(TSRMLS_C); }
-    break;
-case 53:
-{zend_do_declare_end(&yyvsp[-5] TSRMLS_CC); }
-    break;
-case 57:
-{ zend_do_end_variable_parse(BP_VAR_UNSET, 0 TSRMLS_CC); zend_do_unset(&yyvsp[0] TSRMLS_CC); }
-    break;
-case 58:
-{ yyval = yyvsp[0]; }
-    break;
-case 59:
-{ yyval = yyvsp[-1]; }
-    break;
-case 60:
-{ zend_do_ticks(TSRMLS_C); }
-    break;
-case 61:
-{ yyvsp[0].u.opline_num = CG(zend_lineno); }
-    break;
-case 62:
-{ zend_do_begin_function_declaration(&yyvsp[-3], &yyvsp[0], 0, yyvsp[-1].op_type TSRMLS_CC); }
-    break;
-case 63:
-{ zend_do_end_function_declaration(&yyvsp[-10] TSRMLS_CC); }
-    break;
-case 64:
-{ yyvsp[0].u.opline_num = CG(zend_lineno); }
-    break;
-case 65:
-{ zend_do_begin_function_declaration(&yyvsp[-3], &yyvsp[0], 0, yyvsp[-1].op_type TSRMLS_CC); }
-    break;
-case 66:
-{ zend_do_end_function_declaration(&yyvsp[-9] TSRMLS_CC); }
-    break;
-case 67:
-{ zend_do_begin_class_declaration(&yyvsp[0], NULL TSRMLS_CC); }
-    break;
-case 68:
-{ zend_do_end_class_declaration(TSRMLS_C); }
-    break;
-case 69:
-{ zend_do_begin_class_declaration(&yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 70:
-{ zend_do_end_class_declaration(TSRMLS_C); }
-    break;
-case 71:
-{ yyval.op_type = IS_UNUSED; }
-    break;
-case 72:
-{ yyval = yyvsp[0]; }
-    break;
-case 79:
-{ zend_do_declare_stmt(&yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 80:
-{ zend_do_declare_stmt(&yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 81:
-{ yyval = yyvsp[-1]; }
-    break;
-case 82:
-{ yyval = yyvsp[-1]; }
-    break;
-case 83:
-{ yyval = yyvsp[-2]; }
-    break;
-case 84:
-{ yyval = yyvsp[-2]; }
-    break;
-case 85:
-{ yyval.op_type = IS_UNUSED; }
-    break;
-case 86:
-{ zend_do_extended_info(TSRMLS_C);  zend_do_case_before_statement(&yyvsp[-3], &yyvsp[-2], &yyvsp[-1] TSRMLS_CC); }
-    break;
-case 87:
-{ zend_do_case_after_statement(&yyval, &yyvsp[-4] TSRMLS_CC); yyval.op_type = IS_CONST; }
-    break;
-case 88:
-{ zend_do_extended_info(TSRMLS_C);  zend_do_default_before_statement(&yyvsp[-2], &yyvsp[-1] TSRMLS_CC); }
-    break;
-case 89:
-{ zend_do_case_after_statement(&yyval, &yyvsp[-3] TSRMLS_CC); yyval.op_type = IS_CONST; }
-    break;
-case 95:
-{ zend_do_if_cond(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 96:
-{ zend_do_if_after_statement(&yyvsp[-2], 0 TSRMLS_CC); }
-    break;
-case 98:
-{ zend_do_if_cond(&yyvsp[-2], &yyvsp[-1] TSRMLS_CC); }
-    break;
-case 99:
-{ zend_do_if_after_statement(&yyvsp[-3], 0 TSRMLS_CC); }
-    break;
-case 106:
-{ znode tmp;  fetch_simple_variable(&tmp, &yyvsp[0], 0 TSRMLS_CC); yyval.op_type = IS_CONST; yyval.u.constant.value.lval=1; yyval.u.constant.type=IS_LONG; INIT_PZVAL(&yyval.u.constant); zend_do_receive_arg(ZEND_RECV, &tmp, &yyval, NULL, BYREF_NONE TSRMLS_CC); }
-    break;
-case 107:
-{ znode tmp;  fetch_simple_variable(&tmp, &yyvsp[0], 0 TSRMLS_CC); yyval.op_type = IS_CONST; yyval.u.constant.value.lval=1; yyval.u.constant.type=IS_LONG; INIT_PZVAL(&yyval.u.constant); zend_do_receive_arg(ZEND_RECV, &tmp, &yyval, NULL, BYREF_FORCE TSRMLS_CC); }
-    break;
-case 108:
-{ znode tmp;  fetch_simple_variable(&tmp, &yyvsp[0], 0 TSRMLS_CC); yyval.op_type = IS_CONST; yyval.u.constant.value.lval=1; yyval.u.constant.type=IS_LONG; INIT_PZVAL(&yyval.u.constant); zend_do_receive_arg(ZEND_RECV, &tmp, &yyval, NULL, BYREF_NONE TSRMLS_CC); }
-    break;
-case 109:
-{ znode tmp;  fetch_simple_variable(&tmp, &yyvsp[-2], 0 TSRMLS_CC); yyval.op_type = IS_CONST; yyval.u.constant.value.lval=1; yyval.u.constant.type=IS_LONG; INIT_PZVAL(&yyval.u.constant); zend_do_receive_arg(ZEND_RECV_INIT, &tmp, &yyval, &yyvsp[0], BYREF_NONE TSRMLS_CC); }
-    break;
-case 110:
-{ znode tmp;  fetch_simple_variable(&tmp, &yyvsp[0], 0 TSRMLS_CC); yyval=yyvsp[-2]; yyval.u.constant.value.lval++; zend_do_receive_arg(ZEND_RECV, &tmp, &yyval, NULL, BYREF_NONE TSRMLS_CC); }
-    break;
-case 111:
-{ znode tmp;  fetch_simple_variable(&tmp, &yyvsp[0], 0 TSRMLS_CC); yyval=yyvsp[-3]; yyval.u.constant.value.lval++; zend_do_receive_arg(ZEND_RECV, &tmp, &yyval, NULL, BYREF_FORCE TSRMLS_CC); }
-    break;
-case 112:
-{ znode tmp;  fetch_simple_variable(&tmp, &yyvsp[0], 0 TSRMLS_CC); yyval=yyvsp[-3]; yyval.u.constant.value.lval++; zend_do_receive_arg(ZEND_RECV, &tmp, &yyval, NULL, BYREF_NONE TSRMLS_CC); }
-    break;
-case 113:
-{ znode tmp;  fetch_simple_variable(&tmp, &yyvsp[-2], 0 TSRMLS_CC); yyval=yyvsp[-4]; yyval.u.constant.value.lval++; zend_do_receive_arg(ZEND_RECV_INIT, &tmp, &yyval, &yyvsp[0], BYREF_NONE TSRMLS_CC); }
-    break;
-case 114:
-{ yyval = yyvsp[0]; }
-    break;
-case 115:
-{ yyval.u.constant.value.lval = 0; }
-    break;
-case 116:
-{ yyval.u.constant.value.lval = 1;  zend_do_pass_param(&yyvsp[0], ZEND_SEND_VAL, yyval.u.constant.value.lval TSRMLS_CC); }
-    break;
-case 117:
-{ yyval.u.constant.value.lval = 1;  zend_do_pass_param(&yyvsp[0], ZEND_SEND_VAR, yyval.u.constant.value.lval TSRMLS_CC); }
-    break;
-case 118:
-{ yyval.u.constant.value.lval = 1;  zend_do_pass_param(&yyvsp[0], ZEND_SEND_REF, yyval.u.constant.value.lval TSRMLS_CC); }
-    break;
-case 119:
-{ yyval.u.constant.value.lval=yyvsp[-2].u.constant.value.lval+1;  zend_do_pass_param(&yyvsp[0], ZEND_SEND_VAL, yyval.u.constant.value.lval TSRMLS_CC); }
-    break;
-case 120:
-{ yyval.u.constant.value.lval=yyvsp[-2].u.constant.value.lval+1;  zend_do_pass_param(&yyvsp[0], ZEND_SEND_VAR, yyval.u.constant.value.lval TSRMLS_CC); }
-    break;
-case 121:
-{ yyval.u.constant.value.lval=yyvsp[-3].u.constant.value.lval+1;  zend_do_pass_param(&yyvsp[0], ZEND_SEND_REF, yyval.u.constant.value.lval TSRMLS_CC); }
-    break;
-case 122:
-{ zend_do_fetch_global_or_static_variable(&yyvsp[0], NULL, ZEND_FETCH_GLOBAL TSRMLS_CC); }
-    break;
-case 123:
-{ zend_do_fetch_global_or_static_variable(&yyvsp[0], NULL, ZEND_FETCH_GLOBAL TSRMLS_CC); }
-    break;
-case 124:
-{ yyval = yyvsp[0]; }
-    break;
-case 125:
-{ yyval = yyvsp[0]; }
-    break;
-case 126:
-{ yyval = yyvsp[-1]; }
-    break;
-case 127:
-{ zend_do_fetch_global_or_static_variable(&yyvsp[0], NULL, ZEND_FETCH_STATIC TSRMLS_CC); }
-    break;
-case 128:
-{ zend_do_fetch_global_or_static_variable(&yyvsp[-2], &yyvsp[0], ZEND_FETCH_STATIC TSRMLS_CC); }
-    break;
-case 129:
-{ zend_do_fetch_global_or_static_variable(&yyvsp[0], NULL, ZEND_FETCH_STATIC TSRMLS_CC); }
-    break;
-case 130:
-{ zend_do_fetch_global_or_static_variable(&yyvsp[-2], &yyvsp[0], ZEND_FETCH_STATIC TSRMLS_CC); }
-    break;
-case 134:
-{ yyvsp[0].u.opline_num = CG(zend_lineno); }
-    break;
-case 135:
-{ zend_do_begin_function_declaration(&yyvsp[-3], &yyvsp[0], 1, yyvsp[-1].op_type TSRMLS_CC); }
-    break;
-case 136:
-{ zend_do_end_function_declaration(&yyvsp[-10] TSRMLS_CC); }
-    break;
-case 137:
-{ yyvsp[0].u.opline_num = CG(zend_lineno); }
-    break;
-case 138:
-{ zend_do_begin_function_declaration(&yyvsp[-3], &yyvsp[0], 1, yyvsp[-1].op_type TSRMLS_CC); }
-    break;
-case 139:
-{ zend_do_end_function_declaration(&yyvsp[-9] TSRMLS_CC); }
-    break;
-case 140:
-{ yyval.op_type = ZEND_RETURN_VAL; }
-    break;
-case 141:
-{ yyval.op_type = ZEND_RETURN_REF; }
-    break;
-case 142:
-{ zend_do_declare_property(&yyvsp[0], NULL TSRMLS_CC); }
-    break;
-case 143:
-{ zend_do_declare_property(&yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 144:
-{ zend_do_declare_property(&yyvsp[0], NULL TSRMLS_CC); }
-    break;
-case 145:
-{ zend_do_declare_property(&yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 147:
-{ zend_do_echo(&yyvsp[0] TSRMLS_CC); }
-    break;
-case 148:
-{ zend_do_echo(&yyvsp[0] TSRMLS_CC); }
-    break;
-case 149:
-{ yyval.op_type = IS_CONST;  yyval.u.constant.type = IS_BOOL;  yyval.u.constant.value.lval = 1; }
-    break;
-case 150:
-{ yyval = yyvsp[0]; }
-    break;
-case 151:
-{ zend_do_free(&yyvsp[-1] TSRMLS_CC); }
-    break;
-case 152:
-{ yyval = yyvsp[0]; }
-    break;
-case 153:
-{ yyval = yyvsp[0]; }
-    break;
-case 154:
-{ zend_do_list_init(TSRMLS_C); }
-    break;
-case 155:
-{ zend_do_list_end(&yyval, &yyvsp[0] TSRMLS_CC); }
-    break;
-case 156:
-{ zend_do_end_variable_parse(BP_VAR_W, 0 TSRMLS_CC); zend_do_assign(&yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 157:
-{ zend_do_end_variable_parse(BP_VAR_W, 0 TSRMLS_CC); zend_do_assign_ref(&yyval, &yyvsp[-3], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 158:
-{ zend_do_end_variable_parse(BP_VAR_W, 0 TSRMLS_CC); zend_do_assign_ref(&yyval, &yyvsp[-3], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 159:
-{ zend_do_extended_fcall_begin(TSRMLS_C); zend_do_begin_new_object(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 160:
-{ zend_do_end_new_object(&yyvsp[-4], &yyvsp[-2], &yyvsp[-3], &yyvsp[0] TSRMLS_CC); zend_do_extended_fcall_end(TSRMLS_C); zend_do_end_variable_parse(BP_VAR_W, 0 TSRMLS_CC); zend_do_assign_ref(&yyval, &yyvsp[-6], &yyvsp[-4] TSRMLS_CC); }
-    break;
-case 161:
-{ zend_do_extended_fcall_begin(TSRMLS_C); zend_do_begin_new_object(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 162:
-{ zend_do_end_new_object(&yyval, &yyvsp[-2], &yyvsp[-3], &yyvsp[0] TSRMLS_CC); zend_do_extended_fcall_end(TSRMLS_C);}
-    break;
-case 163:
-{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_ADD, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 164:
-{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_SUB, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 165:
-{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_MUL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 166:
-{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_DIV, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 167:
-{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_CONCAT, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 168:
-{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_MOD, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 169:
-{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_BW_AND, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 170:
-{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_BW_OR, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 171:
-{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_BW_XOR, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 172:
-{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_SL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 173:
-{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_SR, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 174:
-{ zend_do_post_incdec(&yyval, &yyvsp[-1], ZEND_POST_INC TSRMLS_CC); }
-    break;
-case 175:
-{ zend_do_pre_incdec(&yyval, &yyvsp[0], ZEND_PRE_INC TSRMLS_CC); }
-    break;
-case 176:
-{ zend_do_post_incdec(&yyval, &yyvsp[-1], ZEND_POST_DEC TSRMLS_CC); }
-    break;
-case 177:
-{ zend_do_pre_incdec(&yyval, &yyvsp[0], ZEND_PRE_DEC TSRMLS_CC); }
-    break;
-case 178:
-{ zend_do_boolean_or_begin(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 179:
-{ zend_do_boolean_or_end(&yyval, &yyvsp[-3], &yyvsp[0], &yyvsp[-2] TSRMLS_CC); }
-    break;
-case 180:
-{ zend_do_boolean_and_begin(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 181:
-{ zend_do_boolean_and_end(&yyval, &yyvsp[-3], &yyvsp[0], &yyvsp[-2] TSRMLS_CC); }
-    break;
-case 182:
-{ zend_do_boolean_or_begin(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 183:
-{ zend_do_boolean_or_end(&yyval, &yyvsp[-3], &yyvsp[0], &yyvsp[-2] TSRMLS_CC); }
-    break;
-case 184:
-{ zend_do_boolean_and_begin(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 185:
-{ zend_do_boolean_and_end(&yyval, &yyvsp[-3], &yyvsp[0], &yyvsp[-2] TSRMLS_CC); }
-    break;
-case 186:
-{ zend_do_binary_op(ZEND_BOOL_XOR, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 187:
-{ zend_do_binary_op(ZEND_BW_OR, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 188:
-{ zend_do_binary_op(ZEND_BW_AND, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 189:
-{ zend_do_binary_op(ZEND_BW_XOR, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 190:
-{ zend_do_binary_op(ZEND_CONCAT, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 191:
-{ zend_do_binary_op(ZEND_ADD, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 192:
-{ zend_do_binary_op(ZEND_SUB, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 193:
-{ zend_do_binary_op(ZEND_MUL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 194:
-{ zend_do_binary_op(ZEND_DIV, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 195:
-{ zend_do_binary_op(ZEND_MOD, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 196:
-{ zend_do_binary_op(ZEND_SL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 197:
-{ zend_do_binary_op(ZEND_SR, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 198:
-{ yyvsp[-1].u.constant.value.lval=0; yyvsp[-1].u.constant.type=IS_LONG; yyvsp[-1].op_type = IS_CONST; INIT_PZVAL(&yyvsp[-1].u.constant); zend_do_binary_op(ZEND_ADD, &yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 199:
-{ yyvsp[-1].u.constant.value.lval=0; yyvsp[-1].u.constant.type=IS_LONG; yyvsp[-1].op_type = IS_CONST; INIT_PZVAL(&yyvsp[-1].u.constant); zend_do_binary_op(ZEND_SUB, &yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 200:
-{ zend_do_unary_op(ZEND_BOOL_NOT, &yyval, &yyvsp[0] TSRMLS_CC); }
-    break;
-case 201:
-{ zend_do_unary_op(ZEND_BW_NOT, &yyval, &yyvsp[0] TSRMLS_CC); }
-    break;
-case 202:
-{ zend_do_binary_op(ZEND_IS_IDENTICAL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 203:
-{ zend_do_binary_op(ZEND_IS_NOT_IDENTICAL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 204:
-{ zend_do_binary_op(ZEND_IS_EQUAL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 205:
-{ zend_do_binary_op(ZEND_IS_NOT_EQUAL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 206:
-{ zend_do_binary_op(ZEND_IS_SMALLER, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 207:
-{ zend_do_binary_op(ZEND_IS_SMALLER_OR_EQUAL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 208:
-{ zend_do_binary_op(ZEND_IS_SMALLER, &yyval, &yyvsp[0], &yyvsp[-2] TSRMLS_CC); }
-    break;
-case 209:
-{ zend_do_binary_op(ZEND_IS_SMALLER_OR_EQUAL, &yyval, &yyvsp[0], &yyvsp[-2] TSRMLS_CC); }
-    break;
-case 210:
-{ yyval = yyvsp[-1]; }
-    break;
-case 211:
-{ zend_do_begin_qm_op(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 212:
-{ zend_do_qm_true(&yyvsp[-1], &yyvsp[-3], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 213:
-{ zend_do_qm_false(&yyval, &yyvsp[0], &yyvsp[-5], &yyvsp[-2] TSRMLS_CC); }
-    break;
-case 214:
-{ yyval = yyvsp[0]; }
-    break;
-case 215:
-{ yyval = yyvsp[0]; }
-    break;
-case 216:
-{ zend_do_cast(&yyval, &yyvsp[0], IS_LONG TSRMLS_CC); }
-    break;
-case 217:
-{ zend_do_cast(&yyval, &yyvsp[0], IS_DOUBLE TSRMLS_CC); }
-    break;
-case 218:
-{ zend_do_cast(&yyval, &yyvsp[0], IS_STRING TSRMLS_CC); }
-    break;
-case 219:
-{ zend_do_cast(&yyval, &yyvsp[0], IS_ARRAY TSRMLS_CC); }
-    break;
-case 220:
-{ zend_do_cast(&yyval, &yyvsp[0], IS_OBJECT TSRMLS_CC); }
-    break;
-case 221:
-{ zend_do_cast(&yyval, &yyvsp[0], IS_BOOL TSRMLS_CC); }
-    break;
-case 222:
-{ zend_do_cast(&yyval, &yyvsp[0], IS_NULL TSRMLS_CC); }
-    break;
-case 223:
-{ zend_do_exit(&yyval, &yyvsp[0] TSRMLS_CC); }
-    break;
-case 224:
-{ zend_do_begin_silence(&yyvsp[0] TSRMLS_CC); }
-    break;
-case 225:
-{ zend_do_end_silence(&yyvsp[-2] TSRMLS_CC); yyval = yyvsp[0]; }
-    break;
-case 226:
-{ yyval = yyvsp[0]; }
-    break;
-case 227:
-{ yyval = yyvsp[-1]; }
-    break;
-case 228:
-{ zend_do_shell_exec(&yyval, &yyvsp[-1] TSRMLS_CC); }
-    break;
-case 229:
-{ zend_do_print(&yyval, &yyvsp[0] TSRMLS_CC); }
-    break;
-case 230:
-{ yyvsp[0].u.opline_num = zend_do_begin_function_call(&yyvsp[-1] TSRMLS_CC); }
-    break;
-case 231:
-{ zend_do_end_function_call(&yyvsp[-4], &yyval, &yyvsp[-1], 0, yyvsp[-3].u.opline_num TSRMLS_CC); zend_do_extended_fcall_end(TSRMLS_C); }
-    break;
-case 232:
-{ zend_do_begin_dynamic_function_call(&yyvsp[-1] TSRMLS_CC); }
-    break;
-case 233:
-{ zend_do_end_function_call(&yyvsp[-4], &yyval, &yyvsp[-1], 0, 1 TSRMLS_CC); zend_do_extended_fcall_end(TSRMLS_C);}
-    break;
-case 234:
-{ zend_do_extended_fcall_begin(TSRMLS_C); zend_do_begin_class_member_function_call(&yyvsp[-3], &yyvsp[-1] TSRMLS_CC); }
-    break;
-case 235:
-{ zend_do_end_function_call(&yyvsp[-4], &yyval, &yyvsp[-1], 1, 1 TSRMLS_CC); zend_do_extended_fcall_end(TSRMLS_C);}
-    break;
-case 236:
-{ yyval = yyvsp[0]; }
-    break;
-case 237:
-{ yyval = yyvsp[0]; }
-    break;
-case 238:
-{ memset(&yyval, 0, sizeof(znode)); yyval.op_type = IS_UNUSED; }
-    break;
-case 239:
-{ memset(&yyval, 0, sizeof(znode)); yyval.op_type = IS_UNUSED; }
-    break;
-case 240:
-{ yyval = yyvsp[-1]; }
-    break;
-case 241:
-{ yyval.u.constant.value.lval=0; }
-    break;
-case 242:
-{ yyval = yyvsp[-1]; }
-    break;
-case 243:
-{ yyval = yyvsp[0]; }
-    break;
-case 244:
-{ yyval = yyvsp[0]; }
-    break;
-case 245:
-{ yyval = yyvsp[0]; }
-    break;
-case 246:
-{ yyval = yyvsp[0]; }
-    break;
-case 247:
-{ yyval = yyvsp[0]; }
-    break;
-case 248:
-{ yyval = yyvsp[0]; }
-    break;
-case 249:
-{ yyval = yyvsp[0]; }
-    break;
-case 250:
-{ yyval = yyvsp[0]; }
-    break;
-case 251:
-{ zend_do_fetch_constant(&yyval, &yyvsp[0], ZEND_CT TSRMLS_CC); }
-    break;
-case 252:
-{ yyval = yyvsp[0]; }
-    break;
-case 253:
-{ zval minus_one;  minus_one.type = IS_LONG; minus_one.value.lval = -1;  mul_function(&yyvsp[0].u.constant, &yyvsp[0].u.constant, &minus_one TSRMLS_CC);  yyval = yyvsp[0]; }
-    break;
-case 254:
-{ yyval = yyvsp[-1]; yyval.u.constant.type = IS_CONSTANT_ARRAY; }
-    break;
-case 255:
-{ zend_do_fetch_constant(&yyval, &yyvsp[0], ZEND_RT TSRMLS_CC); }
-    break;
-case 256:
-{ yyval = yyvsp[0]; }
-    break;
-case 257:
-{ yyval = yyvsp[0]; }
-    break;
-case 258:
-{ yyval = yyvsp[-1]; }
-    break;
-case 259:
-{ yyval = yyvsp[-1]; }
-    break;
-case 260:
-{ yyval = yyvsp[-1]; zend_do_end_heredoc(TSRMLS_C); }
-    break;
-case 261:
-{ yyval.op_type = IS_CONST; INIT_PZVAL(&yyval.u.constant); array_init(&yyval.u.constant); }
-    break;
-case 262:
-{ yyval = yyvsp[-1]; }
-    break;
-case 265:
-{ zend_do_add_static_array_element(&yyval, &yyvsp[-2], &yyvsp[0]); }
-    break;
-case 266:
-{ zend_do_add_static_array_element(&yyval, NULL, &yyvsp[0]); }
-    break;
-case 267:
-{ yyval.op_type = IS_CONST; INIT_PZVAL(&yyval.u.constant); array_init(&yyval.u.constant); zend_do_add_static_array_element(&yyval, &yyvsp[-2], &yyvsp[0]); }
-    break;
-case 268:
-{ yyval.op_type = IS_CONST; INIT_PZVAL(&yyval.u.constant); array_init(&yyval.u.constant); zend_do_add_static_array_element(&yyval, NULL, &yyvsp[0]); }
-    break;
-case 269:
-{ yyval = yyvsp[0]; }
-    break;
-case 270:
-{ yyval = yyvsp[0]; }
-    break;
-case 271:
-{ zend_do_end_variable_parse(BP_VAR_R, 0 TSRMLS_CC); yyval = yyvsp[0]; }
-    break;
-case 272:
-{ zend_do_end_variable_parse(BP_VAR_W, 0 TSRMLS_CC); yyval = yyvsp[0]; }
-    break;
-case 273:
-{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); yyval = yyvsp[0]; }
-    break;
-case 274:
-{ yyval = yyvsp[0]; }
-    break;
-case 275:
-{ zend_do_push_object(&yyvsp[-1] TSRMLS_CC); }
-    break;
-case 276:
-{ yyval = yyvsp[0]; }
-    break;
-case 277:
-{ yyval = yyvsp[0]; }
-    break;
-case 278:
-{ zend_do_indirect_references(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 279:
-{ fetch_array_dim(&yyval, &yyvsp[-3], &yyvsp[-1] TSRMLS_CC); }
-    break;
-case 280:
-{ fetch_string_offset(&yyval, &yyvsp[-3], &yyvsp[-1] TSRMLS_CC); }
-    break;
-case 281:
-{ zend_do_fetch_globals(&yyvsp[0] TSRMLS_CC); zend_do_begin_variable_parse(TSRMLS_C); fetch_simple_variable(&yyval, &yyvsp[0], 1 TSRMLS_CC); }
-    break;
-case 282:
-{ yyval = yyvsp[0]; }
-    break;
-case 283:
-{ yyval = yyvsp[-1]; }
-    break;
-case 284:
-{ yyval.op_type = IS_UNUSED; }
-    break;
-case 285:
-{ yyval = yyvsp[0]; }
-    break;
-case 286:
-{ yyval = yyvsp[0]; }
-    break;
-case 287:
-{ zend_do_push_object(&yyvsp[-1] TSRMLS_CC); }
-    break;
-case 288:
-{ yyval = yyvsp[0]; }
-    break;
-case 289:
-{ yyval = yyvsp[0]; }
-    break;
-case 290:
-{ zend_do_end_variable_parse(BP_VAR_R, 0 TSRMLS_CC); }
-    break;
-case 291:
-{ znode tmp_znode;  zend_do_pop_object(&tmp_znode TSRMLS_CC);  zend_do_fetch_property(&yyval, &tmp_znode, &yyvsp[-1] TSRMLS_CC);}
-    break;
-case 292:
-{ fetch_array_dim(&yyval, &yyvsp[-3], &yyvsp[-1] TSRMLS_CC); }
-    break;
-case 293:
-{ fetch_string_offset(&yyval, &yyvsp[-3], &yyvsp[-1] TSRMLS_CC); }
-    break;
-case 294:
-{ znode tmp_znode;  zend_do_pop_object(&tmp_znode TSRMLS_CC);  zend_do_fetch_property(&yyval, &tmp_znode, &yyvsp[0] TSRMLS_CC);}
-    break;
-case 295:
-{ yyval = yyvsp[0]; }
-    break;
-case 296:
-{ yyval = yyvsp[-1]; }
-    break;
-case 297:
-{ yyval.u.constant.value.lval = 1; }
-    break;
-case 298:
-{ yyval.u.constant.value.lval++; }
-    break;
-case 301:
-{ zend_do_add_list_element(&yyvsp[0] TSRMLS_CC); }
-    break;
-case 302:
-{ zend_do_new_list_begin(TSRMLS_C); }
-    break;
-case 303:
-{ zend_do_new_list_end(TSRMLS_C); }
-    break;
-case 304:
-{ zend_do_add_list_element(NULL TSRMLS_CC); }
-    break;
-case 305:
-{ zend_do_init_array(&yyval, NULL, NULL, 0 TSRMLS_CC); }
-    break;
-case 306:
-{ yyval = yyvsp[-1]; }
-    break;
-case 307:
-{ zend_do_add_array_element(&yyval, &yyvsp[0], &yyvsp[-2], 0 TSRMLS_CC); }
-    break;
-case 308:
-{ zend_do_add_array_element(&yyval, &yyvsp[0], NULL, 0 TSRMLS_CC); }
-    break;
-case 309:
-{ zend_do_init_array(&yyval, &yyvsp[0], &yyvsp[-2], 0 TSRMLS_CC); }
-    break;
-case 310:
-{ zend_do_init_array(&yyval, &yyvsp[0], NULL, 0 TSRMLS_CC); }
-    break;
-case 311:
-{ zend_do_add_array_element(&yyval, &yyvsp[0], &yyvsp[-3], 1 TSRMLS_CC); }
-    break;
-case 312:
-{ zend_do_add_array_element(&yyval, &yyvsp[0], NULL, 1 TSRMLS_CC); }
-    break;
-case 313:
-{ zend_do_init_array(&yyval, &yyvsp[0], &yyvsp[-3], 1 TSRMLS_CC); }
-    break;
-case 314:
-{ zend_do_init_array(&yyval, &yyvsp[0], NULL, 1 TSRMLS_CC); }
-    break;
-case 315:
-{ zend_do_end_variable_parse(BP_VAR_R, 0 TSRMLS_CC);  zend_do_add_variable(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 316:
-{ zend_do_add_string(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 317:
-{ zend_do_add_string(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 318:
-{ zend_do_add_string(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 319:
-{ zend_do_add_char(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 320:
-{ zend_do_add_string(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 321:
-{ yyvsp[0].u.constant.value.lval = (long) '['; zend_do_add_char(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 322:
-{ yyvsp[0].u.constant.value.lval = (long) ']'; zend_do_add_char(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 323:
-{ yyvsp[0].u.constant.value.lval = (long) '{'; zend_do_add_char(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 324:
-{ yyvsp[0].u.constant.value.lval = (long) '}'; zend_do_add_char(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 325:
-{ znode tmp;  yyvsp[0].u.constant.value.lval = (long) '-';  zend_do_add_char(&tmp, &yyvsp[-1], &yyvsp[0] TSRMLS_CC);  yyvsp[0].u.constant.value.lval = (long) '>'; zend_do_add_char(&yyval, &tmp, &yyvsp[0] TSRMLS_CC); }
-    break;
-case 326:
-{ zend_do_init_string(&yyval TSRMLS_CC); }
-    break;
-case 327:
-{ zend_do_fetch_globals(&yyvsp[0] TSRMLS_CC); zend_do_begin_variable_parse(TSRMLS_C); fetch_simple_variable(&yyval, &yyvsp[0], 1 TSRMLS_CC); }
-    break;
-case 328:
-{ zend_do_begin_variable_parse(TSRMLS_C); }
-    break;
-case 329:
-{ zend_do_fetch_globals(&yyvsp[-4] TSRMLS_CC);  fetch_array_begin(&yyval, &yyvsp[-4], &yyvsp[-1] TSRMLS_CC); }
-    break;
-case 330:
-{ zend_do_begin_variable_parse(TSRMLS_C); fetch_simple_variable(&yyvsp[-1], &yyvsp[-2], 1 TSRMLS_CC); zend_do_fetch_property(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 331:
-{ zend_do_begin_variable_parse(TSRMLS_C);  fetch_simple_variable(&yyval, &yyvsp[-1], 1 TSRMLS_CC); }
-    break;
-case 332:
-{ zend_do_begin_variable_parse(TSRMLS_C);  fetch_array_begin(&yyval, &yyvsp[-4], &yyvsp[-2] TSRMLS_CC); }
-    break;
-case 333:
-{ yyval = yyvsp[-1]; }
-    break;
-case 334:
-{ yyval = yyvsp[0]; }
-    break;
-case 335:
-{ yyval = yyvsp[0]; }
-    break;
-case 336:
-{ fetch_simple_variable(&yyval, &yyvsp[0], 1 TSRMLS_CC); }
-    break;
-case 337:
-{ yyval = yyvsp[-1]; }
-    break;
-case 338:
-{ zend_do_isset_or_isempty(ZEND_ISEMPTY, &yyval, &yyvsp[-1] TSRMLS_CC); }
-    break;
-case 339:
-{ zend_do_include_or_eval(ZEND_INCLUDE, &yyval, &yyvsp[0] TSRMLS_CC); }
-    break;
-case 340:
-{ zend_do_include_or_eval(ZEND_INCLUDE_ONCE, &yyval, &yyvsp[0] TSRMLS_CC); }
-    break;
-case 341:
-{ zend_do_include_or_eval(ZEND_EVAL, &yyval, &yyvsp[-1] TSRMLS_CC); }
-    break;
-case 342:
-{ zend_do_include_or_eval(ZEND_REQUIRE, &yyval, &yyvsp[0] TSRMLS_CC); }
-    break;
-case 343:
-{ zend_do_include_or_eval(ZEND_REQUIRE_ONCE, &yyval, &yyvsp[0] TSRMLS_CC); }
-    break;
-case 344:
-{ zend_do_isset_or_isempty(ZEND_ISSET, &yyval, &yyvsp[0] TSRMLS_CC); }
-    break;
-case 345:
-{ zend_do_boolean_and_begin(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); }
-    break;
-case 346:
-{ znode tmp; zend_do_isset_or_isempty(ZEND_ISSET, &tmp, &yyvsp[0] TSRMLS_CC); zend_do_boolean_and_end(&yyval, &yyvsp[-3], &tmp, &yyvsp[-2] TSRMLS_CC); }
-    break;
-}
-
-
-
-  yyvsp -= yylen;
-  yyssp -= yylen;
-#if YYLSP_NEEDED
-  yylsp -= yylen;
-#endif
-
-#if YYDEBUG
-  if (yydebug)
-    {
-      short *yyssp1 = yyss - 1;
-      YYFPRINTF (stderr, "state stack now");
-      while (yyssp1 != yyssp)
-	YYFPRINTF (stderr, " %d", *++yyssp1);
-      YYFPRINTF (stderr, "\n");
-    }
-#endif
-
-  *++yyvsp = yyval;
-#if YYLSP_NEEDED
-  *++yylsp = yyloc;
-#endif
-
-  /* Now `shift' the result of the reduction.  Determine what state
-     that goes to, based on the state we popped back to and the rule
-     number reduced by.  */
-
-  yyn = yyr1[yyn];
-
-  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
-  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
-    yystate = yytable[yystate];
-  else
-    yystate = yydefgoto[yyn - YYNTBASE];
-
-  goto yynewstate;
-
-
-/*------------------------------------.
-| yyerrlab -- here on detecting error |
-`------------------------------------*/
-yyerrlab:
-  /* If not already recovering from an error, report this error.  */
-  if (!yyerrstatus)
-    {
-      ++yynerrs;
-
-#ifdef YYERROR_VERBOSE
-      yyn = yypact[yystate];
-
-      if (yyn > YYFLAG && yyn < YYLAST)
-	{
-	  YYSIZE_T yysize = 0;
-	  char *yymsg;
-	  int yyx, yycount;
-
-	  yycount = 0;
-	  /* Start YYX at -YYN if negative to avoid negative indexes in
-	     YYCHECK.  */
-	  for (yyx = yyn < 0 ? -yyn : 0;
-	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
-	    if (yycheck[yyx + yyn] == yyx)
-	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
-	  yysize += yystrlen ("parse error, unexpected ") + 1;
-	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
-	  yymsg = (char *) YYSTACK_ALLOC (yysize);
-	  if (yymsg != 0)
-	    {
-	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
-	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);
-
-	      if (yycount < 5)
-		{
-		  yycount = 0;
-		  for (yyx = yyn < 0 ? -yyn : 0;
-		       yyx < (int) (sizeof (yytname) / sizeof (char *));
-		       yyx++)
-		    if (yycheck[yyx + yyn] == yyx)
-		      {
-			const char *yyq = ! yycount ? ", expecting " : " or ";
-			yyp = yystpcpy (yyp, yyq);
-			yyp = yystpcpy (yyp, yytname[yyx]);
-			yycount++;
-		      }
-		}
-	      yyerror (yymsg);
-	      YYSTACK_FREE (yymsg);
-	    }
-	  else
-	    yyerror ("parse error; also virtual memory exhausted");
-	}
-      else
-#endif /* defined (YYERROR_VERBOSE) */
-	yyerror ("parse error");
-    }
-  goto yyerrlab1;
-
-
-/*--------------------------------------------------.
-| yyerrlab1 -- error raised explicitly by an action |
-`--------------------------------------------------*/
-yyerrlab1:
-  if (yyerrstatus == 3)
-    {
-      /* If just tried and failed to reuse lookahead token after an
-	 error, discard it.  */
-
-      /* return failure if at end of input */
-      if (yychar == YYEOF)
-	YYABORT;
-      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
-		  yychar, yytname[yychar1]));
-      yychar = YYEMPTY;
-    }
-
-  /* Else will try to reuse lookahead token after shifting the error
-     token.  */
-
-  yyerrstatus = 3;		/* Each real token shifted decrements this */
-
-  goto yyerrhandle;
-
-
-/*-------------------------------------------------------------------.
-| yyerrdefault -- current state does not do anything special for the |
-| error token.                                                       |
-`-------------------------------------------------------------------*/
-yyerrdefault:
-#if 0
-  /* This is wrong; only states that explicitly want error tokens
-     should shift them.  */
-
-  /* If its default is to accept any token, ok.  Otherwise pop it.  */
-  yyn = yydefact[yystate];
-  if (yyn)
-    goto yydefault;
-#endif
-
-
-/*---------------------------------------------------------------.
-| yyerrpop -- pop the current state because it cannot handle the |
-| error token                                                    |
-`---------------------------------------------------------------*/
-yyerrpop:
-  if (yyssp == yyss)
-    YYABORT;
-  yyvsp--;
-  yystate = *--yyssp;
-#if YYLSP_NEEDED
-  yylsp--;
-#endif
-
-#if YYDEBUG
-  if (yydebug)
-    {
-      short *yyssp1 = yyss - 1;
-      YYFPRINTF (stderr, "Error: state stack now");
-      while (yyssp1 != yyssp)
-	YYFPRINTF (stderr, " %d", *++yyssp1);
-      YYFPRINTF (stderr, "\n");
-    }
-#endif
-
-/*--------------.
-| yyerrhandle.  |
-`--------------*/
-yyerrhandle:
-  yyn = yypact[yystate];
-  if (yyn == YYFLAG)
-    goto yyerrdefault;
-
-  yyn += YYTERROR;
-  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
-    goto yyerrdefault;
-
-  yyn = yytable[yyn];
-  if (yyn < 0)
-    {
-      if (yyn == YYFLAG)
-	goto yyerrpop;
-      yyn = -yyn;
-      goto yyreduce;
-    }
-  else if (yyn == 0)
-    goto yyerrpop;
-
-  if (yyn == YYFINAL)
-    YYACCEPT;
-
-  YYDPRINTF ((stderr, "Shifting error token, "));
-
-  *++yyvsp = yylval;
-#if YYLSP_NEEDED
-  *++yylsp = yylloc;
-#endif
-
-  yystate = yyn;
-  goto yynewstate;
-
-
-/*-------------------------------------.
-| yyacceptlab -- YYACCEPT comes here.  |
-`-------------------------------------*/
-yyacceptlab:
-  yyresult = 0;
-  goto yyreturn;
-
-/*-----------------------------------.
-| yyabortlab -- YYABORT comes here.  |
-`-----------------------------------*/
-yyabortlab:
-  yyresult = 1;
-  goto yyreturn;
-
-/*---------------------------------------------.
-| yyoverflowab -- parser overflow comes here.  |
-`---------------------------------------------*/
-yyoverflowlab:
-  yyerror ("parser stack overflow");
-  yyresult = 2;
-  /* Fall through.  */
-
-yyreturn:
-#ifndef yyoverflow
-  if (yyss != yyssa)
-    YYSTACK_FREE (yyss);
-#endif
-  return yyresult;
-}
-
-
+
+/*  A Bison parser, made from zend_language_parser.y
+ by  GNU Bison version 1.27
+  */
+
+#define YYBISON 1  /* Identify Bison output.  */
+
+#define yyparse zendparse
+#define yylex zendlex
+#define yyerror zenderror
+#define yylval zendlval
+#define yychar zendchar
+#define yydebug zenddebug
+#define yynerrs zendnerrs
+#define	T_INCLUDE	257
+#define	T_INCLUDE_ONCE	258
+#define	T_EVAL	259
+#define	T_REQUIRE	260
+#define	T_REQUIRE_ONCE	261
+#define	T_LOGICAL_OR	262
+#define	T_LOGICAL_XOR	263
+#define	T_LOGICAL_AND	264
+#define	T_PRINT	265
+#define	T_PLUS_EQUAL	266
+#define	T_MINUS_EQUAL	267
+#define	T_MUL_EQUAL	268
+#define	T_DIV_EQUAL	269
+#define	T_CONCAT_EQUAL	270
+#define	T_MOD_EQUAL	271
+#define	T_AND_EQUAL	272
+#define	T_OR_EQUAL	273
+#define	T_XOR_EQUAL	274
+#define	T_SL_EQUAL	275
+#define	T_SR_EQUAL	276
+#define	T_BOOLEAN_OR	277
+#define	T_BOOLEAN_AND	278
+#define	T_IS_EQUAL	279
+#define	T_IS_NOT_EQUAL	280
+#define	T_IS_IDENTICAL	281
+#define	T_IS_NOT_IDENTICAL	282
+#define	T_IS_SMALLER_OR_EQUAL	283
+#define	T_IS_GREATER_OR_EQUAL	284
+#define	T_SL	285
+#define	T_SR	286
+#define	T_INC	287
+#define	T_DEC	288
+#define	T_INT_CAST	289
+#define	T_DOUBLE_CAST	290
+#define	T_STRING_CAST	291
+#define	T_ARRAY_CAST	292
+#define	T_OBJECT_CAST	293
+#define	T_BOOL_CAST	294
+#define	T_UNSET_CAST	295
+#define	T_NEW	296
+#define	T_EXIT	297
+#define	T_IF	298
+#define	T_ELSEIF	299
+#define	T_ELSE	300
+#define	T_ENDIF	301
+#define	T_LNUMBER	302
+#define	T_DNUMBER	303
+#define	T_STRING	304
+#define	T_STRING_VARNAME	305
+#define	T_VARIABLE	306
+#define	T_NUM_STRING	307
+#define	T_INLINE_HTML	308
+#define	T_CHARACTER	309
+#define	T_BAD_CHARACTER	310
+#define	T_ENCAPSED_AND_WHITESPACE	311
+#define	T_CONSTANT_ENCAPSED_STRING	312
+#define	T_ECHO	313
+#define	T_DO	314
+#define	T_WHILE	315
+#define	T_ENDWHILE	316
+#define	T_FOR	317
+#define	T_ENDFOR	318
+#define	T_FOREACH	319
+#define	T_ENDFOREACH	320
+#define	T_DECLARE	321
+#define	T_ENDDECLARE	322
+#define	T_AS	323
+#define	T_SWITCH	324
+#define	T_ENDSWITCH	325
+#define	T_CASE	326
+#define	T_DEFAULT	327
+#define	T_BREAK	328
+#define	T_CONTINUE	329
+#define	T_OLD_FUNCTION	330
+#define	T_FUNCTION	331
+#define	T_CONST	332
+#define	T_RETURN	333
+#define	T_USE	334
+#define	T_GLOBAL	335
+#define	T_STATIC	336
+#define	T_VAR	337
+#define	T_UNSET	338
+#define	T_ISSET	339
+#define	T_EMPTY	340
+#define	T_CLASS	341
+#define	T_EXTENDS	342
+#define	T_OBJECT_OPERATOR	343
+#define	T_DOUBLE_ARROW	344
+#define	T_LIST	345
+#define	T_ARRAY	346
+#define	T_CLASS_C	347
+#define	T_FUNC_C	348
+#define	T_LINE	349
+#define	T_FILE	350
+#define	T_COMMENT	351
+#define	T_ML_COMMENT	352
+#define	T_OPEN_TAG	353
+#define	T_OPEN_TAG_WITH_ECHO	354
+#define	T_CLOSE_TAG	355
+#define	T_WHITESPACE	356
+#define	T_START_HEREDOC	357
+#define	T_END_HEREDOC	358
+#define	T_DOLLAR_OPEN_CURLY_BRACES	359
+#define	T_CURLY_OPEN	360
+#define	T_PAAMAYIM_NEKUDOTAYIM	361
+
+#line 1 "zend_language_parser.y"
+
+/*
+   +----------------------------------------------------------------------+
+   | Zend Engine                                                          |
+   +----------------------------------------------------------------------+
+   | Copyright (c) 1998-2002 Zend Technologies Ltd. (http://www.zend.com) |
+   +----------------------------------------------------------------------+
+   | This source file is subject to version 2.00 of the Zend license,     |
+   | that is bundled with this package in the file LICENSE, and is        | 
+   | available at through the world-wide-web at                           |
+   | http://www.zend.com/license/2_00.txt.                                |
+   | If you did not receive a copy of the Zend license and are unable to  |
+   | obtain it through the world-wide-web, please send a note to          |
+   | license@zend.com so we can mail you a copy immediately.              |
+   +----------------------------------------------------------------------+
+   | Authors: Andi Gutmans <andi@zend.com>                                |
+   |          Zeev Suraski <zeev@zend.com>                                |
+   +----------------------------------------------------------------------+
+*/
+
+/* 
+ * LALR shift/reduce conflicts and how they are resolved:
+ *
+ * - 2 shift/reduce conflicts due to the dangeling elseif/else ambiguity.  Solved by shift.
+ * - 1 shift/reduce conflict due to arrays within encapsulated strings. Solved by shift. 
+ * - 1 shift/reduce conflict due to objects within encapsulated strings.  Solved by shift.
+ * 
+ */
+
+
+#include "zend_compile.h"
+#include "zend.h"
+#include "zend_list.h"
+#include "zend_globals.h"
+#include "zend_API.h"
+
+#define YYERROR_VERBOSE
+#define YYSTYPE znode
+#ifdef ZTS
+# define YYPARSE_PARAM tsrm_ls
+# define YYLEX_PARAM tsrm_ls
+#endif
+
+
+#ifndef YYSTYPE
+#define YYSTYPE int
+#endif
+#include <stdio.h>
+
+#ifndef __cplusplus
+#ifndef __STDC__
+#define const
+#endif
+#endif
+
+
+
+#define	YYFINAL		664
+#define	YYFLAG		-32768
+#define	YYNTBASE	137
+
+#define YYTRANSLATE(x) ((unsigned)(x) <= 361 ? yytranslate[x] : 263)
+
+static const short yytranslate[] = {     0,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,    48,   134,     2,   132,    47,    31,   135,   129,
+   130,    45,    42,     8,    43,    44,    46,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,    26,   131,    36,
+    13,    38,    25,    59,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+    60,     2,   136,    30,     2,   133,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,   127,    29,   128,    49,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
+     7,     9,    10,    11,    12,    14,    15,    16,    17,    18,
+    19,    20,    21,    22,    23,    24,    27,    28,    32,    33,
+    34,    35,    37,    39,    40,    41,    50,    51,    52,    53,
+    54,    55,    56,    57,    58,    61,    62,    63,    64,    65,
+    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
+    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
+    86,    87,    88,    89,    90,    91,    92,    93,    94,    95,
+    96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
+   106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
+   116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
+   126
+};
+
+#if YYDEBUG != 0
+static const short yyprhs[] = {     0,
+     0,     2,     3,     7,     8,    10,    12,    13,    17,    18,
+    20,    22,    24,    28,    29,    30,    40,    41,    42,    55,
+    56,    57,    65,    66,    67,    77,    78,    79,    80,    93,
+    94,   101,   104,   108,   111,   115,   118,   122,   126,   130,
+   134,   138,   140,   143,   147,   153,   154,   155,   166,   167,
+   168,   179,   180,   187,   189,   191,   195,   197,   199,   203,
+   205,   206,   207,   219,   220,   221,   232,   233,   240,   241,
+   250,   251,   254,   256,   261,   263,   268,   270,   275,   279,
+   285,   289,   294,   299,   305,   306,   307,   314,   315,   321,
+   323,   325,   327,   332,   333,   334,   342,   343,   344,   353,
+   354,   357,   358,   362,   364,   365,   367,   370,   373,   377,
+   381,   386,   391,   397,   399,   400,   402,   404,   407,   411,
+   415,   420,   424,   426,   428,   431,   436,   440,   446,   448,
+   452,   455,   456,   460,   461,   462,   474,   475,   476,   487,
+   488,   490,   494,   500,   502,   506,   507,   511,   513,   514,
+   516,   517,   522,   524,   525,   533,   537,   542,   547,   548,
+   556,   557,   562,   566,   570,   574,   578,   582,   586,   590,
+   594,   598,   602,   606,   609,   612,   615,   618,   619,   624,
+   625,   630,   631,   636,   637,   642,   646,   650,   654,   658,
+   662,   666,   670,   674,   678,   682,   686,   690,   693,   696,
+   699,   702,   706,   710,   714,   718,   722,   726,   730,   734,
+   738,   739,   740,   748,   750,   752,   755,   758,   761,   764,
+   767,   770,   773,   776,   777,   781,   783,   788,   792,   795,
+   796,   802,   803,   809,   810,   818,   820,   822,   823,   826,
+   830,   831,   835,   837,   839,   841,   843,   845,   847,   849,
+   851,   853,   856,   859,   864,   866,   868,   870,   874,   878,
+   882,   883,   886,   887,   889,   895,   899,   903,   905,   907,
+   909,   911,   913,   915,   917,   918,   923,   925,   928,   933,
+   938,   940,   942,   947,   948,   950,   952,   953,   958,   960,
+   961,   964,   969,   974,   976,   978,   982,   984,   987,   991,
+   993,   995,   996,  1002,  1003,  1004,  1007,  1013,  1017,  1021,
+  1023,  1030,  1035,  1040,  1043,  1046,  1049,  1052,  1055,  1058,
+  1061,  1064,  1067,  1070,  1073,  1076,  1077,  1079,  1080,  1086,
+  1090,  1094,  1101,  1105,  1107,  1109,  1111,  1116,  1121,  1124,
+  1127,  1132,  1135,  1138,  1140,  1141
+};
+
+static const short yyrhs[] = {   138,
+     0,     0,   138,   139,   140,     0,     0,   144,     0,   166,
+     0,     0,   141,   142,   143,     0,     0,   144,     0,   166,
+     0,   145,     0,   127,   141,   128,     0,     0,     0,    63,
+   129,   234,   130,   146,   144,   147,   185,   189,     0,     0,
+     0,    63,   129,   234,   130,    26,   148,   141,   149,   187,
+   190,    66,   131,     0,     0,     0,    80,   129,   150,   234,
+   130,   151,   184,     0,     0,     0,    79,   152,   144,    80,
+   129,   153,   234,   130,   131,     0,     0,     0,     0,    82,
+   129,   207,   131,   154,   207,   131,   155,   207,   130,   156,
+   175,     0,     0,    89,   129,   234,   130,   157,   179,     0,
+    93,   131,     0,    93,   234,   131,     0,    94,   131,     0,
+    94,   234,   131,     0,    98,   131,     0,    98,   210,   131,
+     0,    98,   238,   131,     0,   100,   195,   131,     0,   101,
+   197,   131,     0,    78,   206,   131,     0,    73,     0,   234,
+   131,     0,    99,   165,   131,     0,   103,   129,   163,   130,
+   131,     0,     0,     0,    84,   129,   236,    88,   158,   236,
+   174,   130,   159,   176,     0,     0,     0,    84,   129,   210,
+    88,   160,   236,   174,   130,   161,   176,     0,     0,    86,
+   162,   129,   178,   130,   177,     0,   131,     0,   164,     0,
+   163,     8,   164,     0,   238,     0,    77,     0,   129,    77,
+   130,     0,   167,     0,     0,     0,    96,   168,   204,    69,
+   169,   129,   191,   130,   127,   141,   128,     0,     0,     0,
+    95,   170,   204,    69,   171,   191,   129,   141,   130,   131,
+     0,     0,   106,    69,   172,   127,   198,   128,     0,     0,
+   106,    69,   107,    69,   173,   127,   198,   128,     0,     0,
+   109,   236,     0,   144,     0,    26,   141,    83,   131,     0,
+   144,     0,    26,   141,    85,   131,     0,   144,     0,    26,
+   141,    87,   131,     0,    69,    13,   229,     0,   178,     8,
+    69,    13,   229,     0,   127,   180,   128,     0,   127,   131,
+   180,   128,     0,    26,   180,    90,   131,     0,    26,   131,
+   180,    90,   131,     0,     0,     0,   180,    91,   234,   183,
+   181,   141,     0,     0,   180,    92,   183,   182,   141,     0,
+    26,     0,   131,     0,   144,     0,    26,   141,    81,   131,
+     0,     0,     0,   185,    64,   129,   234,   130,   186,   144,
+     0,     0,     0,   187,    64,   129,   234,   130,    26,   188,
+   141,     0,     0,    65,   144,     0,     0,    65,    26,   141,
+     0,   192,     0,     0,    71,     0,    31,    71,     0,    97,
+    71,     0,    71,    13,   229,     0,   192,     8,    71,     0,
+   192,     8,    31,    71,     0,   192,     8,    97,    71,     0,
+   192,     8,    71,    13,   229,     0,   194,     0,     0,   210,
+     0,   238,     0,    31,   236,     0,   194,     8,   210,     0,
+   194,     8,   238,     0,   194,     8,    31,   236,     0,   195,
+     8,   196,     0,   196,     0,    71,     0,   132,   235,     0,
+   132,   127,   234,   128,     0,   197,     8,    71,     0,   197,
+     8,    71,    13,   229,     0,    71,     0,    71,    13,   229,
+     0,   198,   199,     0,     0,   102,   205,   131,     0,     0,
+     0,    96,   200,   204,    69,   201,   129,   191,   130,   127,
+   141,   128,     0,     0,     0,    95,   202,   204,    69,   203,
+   191,   129,   141,   130,   131,     0,     0,    31,     0,   205,
+     8,    71,     0,   205,     8,    71,    13,   229,     0,    71,
+     0,    71,    13,   229,     0,     0,   206,     8,   234,     0,
+   234,     0,     0,   208,     0,     0,   208,     8,   209,   234,
+     0,   234,     0,     0,   110,   129,   211,   251,   130,    13,
+   234,     0,   238,    13,   234,     0,   238,    13,    31,   236,
+     0,   238,    13,    31,   221,     0,     0,   238,    13,    31,
+    61,   225,   212,   227,     0,     0,    61,   225,   213,   227,
+     0,   238,    14,   234,     0,   238,    15,   234,     0,   238,
+    16,   234,     0,   238,    17,   234,     0,   238,    18,   234,
+     0,   238,    19,   234,     0,   238,    20,   234,     0,   238,
+    21,   234,     0,   238,    22,   234,     0,   238,    23,   234,
+     0,   238,    24,   234,     0,   237,    50,     0,    50,   237,
+     0,   237,    51,     0,    51,   237,     0,     0,   234,    27,
+   214,   234,     0,     0,   234,    28,   215,   234,     0,     0,
+   234,     9,   216,   234,     0,     0,   234,    11,   217,   234,
+     0,   234,    10,   234,     0,   234,    29,   234,     0,   234,
+    31,   234,     0,   234,    30,   234,     0,   234,    44,   234,
+     0,   234,    42,   234,     0,   234,    43,   234,     0,   234,
+    45,   234,     0,   234,    46,   234,     0,   234,    47,   234,
+     0,   234,    40,   234,     0,   234,    41,   234,     0,    42,
+   234,     0,    43,   234,     0,    48,   234,     0,    49,   234,
+     0,   234,    34,   234,     0,   234,    35,   234,     0,   234,
+    32,   234,     0,   234,    33,   234,     0,   234,    36,   234,
+     0,   234,    37,   234,     0,   234,    38,   234,     0,   234,
+    39,   234,     0,   129,   234,   130,     0,     0,     0,   234,
+    25,   218,   234,    26,   219,   234,     0,   221,     0,   260,
+     0,    52,   234,     0,    53,   234,     0,    54,   234,     0,
+    55,   234,     0,    56,   234,     0,    57,   234,     0,    58,
+   234,     0,    62,   226,     0,     0,    59,   220,   234,     0,
+   230,     0,   111,   129,   254,   130,     0,   133,   256,   133,
+     0,    12,   234,     0,     0,    69,   129,   222,   193,   130,
+     0,     0,   238,   129,   223,   193,   130,     0,     0,    69,
+   126,   225,   129,   224,   193,   130,     0,    69,     0,   235,
+     0,     0,   129,   130,     0,   129,   234,   130,     0,     0,
+   129,   193,   130,     0,    67,     0,    68,     0,    77,     0,
+   114,     0,   115,     0,   112,     0,   113,     0,   228,     0,
+    69,     0,    42,   229,     0,    43,   229,     0,   111,   129,
+   231,   130,     0,    69,     0,    70,     0,   228,     0,   134,
+   256,   134,     0,   135,   256,   135,     0,   122,   256,   123,
+     0,     0,   233,   232,     0,     0,     8,     0,   233,     8,
+   229,   109,   229,     0,   233,     8,   229,     0,   229,   109,
+   229,     0,   229,     0,   235,     0,   210,     0,   238,     0,
+   238,     0,   238,     0,   240,     0,     0,   240,   108,   239,
+   244,     0,   241,     0,   250,   241,     0,   241,    60,   243,
+   136,     0,   241,   127,   234,   128,     0,   242,     0,    71,
+     0,   132,   127,   234,   128,     0,     0,   234,     0,   246,
+     0,     0,   244,   108,   245,   246,     0,   248,     0,     0,
+   240,   247,     0,   248,    60,   243,   136,     0,   248,   127,
+   234,   128,     0,   249,     0,    69,     0,   127,   234,   128,
+     0,   132,     0,   250,   132,     0,   251,     8,   252,     0,
+   252,     0,   238,     0,     0,   110,   129,   253,   251,   130,
+     0,     0,     0,   255,   232,     0,   255,     8,   234,   109,
+   234,     0,   255,     8,   234,     0,   234,   109,   234,     0,
+   234,     0,   255,     8,   234,   109,    31,   236,     0,   255,
+     8,    31,   236,     0,   234,   109,    31,   236,     0,    31,
+   236,     0,   256,   257,     0,   256,    69,     0,   256,    72,
+     0,   256,    76,     0,   256,    74,     0,   256,    75,     0,
+   256,    60,     0,   256,   136,     0,   256,   127,     0,   256,
+   128,     0,   256,   108,     0,     0,    71,     0,     0,    71,
+    60,   258,   259,   136,     0,    71,   108,    69,     0,   124,
+   234,   128,     0,   124,    70,    60,   234,   136,   128,     0,
+   125,   238,   128,     0,    69,     0,    72,     0,    71,     0,
+   104,   129,   261,   130,     0,   105,   129,   238,   130,     0,
+     3,   234,     0,     4,   234,     0,     5,   129,   234,   130,
+     0,     6,   234,     0,     7,   234,     0,   238,     0,     0,
+   261,     8,   262,   238,     0
+};
+
+#endif
+
+#if YYDEBUG != 0
+static const short yyrline[] = { 0,
+   139,   143,   144,   145,   149,   151,   155,   156,   157,   161,
+   163,   167,   172,   174,   174,   174,   175,   175,   175,   176,
+   176,   176,   177,   177,   177,   178,   183,   185,   186,   187,
+   187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
+   197,   198,   199,   200,   201,   202,   202,   202,   203,   203,
+   203,   204,   204,   205,   208,   210,   213,   217,   219,   223,
+   228,   229,   230,   231,   231,   232,   233,   233,   234,   234,
+   238,   240,   244,   246,   250,   252,   256,   258,   262,   264,
+   268,   270,   271,   272,   276,   278,   278,   279,   279,   283,
+   285,   289,   291,   296,   298,   298,   302,   304,   304,   308,
+   310,   314,   316,   320,   322,   326,   328,   329,   330,   331,
+   332,   333,   334,   338,   340,   344,   346,   347,   348,   349,
+   350,   353,   355,   359,   361,   362,   366,   368,   369,   370,
+   375,   377,   381,   383,   383,   384,   385,   385,   386,   390,
+   392,   395,   397,   398,   399,   403,   404,   405,   409,   411,
+   414,   415,   416,   420,   421,   422,   423,   424,   425,   425,
+   426,   426,   427,   428,   429,   430,   431,   432,   433,   434,
+   435,   436,   437,   438,   439,   440,   441,   442,   442,   443,
+   443,   444,   444,   445,   445,   446,   447,   448,   449,   450,
+   451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
+   461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
+   471,   472,   473,   474,   475,   476,   477,   478,   479,   480,
+   481,   482,   483,   484,   484,   485,   486,   487,   488,   491,
+   494,   495,   497,   498,   500,   504,   506,   510,   512,   513,
+   517,   519,   523,   525,   526,   527,   528,   529,   530,   534,
+   536,   537,   538,   539,   543,   545,   546,   547,   548,   549,
+   553,   555,   558,   560,   563,   565,   566,   567,   570,   572,
+   576,   581,   586,   591,   593,   593,   597,   599,   603,   605,
+   606,   610,   612,   615,   617,   620,   622,   622,   625,   627,
+   627,   630,   632,   633,   636,   638,   642,   644,   647,   649,
+   653,   655,   655,   656,   660,   662,   665,   667,   668,   669,
+   670,   671,   672,   673,   676,   678,   679,   680,   681,   682,
+   683,   684,   685,   686,   687,   688,   694,   696,   696,   697,
+   698,   699,   700,   704,   706,   707,   711,   713,   714,   715,
+   716,   717,   718,   721,   723,   723
+};
+#endif
+
+
+#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)
+
+static const char * const yytname[] = {   "$","error","$undefined.","T_INCLUDE",
+"T_INCLUDE_ONCE","T_EVAL","T_REQUIRE","T_REQUIRE_ONCE","','","T_LOGICAL_OR",
+"T_LOGICAL_XOR","T_LOGICAL_AND","T_PRINT","'='","T_PLUS_EQUAL","T_MINUS_EQUAL",
+"T_MUL_EQUAL","T_DIV_EQUAL","T_CONCAT_EQUAL","T_MOD_EQUAL","T_AND_EQUAL","T_OR_EQUAL",
+"T_XOR_EQUAL","T_SL_EQUAL","T_SR_EQUAL","'?'","':'","T_BOOLEAN_OR","T_BOOLEAN_AND",
+"'|'","'^'","'&'","T_IS_EQUAL","T_IS_NOT_EQUAL","T_IS_IDENTICAL","T_IS_NOT_IDENTICAL",
+"'<'","T_IS_SMALLER_OR_EQUAL","'>'","T_IS_GREATER_OR_EQUAL","T_SL","T_SR","'+'",
+"'-'","'.'","'*'","'/'","'%'","'!'","'~'","T_INC","T_DEC","T_INT_CAST","T_DOUBLE_CAST",
+"T_STRING_CAST","T_ARRAY_CAST","T_OBJECT_CAST","T_BOOL_CAST","T_UNSET_CAST",
+"'@'","'['","T_NEW","T_EXIT","T_IF","T_ELSEIF","T_ELSE","T_ENDIF","T_LNUMBER",
+"T_DNUMBER","T_STRING","T_STRING_VARNAME","T_VARIABLE","T_NUM_STRING","T_INLINE_HTML",
+"T_CHARACTER","T_BAD_CHARACTER","T_ENCAPSED_AND_WHITESPACE","T_CONSTANT_ENCAPSED_STRING",
+"T_ECHO","T_DO","T_WHILE","T_ENDWHILE","T_FOR","T_ENDFOR","T_FOREACH","T_ENDFOREACH",
+"T_DECLARE","T_ENDDECLARE","T_AS","T_SWITCH","T_ENDSWITCH","T_CASE","T_DEFAULT",
+"T_BREAK","T_CONTINUE","T_OLD_FUNCTION","T_FUNCTION","T_CONST","T_RETURN","T_USE",
+"T_GLOBAL","T_STATIC","T_VAR","T_UNSET","T_ISSET","T_EMPTY","T_CLASS","T_EXTENDS",
+"T_OBJECT_OPERATOR","T_DOUBLE_ARROW","T_LIST","T_ARRAY","T_CLASS_C","T_FUNC_C",
+"T_LINE","T_FILE","T_COMMENT","T_ML_COMMENT","T_OPEN_TAG","T_OPEN_TAG_WITH_ECHO",
+"T_CLOSE_TAG","T_WHITESPACE","T_START_HEREDOC","T_END_HEREDOC","T_DOLLAR_OPEN_CURLY_BRACES",
+"T_CURLY_OPEN","T_PAAMAYIM_NEKUDOTAYIM","'{'","'}'","'('","')'","';'","'$'",
+"'`'","'\\\"'","'\\''","']'","start","top_statement_list","@1","top_statement",
+"inner_statement_list","@2","inner_statement","statement","unticked_statement",
+"@3","@4","@5","@6","@7","@8","@9","@10","@11","@12","@13","@14","@15","@16",
+"@17","@18","@19","unset_variables","unset_variable","use_filename","declaration_statement",
+"unticked_declaration_statement","@20","@21","@22","@23","@24","@25","foreach_optional_arg",
+"for_statement","foreach_statement","declare_statement","declare_list","switch_case_list",
+"case_list","@26","@27","case_separator","while_statement","elseif_list","@28",
+"new_elseif_list","@29","else_single","new_else_single","parameter_list","non_empty_parameter_list",
+"function_call_parameter_list","non_empty_function_call_parameter_list","global_var_list",
+"global_var","static_var_list","class_statement_list","class_statement","@30",
+"@31","@32","@33","is_reference","class_variable_decleration","echo_expr_list",
+"for_expr","non_empty_for_expr","@34","expr_without_variable","@35","@36","@37",
+"@38","@39","@40","@41","@42","@43","@44","function_call","@45","@46","@47",
+"static_or_variable_string","exit_expr","ctor_arguments","common_scalar","static_scalar",
+"scalar","static_array_pair_list","possible_comma","non_empty_static_array_pair_list",
+"expr","r_cvar","w_cvar","rw_cvar","cvar","@48","cvar_without_objects","reference_variable",
+"compound_variable","dim_offset","ref_list","@49","object_property","@50","object_dim_list",
+"variable_name","simple_indirect_reference","assignment_list","assignment_list_element",
+"@51","array_pair_list","non_empty_array_pair_list","encaps_list","encaps_var",
+"@52","encaps_var_offset","internal_functions_in_yacc","isset_variables","@53", NULL
+};
+#endif
+
+static const short yyr1[] = {     0,
+   137,   139,   138,   138,   140,   140,   142,   141,   141,   143,
+   143,   144,   145,   146,   147,   145,   148,   149,   145,   150,
+   151,   145,   152,   153,   145,   154,   155,   156,   145,   157,
+   145,   145,   145,   145,   145,   145,   145,   145,   145,   145,
+   145,   145,   145,   145,   145,   158,   159,   145,   160,   161,
+   145,   162,   145,   145,   163,   163,   164,   165,   165,   166,
+   168,   169,   167,   170,   171,   167,   172,   167,   173,   167,
+   174,   174,   175,   175,   176,   176,   177,   177,   178,   178,
+   179,   179,   179,   179,   180,   181,   180,   182,   180,   183,
+   183,   184,   184,   185,   186,   185,   187,   188,   187,   189,
+   189,   190,   190,   191,   191,   192,   192,   192,   192,   192,
+   192,   192,   192,   193,   193,   194,   194,   194,   194,   194,
+   194,   195,   195,   196,   196,   196,   197,   197,   197,   197,
+   198,   198,   199,   200,   201,   199,   202,   203,   199,   204,
+   204,   205,   205,   205,   205,   206,   206,   206,   207,   207,
+   209,   208,   208,   211,   210,   210,   210,   210,   212,   210,
+   213,   210,   210,   210,   210,   210,   210,   210,   210,   210,
+   210,   210,   210,   210,   210,   210,   210,   214,   210,   215,
+   210,   216,   210,   217,   210,   210,   210,   210,   210,   210,
+   210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
+   210,   210,   210,   210,   210,   210,   210,   210,   210,   210,
+   218,   219,   210,   210,   210,   210,   210,   210,   210,   210,
+   210,   210,   210,   220,   210,   210,   210,   210,   210,   222,
+   221,   223,   221,   224,   221,   225,   225,   226,   226,   226,
+   227,   227,   228,   228,   228,   228,   228,   228,   228,   229,
+   229,   229,   229,   229,   230,   230,   230,   230,   230,   230,
+   231,   231,   232,   232,   233,   233,   233,   233,   234,   234,
+   235,   236,   237,   238,   239,   238,   240,   240,   241,   241,
+   241,   242,   242,   243,   243,   244,   245,   244,   246,   247,
+   246,   248,   248,   248,   249,   249,   250,   250,   251,   251,
+   252,   253,   252,   252,   254,   254,   255,   255,   255,   255,
+   255,   255,   255,   255,   256,   256,   256,   256,   256,   256,
+   256,   256,   256,   256,   256,   256,   257,   258,   257,   257,
+   257,   257,   257,   259,   259,   259,   260,   260,   260,   260,
+   260,   260,   260,   261,   262,   261
+};
+
+static const short yyr2[] = {     0,
+     1,     0,     3,     0,     1,     1,     0,     3,     0,     1,
+     1,     1,     3,     0,     0,     9,     0,     0,    12,     0,
+     0,     7,     0,     0,     9,     0,     0,     0,    12,     0,
+     6,     2,     3,     2,     3,     2,     3,     3,     3,     3,
+     3,     1,     2,     3,     5,     0,     0,    10,     0,     0,
+    10,     0,     6,     1,     1,     3,     1,     1,     3,     1,
+     0,     0,    11,     0,     0,    10,     0,     6,     0,     8,
+     0,     2,     1,     4,     1,     4,     1,     4,     3,     5,
+     3,     4,     4,     5,     0,     0,     6,     0,     5,     1,
+     1,     1,     4,     0,     0,     7,     0,     0,     8,     0,
+     2,     0,     3,     1,     0,     1,     2,     2,     3,     3,
+     4,     4,     5,     1,     0,     1,     1,     2,     3,     3,
+     4,     3,     1,     1,     2,     4,     3,     5,     1,     3,
+     2,     0,     3,     0,     0,    11,     0,     0,    10,     0,
+     1,     3,     5,     1,     3,     0,     3,     1,     0,     1,
+     0,     4,     1,     0,     7,     3,     4,     4,     0,     7,
+     0,     4,     3,     3,     3,     3,     3,     3,     3,     3,
+     3,     3,     3,     2,     2,     2,     2,     0,     4,     0,
+     4,     0,     4,     0,     4,     3,     3,     3,     3,     3,
+     3,     3,     3,     3,     3,     3,     3,     2,     2,     2,
+     2,     3,     3,     3,     3,     3,     3,     3,     3,     3,
+     0,     0,     7,     1,     1,     2,     2,     2,     2,     2,
+     2,     2,     2,     0,     3,     1,     4,     3,     2,     0,
+     5,     0,     5,     0,     7,     1,     1,     0,     2,     3,
+     0,     3,     1,     1,     1,     1,     1,     1,     1,     1,
+     1,     2,     2,     4,     1,     1,     1,     3,     3,     3,
+     0,     2,     0,     1,     5,     3,     3,     1,     1,     1,
+     1,     1,     1,     1,     0,     4,     1,     2,     4,     4,
+     1,     1,     4,     0,     1,     1,     0,     4,     1,     0,
+     2,     4,     4,     1,     1,     3,     1,     2,     3,     1,
+     1,     0,     5,     0,     0,     2,     5,     3,     3,     1,
+     6,     4,     4,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     0,     1,     0,     5,     3,
+     3,     6,     3,     1,     1,     1,     4,     4,     2,     2,
+     4,     2,     2,     1,     0,     4
+};
+
+static const short yydefact[] = {     4,
+     2,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,   224,     0,   238,     0,   243,   244,   255,   256,   282,
+    42,   245,   146,    23,     0,     0,     0,    52,     0,     0,
+     0,    64,    61,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,   248,   249,   246,   247,   326,     9,     0,
+    54,   297,   326,   326,   326,     3,     5,    12,     6,    60,
+   270,   214,   257,   226,     0,   269,     0,   271,   274,   277,
+   281,     0,   215,   339,   340,     0,   342,   343,   229,   198,
+   199,   200,   201,   175,   273,   177,   216,   217,   218,   219,
+   220,   221,   222,     0,   236,   161,   237,   271,     0,   223,
+     0,     0,   230,     0,   148,     0,    20,   149,     0,     0,
+     0,    32,     0,    34,     0,   140,   140,    36,   270,     0,
+   271,    58,     0,     0,   124,     0,     0,   123,   129,     0,
+     0,     0,     0,    67,   154,   305,     0,     7,     0,     0,
+     0,     0,     0,   182,     0,   184,   211,   178,   180,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,    43,   174,
+   176,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,   232,   275,   284,     0,   298,   278,     0,
+   225,   241,   239,     0,     0,     0,   115,     0,    41,     0,
+     0,     0,   150,   153,   270,     0,   271,     0,     0,    33,
+    35,   141,     0,     0,    37,    38,     0,    44,     0,   125,
+     0,    39,     0,     0,    40,     0,    55,    57,   344,     0,
+     0,     0,     0,   304,     0,   310,     0,   263,   321,   316,
+   327,   317,   319,   320,   318,   325,   260,     0,     0,   323,
+   324,   322,   315,    13,     0,   210,     0,   228,   258,   259,
+     0,   186,     0,     0,     0,     0,   187,   189,   188,   204,
+   205,   202,   203,   206,   207,   208,   209,   196,   197,   191,
+   192,   190,   193,   194,   195,     0,   156,   163,   164,   165,
+   166,   167,   168,   169,   170,   171,   172,   173,   115,     0,
+   285,     0,     0,   341,   115,   162,   240,    14,   234,     0,
+     0,   114,   270,   271,   147,     0,     0,    26,   151,    49,
+    46,     0,     0,    30,    65,    62,    59,     0,   122,     0,
+     0,   251,     0,   250,   130,   127,     0,     0,   345,   337,
+   338,    69,   132,     0,   301,     0,   300,   314,   272,     0,
+   227,   264,   306,   328,     0,   256,     0,     0,     8,    10,
+    11,   283,   183,   185,     0,   179,   181,     0,     0,   158,
+   157,   272,     0,   295,     0,   290,   276,   286,   289,   294,
+   279,   280,     0,    17,     0,   115,   118,   231,     0,    24,
+    21,   149,     0,     0,     0,     0,     0,     0,     0,   105,
+     0,   126,   252,   253,   261,     0,    56,    45,     0,     0,
+     0,   302,   304,     0,     0,   309,     0,   308,     0,   330,
+     0,   331,   333,   212,   159,   233,     0,   291,   287,   284,
+     0,   242,     9,    15,     0,     0,   270,   271,     0,     0,
+     0,   152,    71,    71,    79,     0,     9,    77,    53,    85,
+    85,    31,     0,   106,     0,     0,   104,   105,   268,     0,
+   263,   128,   346,   132,   137,   134,     0,    68,   131,   304,
+   299,     0,   313,   312,     0,   334,   336,   335,     0,     0,
+     0,   241,   296,     0,     0,     0,     7,    94,   235,   121,
+     0,     9,    92,    22,    27,     0,     0,     0,     0,     7,
+    85,     0,    85,     0,   107,     0,   108,     9,     0,     0,
+     0,   254,   264,   262,     0,   140,   140,   144,     0,     0,
+   155,     0,   307,   329,     0,   213,   160,   288,   292,   293,
+    97,   100,     0,     7,   149,    72,    50,    47,    80,     0,
+     0,     0,     0,     0,     0,    81,   109,     7,     0,   110,
+     0,     0,   267,   266,    70,     0,     0,     0,     0,   133,
+   303,   311,   332,   102,     0,     0,    16,    25,     0,     0,
+     0,     0,    78,     0,    83,     0,    90,    91,    88,    82,
+     0,   111,     0,   112,     9,     0,   138,   135,   145,   142,
+     0,     0,     0,     0,   101,    93,    28,     9,    75,    51,
+    48,    84,    86,     9,    66,   113,     7,   265,   105,     0,
+     0,     0,     9,     0,     0,     0,     7,     9,     7,    63,
+     0,   105,   143,     0,     7,    19,    95,     9,    73,    29,
+     0,     7,     9,     0,     0,     0,     7,    76,     7,     0,
+    98,    96,     0,     0,     9,     9,    74,   139,     7,     7,
+   136,     0,     0,     0
+};
+
+static const short yydefgoto[] = {   662,
+     1,     2,    66,   148,   265,   369,   609,    68,   395,   498,
+   443,   541,   211,   450,   116,   449,   402,   545,   626,   409,
+   405,   582,   404,   581,   120,   236,   237,   134,    69,    70,
+   127,   411,   126,   410,   243,   420,   507,   640,   610,   459,
+   333,   462,   512,   628,   614,   589,   504,   542,   646,   574,
+   656,   577,   603,   466,   467,   321,   322,   137,   138,   140,
+   421,   479,   527,   620,   526,   619,   223,   529,   114,   212,
+   213,   403,    71,   244,   492,   202,   275,   276,   271,   273,
+   274,   491,   104,    72,   207,   309,   396,   106,   110,   316,
+    73,   345,    74,   470,   363,   471,    75,    76,   216,    77,
+    78,   310,    79,    80,    81,   312,   387,   494,   388,   438,
+   389,   390,    82,   356,   357,   480,   247,   248,   147,   263,
+   429,   489,    83,   240,   419
+};
+
+static const short yypact[] = {-32768,
+    39,   604,  2039,  2039,   -83,  2039,  2039,  2039,  2039,  2039,
+  2039,  2039,   -16,   -16,  2039,  2039,  2039,  2039,  2039,  2039,
+  2039,-32768,   -20,   -81,   -76,-32768,-32768,   -42,-32768,-32768,
+-32768,-32768,  2039,-32768,   -72,   -40,    -9,-32768,    -4,  1282,
+  1314,-32768,-32768,  1427,   -23,    11,    34,     8,    23,    76,
+    58,    83,    91,-32768,-32768,-32768,-32768,-32768,-32768,  2039,
+-32768,     3,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+-32768,-32768,-32768,-32768,  2316,-32768,   159,   731,    46,   -33,
+-32768,    12,-32768,  3385,  3385,  2039,  3385,  3385,  3483,    95,
+    95,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+-32768,-32768,-32768,  2039,-32768,-32768,-32768,-32768,  1459,-32768,
+  2039,   -20,-32768,    14,  3385,  1169,-32768,  2039,  2039,   101,
+  2039,-32768,  2371,-32768,  2421,   206,   206,-32768,   124,  3385,
+   547,-32768,   163,   138,-32768,     4,    16,-32768,   257,    18,
+   -16,   -16,   -16,   170,-32768,  1572,   393,   150,  2476,  2039,
+   846,   959,  1072,-32768,  2039,-32768,-32768,-32768,-32768,  2039,
+  2039,  2039,  2039,  2039,  2039,  2039,  2039,  2039,  2039,  2039,
+  2039,  2039,  2039,  2039,  2039,  2039,  2039,  2039,-32768,-32768,
+-32768,  1604,  2039,  2039,  2039,  2039,  2039,  2039,  2039,  2039,
+  2039,  2039,  2039,-32768,-32768,  2039,  2039,     3,   -33,  2526,
+-32768,   151,-32768,  2580,  2630,   165,  1717,  2039,-32768,   216,
+  2039,   171,   293,  3385,   220,   222,   562,   242,  2684,-32768,
+-32768,-32768,   243,   244,-32768,-32768,   187,-32768,  2039,-32768,
+    11,-32768,   429,   247,-32768,    26,-32768,-32768,-32768,    27,
+   192,   254,   198,   -15,   -16,  3248,   194,   318,-32768,-32768,
+    25,-32768,-32768,-32768,-32768,-32768,-32768,  2152,   -16,-32768,
+-32768,-32768,-32768,-32768,   604,-32768,  2942,-32768,-32768,-32768,
+  2039,  3460,  2039,  2039,  2039,  2039,  3542,  3559,   593,  2332,
+  2332,  2332,  2332,   246,   246,   246,   246,   286,   286,    95,
+    95,    95,-32768,-32768,-32768,   -19,  3483,  3483,  3483,  3483,
+  3483,  3483,  3483,  3483,  3483,  3483,  3483,  3483,  1717,   -24,
+  3385,   199,  2996,-32768,  1717,-32768,-32768,   310,-32768,   -16,
+   207,   330,    69,    50,  3385,   213,  2734,-32768,-32768,-32768,
+-32768,   331,    70,-32768,-32768,-32768,-32768,  3044,-32768,   429,
+   429,-32768,   214,-32768,-32768,   332,   -16,   217,-32768,-32768,
+-32768,-32768,-32768,   218,-32768,    71,-32768,-32768,-32768,  1749,
+-32768,  1862,-32768,-32768,   280,   290,  3098,   223,-32768,-32768,
+-32768,-32768,  3423,  3483,  3341,  3524,  2146,   -20,   -42,-32768,
+-32768,   226,   228,-32768,  2039,-32768,   251,-32768,   -31,-32768,
+-32768,-32768,   231,-32768,  1169,  1717,-32768,-32768,  1894,-32768,
+-32768,  2039,  2039,   -16,   -16,   429,   283,   717,    -1,     5,
+   234,-32768,-32768,-32768,   429,   429,-32768,-32768,   -16,   237,
+   136,-32768,   -15,   352,   -16,  3385,   -16,  3302,   185,-32768,
+  2039,-32768,-32768,-32768,-32768,-32768,  3146,-32768,-32768,  2039,
+  2039,-32768,-32768,-32768,   239,   -16,    72,   359,  2039,   830,
+   240,  3385,   261,   261,-32768,   375,-32768,-32768,-32768,   258,
+   259,-32768,   321,   382,   326,   269,   396,     5,   298,   278,
+   404,-32768,-32768,-32768,-32768,-32768,   342,-32768,-32768,   -15,
+-32768,  2039,-32768,-32768,  2007,-32768,-32768,-32768,   279,  2206,
+  2039,   151,-32768,   -24,   281,  3200,   161,-32768,-32768,-32768,
+  2788,-32768,-32768,-32768,-32768,   -16,   291,   292,   429,   329,
+-32768,   157,-32768,     1,-32768,   429,-32768,-32768,   175,   295,
+   429,-32768,   429,-32768,   140,   206,   206,   407,    20,    73,
+  3483,   -16,  3385,-32768,   299,  3504,-32768,-32768,-32768,-32768,
+-32768,   179,   297,   345,  2039,-32768,-32768,-32768,-32768,   301,
+   208,   303,  2039,    -3,   131,-32768,-32768,   300,   364,   410,
+   365,   311,-32768,   328,-32768,   373,   374,   429,   376,-32768,
+-32768,-32768,-32768,   197,   315,  1169,-32768,-32768,   314,   320,
+   943,   943,-32768,   323,-32768,  2266,-32768,-32768,-32768,-32768,
+   324,-32768,   429,-32768,-32768,   429,-32768,-32768,-32768,   438,
+   334,   431,   392,  2039,-32768,-32768,-32768,-32768,-32768,-32768,
+-32768,-32768,-32768,-32768,-32768,-32768,   346,-32768,     5,   341,
+   429,  2039,-32768,   344,  2838,  1056,   388,-32768,     7,-32768,
+   348,     5,-32768,  2892,   394,-32768,-32768,-32768,-32768,-32768,
+   347,   125,-32768,   349,   433,  1169,   397,-32768,   353,   357,
+-32768,-32768,   355,   361,-32768,-32768,-32768,-32768,   362,   201,
+-32768,   495,   499,-32768
+};
+
+static const short yypgoto[] = {-32768,
+-32768,-32768,-32768,  -162,-32768,-32768,    -2,-32768,-32768,-32768,
+-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+-32768,-32768,-32768,-32768,-32768,-32768,   153,-32768,   238,-32768,
+-32768,-32768,-32768,-32768,-32768,-32768,    53,-32768,   -80,-32768,
+-32768,-32768,  -423,-32768,-32768,   -82,-32768,-32768,-32768,-32768,
+-32768,-32768,-32768,  -438,-32768,  -272,-32768,-32768,   284,-32768,
+    35,-32768,-32768,-32768,-32768,-32768,  -126,-32768,-32768,  -397,
+-32768,-32768,   -12,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+-32768,-32768,-32768,   215,-32768,-32768,-32768,   -99,-32768,    30,
+  -202,  -182,-32768,-32768,    41,-32768,     0,   -21,  -186,    48,
+   109,-32768,  -296,   428,-32768,    79,-32768,-32768,    29,-32768,
+-32768,-32768,-32768,    44,   102,-32768,-32768,-32768,   241,-32768,
+-32768,-32768,-32768,-32768,-32768
+};
+
+
+#define	YYLAST		3606
+
+
+static const short yytable[] = {    67,
+   224,   107,    84,    85,   451,    87,    88,    89,    90,    91,
+    92,    93,   206,   386,    97,    98,    99,   100,   101,   102,
+   103,   208,   587,   231,   460,   234,   196,   569,   440,   520,
+   344,   129,   115,   347,   349,   463,   383,   514,    -1,   123,
+   125,   378,   393,   130,   384,    86,    30,   109,   105,   379,
+    30,    30,   111,   132,    30,    30,   117,  -117,   358,   149,
+    94,    96,   182,   183,   184,   185,   186,   187,   188,   189,
+   190,   191,   192,   193,    30,   464,  -116,   407,   423,  -119,
+   423,   135,    30,   112,   364,   200,   113,   551,   118,   555,
+   107,   553,   554,   197,   354,   441,   -89,   -89,   -89,  -273,
+  -273,   465,   385,   201,   139,   133,   215,    62,   204,   381,
+   205,    62,    62,   210,   230,    62,    62,   214,   130,   119,
+   219,    95,    95,   445,   121,   461,   144,   588,   556,   150,
+   229,   108,   365,   397,   -89,    62,   141,   344,   344,   176,
+   177,   178,   136,   198,   209,   246,   232,   580,   235,   267,
+   570,   142,   131,   195,   272,   348,   350,   413,   414,   277,
+   278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
+   288,   289,   290,   291,   292,   293,   294,   295,   194,  -117,
+   631,   297,   298,   299,   300,   301,   302,   303,   304,   305,
+   306,   307,   308,   644,   323,   311,   313,   386,  -116,   408,
+   424,  -119,   571,   344,   143,   559,   130,   325,   180,   181,
+   327,   145,   344,   344,   -87,   -87,   -87,   453,   454,   146,
+   108,   553,   554,   455,   -18,   -18,   -18,   217,   338,   218,
+   475,   476,   469,   472,   475,   476,   222,   477,   483,   227,
+   484,   477,   575,   576,   108,   560,   552,   553,   554,   238,
+   239,   241,   -87,   486,   225,   487,   488,   367,   590,   500,
+   601,   602,   370,   478,   -99,   -99,   -99,   565,   228,   233,
+   373,   561,   374,   375,   376,   377,   242,   264,   435,   315,
+   497,-32768,-32768,-32768,-32768,   171,   172,   173,   174,   175,
+   176,   177,   178,   319,   510,   326,   323,   584,   553,   554,
+   329,   328,   323,   151,   152,   153,   344,   330,   130,   331,
+   332,   335,   336,   344,   130,   324,   337,   346,   344,   546,
+   344,   351,   352,   361,   353,   362,   549,   173,   174,   175,
+   176,   177,   178,   557,   391,   394,   398,   399,   563,   544,
+   564,   400,   415,   406,   416,   572,   422,   418,   430,   431,
+   433,   456,   355,   359,   194,   558,   107,   436,   439,   426,
+   442,   428,   468,   474,   482,   344,  -120,   368,   499,   506,
+   505,   182,   183,   184,   185,   186,   187,   188,   189,   190,
+   191,   192,   193,   323,   437,   599,   447,   509,   511,   513,
+   344,   515,   444,   344,   516,   130,   517,   518,   130,   566,
+   567,   214,   452,   519,   382,   458,   521,   522,  -273,  -273,
+   616,   523,   528,   618,   534,   550,   539,   324,   344,   568,
+   547,   548,   593,   324,   562,   579,   573,   578,   359,   591,
+   490,   583,   617,   585,   592,   594,   596,   595,   633,   311,
+   496,   597,   598,   604,   606,   627,   600,   503,   501,   607,
+   621,   629,   249,   612,   615,   238,   623,   624,   651,  -103,
+   635,   250,   622,   251,   252,   642,   253,   254,   255,   632,
+   340,   341,   641,   630,   636,   647,   643,   648,   650,   653,
+   649,   531,   654,   655,   533,   657,   108,   194,  -120,   661,
+   536,   658,   659,   660,   663,    26,    27,   342,   664,   417,
+   256,   611,   371,   613,   324,    32,   508,   448,   525,   199,
+   380,   524,   359,   359,   339,   257,   258,   259,   495,   260,
+   261,   537,   538,   530,   481,     0,     0,   473,   262,     0,
+     0,   355,     0,   359,     0,   359,     0,     0,     0,   343,
+    54,    55,    56,    57,   214,     0,     0,     0,     0,     0,
+     0,     0,   586,     0,   359,     0,     0,     0,     0,   182,
+   183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
+   193,     0,     0,   605,   182,   183,   184,   185,   186,   187,
+   188,   189,   190,   191,   192,   193,     0,     0,   355,     0,
+     0,     0,     0,     0,     0,     0,  -273,  -273,     0,     0,
+     0,     0,     0,   625,     0,     0,     3,     4,     5,     6,
+     7,  -273,  -273,     0,   359,     8,     0,     0,     0,     0,
+     0,   634,     0,   639,   163,   164,   165,   166,   167,   168,
+   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
+   359,     0,     0,   652,     0,     9,    10,     0,     0,  -272,
+     0,    11,    12,    13,    14,    15,    16,    17,    18,    19,
+    20,    21,    22,     0,    23,    24,    25,     0,     0,     0,
+    26,    27,    28,    29,    30,   194,    31,   226,     0,     0,
+    32,    33,    34,    35,     0,    36,     0,    37,     0,    38,
+   194,     0,    39,     0,     0,     0,    40,    41,    42,    43,
+     0,    44,    45,    46,    47,     0,    48,    49,    50,    51,
+     0,     0,     0,    52,    53,    54,    55,    56,    57,     3,
+     4,     5,     6,     7,     0,    58,     0,     0,     8,     0,
+    59,     0,    60,     0,    61,    62,    63,    64,    65,     0,
+     0,     0,   457,   182,   183,   184,   185,   186,   187,   188,
+   189,   190,   191,   192,   193,     0,     0,     0,     9,    10,
+     0,     0,     0,     0,    11,    12,    13,    14,    15,    16,
+    17,    18,    19,    20,    21,    22,     0,    23,    24,    25,
+  -273,  -273,     0,    26,    27,    28,    29,    30,     0,    31,
+     0,     0,     0,    32,    33,    34,    35,     0,    36,     0,
+    37,     0,    38,     0,     0,    39,     0,     0,     0,    40,
+    41,     0,     0,     0,    44,    45,    46,    47,     0,    48,
+    49,    50,     0,     0,     0,     0,    52,    53,    54,    55,
+    56,    57,     3,     4,     5,     6,     7,     0,    58,     0,
+     0,     8,     0,    59,     0,    60,     0,    61,    62,    63,
+    64,    65,     0,     0,     0,   502,     0,     0,     0,   194,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     9,    10,     0,     0,     0,     0,    11,    12,    13,
+    14,    15,    16,    17,    18,    19,    20,    21,    22,     0,
+    23,    24,    25,     0,     0,     0,    26,    27,    28,    29,
+    30,     0,    31,     0,     0,   249,    32,    33,    34,    35,
+     0,    36,     0,    37,   250,    38,   251,   252,    39,   253,
+   254,   255,    40,    41,     0,     0,     0,    44,    45,    46,
+    47,     0,    48,    49,    50,     0,     0,     0,     0,    52,
+    53,    54,    55,    56,    57,     3,     4,     5,     6,     7,
+     0,    58,     0,   256,     8,     0,    59,     0,    60,     0,
+    61,    62,    63,    64,    65,     0,     0,     0,   608,   258,
+   259,     0,   260,   261,     0,     0,     0,     0,   268,     0,
+     0,   262,     0,     0,     9,    10,     0,     0,     0,     0,
+    11,    12,    13,    14,    15,    16,    17,    18,    19,    20,
+    21,    22,     0,    23,    24,    25,     0,     0,     0,    26,
+    27,    28,    29,    30,     0,    31,     0,     0,   249,    32,
+    33,    34,    35,     0,    36,     0,    37,   250,    38,   251,
+   252,    39,   253,   254,   255,    40,    41,     0,     0,     0,
+    44,    45,    46,    47,     0,    48,    49,    50,     0,     0,
+     0,     0,    52,    53,    54,    55,    56,    57,     3,     4,
+     5,     6,     7,     0,    58,     0,   256,     8,     0,    59,
+     0,    60,     0,    61,    62,    63,    64,    65,     0,     0,
+     0,   638,   258,   259,     0,   260,   261,     0,     0,     0,
+     0,     0,   269,     0,   262,     0,     0,     9,    10,     0,
+     0,     0,     0,    11,    12,    13,    14,    15,    16,    17,
+    18,    19,    20,    21,    22,     0,    23,    24,    25,     0,
+     0,     0,    26,    27,    28,    29,    30,     0,    31,     0,
+     0,   249,    32,    33,    34,    35,     0,    36,     0,    37,
+   250,    38,   251,   252,    39,   253,   254,   255,    40,    41,
+     0,     0,     0,    44,    45,    46,    47,     0,    48,    49,
+    50,     0,     0,     0,     0,    52,    53,    54,    55,    56,
+    57,     3,     4,     5,     6,     7,     0,    58,     0,   256,
+     8,     0,    59,     0,    60,     0,    61,    62,    63,    64,
+    65,     0,     0,     0,     0,   258,   259,     0,   260,   261,
+     0,     0,     0,     0,     0,     0,   270,   262,     0,     0,
+     9,    10,     0,     0,     0,     0,    11,    12,    13,    14,
+    15,    16,    17,    18,    19,    20,    21,    22,     0,    23,
+    24,    25,     0,     0,     0,    26,    27,    28,    29,    30,
+     0,    31,     0,     0,     0,    32,    33,    34,    35,     0,
+    36,     0,    37,     0,    38,     0,     0,    39,     0,     0,
+     0,    40,    41,     0,     0,     0,    44,    45,    46,    47,
+     0,    48,    49,    50,     0,     0,     0,     0,    52,    53,
+    54,    55,    56,    57,     3,     4,     5,     6,     7,     0,
+    58,     0,     0,     8,     0,    59,     0,    60,     0,    61,
+    62,    63,    64,    65,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     3,     4,     5,     6,
+     7,     0,     0,     9,    10,     8,     0,     0,     0,    11,
+    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+    22,     0,    23,    24,     0,     0,     0,     0,    26,    27,
+    28,    29,    30,     0,     0,     9,    10,     0,    32,     0,
+     0,    11,    12,    13,    14,    15,    16,    17,    18,    19,
+    20,    21,    22,     0,    23,    24,     0,     0,     0,     0,
+    26,    27,    28,    29,    30,    49,    50,     0,     0,     0,
+    32,    52,    53,    54,    55,    56,    57,     0,     0,     0,
+     0,     0,     0,    58,     0,     0,     0,     0,     0,     0,
+    60,     0,   122,    62,    63,    64,    65,    49,    50,     0,
+     0,     0,     0,    52,    53,    54,    55,    56,    57,     3,
+     4,     5,     6,     7,     0,    58,     0,     0,     8,     0,
+     0,     0,    60,     0,   124,    62,    63,    64,    65,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     3,     4,     5,     6,     7,     0,     0,     9,    10,
+     8,     0,     0,     0,    11,    12,    13,    14,    15,    16,
+    17,    18,    19,    20,    21,    22,     0,    23,    24,     0,
+     0,     0,     0,    26,    27,    28,    29,    30,     0,     0,
+     9,    10,     0,    32,     0,     0,    11,    12,    13,    14,
+    15,    16,    17,    18,    19,    20,    21,    22,     0,    23,
+    24,     0,     0,     0,     0,    26,    27,    28,    29,    30,
+    49,    50,     0,     0,     0,    32,    52,    53,    54,    55,
+    56,    57,     0,     0,     0,     0,     0,     0,    58,     0,
+     0,     0,     0,     0,     0,    60,     0,   128,    62,    63,
+    64,    65,    49,    50,     0,     0,     0,     0,    52,    53,
+    54,    55,    56,    57,     3,     4,     5,     6,     7,     0,
+    58,     0,     0,     8,     0,     0,     0,    60,   203,     0,
+    62,    63,    64,    65,     0,     0,     0,     0,     0,     0,
+     0,     0,   245,     0,     0,     0,     3,     4,     5,     6,
+     7,     0,     0,     9,    10,     8,     0,     0,     0,    11,
+    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+    22,     0,    23,    24,   296,     0,     0,     0,    26,    27,
+    28,    29,    30,     0,     0,     9,    10,     0,    32,     0,
+     0,    11,    12,    13,    14,    15,    16,    17,    18,    19,
+    20,    21,    22,     0,    23,    24,     0,     0,     0,     0,
+    26,    27,    28,    29,    30,    49,    50,     0,     0,     0,
+    32,    52,    53,    54,    55,    56,    57,     0,     0,     0,
+     0,     0,     0,    58,     0,     0,     0,     0,     0,     0,
+    60,     0,     0,    62,    63,    64,    65,    49,    50,     0,
+     0,     0,     0,    52,    53,    54,    55,    56,    57,     3,
+     4,     5,     6,     7,     0,    58,     0,     0,     8,     0,
+     0,     0,    60,     0,     0,    62,    63,    64,    65,     0,
+     0,     0,     0,     0,     0,     0,     0,   320,     0,     0,
+     0,     3,     4,     5,     6,     7,     0,     0,     9,    10,
+     8,     0,     0,     0,    11,    12,    13,    14,    15,    16,
+    17,    18,    19,    20,    21,    22,     0,    23,    24,   425,
+     0,     0,     0,    26,    27,    28,    29,    30,     0,     0,
+     9,    10,     0,    32,     0,     0,    11,    12,    13,    14,
+    15,    16,    17,    18,    19,    20,    21,    22,     0,    23,
+    24,     0,     0,     0,     0,    26,    27,    28,    29,    30,
+    49,    50,     0,     0,     0,    32,    52,    53,    54,    55,
+    56,    57,     0,     0,     0,     0,     0,     0,    58,     0,
+     0,     0,     0,     0,     0,    60,     0,     0,    62,    63,
+    64,    65,    49,    50,     0,     0,     0,     0,    52,    53,
+    54,    55,    56,    57,     3,     4,     5,     6,     7,     0,
+    58,     0,     0,     8,     0,     0,     0,    60,     0,     0,
+    62,    63,    64,    65,     0,     0,     0,     0,     0,     0,
+     0,     0,   427,     0,     0,     0,     3,     4,     5,     6,
+     7,     0,     0,     9,    10,     8,     0,     0,     0,    11,
+    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+    22,     0,    23,    24,   446,     0,     0,     0,    26,    27,
+    28,    29,    30,     0,     0,     9,    10,     0,    32,     0,
+     0,    11,    12,    13,    14,    15,    16,    17,    18,    19,
+    20,    21,    22,     0,    23,    24,     0,     0,     0,     0,
+    26,    27,    28,    29,    30,    49,    50,     0,     0,     0,
+    32,    52,    53,    54,    55,    56,    57,     0,     0,     0,
+     0,     0,     0,    58,     0,     0,     0,     0,     0,     0,
+    60,     0,     0,    62,    63,    64,    65,    49,    50,     0,
+     0,     0,     0,    52,    53,    54,    55,    56,    57,     3,
+     4,     5,     6,     7,     0,    58,     0,     0,     8,     0,
+     0,     0,    60,     0,     0,    62,    63,    64,    65,     0,
+     0,     0,     0,     0,     0,     0,     0,   532,     0,     0,
+     0,     3,     4,     5,     6,     7,     0,     0,     9,    10,
+     8,     0,     0,     0,    11,    12,    13,    14,    15,    16,
+    17,    18,    19,    20,    21,    22,     0,    23,    24,     0,
+     0,     0,     0,    26,    27,    28,    29,    30,     0,     0,
+     9,    10,     0,    32,     0,     0,    11,    12,    13,    14,
+    15,    16,    17,    18,    19,    20,    21,    22,     0,    23,
+    24,     0,     0,     0,     0,    26,    27,    28,    29,    30,
+    49,    50,     0,     0,     0,    32,    52,    53,    54,    55,
+    56,    57,     0,     0,     0,     0,     0,     0,    58,     0,
+     0,     0,     0,     0,     0,    60,     0,     0,    62,    63,
+    64,    65,    49,    50,     0,     0,     0,     0,    52,    53,
+    54,    55,    56,    57,     3,     4,     5,     6,     7,     0,
+    58,     0,     0,     8,     0,     0,     0,    60,     0,     0,
+    62,    63,    64,    65,   160,   161,   162,   163,   164,   165,
+   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
+   176,   177,   178,     9,    10,     0,     0,     0,     0,    11,
+    12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+    22,     0,    23,    24,   154,   155,   156,     0,    26,    27,
+    28,   366,    30,     0,     0,     0,     0,     0,    32,     0,
+   157,     0,   158,   159,   160,   161,   162,   163,   164,   165,
+   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
+   176,   177,   178,     0,     0,    49,    50,     0,     0,     0,
+     0,    52,    53,    54,    55,    56,    57,     0,     0,     0,
+     0,     0,     0,    58,   154,   155,   156,     0,     0,     0,
+    60,     0,     0,    62,    63,    64,    65,     0,     0,     0,
+   157,   587,   158,   159,   160,   161,   162,   163,   164,   165,
+   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
+   176,   177,   178,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,   154,   155,   156,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+   157,   535,   158,   159,   160,   161,   162,   163,   164,   165,
+   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
+   176,   177,   178,-32768,-32768,-32768,-32768,   167,   168,   169,
+   170,   171,   172,   173,   174,   175,   176,   177,   178,   154,
+   155,   156,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,   157,   588,   158,   159,   160,
+   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
+   171,   172,   173,   174,   175,   176,   177,   178,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,   154,
+   155,   156,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,   157,   179,   158,   159,   160,
+   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
+   171,   172,   173,   174,   175,   176,   177,   178,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,   154,   155,   156,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+   157,   220,   158,   159,   160,   161,   162,   163,   164,   165,
+   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
+   176,   177,   178,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,   154,   155,   156,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+   157,   221,   158,   159,   160,   161,   162,   163,   164,   165,
+   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
+   176,   177,   178,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,   154,   155,
+   156,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,   157,   266,   158,   159,   160,   161,
+   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
+   172,   173,   174,   175,   176,   177,   178,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,   154,   155,
+   156,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,   157,   314,   158,   159,   160,   161,
+   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
+   172,   173,   174,   175,   176,   177,   178,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,   154,   155,   156,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,   157,   317,
+   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
+   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
+   178,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,   154,   155,   156,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,   157,   318,
+   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
+   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
+   178,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,   154,   155,   156,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,   157,   334,   158,   159,   160,   161,   162,   163,
+   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
+   174,   175,   176,   177,   178,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,   154,   155,   156,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,   157,   401,   158,   159,   160,   161,   162,   163,
+   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
+   174,   175,   176,   177,   178,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+   154,   155,   156,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,   157,   543,   158,   159,
+   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
+   170,   171,   172,   173,   174,   175,   176,   177,   178,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+   154,   155,   156,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,   157,   637,   158,   159,
+   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
+   170,   171,   172,   173,   174,   175,   176,   177,   178,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,   154,   155,   156,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+   157,   645,   158,   159,   160,   161,   162,   163,   164,   165,
+   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
+   176,   177,   178,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,   154,   155,   156,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,   157,   372,
+   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
+   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
+   178,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,   154,   155,   156,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,   157,   392,   158,   159,   160,   161,   162,   163,
+   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
+   174,   175,   176,   177,   178,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,   154,   155,   156,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+   157,   412,   158,   159,   160,   161,   162,   163,   164,   165,
+   166,   167,   168,   169,   170,   171,   172,   173,   174,   175,
+   176,   177,   178,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,   154,   155,
+   156,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,   157,   432,   158,   159,   160,   161,
+   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
+   172,   173,   174,   175,   176,   177,   178,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,   154,   155,   156,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,   157,   493,   158,   159,   160,   161,   162,   163,
+   164,   165,   166,   167,   168,   169,   170,   171,   172,   173,
+   174,   175,   176,   177,   178,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+   154,   155,   156,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,   157,   540,   158,   159,
+   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
+   170,   171,   172,   173,   174,   175,   176,   177,   178,   154,
+   155,   156,     0,     0,     0,     0,   360,     0,     0,     0,
+     0,     0,     0,     0,     0,   157,   434,   158,   159,   160,
+   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
+   171,   172,   173,   174,   175,   176,   177,   178,     0,     0,
+     0,     0,     0,   154,   155,   156,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,     0,     0,   157,
+   485,   158,   159,   160,   161,   162,   163,   164,   165,   166,
+   167,   168,   169,   170,   171,   172,   173,   174,   175,   176,
+   177,   178,   155,   156,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,     0,     0,     0,   157,     0,   158,
+   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
+   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
+   156,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+     0,     0,     0,     0,   157,     0,   158,   159,   160,   161,
+   162,   163,   164,   165,   166,   167,   168,   169,   170,   171,
+   172,   173,   174,   175,   176,   177,   178,   157,     0,   158,
+   159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
+   169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
+   158,   159,   160,   161,   162,   163,   164,   165,   166,   167,
+   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
+   178,   159,   160,   161,   162,   163,   164,   165,   166,   167,
+   168,   169,   170,   171,   172,   173,   174,   175,   176,   177,
+   178,   161,   162,   163,   164,   165,   166,   167,   168,   169,
+   170,   171,   172,   173,   174,   175,   176,   177,   178,   162,
+   163,   164,   165,   166,   167,   168,   169,   170,   171,   172,
+   173,   174,   175,   176,   177,   178
+};
+
+static const short yycheck[] = {     2,
+   127,    23,     3,     4,   402,     6,     7,     8,     9,    10,
+    11,    12,   112,   310,    15,    16,    17,    18,    19,    20,
+    21,     8,    26,     8,    26,     8,    60,     8,    60,   468,
+   233,    44,    33,     8,     8,    31,   309,   461,     0,    40,
+    41,    61,   315,    44,    69,   129,    71,   129,    69,    69,
+    71,    71,   129,    77,    71,    71,   129,     8,   245,    60,
+    13,    14,    13,    14,    15,    16,    17,    18,    19,    20,
+    21,    22,    23,    24,    71,    71,     8,     8,     8,     8,
+     8,    71,    71,   126,    60,    86,   129,   511,   129,   513,
+   112,    91,    92,   127,   110,   127,    90,    91,    92,    50,
+    51,    97,   127,   104,    71,   129,   119,   132,   109,   296,
+   111,   132,   132,   116,   136,   132,   132,   118,   119,   129,
+   121,    13,    14,   396,   129,   127,    69,   131,   128,   127,
+   127,    23,   108,   320,   128,   132,   129,   340,   341,    45,
+    46,    47,   132,   132,   131,   146,   131,   545,   131,   150,
+   131,   129,    44,   108,   155,   130,   130,   340,   341,   160,
+   161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
+   171,   172,   173,   174,   175,   176,   177,   178,   129,   130,
+   619,   182,   183,   184,   185,   186,   187,   188,   189,   190,
+   191,   192,   193,   632,   207,   196,   197,   494,   130,   130,
+   130,   130,   130,   406,   129,    31,   207,   208,    50,    51,
+   211,   129,   415,   416,    90,    91,    92,   404,   405,   129,
+   112,    91,    92,   406,    64,    65,    66,   119,   229,   129,
+    95,    96,   415,   416,    95,    96,    31,   102,   425,    77,
+   427,   102,    64,    65,   136,    71,    90,    91,    92,   141,
+   142,   143,   128,    69,   131,    71,    72,   258,   128,   446,
+    64,    65,   265,   128,    64,    65,    66,   128,   131,    13,
+   271,    97,   273,   274,   275,   276,   107,   128,   378,   129,
+   443,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+    45,    46,    47,   129,   457,    80,   309,    90,    91,    92,
+     8,   131,   315,    63,    64,    65,   509,    88,   309,    88,
+    69,    69,    69,   516,   315,   207,   130,    71,   521,   506,
+   523,   130,    69,   130,   127,     8,   509,    42,    43,    44,
+    45,    46,    47,   516,   136,    26,   130,     8,   521,   502,
+   523,   129,   129,    13,    13,   532,   129,   131,    69,    60,
+   128,    69,   244,   245,   129,   518,   378,   130,   108,   360,
+   130,   362,   129,   127,    13,   568,     8,   259,   130,   109,
+   131,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+    22,    23,    24,   396,   385,   568,   399,    13,   131,   131,
+   593,    71,   395,   596,    13,   396,    71,   129,   399,   526,
+   527,   402,   403,     8,   296,   408,   109,   130,    50,    51,
+   593,     8,    71,   596,   136,    87,   136,   309,   621,    13,
+   130,   130,    13,   315,   130,    81,   128,   131,   320,   130,
+   431,   131,   595,   131,    71,    71,   109,   127,   621,   440,
+   441,    69,    69,   129,   131,   608,    71,   450,   449,   130,
+    13,   614,    60,   131,   131,   347,    26,    66,    26,    66,
+   623,    69,   129,    71,    72,   628,    74,    75,    76,   129,
+    42,    43,    85,   128,   131,   638,   129,   131,   130,    83,
+   643,   482,   130,   127,   485,   131,   378,   129,   130,   128,
+   491,   131,   655,   656,     0,    67,    68,    69,     0,   347,
+   108,   582,   265,   586,   396,    77,   454,   399,   474,    82,
+   296,   471,   404,   405,   231,   123,   124,   125,   440,   127,
+   128,   492,   494,   480,   423,    -1,    -1,   419,   136,    -1,
+    -1,   423,    -1,   425,    -1,   427,    -1,    -1,    -1,   111,
+   112,   113,   114,   115,   545,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,   553,    -1,   446,    -1,    -1,    -1,    -1,    13,
+    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
+    24,    -1,    -1,   576,    13,    14,    15,    16,    17,    18,
+    19,    20,    21,    22,    23,    24,    -1,    -1,   480,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    50,    51,    -1,    -1,
+    -1,    -1,    -1,   604,    -1,    -1,     3,     4,     5,     6,
+     7,    50,    51,    -1,   506,    12,    -1,    -1,    -1,    -1,
+    -1,   622,    -1,   626,    32,    33,    34,    35,    36,    37,
+    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
+   532,    -1,    -1,   646,    -1,    42,    43,    -1,    -1,    88,
+    -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
+    57,    58,    59,    -1,    61,    62,    63,    -1,    -1,    -1,
+    67,    68,    69,    70,    71,   129,    73,   131,    -1,    -1,
+    77,    78,    79,    80,    -1,    82,    -1,    84,    -1,    86,
+   129,    -1,    89,    -1,    -1,    -1,    93,    94,    95,    96,
+    -1,    98,    99,   100,   101,    -1,   103,   104,   105,   106,
+    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,     3,
+     4,     5,     6,     7,    -1,   122,    -1,    -1,    12,    -1,
+   127,    -1,   129,    -1,   131,   132,   133,   134,   135,    -1,
+    -1,    -1,    26,    13,    14,    15,    16,    17,    18,    19,
+    20,    21,    22,    23,    24,    -1,    -1,    -1,    42,    43,
+    -1,    -1,    -1,    -1,    48,    49,    50,    51,    52,    53,
+    54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
+    50,    51,    -1,    67,    68,    69,    70,    71,    -1,    73,
+    -1,    -1,    -1,    77,    78,    79,    80,    -1,    82,    -1,
+    84,    -1,    86,    -1,    -1,    89,    -1,    -1,    -1,    93,
+    94,    -1,    -1,    -1,    98,    99,   100,   101,    -1,   103,
+   104,   105,    -1,    -1,    -1,    -1,   110,   111,   112,   113,
+   114,   115,     3,     4,     5,     6,     7,    -1,   122,    -1,
+    -1,    12,    -1,   127,    -1,   129,    -1,   131,   132,   133,
+   134,   135,    -1,    -1,    -1,    26,    -1,    -1,    -1,   129,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    42,    43,    -1,    -1,    -1,    -1,    48,    49,    50,
+    51,    52,    53,    54,    55,    56,    57,    58,    59,    -1,
+    61,    62,    63,    -1,    -1,    -1,    67,    68,    69,    70,
+    71,    -1,    73,    -1,    -1,    60,    77,    78,    79,    80,
+    -1,    82,    -1,    84,    69,    86,    71,    72,    89,    74,
+    75,    76,    93,    94,    -1,    -1,    -1,    98,    99,   100,
+   101,    -1,   103,   104,   105,    -1,    -1,    -1,    -1,   110,
+   111,   112,   113,   114,   115,     3,     4,     5,     6,     7,
+    -1,   122,    -1,   108,    12,    -1,   127,    -1,   129,    -1,
+   131,   132,   133,   134,   135,    -1,    -1,    -1,    26,   124,
+   125,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
+    -1,   136,    -1,    -1,    42,    43,    -1,    -1,    -1,    -1,
+    48,    49,    50,    51,    52,    53,    54,    55,    56,    57,
+    58,    59,    -1,    61,    62,    63,    -1,    -1,    -1,    67,
+    68,    69,    70,    71,    -1,    73,    -1,    -1,    60,    77,
+    78,    79,    80,    -1,    82,    -1,    84,    69,    86,    71,
+    72,    89,    74,    75,    76,    93,    94,    -1,    -1,    -1,
+    98,    99,   100,   101,    -1,   103,   104,   105,    -1,    -1,
+    -1,    -1,   110,   111,   112,   113,   114,   115,     3,     4,
+     5,     6,     7,    -1,   122,    -1,   108,    12,    -1,   127,
+    -1,   129,    -1,   131,   132,   133,   134,   135,    -1,    -1,
+    -1,    26,   124,   125,    -1,   127,   128,    -1,    -1,    -1,
+    -1,    -1,   134,    -1,   136,    -1,    -1,    42,    43,    -1,
+    -1,    -1,    -1,    48,    49,    50,    51,    52,    53,    54,
+    55,    56,    57,    58,    59,    -1,    61,    62,    63,    -1,
+    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    -1,
+    -1,    60,    77,    78,    79,    80,    -1,    82,    -1,    84,
+    69,    86,    71,    72,    89,    74,    75,    76,    93,    94,
+    -1,    -1,    -1,    98,    99,   100,   101,    -1,   103,   104,
+   105,    -1,    -1,    -1,    -1,   110,   111,   112,   113,   114,
+   115,     3,     4,     5,     6,     7,    -1,   122,    -1,   108,
+    12,    -1,   127,    -1,   129,    -1,   131,   132,   133,   134,
+   135,    -1,    -1,    -1,    -1,   124,   125,    -1,   127,   128,
+    -1,    -1,    -1,    -1,    -1,    -1,   135,   136,    -1,    -1,
+    42,    43,    -1,    -1,    -1,    -1,    48,    49,    50,    51,
+    52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
+    62,    63,    -1,    -1,    -1,    67,    68,    69,    70,    71,
+    -1,    73,    -1,    -1,    -1,    77,    78,    79,    80,    -1,
+    82,    -1,    84,    -1,    86,    -1,    -1,    89,    -1,    -1,
+    -1,    93,    94,    -1,    -1,    -1,    98,    99,   100,   101,
+    -1,   103,   104,   105,    -1,    -1,    -1,    -1,   110,   111,
+   112,   113,   114,   115,     3,     4,     5,     6,     7,    -1,
+   122,    -1,    -1,    12,    -1,   127,    -1,   129,    -1,   131,
+   132,   133,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,
+     7,    -1,    -1,    42,    43,    12,    -1,    -1,    -1,    48,
+    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
+    59,    -1,    61,    62,    -1,    -1,    -1,    -1,    67,    68,
+    69,    70,    71,    -1,    -1,    42,    43,    -1,    77,    -1,
+    -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
+    57,    58,    59,    -1,    61,    62,    -1,    -1,    -1,    -1,
+    67,    68,    69,    70,    71,   104,   105,    -1,    -1,    -1,
+    77,   110,   111,   112,   113,   114,   115,    -1,    -1,    -1,
+    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,
+   129,    -1,   131,   132,   133,   134,   135,   104,   105,    -1,
+    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,     3,
+     4,     5,     6,     7,    -1,   122,    -1,    -1,    12,    -1,
+    -1,    -1,   129,    -1,   131,   132,   133,   134,   135,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,     3,     4,     5,     6,     7,    -1,    -1,    42,    43,
+    12,    -1,    -1,    -1,    48,    49,    50,    51,    52,    53,
+    54,    55,    56,    57,    58,    59,    -1,    61,    62,    -1,
+    -1,    -1,    -1,    67,    68,    69,    70,    71,    -1,    -1,
+    42,    43,    -1,    77,    -1,    -1,    48,    49,    50,    51,
+    52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
+    62,    -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,
+   104,   105,    -1,    -1,    -1,    77,   110,   111,   112,   113,
+   114,   115,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,
+    -1,    -1,    -1,    -1,    -1,   129,    -1,   131,   132,   133,
+   134,   135,   104,   105,    -1,    -1,    -1,    -1,   110,   111,
+   112,   113,   114,   115,     3,     4,     5,     6,     7,    -1,
+   122,    -1,    -1,    12,    -1,    -1,    -1,   129,   130,    -1,
+   132,   133,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    31,    -1,    -1,    -1,     3,     4,     5,     6,
+     7,    -1,    -1,    42,    43,    12,    -1,    -1,    -1,    48,
+    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
+    59,    -1,    61,    62,    31,    -1,    -1,    -1,    67,    68,
+    69,    70,    71,    -1,    -1,    42,    43,    -1,    77,    -1,
+    -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
+    57,    58,    59,    -1,    61,    62,    -1,    -1,    -1,    -1,
+    67,    68,    69,    70,    71,   104,   105,    -1,    -1,    -1,
+    77,   110,   111,   112,   113,   114,   115,    -1,    -1,    -1,
+    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,
+   129,    -1,    -1,   132,   133,   134,   135,   104,   105,    -1,
+    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,     3,
+     4,     5,     6,     7,    -1,   122,    -1,    -1,    12,    -1,
+    -1,    -1,   129,    -1,    -1,   132,   133,   134,   135,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
+    -1,     3,     4,     5,     6,     7,    -1,    -1,    42,    43,
+    12,    -1,    -1,    -1,    48,    49,    50,    51,    52,    53,
+    54,    55,    56,    57,    58,    59,    -1,    61,    62,    31,
+    -1,    -1,    -1,    67,    68,    69,    70,    71,    -1,    -1,
+    42,    43,    -1,    77,    -1,    -1,    48,    49,    50,    51,
+    52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
+    62,    -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,
+   104,   105,    -1,    -1,    -1,    77,   110,   111,   112,   113,
+   114,   115,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,
+    -1,    -1,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
+   134,   135,   104,   105,    -1,    -1,    -1,    -1,   110,   111,
+   112,   113,   114,   115,     3,     4,     5,     6,     7,    -1,
+   122,    -1,    -1,    12,    -1,    -1,    -1,   129,    -1,    -1,
+   132,   133,   134,   135,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    31,    -1,    -1,    -1,     3,     4,     5,     6,
+     7,    -1,    -1,    42,    43,    12,    -1,    -1,    -1,    48,
+    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
+    59,    -1,    61,    62,    31,    -1,    -1,    -1,    67,    68,
+    69,    70,    71,    -1,    -1,    42,    43,    -1,    77,    -1,
+    -1,    48,    49,    50,    51,    52,    53,    54,    55,    56,
+    57,    58,    59,    -1,    61,    62,    -1,    -1,    -1,    -1,
+    67,    68,    69,    70,    71,   104,   105,    -1,    -1,    -1,
+    77,   110,   111,   112,   113,   114,   115,    -1,    -1,    -1,
+    -1,    -1,    -1,   122,    -1,    -1,    -1,    -1,    -1,    -1,
+   129,    -1,    -1,   132,   133,   134,   135,   104,   105,    -1,
+    -1,    -1,    -1,   110,   111,   112,   113,   114,   115,     3,
+     4,     5,     6,     7,    -1,   122,    -1,    -1,    12,    -1,
+    -1,    -1,   129,    -1,    -1,   132,   133,   134,   135,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    31,    -1,    -1,
+    -1,     3,     4,     5,     6,     7,    -1,    -1,    42,    43,
+    12,    -1,    -1,    -1,    48,    49,    50,    51,    52,    53,
+    54,    55,    56,    57,    58,    59,    -1,    61,    62,    -1,
+    -1,    -1,    -1,    67,    68,    69,    70,    71,    -1,    -1,
+    42,    43,    -1,    77,    -1,    -1,    48,    49,    50,    51,
+    52,    53,    54,    55,    56,    57,    58,    59,    -1,    61,
+    62,    -1,    -1,    -1,    -1,    67,    68,    69,    70,    71,
+   104,   105,    -1,    -1,    -1,    77,   110,   111,   112,   113,
+   114,   115,    -1,    -1,    -1,    -1,    -1,    -1,   122,    -1,
+    -1,    -1,    -1,    -1,    -1,   129,    -1,    -1,   132,   133,
+   134,   135,   104,   105,    -1,    -1,    -1,    -1,   110,   111,
+   112,   113,   114,   115,     3,     4,     5,     6,     7,    -1,
+   122,    -1,    -1,    12,    -1,    -1,    -1,   129,    -1,    -1,
+   132,   133,   134,   135,    29,    30,    31,    32,    33,    34,
+    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+    45,    46,    47,    42,    43,    -1,    -1,    -1,    -1,    48,
+    49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
+    59,    -1,    61,    62,     9,    10,    11,    -1,    67,    68,
+    69,    70,    71,    -1,    -1,    -1,    -1,    -1,    77,    -1,
+    25,    -1,    27,    28,    29,    30,    31,    32,    33,    34,
+    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+    45,    46,    47,    -1,    -1,   104,   105,    -1,    -1,    -1,
+    -1,   110,   111,   112,   113,   114,   115,    -1,    -1,    -1,
+    -1,    -1,    -1,   122,     9,    10,    11,    -1,    -1,    -1,
+   129,    -1,    -1,   132,   133,   134,   135,    -1,    -1,    -1,
+    25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
+    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,     9,    10,    11,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    25,   136,    27,    28,    29,    30,    31,    32,    33,    34,
+    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+    45,    46,    47,    32,    33,    34,    35,    36,    37,    38,
+    39,    40,    41,    42,    43,    44,    45,    46,    47,     9,
+    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    25,   131,    27,    28,    29,
+    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
+    40,    41,    42,    43,    44,    45,    46,    47,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,
+    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    25,   131,    27,    28,    29,
+    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
+    40,    41,    42,    43,    44,    45,    46,    47,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,     9,    10,    11,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    25,   131,    27,    28,    29,    30,    31,    32,    33,    34,
+    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,     9,    10,    11,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    25,   131,    27,    28,    29,    30,    31,    32,    33,    34,
+    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,
+    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    25,   130,    27,    28,    29,    30,
+    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
+    41,    42,    43,    44,    45,    46,    47,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,
+    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    25,   130,    27,    28,    29,    30,
+    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
+    41,    42,    43,    44,    45,    46,    47,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,   130,
+    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
+    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
+    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,   130,
+    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
+    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
+    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    25,   130,    27,    28,    29,    30,    31,    32,
+    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    25,   130,    27,    28,    29,    30,    31,    32,
+    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    25,   130,    27,    28,
+    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+    39,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    25,   130,    27,    28,
+    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+    39,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,     9,    10,    11,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    25,   130,    27,    28,    29,    30,    31,    32,    33,    34,
+    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,     9,    10,    11,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,   128,
+    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
+    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
+    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    25,   128,    27,    28,    29,    30,    31,    32,
+    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,     9,    10,    11,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    25,   128,    27,    28,    29,    30,    31,    32,    33,    34,
+    35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
+    45,    46,    47,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,
+    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    25,   128,    27,    28,    29,    30,
+    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
+    41,    42,    43,    44,    45,    46,    47,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,     9,    10,    11,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    25,   128,    27,    28,    29,    30,    31,    32,
+    33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+    43,    44,    45,    46,    47,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+     9,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    25,   128,    27,    28,
+    29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+    39,    40,    41,    42,    43,    44,    45,    46,    47,     9,
+    10,    11,    -1,    -1,    -1,    -1,   109,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    25,    26,    27,    28,    29,
+    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
+    40,    41,    42,    43,    44,    45,    46,    47,    -1,    -1,
+    -1,    -1,    -1,     9,    10,    11,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,
+   109,    27,    28,    29,    30,    31,    32,    33,    34,    35,
+    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
+    46,    47,    10,    11,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    -1,    -1,    -1,    25,    -1,    27,
+    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
+    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
+    11,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
+    -1,    -1,    -1,    -1,    25,    -1,    27,    28,    29,    30,
+    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
+    41,    42,    43,    44,    45,    46,    47,    25,    -1,    27,
+    28,    29,    30,    31,    32,    33,    34,    35,    36,    37,
+    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
+    27,    28,    29,    30,    31,    32,    33,    34,    35,    36,
+    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
+    47,    28,    29,    30,    31,    32,    33,    34,    35,    36,
+    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
+    47,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+    39,    40,    41,    42,    43,    44,    45,    46,    47,    31,
+    32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
+    42,    43,    44,    45,    46,    47
+};
+#define YYPURE 1
+
+/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
+#line 3 "bison.simple"
+/* This file comes from bison-1.27.  */
+
+/* Skeleton output parser for bison,
+   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
+
+/* As a special exception, when this file is copied by Bison into a
+   Bison output file, you may use that output file without restriction.
+   This special exception was added by the Free Software Foundation
+   in version 1.24 of Bison.  */
+
+/* This is the parser code that is written into each bison parser
+  when the %semantic_parser declaration is not specified in the grammar.
+  It was written by Richard Stallman by simplifying the hairy parser
+  used when %semantic_parser is specified.  */
+
+#ifndef YYSTACK_USE_ALLOCA
+#ifdef alloca
+#define YYSTACK_USE_ALLOCA
+#else /* alloca not defined */
+#ifdef __GNUC__
+#define YYSTACK_USE_ALLOCA
+#define alloca __builtin_alloca
+#else /* not GNU C.  */
+#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
+#define YYSTACK_USE_ALLOCA
+#include <alloca.h>
+#else /* not sparc */
+/* We think this test detects Watcom and Microsoft C.  */
+/* This used to test MSDOS, but that is a bad idea
+   since that symbol is in the user namespace.  */
+#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
+#if 0 /* No need for malloc.h, which pollutes the namespace;
+	 instead, just don't use alloca.  */
+#include <malloc.h>
+#endif
+#else /* not MSDOS, or __TURBOC__ */
+#if defined(_AIX)
+/* I don't know what this was needed for, but it pollutes the namespace.
+   So I turned it off.   rms, 2 May 1997.  */
+/* #include <malloc.h>  */
+ #pragma alloca
+#define YYSTACK_USE_ALLOCA
+#else /* not MSDOS, or __TURBOC__, or _AIX */
+#if 0
+#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
+		 and on HPUX 10.  Eventually we can turn this on.  */
+#define YYSTACK_USE_ALLOCA
+#define alloca __builtin_alloca
+#endif /* __hpux */
+#endif
+#endif /* not _AIX */
+#endif /* not MSDOS, or __TURBOC__ */
+#endif /* not sparc */
+#endif /* not GNU C */
+#endif /* alloca not defined */
+#endif /* YYSTACK_USE_ALLOCA not defined */
+
+#ifdef YYSTACK_USE_ALLOCA
+#define YYSTACK_ALLOC alloca
+#else
+#define YYSTACK_ALLOC malloc
+#endif
+
+/* Note: there must be only one dollar sign in this file.
+   It is replaced by the list of actions, each action
+   as one case of the switch.  */
+
+#define yyerrok		(yyerrstatus = 0)
+#define yyclearin	(yychar = YYEMPTY)
+#define YYEMPTY		-2
+#define YYEOF		0
+#define YYACCEPT	goto yyacceptlab
+#define YYABORT 	goto yyabortlab
+#define YYERROR		goto yyerrlab1
+/* Like YYERROR except do call yyerror.
+   This remains here temporarily to ease the
+   transition to the new meaning of YYERROR, for GCC.
+   Once GCC version 2 has supplanted version 1, this can go.  */
+#define YYFAIL		goto yyerrlab
+#define YYRECOVERING()  (!!yyerrstatus)
+#define YYBACKUP(token, value) \
+do								\
+  if (yychar == YYEMPTY && yylen == 1)				\
+    { yychar = (token), yylval = (value);			\
+      yychar1 = YYTRANSLATE (yychar);				\
+      YYPOPSTACK;						\
+      goto yybackup;						\
+    }								\
+  else								\
+    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
+while (0)
+
+#define YYTERROR	1
+#define YYERRCODE	256
+
+#ifndef YYPURE
+#define YYLEX		yylex()
+#endif
+
+#ifdef YYPURE
+#ifdef YYLSP_NEEDED
+#ifdef YYLEX_PARAM
+#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
+#else
+#define YYLEX		yylex(&yylval, &yylloc)
+#endif
+#else /* not YYLSP_NEEDED */
+#ifdef YYLEX_PARAM
+#define YYLEX		yylex(&yylval, YYLEX_PARAM)
+#else
+#define YYLEX		yylex(&yylval)
+#endif
+#endif /* not YYLSP_NEEDED */
+#endif
+
+/* If nonreentrant, generate the variables here */
+
+#ifndef YYPURE
+
+int	yychar;			/*  the lookahead symbol		*/
+YYSTYPE	yylval;			/*  the semantic value of the		*/
+				/*  lookahead symbol			*/
+
+#ifdef YYLSP_NEEDED
+YYLTYPE yylloc;			/*  location data for the lookahead	*/
+				/*  symbol				*/
+#endif
+
+int yynerrs;			/*  number of parse errors so far       */
+#endif  /* not YYPURE */
+
+#if YYDEBUG != 0
+int yydebug;			/*  nonzero means print parse trace	*/
+/* Since this is uninitialized, it does not stop multiple parsers
+   from coexisting.  */
+#endif
+
+/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/
+
+#ifndef	YYINITDEPTH
+#define YYINITDEPTH 200
+#endif
+
+/*  YYMAXDEPTH is the maximum size the stacks can grow to
+    (effective only if the built-in stack extension method is used).  */
+
+#if YYMAXDEPTH == 0
+#undef YYMAXDEPTH
+#endif
+
+#ifndef YYMAXDEPTH
+#define YYMAXDEPTH 10000
+#endif
+
+/* Define __yy_memcpy.  Note that the size argument
+   should be passed with type unsigned int, because that is what the non-GCC
+   definitions require.  With GCC, __builtin_memcpy takes an arg
+   of type size_t, but it can handle unsigned int.  */
+
+#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
+#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
+#else				/* not GNU C or C++ */
+#ifndef __cplusplus
+
+/* This is the most reliable way to avoid incompatibilities
+   in available built-in functions on various systems.  */
+static void
+__yy_memcpy (to, from, count)
+     char *to;
+     char *from;
+     unsigned int count;
+{
+  register char *f = from;
+  register char *t = to;
+  register int i = count;
+
+  while (i-- > 0)
+    *t++ = *f++;
+}
+
+#else /* __cplusplus */
+
+/* This is the most reliable way to avoid incompatibilities
+   in available built-in functions on various systems.  */
+static void
+__yy_memcpy (char *to, char *from, unsigned int count)
+{
+  register char *t = to;
+  register char *f = from;
+  register int i = count;
+
+  while (i-- > 0)
+    *t++ = *f++;
+}
+
+#endif
+#endif
+
+#line 216 "bison.simple"
+
+/* The user can define YYPARSE_PARAM as the name of an argument to be passed
+   into yyparse.  The argument should have type void *.
+   It should actually point to an object.
+   Grammar actions can access the variable by casting it
+   to the proper pointer type.  */
+
+#ifdef YYPARSE_PARAM
+#ifdef __cplusplus
+#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
+#define YYPARSE_PARAM_DECL
+#else /* not __cplusplus */
+#define YYPARSE_PARAM_ARG YYPARSE_PARAM
+#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
+#endif /* not __cplusplus */
+#else /* not YYPARSE_PARAM */
+#define YYPARSE_PARAM_ARG
+#define YYPARSE_PARAM_DECL
+#endif /* not YYPARSE_PARAM */
+
+/* Prevent warning if -Wstrict-prototypes.  */
+#ifdef __GNUC__
+#ifdef YYPARSE_PARAM
+int yyparse (void *);
+#else
+int yyparse (void);
+#endif
+#endif
+
+int
+yyparse(YYPARSE_PARAM_ARG)
+     YYPARSE_PARAM_DECL
+{
+  register int yystate;
+  register int yyn;
+  register short *yyssp;
+  register YYSTYPE *yyvsp;
+  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
+  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */
+
+  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
+  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/
+
+  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
+  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */
+
+#ifdef YYLSP_NEEDED
+  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
+  YYLTYPE *yyls = yylsa;
+  YYLTYPE *yylsp;
+
+#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
+#else
+#define YYPOPSTACK   (yyvsp--, yyssp--)
+#endif
+
+  int yystacksize = YYINITDEPTH;
+  int yyfree_stacks = 0;
+
+#ifdef YYPURE
+  int yychar;
+  YYSTYPE yylval;
+  int yynerrs;
+#ifdef YYLSP_NEEDED
+  YYLTYPE yylloc;
+#endif
+#endif
+
+  YYSTYPE yyval;		/*  the variable used to return		*/
+				/*  semantic values from the action	*/
+				/*  routines				*/
+
+  int yylen;
+
+#if YYDEBUG != 0
+  if (yydebug)
+    fprintf(stderr, "Starting parse\n");
+#endif
+
+  yystate = 0;
+  yyerrstatus = 0;
+  yynerrs = 0;
+  yychar = YYEMPTY;		/* Cause a token to be read.  */
+
+  /* Initialize stack pointers.
+     Waste one element of value and location stack
+     so that they stay on the same level as the state stack.
+     The wasted elements are never initialized.  */
+
+  yyssp = yyss - 1;
+  yyvsp = yyvs;
+#ifdef YYLSP_NEEDED
+  yylsp = yyls;
+#endif
+
+/* Push a new state, which is found in  yystate  .  */
+/* In all cases, when you get here, the value and location stacks
+   have just been pushed. so pushing a state here evens the stacks.  */
+yynewstate:
+
+  *++yyssp = yystate;
+
+  if (yyssp >= yyss + yystacksize - 1)
+    {
+      /* Give user a chance to reallocate the stack */
+      /* Use copies of these so that the &'s don't force the real ones into memory. */
+      YYSTYPE *yyvs1 = yyvs;
+      short *yyss1 = yyss;
+#ifdef YYLSP_NEEDED
+      YYLTYPE *yyls1 = yyls;
+#endif
+
+      /* Get the current used size of the three stacks, in elements.  */
+      int size = yyssp - yyss + 1;
+
+#ifdef yyoverflow
+      /* Each stack pointer address is followed by the size of
+	 the data in use in that stack, in bytes.  */
+#ifdef YYLSP_NEEDED
+      /* This used to be a conditional around just the two extra args,
+	 but that might be undefined if yyoverflow is a macro.  */
+      yyoverflow("parser stack overflow",
+		 &yyss1, size * sizeof (*yyssp),
+		 &yyvs1, size * sizeof (*yyvsp),
+		 &yyls1, size * sizeof (*yylsp),
+		 &yystacksize);
+#else
+      yyoverflow("parser stack overflow",
+		 &yyss1, size * sizeof (*yyssp),
+		 &yyvs1, size * sizeof (*yyvsp),
+		 &yystacksize);
+#endif
+
+      yyss = yyss1; yyvs = yyvs1;
+#ifdef YYLSP_NEEDED
+      yyls = yyls1;
+#endif
+#else /* no yyoverflow */
+      /* Extend the stack our own way.  */
+      if (yystacksize >= YYMAXDEPTH)
+	{
+	  yyerror("parser stack overflow");
+	  if (yyfree_stacks)
+	    {
+	      free (yyss);
+	      free (yyvs);
+#ifdef YYLSP_NEEDED
+	      free (yyls);
+#endif
+	    }
+	  return 2;
+	}
+      yystacksize *= 2;
+      if (yystacksize > YYMAXDEPTH)
+	yystacksize = YYMAXDEPTH;
+#ifndef YYSTACK_USE_ALLOCA
+      yyfree_stacks = 1;
+#endif
+      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
+      __yy_memcpy ((char *)yyss, (char *)yyss1,
+		   size * (unsigned int) sizeof (*yyssp));
+      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
+      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
+		   size * (unsigned int) sizeof (*yyvsp));
+#ifdef YYLSP_NEEDED
+      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
+      __yy_memcpy ((char *)yyls, (char *)yyls1,
+		   size * (unsigned int) sizeof (*yylsp));
+#endif
+#endif /* no yyoverflow */
+
+      yyssp = yyss + size - 1;
+      yyvsp = yyvs + size - 1;
+#ifdef YYLSP_NEEDED
+      yylsp = yyls + size - 1;
+#endif
+
+#if YYDEBUG != 0
+      if (yydebug)
+	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
+#endif
+
+      if (yyssp >= yyss + yystacksize - 1)
+	YYABORT;
+    }
+
+#if YYDEBUG != 0
+  if (yydebug)
+    fprintf(stderr, "Entering state %d\n", yystate);
+#endif
+
+  goto yybackup;
+ yybackup:
+
+/* Do appropriate processing given the current state.  */
+/* Read a lookahead token if we need one and don't already have one.  */
+/* yyresume: */
+
+  /* First try to decide what to do without reference to lookahead token.  */
+
+  yyn = yypact[yystate];
+  if (yyn == YYFLAG)
+    goto yydefault;
+
+  /* Not known => get a lookahead token if don't already have one.  */
+
+  /* yychar is either YYEMPTY or YYEOF
+     or a valid token in external form.  */
+
+  if (yychar == YYEMPTY)
+    {
+#if YYDEBUG != 0
+      if (yydebug)
+	fprintf(stderr, "Reading a token: ");
+#endif
+      yychar = YYLEX;
+    }
+
+  /* Convert token to internal form (in yychar1) for indexing tables with */
+
+  if (yychar <= 0)		/* This means end of input. */
+    {
+      yychar1 = 0;
+      yychar = YYEOF;		/* Don't call YYLEX any more */
+
+#if YYDEBUG != 0
+      if (yydebug)
+	fprintf(stderr, "Now at end of input.\n");
+#endif
+    }
+  else
+    {
+      yychar1 = YYTRANSLATE(yychar);
+
+#if YYDEBUG != 0
+      if (yydebug)
+	{
+	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
+	  /* Give the individual parser a way to print the precise meaning
+	     of a token, for further debugging info.  */
+#ifdef YYPRINT
+	  YYPRINT (stderr, yychar, yylval);
+#endif
+	  fprintf (stderr, ")\n");
+	}
+#endif
+    }
+
+  yyn += yychar1;
+  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
+    goto yydefault;
+
+  yyn = yytable[yyn];
+
+  /* yyn is what to do for this token type in this state.
+     Negative => reduce, -yyn is rule number.
+     Positive => shift, yyn is new state.
+       New state is final state => don't bother to shift,
+       just return success.
+     0, or most negative number => error.  */
+
+  if (yyn < 0)
+    {
+      if (yyn == YYFLAG)
+	goto yyerrlab;
+      yyn = -yyn;
+      goto yyreduce;
+    }
+  else if (yyn == 0)
+    goto yyerrlab;
+
+  if (yyn == YYFINAL)
+    YYACCEPT;
+
+  /* Shift the lookahead token.  */
+
+#if YYDEBUG != 0
+  if (yydebug)
+    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
+#endif
+
+  /* Discard the token being shifted unless it is eof.  */
+  if (yychar != YYEOF)
+    yychar = YYEMPTY;
+
+  *++yyvsp = yylval;
+#ifdef YYLSP_NEEDED
+  *++yylsp = yylloc;
+#endif
+
+  /* count tokens shifted since error; after three, turn off error status.  */
+  if (yyerrstatus) yyerrstatus--;
+
+  yystate = yyn;
+  goto yynewstate;
+
+/* Do the default action for the current state.  */
+yydefault:
+
+  yyn = yydefact[yystate];
+  if (yyn == 0)
+    goto yyerrlab;
+
+/* Do a reduction.  yyn is the number of a rule to reduce with.  */
+yyreduce:
+  yylen = yyr2[yyn];
+  if (yylen > 0)
+    yyval = yyvsp[1-yylen]; /* implement default value of the action */
+
+#if YYDEBUG != 0
+  if (yydebug)
+    {
+      int i;
+
+      fprintf (stderr, "Reducing via rule %d (line %d), ",
+	       yyn, yyrline[yyn]);
+
+      /* Print the symbols being reduced, and their result.  */
+      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
+	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
+      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
+    }
+#endif
+
+
+  switch (yyn) {
+
+case 2:
+#line 144 "zend_language_parser.y"
+{ zend_do_extended_info(TSRMLS_C); ;
+    break;}
+case 3:
+#line 144 "zend_language_parser.y"
+{ HANDLE_INTERACTIVE(); ;
+    break;}
+case 6:
+#line 151 "zend_language_parser.y"
+{ zend_do_early_binding(TSRMLS_C); ;
+    break;}
+case 7:
+#line 156 "zend_language_parser.y"
+{ zend_do_extended_info(TSRMLS_C); ;
+    break;}
+case 8:
+#line 156 "zend_language_parser.y"
+{ HANDLE_INTERACTIVE(); ;
+    break;}
+case 12:
+#line 168 "zend_language_parser.y"
+{ zend_do_ticks(TSRMLS_C); ;
+    break;}
+case 14:
+#line 174 "zend_language_parser.y"
+{ zend_do_if_cond(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 15:
+#line 174 "zend_language_parser.y"
+{ zend_do_if_after_statement(&yyvsp[-2], 1 TSRMLS_CC); ;
+    break;}
+case 16:
+#line 174 "zend_language_parser.y"
+{ zend_do_if_end(TSRMLS_C); ;
+    break;}
+case 17:
+#line 175 "zend_language_parser.y"
+{ zend_do_if_cond(&yyvsp[-2], &yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 18:
+#line 175 "zend_language_parser.y"
+{ zend_do_if_after_statement(&yyvsp[-3], 1 TSRMLS_CC); ;
+    break;}
+case 19:
+#line 175 "zend_language_parser.y"
+{ zend_do_if_end(TSRMLS_C); ;
+    break;}
+case 20:
+#line 176 "zend_language_parser.y"
+{ yyvsp[-1].u.opline_num = get_next_op_number(CG(active_op_array));  ;
+    break;}
+case 21:
+#line 176 "zend_language_parser.y"
+{ zend_do_while_cond(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 22:
+#line 176 "zend_language_parser.y"
+{ zend_do_while_end(&yyvsp[-6], &yyvsp[-2] TSRMLS_CC); ;
+    break;}
+case 23:
+#line 177 "zend_language_parser.y"
+{ yyvsp[0].u.opline_num = get_next_op_number(CG(active_op_array));  zend_do_do_while_begin(TSRMLS_C); ;
+    break;}
+case 24:
+#line 177 "zend_language_parser.y"
+{ yyvsp[0].u.opline_num = get_next_op_number(CG(active_op_array)); ;
+    break;}
+case 25:
+#line 177 "zend_language_parser.y"
+{ zend_do_do_while_end(&yyvsp[-8], &yyvsp[-4], &yyvsp[-2] TSRMLS_CC); ;
+    break;}
+case 26:
+#line 181 "zend_language_parser.y"
+{ zend_do_free(&yyvsp[-1] TSRMLS_CC); yyvsp[0].u.opline_num = get_next_op_number(CG(active_op_array)); ;
+    break;}
+case 27:
+#line 183 "zend_language_parser.y"
+{ zend_do_extended_info(TSRMLS_C); zend_do_for_cond(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 28:
+#line 185 "zend_language_parser.y"
+{ zend_do_free(&yyvsp[-1] TSRMLS_CC); zend_do_for_before_statement(&yyvsp[-6], &yyvsp[-3] TSRMLS_CC); ;
+    break;}
+case 29:
+#line 186 "zend_language_parser.y"
+{ zend_do_for_end(&yyvsp[-5] TSRMLS_CC); ;
+    break;}
+case 30:
+#line 187 "zend_language_parser.y"
+{ zend_do_switch_cond(&yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 31:
+#line 187 "zend_language_parser.y"
+{ zend_do_switch_end(&yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 32:
+#line 188 "zend_language_parser.y"
+{ zend_do_brk_cont(ZEND_BRK, NULL TSRMLS_CC); ;
+    break;}
+case 33:
+#line 189 "zend_language_parser.y"
+{ zend_do_brk_cont(ZEND_BRK, &yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 34:
+#line 190 "zend_language_parser.y"
+{ zend_do_brk_cont(ZEND_CONT, NULL TSRMLS_CC); ;
+    break;}
+case 35:
+#line 191 "zend_language_parser.y"
+{ zend_do_brk_cont(ZEND_CONT, &yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 36:
+#line 192 "zend_language_parser.y"
+{ zend_do_return(NULL, 0 TSRMLS_CC); ;
+    break;}
+case 37:
+#line 193 "zend_language_parser.y"
+{ zend_do_return(&yyvsp[-1], 0 TSRMLS_CC); ;
+    break;}
+case 38:
+#line 194 "zend_language_parser.y"
+{ zend_do_return(&yyvsp[-1], 1 TSRMLS_CC); ;
+    break;}
+case 42:
+#line 198 "zend_language_parser.y"
+{ zend_do_echo(&yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 43:
+#line 199 "zend_language_parser.y"
+{ zend_do_free(&yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 44:
+#line 200 "zend_language_parser.y"
+{ zend_error(E_COMPILE_ERROR,"use: Not yet supported. Please use include_once() or require_once()");  zval_dtor(&yyvsp[-1].u.constant); ;
+    break;}
+case 46:
+#line 202 "zend_language_parser.y"
+{ zend_do_foreach_begin(&yyvsp[-3], &yyvsp[-1], &yyvsp[-2], &yyvsp[0], 1 TSRMLS_CC); ;
+    break;}
+case 47:
+#line 202 "zend_language_parser.y"
+{ zend_do_foreach_cont(&yyvsp[-2], &yyvsp[-1], &yyvsp[-4], &yyvsp[-7] TSRMLS_CC); ;
+    break;}
+case 48:
+#line 202 "zend_language_parser.y"
+{ zend_do_foreach_end(&yyvsp[-9], &yyvsp[-8] TSRMLS_CC); ;
+    break;}
+case 49:
+#line 203 "zend_language_parser.y"
+{ zend_do_foreach_begin(&yyvsp[-3], &yyvsp[-1], &yyvsp[-2], &yyvsp[0], 0 TSRMLS_CC); ;
+    break;}
+case 50:
+#line 203 "zend_language_parser.y"
+{ zend_do_foreach_cont(&yyvsp[-2], &yyvsp[-1], &yyvsp[-4], &yyvsp[-7] TSRMLS_CC); ;
+    break;}
+case 51:
+#line 203 "zend_language_parser.y"
+{ zend_do_foreach_end(&yyvsp[-9], &yyvsp[-8] TSRMLS_CC); ;
+    break;}
+case 52:
+#line 204 "zend_language_parser.y"
+{ yyvsp[0].u.opline_num = get_next_op_number(CG(active_op_array)); zend_do_declare_begin(TSRMLS_C); ;
+    break;}
+case 53:
+#line 204 "zend_language_parser.y"
+{zend_do_declare_end(&yyvsp[-5] TSRMLS_CC); ;
+    break;}
+case 57:
+#line 214 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_UNSET, 0 TSRMLS_CC); zend_do_unset(&yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 58:
+#line 218 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 59:
+#line 219 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; ;
+    break;}
+case 60:
+#line 224 "zend_language_parser.y"
+{ zend_do_ticks(TSRMLS_C); ;
+    break;}
+case 61:
+#line 229 "zend_language_parser.y"
+{ yyvsp[0].u.opline_num = CG(zend_lineno); ;
+    break;}
+case 62:
+#line 229 "zend_language_parser.y"
+{ zend_do_begin_function_declaration(&yyvsp[-3], &yyvsp[0], 0, yyvsp[-1].op_type TSRMLS_CC); ;
+    break;}
+case 63:
+#line 230 "zend_language_parser.y"
+{ zend_do_end_function_declaration(&yyvsp[-10] TSRMLS_CC); ;
+    break;}
+case 64:
+#line 231 "zend_language_parser.y"
+{ yyvsp[0].u.opline_num = CG(zend_lineno); ;
+    break;}
+case 65:
+#line 231 "zend_language_parser.y"
+{ zend_do_begin_function_declaration(&yyvsp[-3], &yyvsp[0], 0, yyvsp[-1].op_type TSRMLS_CC); ;
+    break;}
+case 66:
+#line 232 "zend_language_parser.y"
+{ zend_do_end_function_declaration(&yyvsp[-9] TSRMLS_CC); ;
+    break;}
+case 67:
+#line 233 "zend_language_parser.y"
+{ zend_do_begin_class_declaration(&yyvsp[0], NULL TSRMLS_CC); ;
+    break;}
+case 68:
+#line 233 "zend_language_parser.y"
+{ zend_do_end_class_declaration(TSRMLS_C); ;
+    break;}
+case 69:
+#line 234 "zend_language_parser.y"
+{ zend_do_begin_class_declaration(&yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 70:
+#line 234 "zend_language_parser.y"
+{ zend_do_end_class_declaration(TSRMLS_C); ;
+    break;}
+case 71:
+#line 239 "zend_language_parser.y"
+{ yyval.op_type = IS_UNUSED; ;
+    break;}
+case 72:
+#line 240 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 79:
+#line 263 "zend_language_parser.y"
+{ zend_do_declare_stmt(&yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 80:
+#line 264 "zend_language_parser.y"
+{ zend_do_declare_stmt(&yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 81:
+#line 269 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; ;
+    break;}
+case 82:
+#line 270 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; ;
+    break;}
+case 83:
+#line 271 "zend_language_parser.y"
+{ yyval = yyvsp[-2]; ;
+    break;}
+case 84:
+#line 272 "zend_language_parser.y"
+{ yyval = yyvsp[-2]; ;
+    break;}
+case 85:
+#line 277 "zend_language_parser.y"
+{ yyval.op_type = IS_UNUSED; ;
+    break;}
+case 86:
+#line 278 "zend_language_parser.y"
+{ zend_do_extended_info(TSRMLS_C);  zend_do_case_before_statement(&yyvsp[-3], &yyvsp[-2], &yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 87:
+#line 278 "zend_language_parser.y"
+{ zend_do_case_after_statement(&yyval, &yyvsp[-4] TSRMLS_CC); yyval.op_type = IS_CONST; ;
+    break;}
+case 88:
+#line 279 "zend_language_parser.y"
+{ zend_do_extended_info(TSRMLS_C);  zend_do_default_before_statement(&yyvsp[-2], &yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 89:
+#line 279 "zend_language_parser.y"
+{ zend_do_case_after_statement(&yyval, &yyvsp[-3] TSRMLS_CC); yyval.op_type = IS_CONST; ;
+    break;}
+case 95:
+#line 298 "zend_language_parser.y"
+{ zend_do_if_cond(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 96:
+#line 298 "zend_language_parser.y"
+{ zend_do_if_after_statement(&yyvsp[-2], 0 TSRMLS_CC); ;
+    break;}
+case 98:
+#line 304 "zend_language_parser.y"
+{ zend_do_if_cond(&yyvsp[-2], &yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 99:
+#line 304 "zend_language_parser.y"
+{ zend_do_if_after_statement(&yyvsp[-3], 0 TSRMLS_CC); ;
+    break;}
+case 106:
+#line 327 "zend_language_parser.y"
+{ znode tmp;  fetch_simple_variable(&tmp, &yyvsp[0], 0 TSRMLS_CC); yyval.op_type = IS_CONST; yyval.u.constant.value.lval=1; yyval.u.constant.type=IS_LONG; INIT_PZVAL(&yyval.u.constant); zend_do_receive_arg(ZEND_RECV, &tmp, &yyval, NULL, BYREF_NONE TSRMLS_CC); ;
+    break;}
+case 107:
+#line 328 "zend_language_parser.y"
+{ znode tmp;  fetch_simple_variable(&tmp, &yyvsp[0], 0 TSRMLS_CC); yyval.op_type = IS_CONST; yyval.u.constant.value.lval=1; yyval.u.constant.type=IS_LONG; INIT_PZVAL(&yyval.u.constant); zend_do_receive_arg(ZEND_RECV, &tmp, &yyval, NULL, BYREF_FORCE TSRMLS_CC); ;
+    break;}
+case 108:
+#line 329 "zend_language_parser.y"
+{ znode tmp;  fetch_simple_variable(&tmp, &yyvsp[0], 0 TSRMLS_CC); yyval.op_type = IS_CONST; yyval.u.constant.value.lval=1; yyval.u.constant.type=IS_LONG; INIT_PZVAL(&yyval.u.constant); zend_do_receive_arg(ZEND_RECV, &tmp, &yyval, NULL, BYREF_NONE TSRMLS_CC); ;
+    break;}
+case 109:
+#line 330 "zend_language_parser.y"
+{ znode tmp;  fetch_simple_variable(&tmp, &yyvsp[-2], 0 TSRMLS_CC); yyval.op_type = IS_CONST; yyval.u.constant.value.lval=1; yyval.u.constant.type=IS_LONG; INIT_PZVAL(&yyval.u.constant); zend_do_receive_arg(ZEND_RECV_INIT, &tmp, &yyval, &yyvsp[0], BYREF_NONE TSRMLS_CC); ;
+    break;}
+case 110:
+#line 331 "zend_language_parser.y"
+{ znode tmp;  fetch_simple_variable(&tmp, &yyvsp[0], 0 TSRMLS_CC); yyval=yyvsp[-2]; yyval.u.constant.value.lval++; zend_do_receive_arg(ZEND_RECV, &tmp, &yyval, NULL, BYREF_NONE TSRMLS_CC); ;
+    break;}
+case 111:
+#line 332 "zend_language_parser.y"
+{ znode tmp;  fetch_simple_variable(&tmp, &yyvsp[0], 0 TSRMLS_CC); yyval=yyvsp[-3]; yyval.u.constant.value.lval++; zend_do_receive_arg(ZEND_RECV, &tmp, &yyval, NULL, BYREF_FORCE TSRMLS_CC); ;
+    break;}
+case 112:
+#line 333 "zend_language_parser.y"
+{ znode tmp;  fetch_simple_variable(&tmp, &yyvsp[0], 0 TSRMLS_CC); yyval=yyvsp[-3]; yyval.u.constant.value.lval++; zend_do_receive_arg(ZEND_RECV, &tmp, &yyval, NULL, BYREF_NONE TSRMLS_CC); ;
+    break;}
+case 113:
+#line 334 "zend_language_parser.y"
+{ znode tmp;  fetch_simple_variable(&tmp, &yyvsp[-2], 0 TSRMLS_CC); yyval=yyvsp[-4]; yyval.u.constant.value.lval++; zend_do_receive_arg(ZEND_RECV_INIT, &tmp, &yyval, &yyvsp[0], BYREF_NONE TSRMLS_CC); ;
+    break;}
+case 114:
+#line 339 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 115:
+#line 340 "zend_language_parser.y"
+{ yyval.u.constant.value.lval = 0; ;
+    break;}
+case 116:
+#line 345 "zend_language_parser.y"
+{ yyval.u.constant.value.lval = 1;  zend_do_pass_param(&yyvsp[0], ZEND_SEND_VAL, yyval.u.constant.value.lval TSRMLS_CC); ;
+    break;}
+case 117:
+#line 346 "zend_language_parser.y"
+{ yyval.u.constant.value.lval = 1;  zend_do_pass_param(&yyvsp[0], ZEND_SEND_VAR, yyval.u.constant.value.lval TSRMLS_CC); ;
+    break;}
+case 118:
+#line 347 "zend_language_parser.y"
+{ yyval.u.constant.value.lval = 1;  zend_do_pass_param(&yyvsp[0], ZEND_SEND_REF, yyval.u.constant.value.lval TSRMLS_CC); ;
+    break;}
+case 119:
+#line 348 "zend_language_parser.y"
+{ yyval.u.constant.value.lval=yyvsp[-2].u.constant.value.lval+1;  zend_do_pass_param(&yyvsp[0], ZEND_SEND_VAL, yyval.u.constant.value.lval TSRMLS_CC); ;
+    break;}
+case 120:
+#line 349 "zend_language_parser.y"
+{ yyval.u.constant.value.lval=yyvsp[-2].u.constant.value.lval+1;  zend_do_pass_param(&yyvsp[0], ZEND_SEND_VAR, yyval.u.constant.value.lval TSRMLS_CC); ;
+    break;}
+case 121:
+#line 350 "zend_language_parser.y"
+{ yyval.u.constant.value.lval=yyvsp[-3].u.constant.value.lval+1;  zend_do_pass_param(&yyvsp[0], ZEND_SEND_REF, yyval.u.constant.value.lval TSRMLS_CC); ;
+    break;}
+case 122:
+#line 354 "zend_language_parser.y"
+{ zend_do_fetch_global_or_static_variable(&yyvsp[0], NULL, ZEND_FETCH_GLOBAL TSRMLS_CC); ;
+    break;}
+case 123:
+#line 355 "zend_language_parser.y"
+{ zend_do_fetch_global_or_static_variable(&yyvsp[0], NULL, ZEND_FETCH_GLOBAL TSRMLS_CC); ;
+    break;}
+case 124:
+#line 360 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 125:
+#line 361 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 126:
+#line 362 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; ;
+    break;}
+case 127:
+#line 367 "zend_language_parser.y"
+{ zend_do_fetch_global_or_static_variable(&yyvsp[0], NULL, ZEND_FETCH_STATIC TSRMLS_CC); ;
+    break;}
+case 128:
+#line 368 "zend_language_parser.y"
+{ zend_do_fetch_global_or_static_variable(&yyvsp[-2], &yyvsp[0], ZEND_FETCH_STATIC TSRMLS_CC); ;
+    break;}
+case 129:
+#line 369 "zend_language_parser.y"
+{ zend_do_fetch_global_or_static_variable(&yyvsp[0], NULL, ZEND_FETCH_STATIC TSRMLS_CC); ;
+    break;}
+case 130:
+#line 370 "zend_language_parser.y"
+{ zend_do_fetch_global_or_static_variable(&yyvsp[-2], &yyvsp[0], ZEND_FETCH_STATIC TSRMLS_CC); ;
+    break;}
+case 134:
+#line 383 "zend_language_parser.y"
+{ yyvsp[0].u.opline_num = CG(zend_lineno); ;
+    break;}
+case 135:
+#line 383 "zend_language_parser.y"
+{ zend_do_begin_function_declaration(&yyvsp[-3], &yyvsp[0], 1, yyvsp[-1].op_type TSRMLS_CC); ;
+    break;}
+case 136:
+#line 384 "zend_language_parser.y"
+{ zend_do_end_function_declaration(&yyvsp[-10] TSRMLS_CC); ;
+    break;}
+case 137:
+#line 385 "zend_language_parser.y"
+{ yyvsp[0].u.opline_num = CG(zend_lineno); ;
+    break;}
+case 138:
+#line 385 "zend_language_parser.y"
+{ zend_do_begin_function_declaration(&yyvsp[-3], &yyvsp[0], 1, yyvsp[-1].op_type TSRMLS_CC); ;
+    break;}
+case 139:
+#line 386 "zend_language_parser.y"
+{ zend_do_end_function_declaration(&yyvsp[-9] TSRMLS_CC); ;
+    break;}
+case 140:
+#line 391 "zend_language_parser.y"
+{ yyval.op_type = ZEND_RETURN_VAL; ;
+    break;}
+case 141:
+#line 392 "zend_language_parser.y"
+{ yyval.op_type = ZEND_RETURN_REF; ;
+    break;}
+case 142:
+#line 396 "zend_language_parser.y"
+{ zend_do_declare_property(&yyvsp[0], NULL TSRMLS_CC); ;
+    break;}
+case 143:
+#line 397 "zend_language_parser.y"
+{ zend_do_declare_property(&yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 144:
+#line 398 "zend_language_parser.y"
+{ zend_do_declare_property(&yyvsp[0], NULL TSRMLS_CC); ;
+    break;}
+case 145:
+#line 399 "zend_language_parser.y"
+{ zend_do_declare_property(&yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 147:
+#line 404 "zend_language_parser.y"
+{ zend_do_echo(&yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 148:
+#line 405 "zend_language_parser.y"
+{ zend_do_echo(&yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 149:
+#line 410 "zend_language_parser.y"
+{ yyval.op_type = IS_CONST;  yyval.u.constant.type = IS_BOOL;  yyval.u.constant.value.lval = 1; ;
+    break;}
+case 150:
+#line 411 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 151:
+#line 415 "zend_language_parser.y"
+{ zend_do_free(&yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 152:
+#line 415 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 153:
+#line 416 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 154:
+#line 421 "zend_language_parser.y"
+{ zend_do_list_init(TSRMLS_C); ;
+    break;}
+case 155:
+#line 421 "zend_language_parser.y"
+{ zend_do_list_end(&yyval, &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 156:
+#line 422 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_W, 0 TSRMLS_CC); zend_do_assign(&yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 157:
+#line 423 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_W, 0 TSRMLS_CC); zend_do_assign_ref(&yyval, &yyvsp[-3], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 158:
+#line 424 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_W, 0 TSRMLS_CC); zend_do_assign_ref(&yyval, &yyvsp[-3], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 159:
+#line 425 "zend_language_parser.y"
+{ zend_do_extended_fcall_begin(TSRMLS_C); zend_do_begin_new_object(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 160:
+#line 425 "zend_language_parser.y"
+{ zend_do_end_new_object(&yyvsp[-4], &yyvsp[-2], &yyvsp[-3], &yyvsp[0] TSRMLS_CC); zend_do_extended_fcall_end(TSRMLS_C); zend_do_end_variable_parse(BP_VAR_W, 0 TSRMLS_CC); zend_do_assign_ref(&yyval, &yyvsp[-6], &yyvsp[-4] TSRMLS_CC); ;
+    break;}
+case 161:
+#line 426 "zend_language_parser.y"
+{ zend_do_extended_fcall_begin(TSRMLS_C); zend_do_begin_new_object(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 162:
+#line 426 "zend_language_parser.y"
+{ zend_do_end_new_object(&yyval, &yyvsp[-2], &yyvsp[-3], &yyvsp[0] TSRMLS_CC); zend_do_extended_fcall_end(TSRMLS_C);;
+    break;}
+case 163:
+#line 427 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_ADD, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 164:
+#line 428 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_SUB, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 165:
+#line 429 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_MUL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 166:
+#line 430 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_DIV, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 167:
+#line 431 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_CONCAT, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 168:
+#line 432 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_MOD, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 169:
+#line 433 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_BW_AND, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 170:
+#line 434 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_BW_OR, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 171:
+#line 435 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_BW_XOR, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 172:
+#line 436 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_SL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 173:
+#line 437 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); zend_do_binary_assign_op(ZEND_ASSIGN_SR, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 174:
+#line 438 "zend_language_parser.y"
+{ zend_do_post_incdec(&yyval, &yyvsp[-1], ZEND_POST_INC TSRMLS_CC); ;
+    break;}
+case 175:
+#line 439 "zend_language_parser.y"
+{ zend_do_pre_incdec(&yyval, &yyvsp[0], ZEND_PRE_INC TSRMLS_CC); ;
+    break;}
+case 176:
+#line 440 "zend_language_parser.y"
+{ zend_do_post_incdec(&yyval, &yyvsp[-1], ZEND_POST_DEC TSRMLS_CC); ;
+    break;}
+case 177:
+#line 441 "zend_language_parser.y"
+{ zend_do_pre_incdec(&yyval, &yyvsp[0], ZEND_PRE_DEC TSRMLS_CC); ;
+    break;}
+case 178:
+#line 442 "zend_language_parser.y"
+{ zend_do_boolean_or_begin(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 179:
+#line 442 "zend_language_parser.y"
+{ zend_do_boolean_or_end(&yyval, &yyvsp[-3], &yyvsp[0], &yyvsp[-2] TSRMLS_CC); ;
+    break;}
+case 180:
+#line 443 "zend_language_parser.y"
+{ zend_do_boolean_and_begin(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 181:
+#line 443 "zend_language_parser.y"
+{ zend_do_boolean_and_end(&yyval, &yyvsp[-3], &yyvsp[0], &yyvsp[-2] TSRMLS_CC); ;
+    break;}
+case 182:
+#line 444 "zend_language_parser.y"
+{ zend_do_boolean_or_begin(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 183:
+#line 444 "zend_language_parser.y"
+{ zend_do_boolean_or_end(&yyval, &yyvsp[-3], &yyvsp[0], &yyvsp[-2] TSRMLS_CC); ;
+    break;}
+case 184:
+#line 445 "zend_language_parser.y"
+{ zend_do_boolean_and_begin(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 185:
+#line 445 "zend_language_parser.y"
+{ zend_do_boolean_and_end(&yyval, &yyvsp[-3], &yyvsp[0], &yyvsp[-2] TSRMLS_CC); ;
+    break;}
+case 186:
+#line 446 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_BOOL_XOR, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 187:
+#line 447 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_BW_OR, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 188:
+#line 448 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_BW_AND, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 189:
+#line 449 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_BW_XOR, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 190:
+#line 450 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_CONCAT, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 191:
+#line 451 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_ADD, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 192:
+#line 452 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_SUB, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 193:
+#line 453 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_MUL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 194:
+#line 454 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_DIV, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 195:
+#line 455 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_MOD, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 196:
+#line 456 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_SL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 197:
+#line 457 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_SR, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 198:
+#line 458 "zend_language_parser.y"
+{ yyvsp[-1].u.constant.value.lval=0; yyvsp[-1].u.constant.type=IS_LONG; yyvsp[-1].op_type = IS_CONST; INIT_PZVAL(&yyvsp[-1].u.constant); zend_do_binary_op(ZEND_ADD, &yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 199:
+#line 459 "zend_language_parser.y"
+{ yyvsp[-1].u.constant.value.lval=0; yyvsp[-1].u.constant.type=IS_LONG; yyvsp[-1].op_type = IS_CONST; INIT_PZVAL(&yyvsp[-1].u.constant); zend_do_binary_op(ZEND_SUB, &yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 200:
+#line 460 "zend_language_parser.y"
+{ zend_do_unary_op(ZEND_BOOL_NOT, &yyval, &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 201:
+#line 461 "zend_language_parser.y"
+{ zend_do_unary_op(ZEND_BW_NOT, &yyval, &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 202:
+#line 462 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_IS_IDENTICAL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 203:
+#line 463 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_IS_NOT_IDENTICAL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 204:
+#line 464 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_IS_EQUAL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 205:
+#line 465 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_IS_NOT_EQUAL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 206:
+#line 466 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_IS_SMALLER, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 207:
+#line 467 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_IS_SMALLER_OR_EQUAL, &yyval, &yyvsp[-2], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 208:
+#line 468 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_IS_SMALLER, &yyval, &yyvsp[0], &yyvsp[-2] TSRMLS_CC); ;
+    break;}
+case 209:
+#line 469 "zend_language_parser.y"
+{ zend_do_binary_op(ZEND_IS_SMALLER_OR_EQUAL, &yyval, &yyvsp[0], &yyvsp[-2] TSRMLS_CC); ;
+    break;}
+case 210:
+#line 470 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; ;
+    break;}
+case 211:
+#line 471 "zend_language_parser.y"
+{ zend_do_begin_qm_op(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 212:
+#line 472 "zend_language_parser.y"
+{ zend_do_qm_true(&yyvsp[-1], &yyvsp[-3], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 213:
+#line 473 "zend_language_parser.y"
+{ zend_do_qm_false(&yyval, &yyvsp[0], &yyvsp[-5], &yyvsp[-2] TSRMLS_CC); ;
+    break;}
+case 214:
+#line 474 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 215:
+#line 475 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 216:
+#line 476 "zend_language_parser.y"
+{ zend_do_cast(&yyval, &yyvsp[0], IS_LONG TSRMLS_CC); ;
+    break;}
+case 217:
+#line 477 "zend_language_parser.y"
+{ zend_do_cast(&yyval, &yyvsp[0], IS_DOUBLE TSRMLS_CC); ;
+    break;}
+case 218:
+#line 478 "zend_language_parser.y"
+{ zend_do_cast(&yyval, &yyvsp[0], IS_STRING TSRMLS_CC); ;
+    break;}
+case 219:
+#line 479 "zend_language_parser.y"
+{ zend_do_cast(&yyval, &yyvsp[0], IS_ARRAY TSRMLS_CC); ;
+    break;}
+case 220:
+#line 480 "zend_language_parser.y"
+{ zend_do_cast(&yyval, &yyvsp[0], IS_OBJECT TSRMLS_CC); ;
+    break;}
+case 221:
+#line 481 "zend_language_parser.y"
+{ zend_do_cast(&yyval, &yyvsp[0], IS_BOOL TSRMLS_CC); ;
+    break;}
+case 222:
+#line 482 "zend_language_parser.y"
+{ zend_do_cast(&yyval, &yyvsp[0], IS_NULL TSRMLS_CC); ;
+    break;}
+case 223:
+#line 483 "zend_language_parser.y"
+{ zend_do_exit(&yyval, &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 224:
+#line 484 "zend_language_parser.y"
+{ zend_do_begin_silence(&yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 225:
+#line 484 "zend_language_parser.y"
+{ zend_do_end_silence(&yyvsp[-2] TSRMLS_CC); yyval = yyvsp[0]; ;
+    break;}
+case 226:
+#line 485 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 227:
+#line 486 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; ;
+    break;}
+case 228:
+#line 487 "zend_language_parser.y"
+{ zend_do_shell_exec(&yyval, &yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 229:
+#line 488 "zend_language_parser.y"
+{ zend_do_print(&yyval, &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 230:
+#line 492 "zend_language_parser.y"
+{ yyvsp[0].u.opline_num = zend_do_begin_function_call(&yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 231:
+#line 494 "zend_language_parser.y"
+{ zend_do_end_function_call(&yyvsp[-4], &yyval, &yyvsp[-1], 0, yyvsp[-3].u.opline_num TSRMLS_CC); zend_do_extended_fcall_end(TSRMLS_C); ;
+    break;}
+case 232:
+#line 495 "zend_language_parser.y"
+{ zend_do_begin_dynamic_function_call(&yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 233:
+#line 497 "zend_language_parser.y"
+{ zend_do_end_function_call(&yyvsp[-4], &yyval, &yyvsp[-1], 0, 1 TSRMLS_CC); zend_do_extended_fcall_end(TSRMLS_C);;
+    break;}
+case 234:
+#line 498 "zend_language_parser.y"
+{ zend_do_extended_fcall_begin(TSRMLS_C); zend_do_begin_class_member_function_call(&yyvsp[-3], &yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 235:
+#line 500 "zend_language_parser.y"
+{ zend_do_end_function_call(&yyvsp[-4], &yyval, &yyvsp[-1], 1, 1 TSRMLS_CC); zend_do_extended_fcall_end(TSRMLS_C);;
+    break;}
+case 236:
+#line 505 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 237:
+#line 506 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 238:
+#line 511 "zend_language_parser.y"
+{ memset(&yyval, 0, sizeof(znode)); yyval.op_type = IS_UNUSED; ;
+    break;}
+case 239:
+#line 512 "zend_language_parser.y"
+{ memset(&yyval, 0, sizeof(znode)); yyval.op_type = IS_UNUSED; ;
+    break;}
+case 240:
+#line 513 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; ;
+    break;}
+case 241:
+#line 518 "zend_language_parser.y"
+{ yyval.u.constant.value.lval=0; ;
+    break;}
+case 242:
+#line 519 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; ;
+    break;}
+case 243:
+#line 524 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 244:
+#line 525 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 245:
+#line 526 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 246:
+#line 527 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 247:
+#line 528 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 248:
+#line 529 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 249:
+#line 530 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 250:
+#line 535 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 251:
+#line 536 "zend_language_parser.y"
+{ zend_do_fetch_constant(&yyval, &yyvsp[0], ZEND_CT TSRMLS_CC); ;
+    break;}
+case 252:
+#line 537 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 253:
+#line 538 "zend_language_parser.y"
+{ zval minus_one;  minus_one.type = IS_LONG; minus_one.value.lval = -1;  mul_function(&yyvsp[0].u.constant, &yyvsp[0].u.constant, &minus_one TSRMLS_CC);  yyval = yyvsp[0]; ;
+    break;}
+case 254:
+#line 539 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; yyval.u.constant.type = IS_CONSTANT_ARRAY; ;
+    break;}
+case 255:
+#line 544 "zend_language_parser.y"
+{ zend_do_fetch_constant(&yyval, &yyvsp[0], ZEND_RT TSRMLS_CC); ;
+    break;}
+case 256:
+#line 545 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 257:
+#line 546 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 258:
+#line 547 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; ;
+    break;}
+case 259:
+#line 548 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; ;
+    break;}
+case 260:
+#line 549 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; zend_do_end_heredoc(TSRMLS_C); ;
+    break;}
+case 261:
+#line 554 "zend_language_parser.y"
+{ yyval.op_type = IS_CONST; INIT_PZVAL(&yyval.u.constant); array_init(&yyval.u.constant); ;
+    break;}
+case 262:
+#line 555 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; ;
+    break;}
+case 265:
+#line 564 "zend_language_parser.y"
+{ zend_do_add_static_array_element(&yyval, &yyvsp[-2], &yyvsp[0]); ;
+    break;}
+case 266:
+#line 565 "zend_language_parser.y"
+{ zend_do_add_static_array_element(&yyval, NULL, &yyvsp[0]); ;
+    break;}
+case 267:
+#line 566 "zend_language_parser.y"
+{ yyval.op_type = IS_CONST; INIT_PZVAL(&yyval.u.constant); array_init(&yyval.u.constant); zend_do_add_static_array_element(&yyval, &yyvsp[-2], &yyvsp[0]); ;
+    break;}
+case 268:
+#line 567 "zend_language_parser.y"
+{ yyval.op_type = IS_CONST; INIT_PZVAL(&yyval.u.constant); array_init(&yyval.u.constant); zend_do_add_static_array_element(&yyval, NULL, &yyvsp[0]); ;
+    break;}
+case 269:
+#line 571 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 270:
+#line 572 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 271:
+#line 577 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_R, 0 TSRMLS_CC); yyval = yyvsp[0]; ;
+    break;}
+case 272:
+#line 582 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_W, 0 TSRMLS_CC); yyval = yyvsp[0]; ;
+    break;}
+case 273:
+#line 587 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_RW, 0 TSRMLS_CC); yyval = yyvsp[0]; ;
+    break;}
+case 274:
+#line 592 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 275:
+#line 593 "zend_language_parser.y"
+{ zend_do_push_object(&yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 276:
+#line 593 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 277:
+#line 598 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 278:
+#line 599 "zend_language_parser.y"
+{ zend_do_indirect_references(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 279:
+#line 604 "zend_language_parser.y"
+{ fetch_array_dim(&yyval, &yyvsp[-3], &yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 280:
+#line 605 "zend_language_parser.y"
+{ fetch_string_offset(&yyval, &yyvsp[-3], &yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 281:
+#line 606 "zend_language_parser.y"
+{ zend_do_fetch_globals(&yyvsp[0] TSRMLS_CC); zend_do_begin_variable_parse(TSRMLS_C); fetch_simple_variable(&yyval, &yyvsp[0], 1 TSRMLS_CC); ;
+    break;}
+case 282:
+#line 611 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 283:
+#line 612 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; ;
+    break;}
+case 284:
+#line 616 "zend_language_parser.y"
+{ yyval.op_type = IS_UNUSED; ;
+    break;}
+case 285:
+#line 617 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 286:
+#line 621 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 287:
+#line 622 "zend_language_parser.y"
+{ zend_do_push_object(&yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 288:
+#line 622 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 289:
+#line 626 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 290:
+#line 627 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_R, 0 TSRMLS_CC); ;
+    break;}
+case 291:
+#line 627 "zend_language_parser.y"
+{ znode tmp_znode;  zend_do_pop_object(&tmp_znode TSRMLS_CC);  zend_do_fetch_property(&yyval, &tmp_znode, &yyvsp[-1] TSRMLS_CC);;
+    break;}
+case 292:
+#line 631 "zend_language_parser.y"
+{ fetch_array_dim(&yyval, &yyvsp[-3], &yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 293:
+#line 632 "zend_language_parser.y"
+{ fetch_string_offset(&yyval, &yyvsp[-3], &yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 294:
+#line 633 "zend_language_parser.y"
+{ znode tmp_znode;  zend_do_pop_object(&tmp_znode TSRMLS_CC);  zend_do_fetch_property(&yyval, &tmp_znode, &yyvsp[0] TSRMLS_CC);;
+    break;}
+case 295:
+#line 637 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 296:
+#line 638 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; ;
+    break;}
+case 297:
+#line 643 "zend_language_parser.y"
+{ yyval.u.constant.value.lval = 1; ;
+    break;}
+case 298:
+#line 644 "zend_language_parser.y"
+{ yyval.u.constant.value.lval++; ;
+    break;}
+case 301:
+#line 654 "zend_language_parser.y"
+{ zend_do_add_list_element(&yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 302:
+#line 655 "zend_language_parser.y"
+{ zend_do_new_list_begin(TSRMLS_C); ;
+    break;}
+case 303:
+#line 655 "zend_language_parser.y"
+{ zend_do_new_list_end(TSRMLS_C); ;
+    break;}
+case 304:
+#line 656 "zend_language_parser.y"
+{ zend_do_add_list_element(NULL TSRMLS_CC); ;
+    break;}
+case 305:
+#line 661 "zend_language_parser.y"
+{ zend_do_init_array(&yyval, NULL, NULL, 0 TSRMLS_CC); ;
+    break;}
+case 306:
+#line 662 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; ;
+    break;}
+case 307:
+#line 666 "zend_language_parser.y"
+{ zend_do_add_array_element(&yyval, &yyvsp[0], &yyvsp[-2], 0 TSRMLS_CC); ;
+    break;}
+case 308:
+#line 667 "zend_language_parser.y"
+{ zend_do_add_array_element(&yyval, &yyvsp[0], NULL, 0 TSRMLS_CC); ;
+    break;}
+case 309:
+#line 668 "zend_language_parser.y"
+{ zend_do_init_array(&yyval, &yyvsp[0], &yyvsp[-2], 0 TSRMLS_CC); ;
+    break;}
+case 310:
+#line 669 "zend_language_parser.y"
+{ zend_do_init_array(&yyval, &yyvsp[0], NULL, 0 TSRMLS_CC); ;
+    break;}
+case 311:
+#line 670 "zend_language_parser.y"
+{ zend_do_add_array_element(&yyval, &yyvsp[0], &yyvsp[-3], 1 TSRMLS_CC); ;
+    break;}
+case 312:
+#line 671 "zend_language_parser.y"
+{ zend_do_add_array_element(&yyval, &yyvsp[0], NULL, 1 TSRMLS_CC); ;
+    break;}
+case 313:
+#line 672 "zend_language_parser.y"
+{ zend_do_init_array(&yyval, &yyvsp[0], &yyvsp[-3], 1 TSRMLS_CC); ;
+    break;}
+case 314:
+#line 673 "zend_language_parser.y"
+{ zend_do_init_array(&yyval, &yyvsp[0], NULL, 1 TSRMLS_CC); ;
+    break;}
+case 315:
+#line 677 "zend_language_parser.y"
+{ zend_do_end_variable_parse(BP_VAR_R, 0 TSRMLS_CC);  zend_do_add_variable(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 316:
+#line 678 "zend_language_parser.y"
+{ zend_do_add_string(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 317:
+#line 679 "zend_language_parser.y"
+{ zend_do_add_string(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 318:
+#line 680 "zend_language_parser.y"
+{ zend_do_add_string(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 319:
+#line 681 "zend_language_parser.y"
+{ zend_do_add_char(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 320:
+#line 682 "zend_language_parser.y"
+{ zend_do_add_string(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 321:
+#line 683 "zend_language_parser.y"
+{ yyvsp[0].u.constant.value.lval = (long) '['; zend_do_add_char(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 322:
+#line 684 "zend_language_parser.y"
+{ yyvsp[0].u.constant.value.lval = (long) ']'; zend_do_add_char(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 323:
+#line 685 "zend_language_parser.y"
+{ yyvsp[0].u.constant.value.lval = (long) '{'; zend_do_add_char(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 324:
+#line 686 "zend_language_parser.y"
+{ yyvsp[0].u.constant.value.lval = (long) '}'; zend_do_add_char(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 325:
+#line 687 "zend_language_parser.y"
+{ znode tmp;  yyvsp[0].u.constant.value.lval = (long) '-';  zend_do_add_char(&tmp, &yyvsp[-1], &yyvsp[0] TSRMLS_CC);  yyvsp[0].u.constant.value.lval = (long) '>'; zend_do_add_char(&yyval, &tmp, &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 326:
+#line 688 "zend_language_parser.y"
+{ zend_do_init_string(&yyval TSRMLS_CC); ;
+    break;}
+case 327:
+#line 695 "zend_language_parser.y"
+{ zend_do_fetch_globals(&yyvsp[0] TSRMLS_CC); zend_do_begin_variable_parse(TSRMLS_C); fetch_simple_variable(&yyval, &yyvsp[0], 1 TSRMLS_CC); ;
+    break;}
+case 328:
+#line 696 "zend_language_parser.y"
+{ zend_do_begin_variable_parse(TSRMLS_C); ;
+    break;}
+case 329:
+#line 696 "zend_language_parser.y"
+{ zend_do_fetch_globals(&yyvsp[-4] TSRMLS_CC);  fetch_array_begin(&yyval, &yyvsp[-4], &yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 330:
+#line 697 "zend_language_parser.y"
+{ zend_do_begin_variable_parse(TSRMLS_C); fetch_simple_variable(&yyvsp[-1], &yyvsp[-2], 1 TSRMLS_CC); zend_do_fetch_property(&yyval, &yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 331:
+#line 698 "zend_language_parser.y"
+{ zend_do_begin_variable_parse(TSRMLS_C);  fetch_simple_variable(&yyval, &yyvsp[-1], 1 TSRMLS_CC); ;
+    break;}
+case 332:
+#line 699 "zend_language_parser.y"
+{ zend_do_begin_variable_parse(TSRMLS_C);  fetch_array_begin(&yyval, &yyvsp[-4], &yyvsp[-2] TSRMLS_CC); ;
+    break;}
+case 333:
+#line 700 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; ;
+    break;}
+case 334:
+#line 705 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 335:
+#line 706 "zend_language_parser.y"
+{ yyval = yyvsp[0]; ;
+    break;}
+case 336:
+#line 707 "zend_language_parser.y"
+{ fetch_simple_variable(&yyval, &yyvsp[0], 1 TSRMLS_CC); ;
+    break;}
+case 337:
+#line 712 "zend_language_parser.y"
+{ yyval = yyvsp[-1]; ;
+    break;}
+case 338:
+#line 713 "zend_language_parser.y"
+{ zend_do_isset_or_isempty(ZEND_ISEMPTY, &yyval, &yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 339:
+#line 714 "zend_language_parser.y"
+{ zend_do_include_or_eval(ZEND_INCLUDE, &yyval, &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 340:
+#line 715 "zend_language_parser.y"
+{ zend_do_include_or_eval(ZEND_INCLUDE_ONCE, &yyval, &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 341:
+#line 716 "zend_language_parser.y"
+{ zend_do_include_or_eval(ZEND_EVAL, &yyval, &yyvsp[-1] TSRMLS_CC); ;
+    break;}
+case 342:
+#line 717 "zend_language_parser.y"
+{ zend_do_include_or_eval(ZEND_REQUIRE, &yyval, &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 343:
+#line 718 "zend_language_parser.y"
+{ zend_do_include_or_eval(ZEND_REQUIRE_ONCE, &yyval, &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 344:
+#line 722 "zend_language_parser.y"
+{ zend_do_isset_or_isempty(ZEND_ISSET, &yyval, &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 345:
+#line 723 "zend_language_parser.y"
+{ zend_do_boolean_and_begin(&yyvsp[-1], &yyvsp[0] TSRMLS_CC); ;
+    break;}
+case 346:
+#line 723 "zend_language_parser.y"
+{ znode tmp; zend_do_isset_or_isempty(ZEND_ISSET, &tmp, &yyvsp[0] TSRMLS_CC); zend_do_boolean_and_end(&yyval, &yyvsp[-3], &tmp, &yyvsp[-2] TSRMLS_CC); ;
+    break;}
+}
+   /* the action file gets copied in in place of this dollarsign */
+#line 542 "bison.simple"
+
+  yyvsp -= yylen;
+  yyssp -= yylen;
+#ifdef YYLSP_NEEDED
+  yylsp -= yylen;
+#endif
+
+#if YYDEBUG != 0
+  if (yydebug)
+    {
+      short *ssp1 = yyss - 1;
+      fprintf (stderr, "state stack now");
+      while (ssp1 != yyssp)
+	fprintf (stderr, " %d", *++ssp1);
+      fprintf (stderr, "\n");
+    }
+#endif
+
+  *++yyvsp = yyval;
+
+#ifdef YYLSP_NEEDED
+  yylsp++;
+  if (yylen == 0)
+    {
+      yylsp->first_line = yylloc.first_line;
+      yylsp->first_column = yylloc.first_column;
+      yylsp->last_line = (yylsp-1)->last_line;
+      yylsp->last_column = (yylsp-1)->last_column;
+      yylsp->text = 0;
+    }
+  else
+    {
+      yylsp->last_line = (yylsp+yylen-1)->last_line;
+      yylsp->last_column = (yylsp+yylen-1)->last_column;
+    }
+#endif
+
+  /* Now "shift" the result of the reduction.
+     Determine what state that goes to,
+     based on the state we popped back to
+     and the rule number reduced by.  */
+
+  yyn = yyr1[yyn];
+
+  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
+  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
+    yystate = yytable[yystate];
+  else
+    yystate = yydefgoto[yyn - YYNTBASE];
+
+  goto yynewstate;
+
+yyerrlab:   /* here on detecting error */
+
+  if (! yyerrstatus)
+    /* If not already recovering from an error, report this error.  */
+    {
+      ++yynerrs;
+
+#ifdef YYERROR_VERBOSE
+      yyn = yypact[yystate];
+
+      if (yyn > YYFLAG && yyn < YYLAST)
+	{
+	  int size = 0;
+	  char *msg;
+	  int x, count;
+
+	  count = 0;
+	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
+	  for (x = (yyn < 0 ? -yyn : 0);
+	       x < (sizeof(yytname) / sizeof(char *)); x++)
+	    if (yycheck[x + yyn] == x)
+	      size += strlen(yytname[x]) + 15, count++;
+	  msg = (char *) malloc(size + 15);
+	  if (msg != 0)
+	    {
+	      strcpy(msg, "parse error");
+
+	      if (count < 5)
+		{
+		  count = 0;
+		  for (x = (yyn < 0 ? -yyn : 0);
+		       x < (sizeof(yytname) / sizeof(char *)); x++)
+		    if (yycheck[x + yyn] == x)
+		      {
+			strcat(msg, count == 0 ? ", expecting `" : " or `");
+			strcat(msg, yytname[x]);
+			strcat(msg, "'");
+			count++;
+		      }
+		}
+	      yyerror(msg);
+	      free(msg);
+	    }
+	  else
+	    yyerror ("parse error; also virtual memory exceeded");
+	}
+      else
+#endif /* YYERROR_VERBOSE */
+	yyerror("parse error");
+    }
+
+  goto yyerrlab1;
+yyerrlab1:   /* here on error raised explicitly by an action */
+
+  if (yyerrstatus == 3)
+    {
+      /* if just tried and failed to reuse lookahead token after an error, discard it.  */
+
+      /* return failure if at end of input */
+      if (yychar == YYEOF)
+	YYABORT;
+
+#if YYDEBUG != 0
+      if (yydebug)
+	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
+#endif
+
+      yychar = YYEMPTY;
+    }
+
+  /* Else will try to reuse lookahead token
+     after shifting the error token.  */
+
+  yyerrstatus = 3;		/* Each real token shifted decrements this */
+
+  goto yyerrhandle;
+
+yyerrdefault:  /* current state does not do anything special for the error token. */
+
+#if 0
+  /* This is wrong; only states that explicitly want error tokens
+     should shift them.  */
+  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
+  if (yyn) goto yydefault;
+#endif
+
+yyerrpop:   /* pop the current state because it cannot handle the error token */
+
+  if (yyssp == yyss) YYABORT;
+  yyvsp--;
+  yystate = *--yyssp;
+#ifdef YYLSP_NEEDED
+  yylsp--;
+#endif
+
+#if YYDEBUG != 0
+  if (yydebug)
+    {
+      short *ssp1 = yyss - 1;
+      fprintf (stderr, "Error: state stack now");
+      while (ssp1 != yyssp)
+	fprintf (stderr, " %d", *++ssp1);
+      fprintf (stderr, "\n");
+    }
+#endif
+
+yyerrhandle:
+
+  yyn = yypact[yystate];
+  if (yyn == YYFLAG)
+    goto yyerrdefault;
+
+  yyn += YYTERROR;
+  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
+    goto yyerrdefault;
+
+  yyn = yytable[yyn];
+  if (yyn < 0)
+    {
+      if (yyn == YYFLAG)
+	goto yyerrpop;
+      yyn = -yyn;
+      goto yyreduce;
+    }
+  else if (yyn == 0)
+    goto yyerrpop;
+
+  if (yyn == YYFINAL)
+    YYACCEPT;
+
+#if YYDEBUG != 0
+  if (yydebug)
+    fprintf(stderr, "Shifting error token, ");
+#endif
+
+  *++yyvsp = yylval;
+#ifdef YYLSP_NEEDED
+  *++yylsp = yylloc;
+#endif
+
+  yystate = yyn;
+  goto yynewstate;
+
+ yyacceptlab:
+  /* YYACCEPT comes here.  */
+  if (yyfree_stacks)
+    {
+      free (yyss);
+      free (yyvs);
+#ifdef YYLSP_NEEDED
+      free (yyls);
+#endif
+    }
+  return 0;
+
+ yyabortlab:
+  /* YYABORT comes here.  */
+  if (yyfree_stacks)
+    {
+      free (yyss);
+      free (yyvs);
+#ifdef YYLSP_NEEDED
+      free (yyls);
+#endif
+    }
+  return 1;
+}
+#line 726 "zend_language_parser.y"
+
+
diff -Nur php-4.3.11/Zend/zend_language_parser.h php/Zend/zend_language_parser.h
--- php-4.3.11/Zend/zend_language_parser.h	2005-03-30 22:35:48.000000000 +0800
+++ php/Zend/zend_language_parser.h	2007-07-23 21:44:27.000000000 +0800
@@ -1,115 +1,109 @@
-#ifndef BISON_ZEND_ZEND_LANGUAGE_PARSER_H
-# define BISON_ZEND_ZEND_LANGUAGE_PARSER_H
-
-# ifndef YYSTYPE
-#  define YYSTYPE int
-#  define YYSTYPE_IS_TRIVIAL 1
-# endif
-# define	T_INCLUDE	257
-# define	T_INCLUDE_ONCE	258
-# define	T_EVAL	259
-# define	T_REQUIRE	260
-# define	T_REQUIRE_ONCE	261
-# define	T_LOGICAL_OR	262
-# define	T_LOGICAL_XOR	263
-# define	T_LOGICAL_AND	264
-# define	T_PRINT	265
-# define	T_PLUS_EQUAL	266
-# define	T_MINUS_EQUAL	267
-# define	T_MUL_EQUAL	268
-# define	T_DIV_EQUAL	269
-# define	T_CONCAT_EQUAL	270
-# define	T_MOD_EQUAL	271
-# define	T_AND_EQUAL	272
-# define	T_OR_EQUAL	273
-# define	T_XOR_EQUAL	274
-# define	T_SL_EQUAL	275
-# define	T_SR_EQUAL	276
-# define	T_BOOLEAN_OR	277
-# define	T_BOOLEAN_AND	278
-# define	T_IS_EQUAL	279
-# define	T_IS_NOT_EQUAL	280
-# define	T_IS_IDENTICAL	281
-# define	T_IS_NOT_IDENTICAL	282
-# define	T_IS_SMALLER_OR_EQUAL	283
-# define	T_IS_GREATER_OR_EQUAL	284
-# define	T_SL	285
-# define	T_SR	286
-# define	T_INC	287
-# define	T_DEC	288
-# define	T_INT_CAST	289
-# define	T_DOUBLE_CAST	290
-# define	T_STRING_CAST	291
-# define	T_ARRAY_CAST	292
-# define	T_OBJECT_CAST	293
-# define	T_BOOL_CAST	294
-# define	T_UNSET_CAST	295
-# define	T_NEW	296
-# define	T_EXIT	297
-# define	T_IF	298
-# define	T_ELSEIF	299
-# define	T_ELSE	300
-# define	T_ENDIF	301
-# define	T_LNUMBER	302
-# define	T_DNUMBER	303
-# define	T_STRING	304
-# define	T_STRING_VARNAME	305
-# define	T_VARIABLE	306
-# define	T_NUM_STRING	307
-# define	T_INLINE_HTML	308
-# define	T_CHARACTER	309
-# define	T_BAD_CHARACTER	310
-# define	T_ENCAPSED_AND_WHITESPACE	311
-# define	T_CONSTANT_ENCAPSED_STRING	312
-# define	T_ECHO	313
-# define	T_DO	314
-# define	T_WHILE	315
-# define	T_ENDWHILE	316
-# define	T_FOR	317
-# define	T_ENDFOR	318
-# define	T_FOREACH	319
-# define	T_ENDFOREACH	320
-# define	T_DECLARE	321
-# define	T_ENDDECLARE	322
-# define	T_AS	323
-# define	T_SWITCH	324
-# define	T_ENDSWITCH	325
-# define	T_CASE	326
-# define	T_DEFAULT	327
-# define	T_BREAK	328
-# define	T_CONTINUE	329
-# define	T_OLD_FUNCTION	330
-# define	T_FUNCTION	331
-# define	T_CONST	332
-# define	T_RETURN	333
-# define	T_USE	334
-# define	T_GLOBAL	335
-# define	T_STATIC	336
-# define	T_VAR	337
-# define	T_UNSET	338
-# define	T_ISSET	339
-# define	T_EMPTY	340
-# define	T_CLASS	341
-# define	T_EXTENDS	342
-# define	T_OBJECT_OPERATOR	343
-# define	T_DOUBLE_ARROW	344
-# define	T_LIST	345
-# define	T_ARRAY	346
-# define	T_CLASS_C	347
-# define	T_FUNC_C	348
-# define	T_LINE	349
-# define	T_FILE	350
-# define	T_COMMENT	351
-# define	T_ML_COMMENT	352
-# define	T_OPEN_TAG	353
-# define	T_OPEN_TAG_WITH_ECHO	354
-# define	T_CLOSE_TAG	355
-# define	T_WHITESPACE	356
-# define	T_START_HEREDOC	357
-# define	T_END_HEREDOC	358
-# define	T_DOLLAR_OPEN_CURLY_BRACES	359
-# define	T_CURLY_OPEN	360
-# define	T_PAAMAYIM_NEKUDOTAYIM	361
-
-
-#endif /* not BISON_ZEND_ZEND_LANGUAGE_PARSER_H */
+#ifndef YYSTYPE
+#define YYSTYPE int
+#endif
+#define	T_INCLUDE	257
+#define	T_INCLUDE_ONCE	258
+#define	T_EVAL	259
+#define	T_REQUIRE	260
+#define	T_REQUIRE_ONCE	261
+#define	T_LOGICAL_OR	262
+#define	T_LOGICAL_XOR	263
+#define	T_LOGICAL_AND	264
+#define	T_PRINT	265
+#define	T_PLUS_EQUAL	266
+#define	T_MINUS_EQUAL	267
+#define	T_MUL_EQUAL	268
+#define	T_DIV_EQUAL	269
+#define	T_CONCAT_EQUAL	270
+#define	T_MOD_EQUAL	271
+#define	T_AND_EQUAL	272
+#define	T_OR_EQUAL	273
+#define	T_XOR_EQUAL	274
+#define	T_SL_EQUAL	275
+#define	T_SR_EQUAL	276
+#define	T_BOOLEAN_OR	277
+#define	T_BOOLEAN_AND	278
+#define	T_IS_EQUAL	279
+#define	T_IS_NOT_EQUAL	280
+#define	T_IS_IDENTICAL	281
+#define	T_IS_NOT_IDENTICAL	282
+#define	T_IS_SMALLER_OR_EQUAL	283
+#define	T_IS_GREATER_OR_EQUAL	284
+#define	T_SL	285
+#define	T_SR	286
+#define	T_INC	287
+#define	T_DEC	288
+#define	T_INT_CAST	289
+#define	T_DOUBLE_CAST	290
+#define	T_STRING_CAST	291
+#define	T_ARRAY_CAST	292
+#define	T_OBJECT_CAST	293
+#define	T_BOOL_CAST	294
+#define	T_UNSET_CAST	295
+#define	T_NEW	296
+#define	T_EXIT	297
+#define	T_IF	298
+#define	T_ELSEIF	299
+#define	T_ELSE	300
+#define	T_ENDIF	301
+#define	T_LNUMBER	302
+#define	T_DNUMBER	303
+#define	T_STRING	304
+#define	T_STRING_VARNAME	305
+#define	T_VARIABLE	306
+#define	T_NUM_STRING	307
+#define	T_INLINE_HTML	308
+#define	T_CHARACTER	309
+#define	T_BAD_CHARACTER	310
+#define	T_ENCAPSED_AND_WHITESPACE	311
+#define	T_CONSTANT_ENCAPSED_STRING	312
+#define	T_ECHO	313
+#define	T_DO	314
+#define	T_WHILE	315
+#define	T_ENDWHILE	316
+#define	T_FOR	317
+#define	T_ENDFOR	318
+#define	T_FOREACH	319
+#define	T_ENDFOREACH	320
+#define	T_DECLARE	321
+#define	T_ENDDECLARE	322
+#define	T_AS	323
+#define	T_SWITCH	324
+#define	T_ENDSWITCH	325
+#define	T_CASE	326
+#define	T_DEFAULT	327
+#define	T_BREAK	328
+#define	T_CONTINUE	329
+#define	T_OLD_FUNCTION	330
+#define	T_FUNCTION	331
+#define	T_CONST	332
+#define	T_RETURN	333
+#define	T_USE	334
+#define	T_GLOBAL	335
+#define	T_STATIC	336
+#define	T_VAR	337
+#define	T_UNSET	338
+#define	T_ISSET	339
+#define	T_EMPTY	340
+#define	T_CLASS	341
+#define	T_EXTENDS	342
+#define	T_OBJECT_OPERATOR	343
+#define	T_DOUBLE_ARROW	344
+#define	T_LIST	345
+#define	T_ARRAY	346
+#define	T_CLASS_C	347
+#define	T_FUNC_C	348
+#define	T_LINE	349
+#define	T_FILE	350
+#define	T_COMMENT	351
+#define	T_ML_COMMENT	352
+#define	T_OPEN_TAG	353
+#define	T_OPEN_TAG_WITH_ECHO	354
+#define	T_CLOSE_TAG	355
+#define	T_WHITESPACE	356
+#define	T_START_HEREDOC	357
+#define	T_END_HEREDOC	358
+#define	T_DOLLAR_OPEN_CURLY_BRACES	359
+#define	T_CURLY_OPEN	360
+#define	T_PAAMAYIM_NEKUDOTAYIM	361
+
diff -Nur php-4.3.11/Zend/zend_language_parser.output php/Zend/zend_language_parser.output
--- php-4.3.11/Zend/zend_language_parser.output	2005-03-30 22:35:48.000000000 +0800
+++ php/Zend/zend_language_parser.output	1970-01-01 08:00:00.000000000 +0800
@@ -1,18527 +0,0 @@
-Conflict in state 84 between rule 339 and token T_LOGICAL_OR resolved as shift.
-Conflict in state 84 between rule 339 and token T_LOGICAL_XOR resolved as shift.
-Conflict in state 84 between rule 339 and token T_LOGICAL_AND resolved as shift.
-Conflict in state 84 between rule 339 and token '?' resolved as shift.
-Conflict in state 84 between rule 339 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 84 between rule 339 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 84 between rule 339 and token '|' resolved as shift.
-Conflict in state 84 between rule 339 and token '^' resolved as shift.
-Conflict in state 84 between rule 339 and token '&' resolved as shift.
-Conflict in state 84 between rule 339 and token T_IS_EQUAL resolved as shift.
-Conflict in state 84 between rule 339 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 84 between rule 339 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 84 between rule 339 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 84 between rule 339 and token '<' resolved as shift.
-Conflict in state 84 between rule 339 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 84 between rule 339 and token '>' resolved as shift.
-Conflict in state 84 between rule 339 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 84 between rule 339 and token T_SL resolved as shift.
-Conflict in state 84 between rule 339 and token T_SR resolved as shift.
-Conflict in state 84 between rule 339 and token '+' resolved as shift.
-Conflict in state 84 between rule 339 and token '-' resolved as shift.
-Conflict in state 84 between rule 339 and token '.' resolved as shift.
-Conflict in state 84 between rule 339 and token '*' resolved as shift.
-Conflict in state 84 between rule 339 and token '/' resolved as shift.
-Conflict in state 84 between rule 339 and token '%' resolved as shift.
-Conflict in state 85 between rule 340 and token T_LOGICAL_OR resolved as shift.
-Conflict in state 85 between rule 340 and token T_LOGICAL_XOR resolved as shift.
-Conflict in state 85 between rule 340 and token T_LOGICAL_AND resolved as shift.
-Conflict in state 85 between rule 340 and token '?' resolved as shift.
-Conflict in state 85 between rule 340 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 85 between rule 340 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 85 between rule 340 and token '|' resolved as shift.
-Conflict in state 85 between rule 340 and token '^' resolved as shift.
-Conflict in state 85 between rule 340 and token '&' resolved as shift.
-Conflict in state 85 between rule 340 and token T_IS_EQUAL resolved as shift.
-Conflict in state 85 between rule 340 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 85 between rule 340 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 85 between rule 340 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 85 between rule 340 and token '<' resolved as shift.
-Conflict in state 85 between rule 340 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 85 between rule 340 and token '>' resolved as shift.
-Conflict in state 85 between rule 340 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 85 between rule 340 and token T_SL resolved as shift.
-Conflict in state 85 between rule 340 and token T_SR resolved as shift.
-Conflict in state 85 between rule 340 and token '+' resolved as shift.
-Conflict in state 85 between rule 340 and token '-' resolved as shift.
-Conflict in state 85 between rule 340 and token '.' resolved as shift.
-Conflict in state 85 between rule 340 and token '*' resolved as shift.
-Conflict in state 85 between rule 340 and token '/' resolved as shift.
-Conflict in state 85 between rule 340 and token '%' resolved as shift.
-Conflict in state 87 between rule 342 and token T_LOGICAL_OR resolved as shift.
-Conflict in state 87 between rule 342 and token T_LOGICAL_XOR resolved as shift.
-Conflict in state 87 between rule 342 and token T_LOGICAL_AND resolved as shift.
-Conflict in state 87 between rule 342 and token '?' resolved as shift.
-Conflict in state 87 between rule 342 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 87 between rule 342 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 87 between rule 342 and token '|' resolved as shift.
-Conflict in state 87 between rule 342 and token '^' resolved as shift.
-Conflict in state 87 between rule 342 and token '&' resolved as shift.
-Conflict in state 87 between rule 342 and token T_IS_EQUAL resolved as shift.
-Conflict in state 87 between rule 342 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 87 between rule 342 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 87 between rule 342 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 87 between rule 342 and token '<' resolved as shift.
-Conflict in state 87 between rule 342 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 87 between rule 342 and token '>' resolved as shift.
-Conflict in state 87 between rule 342 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 87 between rule 342 and token T_SL resolved as shift.
-Conflict in state 87 between rule 342 and token T_SR resolved as shift.
-Conflict in state 87 between rule 342 and token '+' resolved as shift.
-Conflict in state 87 between rule 342 and token '-' resolved as shift.
-Conflict in state 87 between rule 342 and token '.' resolved as shift.
-Conflict in state 87 between rule 342 and token '*' resolved as shift.
-Conflict in state 87 between rule 342 and token '/' resolved as shift.
-Conflict in state 87 between rule 342 and token '%' resolved as shift.
-Conflict in state 88 between rule 343 and token T_LOGICAL_OR resolved as shift.
-Conflict in state 88 between rule 343 and token T_LOGICAL_XOR resolved as shift.
-Conflict in state 88 between rule 343 and token T_LOGICAL_AND resolved as shift.
-Conflict in state 88 between rule 343 and token '?' resolved as shift.
-Conflict in state 88 between rule 343 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 88 between rule 343 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 88 between rule 343 and token '|' resolved as shift.
-Conflict in state 88 between rule 343 and token '^' resolved as shift.
-Conflict in state 88 between rule 343 and token '&' resolved as shift.
-Conflict in state 88 between rule 343 and token T_IS_EQUAL resolved as shift.
-Conflict in state 88 between rule 343 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 88 between rule 343 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 88 between rule 343 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 88 between rule 343 and token '<' resolved as shift.
-Conflict in state 88 between rule 343 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 88 between rule 343 and token '>' resolved as shift.
-Conflict in state 88 between rule 343 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 88 between rule 343 and token T_SL resolved as shift.
-Conflict in state 88 between rule 343 and token T_SR resolved as shift.
-Conflict in state 88 between rule 343 and token '+' resolved as shift.
-Conflict in state 88 between rule 343 and token '-' resolved as shift.
-Conflict in state 88 between rule 343 and token '.' resolved as shift.
-Conflict in state 88 between rule 343 and token '*' resolved as shift.
-Conflict in state 88 between rule 343 and token '/' resolved as shift.
-Conflict in state 88 between rule 343 and token '%' resolved as shift.
-Conflict in state 89 between rule 229 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 89 between rule 229 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 89 between rule 229 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 89 between rule 229 and token '?' resolved as shift.
-Conflict in state 89 between rule 229 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 89 between rule 229 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 89 between rule 229 and token '|' resolved as shift.
-Conflict in state 89 between rule 229 and token '^' resolved as shift.
-Conflict in state 89 between rule 229 and token '&' resolved as shift.
-Conflict in state 89 between rule 229 and token T_IS_EQUAL resolved as shift.
-Conflict in state 89 between rule 229 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 89 between rule 229 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 89 between rule 229 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 89 between rule 229 and token '<' resolved as shift.
-Conflict in state 89 between rule 229 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 89 between rule 229 and token '>' resolved as shift.
-Conflict in state 89 between rule 229 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 89 between rule 229 and token T_SL resolved as shift.
-Conflict in state 89 between rule 229 and token T_SR resolved as shift.
-Conflict in state 89 between rule 229 and token '+' resolved as shift.
-Conflict in state 89 between rule 229 and token '-' resolved as shift.
-Conflict in state 89 between rule 229 and token '.' resolved as shift.
-Conflict in state 89 between rule 229 and token '*' resolved as shift.
-Conflict in state 89 between rule 229 and token '/' resolved as shift.
-Conflict in state 89 between rule 229 and token '%' resolved as shift.
-Conflict in state 90 between rule 198 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 90 between rule 198 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 90 between rule 198 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 90 between rule 198 and token '?' resolved as reduce.
-Conflict in state 90 between rule 198 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 90 between rule 198 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 90 between rule 198 and token '|' resolved as reduce.
-Conflict in state 90 between rule 198 and token '^' resolved as reduce.
-Conflict in state 90 between rule 198 and token '&' resolved as reduce.
-Conflict in state 90 between rule 198 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 90 between rule 198 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 90 between rule 198 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 90 between rule 198 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 90 between rule 198 and token '<' resolved as reduce.
-Conflict in state 90 between rule 198 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 90 between rule 198 and token '>' resolved as reduce.
-Conflict in state 90 between rule 198 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 90 between rule 198 and token T_SL resolved as reduce.
-Conflict in state 90 between rule 198 and token T_SR resolved as reduce.
-Conflict in state 90 between rule 198 and token '+' resolved as reduce.
-Conflict in state 90 between rule 198 and token '-' resolved as reduce.
-Conflict in state 90 between rule 198 and token '.' resolved as reduce.
-Conflict in state 90 between rule 198 and token '*' resolved as shift.
-Conflict in state 90 between rule 198 and token '/' resolved as shift.
-Conflict in state 90 between rule 198 and token '%' resolved as shift.
-Conflict in state 91 between rule 199 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 91 between rule 199 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 91 between rule 199 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 91 between rule 199 and token '?' resolved as reduce.
-Conflict in state 91 between rule 199 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 91 between rule 199 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 91 between rule 199 and token '|' resolved as reduce.
-Conflict in state 91 between rule 199 and token '^' resolved as reduce.
-Conflict in state 91 between rule 199 and token '&' resolved as reduce.
-Conflict in state 91 between rule 199 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 91 between rule 199 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 91 between rule 199 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 91 between rule 199 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 91 between rule 199 and token '<' resolved as reduce.
-Conflict in state 91 between rule 199 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 91 between rule 199 and token '>' resolved as reduce.
-Conflict in state 91 between rule 199 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 91 between rule 199 and token T_SL resolved as reduce.
-Conflict in state 91 between rule 199 and token T_SR resolved as reduce.
-Conflict in state 91 between rule 199 and token '+' resolved as reduce.
-Conflict in state 91 between rule 199 and token '-' resolved as reduce.
-Conflict in state 91 between rule 199 and token '.' resolved as reduce.
-Conflict in state 91 between rule 199 and token '*' resolved as shift.
-Conflict in state 91 between rule 199 and token '/' resolved as shift.
-Conflict in state 91 between rule 199 and token '%' resolved as shift.
-Conflict in state 92 between rule 200 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 92 between rule 200 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 92 between rule 200 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 92 between rule 200 and token '?' resolved as reduce.
-Conflict in state 92 between rule 200 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 92 between rule 200 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 92 between rule 200 and token '|' resolved as reduce.
-Conflict in state 92 between rule 200 and token '^' resolved as reduce.
-Conflict in state 92 between rule 200 and token '&' resolved as reduce.
-Conflict in state 92 between rule 200 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 92 between rule 200 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 92 between rule 200 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 92 between rule 200 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 92 between rule 200 and token '<' resolved as reduce.
-Conflict in state 92 between rule 200 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 92 between rule 200 and token '>' resolved as reduce.
-Conflict in state 92 between rule 200 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 92 between rule 200 and token T_SL resolved as reduce.
-Conflict in state 92 between rule 200 and token T_SR resolved as reduce.
-Conflict in state 92 between rule 200 and token '+' resolved as reduce.
-Conflict in state 92 between rule 200 and token '-' resolved as reduce.
-Conflict in state 92 between rule 200 and token '.' resolved as reduce.
-Conflict in state 92 between rule 200 and token '*' resolved as reduce.
-Conflict in state 92 between rule 200 and token '/' resolved as reduce.
-Conflict in state 92 between rule 200 and token '%' resolved as reduce.
-Conflict in state 93 between rule 201 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 93 between rule 201 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 93 between rule 201 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 93 between rule 201 and token '?' resolved as reduce.
-Conflict in state 93 between rule 201 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 93 between rule 201 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 93 between rule 201 and token '|' resolved as reduce.
-Conflict in state 93 between rule 201 and token '^' resolved as reduce.
-Conflict in state 93 between rule 201 and token '&' resolved as reduce.
-Conflict in state 93 between rule 201 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 93 between rule 201 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 93 between rule 201 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 93 between rule 201 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 93 between rule 201 and token '<' resolved as reduce.
-Conflict in state 93 between rule 201 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 93 between rule 201 and token '>' resolved as reduce.
-Conflict in state 93 between rule 201 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 93 between rule 201 and token T_SL resolved as reduce.
-Conflict in state 93 between rule 201 and token T_SR resolved as reduce.
-Conflict in state 93 between rule 201 and token '+' resolved as reduce.
-Conflict in state 93 between rule 201 and token '-' resolved as reduce.
-Conflict in state 93 between rule 201 and token '.' resolved as reduce.
-Conflict in state 93 between rule 201 and token '*' resolved as reduce.
-Conflict in state 93 between rule 201 and token '/' resolved as reduce.
-Conflict in state 93 between rule 201 and token '%' resolved as reduce.
-Conflict in state 97 between rule 216 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 97 between rule 216 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 97 between rule 216 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 97 between rule 216 and token '?' resolved as reduce.
-Conflict in state 97 between rule 216 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 97 between rule 216 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 97 between rule 216 and token '|' resolved as reduce.
-Conflict in state 97 between rule 216 and token '^' resolved as reduce.
-Conflict in state 97 between rule 216 and token '&' resolved as reduce.
-Conflict in state 97 between rule 216 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 97 between rule 216 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 97 between rule 216 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 97 between rule 216 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 97 between rule 216 and token '<' resolved as reduce.
-Conflict in state 97 between rule 216 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 97 between rule 216 and token '>' resolved as reduce.
-Conflict in state 97 between rule 216 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 97 between rule 216 and token T_SL resolved as reduce.
-Conflict in state 97 between rule 216 and token T_SR resolved as reduce.
-Conflict in state 97 between rule 216 and token '+' resolved as reduce.
-Conflict in state 97 between rule 216 and token '-' resolved as reduce.
-Conflict in state 97 between rule 216 and token '.' resolved as reduce.
-Conflict in state 97 between rule 216 and token '*' resolved as reduce.
-Conflict in state 97 between rule 216 and token '/' resolved as reduce.
-Conflict in state 97 between rule 216 and token '%' resolved as reduce.
-Conflict in state 98 between rule 217 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 98 between rule 217 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 98 between rule 217 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 98 between rule 217 and token '?' resolved as reduce.
-Conflict in state 98 between rule 217 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 98 between rule 217 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 98 between rule 217 and token '|' resolved as reduce.
-Conflict in state 98 between rule 217 and token '^' resolved as reduce.
-Conflict in state 98 between rule 217 and token '&' resolved as reduce.
-Conflict in state 98 between rule 217 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 98 between rule 217 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 98 between rule 217 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 98 between rule 217 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 98 between rule 217 and token '<' resolved as reduce.
-Conflict in state 98 between rule 217 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 98 between rule 217 and token '>' resolved as reduce.
-Conflict in state 98 between rule 217 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 98 between rule 217 and token T_SL resolved as reduce.
-Conflict in state 98 between rule 217 and token T_SR resolved as reduce.
-Conflict in state 98 between rule 217 and token '+' resolved as reduce.
-Conflict in state 98 between rule 217 and token '-' resolved as reduce.
-Conflict in state 98 between rule 217 and token '.' resolved as reduce.
-Conflict in state 98 between rule 217 and token '*' resolved as reduce.
-Conflict in state 98 between rule 217 and token '/' resolved as reduce.
-Conflict in state 98 between rule 217 and token '%' resolved as reduce.
-Conflict in state 99 between rule 218 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 99 between rule 218 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 99 between rule 218 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 99 between rule 218 and token '?' resolved as reduce.
-Conflict in state 99 between rule 218 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 99 between rule 218 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 99 between rule 218 and token '|' resolved as reduce.
-Conflict in state 99 between rule 218 and token '^' resolved as reduce.
-Conflict in state 99 between rule 218 and token '&' resolved as reduce.
-Conflict in state 99 between rule 218 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 99 between rule 218 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 99 between rule 218 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 99 between rule 218 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 99 between rule 218 and token '<' resolved as reduce.
-Conflict in state 99 between rule 218 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 99 between rule 218 and token '>' resolved as reduce.
-Conflict in state 99 between rule 218 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 99 between rule 218 and token T_SL resolved as reduce.
-Conflict in state 99 between rule 218 and token T_SR resolved as reduce.
-Conflict in state 99 between rule 218 and token '+' resolved as reduce.
-Conflict in state 99 between rule 218 and token '-' resolved as reduce.
-Conflict in state 99 between rule 218 and token '.' resolved as reduce.
-Conflict in state 99 between rule 218 and token '*' resolved as reduce.
-Conflict in state 99 between rule 218 and token '/' resolved as reduce.
-Conflict in state 99 between rule 218 and token '%' resolved as reduce.
-Conflict in state 100 between rule 219 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 100 between rule 219 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 100 between rule 219 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 100 between rule 219 and token '?' resolved as reduce.
-Conflict in state 100 between rule 219 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 100 between rule 219 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 100 between rule 219 and token '|' resolved as reduce.
-Conflict in state 100 between rule 219 and token '^' resolved as reduce.
-Conflict in state 100 between rule 219 and token '&' resolved as reduce.
-Conflict in state 100 between rule 219 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 100 between rule 219 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 100 between rule 219 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 100 between rule 219 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 100 between rule 219 and token '<' resolved as reduce.
-Conflict in state 100 between rule 219 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 100 between rule 219 and token '>' resolved as reduce.
-Conflict in state 100 between rule 219 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 100 between rule 219 and token T_SL resolved as reduce.
-Conflict in state 100 between rule 219 and token T_SR resolved as reduce.
-Conflict in state 100 between rule 219 and token '+' resolved as reduce.
-Conflict in state 100 between rule 219 and token '-' resolved as reduce.
-Conflict in state 100 between rule 219 and token '.' resolved as reduce.
-Conflict in state 100 between rule 219 and token '*' resolved as reduce.
-Conflict in state 100 between rule 219 and token '/' resolved as reduce.
-Conflict in state 100 between rule 219 and token '%' resolved as reduce.
-Conflict in state 101 between rule 220 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 101 between rule 220 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 101 between rule 220 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 101 between rule 220 and token '?' resolved as reduce.
-Conflict in state 101 between rule 220 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 101 between rule 220 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 101 between rule 220 and token '|' resolved as reduce.
-Conflict in state 101 between rule 220 and token '^' resolved as reduce.
-Conflict in state 101 between rule 220 and token '&' resolved as reduce.
-Conflict in state 101 between rule 220 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 101 between rule 220 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 101 between rule 220 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 101 between rule 220 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 101 between rule 220 and token '<' resolved as reduce.
-Conflict in state 101 between rule 220 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 101 between rule 220 and token '>' resolved as reduce.
-Conflict in state 101 between rule 220 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 101 between rule 220 and token T_SL resolved as reduce.
-Conflict in state 101 between rule 220 and token T_SR resolved as reduce.
-Conflict in state 101 between rule 220 and token '+' resolved as reduce.
-Conflict in state 101 between rule 220 and token '-' resolved as reduce.
-Conflict in state 101 between rule 220 and token '.' resolved as reduce.
-Conflict in state 101 between rule 220 and token '*' resolved as reduce.
-Conflict in state 101 between rule 220 and token '/' resolved as reduce.
-Conflict in state 101 between rule 220 and token '%' resolved as reduce.
-Conflict in state 102 between rule 221 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 102 between rule 221 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 102 between rule 221 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 102 between rule 221 and token '?' resolved as reduce.
-Conflict in state 102 between rule 221 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 102 between rule 221 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 102 between rule 221 and token '|' resolved as reduce.
-Conflict in state 102 between rule 221 and token '^' resolved as reduce.
-Conflict in state 102 between rule 221 and token '&' resolved as reduce.
-Conflict in state 102 between rule 221 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 102 between rule 221 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 102 between rule 221 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 102 between rule 221 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 102 between rule 221 and token '<' resolved as reduce.
-Conflict in state 102 between rule 221 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 102 between rule 221 and token '>' resolved as reduce.
-Conflict in state 102 between rule 221 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 102 between rule 221 and token T_SL resolved as reduce.
-Conflict in state 102 between rule 221 and token T_SR resolved as reduce.
-Conflict in state 102 between rule 221 and token '+' resolved as reduce.
-Conflict in state 102 between rule 221 and token '-' resolved as reduce.
-Conflict in state 102 between rule 221 and token '.' resolved as reduce.
-Conflict in state 102 between rule 221 and token '*' resolved as reduce.
-Conflict in state 102 between rule 221 and token '/' resolved as reduce.
-Conflict in state 102 between rule 221 and token '%' resolved as reduce.
-Conflict in state 103 between rule 222 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 103 between rule 222 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 103 between rule 222 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 103 between rule 222 and token '?' resolved as reduce.
-Conflict in state 103 between rule 222 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 103 between rule 222 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 103 between rule 222 and token '|' resolved as reduce.
-Conflict in state 103 between rule 222 and token '^' resolved as reduce.
-Conflict in state 103 between rule 222 and token '&' resolved as reduce.
-Conflict in state 103 between rule 222 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 103 between rule 222 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 103 between rule 222 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 103 between rule 222 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 103 between rule 222 and token '<' resolved as reduce.
-Conflict in state 103 between rule 222 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 103 between rule 222 and token '>' resolved as reduce.
-Conflict in state 103 between rule 222 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 103 between rule 222 and token T_SL resolved as reduce.
-Conflict in state 103 between rule 222 and token T_SR resolved as reduce.
-Conflict in state 103 between rule 222 and token '+' resolved as reduce.
-Conflict in state 103 between rule 222 and token '-' resolved as reduce.
-Conflict in state 103 between rule 222 and token '.' resolved as reduce.
-Conflict in state 103 between rule 222 and token '*' resolved as reduce.
-Conflict in state 103 between rule 222 and token '/' resolved as reduce.
-Conflict in state 103 between rule 222 and token '%' resolved as reduce.
-Conflict in state 201 between rule 225 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 201 between rule 225 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 201 between rule 225 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 201 between rule 225 and token '?' resolved as reduce.
-Conflict in state 201 between rule 225 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 201 between rule 225 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 201 between rule 225 and token '|' resolved as reduce.
-Conflict in state 201 between rule 225 and token '^' resolved as reduce.
-Conflict in state 201 between rule 225 and token '&' resolved as reduce.
-Conflict in state 201 between rule 225 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 201 between rule 225 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 201 between rule 225 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 201 between rule 225 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 201 between rule 225 and token '<' resolved as reduce.
-Conflict in state 201 between rule 225 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 201 between rule 225 and token '>' resolved as reduce.
-Conflict in state 201 between rule 225 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 201 between rule 225 and token T_SL resolved as reduce.
-Conflict in state 201 between rule 225 and token T_SR resolved as reduce.
-Conflict in state 201 between rule 225 and token '+' resolved as reduce.
-Conflict in state 201 between rule 225 and token '-' resolved as reduce.
-Conflict in state 201 between rule 225 and token '.' resolved as reduce.
-Conflict in state 201 between rule 225 and token '*' resolved as reduce.
-Conflict in state 201 between rule 225 and token '/' resolved as reduce.
-Conflict in state 201 between rule 225 and token '%' resolved as reduce.
-Conflict in state 272 between rule 186 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 272 between rule 186 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 272 between rule 186 and token T_LOGICAL_AND resolved as shift.
-Conflict in state 272 between rule 186 and token '?' resolved as shift.
-Conflict in state 272 between rule 186 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 272 between rule 186 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 272 between rule 186 and token '|' resolved as shift.
-Conflict in state 272 between rule 186 and token '^' resolved as shift.
-Conflict in state 272 between rule 186 and token '&' resolved as shift.
-Conflict in state 272 between rule 186 and token T_IS_EQUAL resolved as shift.
-Conflict in state 272 between rule 186 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 272 between rule 186 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 272 between rule 186 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 272 between rule 186 and token '<' resolved as shift.
-Conflict in state 272 between rule 186 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 272 between rule 186 and token '>' resolved as shift.
-Conflict in state 272 between rule 186 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 272 between rule 186 and token T_SL resolved as shift.
-Conflict in state 272 between rule 186 and token T_SR resolved as shift.
-Conflict in state 272 between rule 186 and token '+' resolved as shift.
-Conflict in state 272 between rule 186 and token '-' resolved as shift.
-Conflict in state 272 between rule 186 and token '.' resolved as shift.
-Conflict in state 272 between rule 186 and token '*' resolved as shift.
-Conflict in state 272 between rule 186 and token '/' resolved as shift.
-Conflict in state 272 between rule 186 and token '%' resolved as shift.
-Conflict in state 277 between rule 187 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 277 between rule 187 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 277 between rule 187 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 277 between rule 187 and token '?' resolved as reduce.
-Conflict in state 277 between rule 187 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 277 between rule 187 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 277 between rule 187 and token '|' resolved as reduce.
-Conflict in state 277 between rule 187 and token '^' resolved as shift.
-Conflict in state 277 between rule 187 and token '&' resolved as shift.
-Conflict in state 277 between rule 187 and token T_IS_EQUAL resolved as shift.
-Conflict in state 277 between rule 187 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 277 between rule 187 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 277 between rule 187 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 277 between rule 187 and token '<' resolved as shift.
-Conflict in state 277 between rule 187 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 277 between rule 187 and token '>' resolved as shift.
-Conflict in state 277 between rule 187 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 277 between rule 187 and token T_SL resolved as shift.
-Conflict in state 277 between rule 187 and token T_SR resolved as shift.
-Conflict in state 277 between rule 187 and token '+' resolved as shift.
-Conflict in state 277 between rule 187 and token '-' resolved as shift.
-Conflict in state 277 between rule 187 and token '.' resolved as shift.
-Conflict in state 277 between rule 187 and token '*' resolved as shift.
-Conflict in state 277 between rule 187 and token '/' resolved as shift.
-Conflict in state 277 between rule 187 and token '%' resolved as shift.
-Conflict in state 278 between rule 189 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 278 between rule 189 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 278 between rule 189 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 278 between rule 189 and token '?' resolved as reduce.
-Conflict in state 278 between rule 189 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 278 between rule 189 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 278 between rule 189 and token '|' resolved as reduce.
-Conflict in state 278 between rule 189 and token '^' resolved as reduce.
-Conflict in state 278 between rule 189 and token '&' resolved as shift.
-Conflict in state 278 between rule 189 and token T_IS_EQUAL resolved as shift.
-Conflict in state 278 between rule 189 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 278 between rule 189 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 278 between rule 189 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 278 between rule 189 and token '<' resolved as shift.
-Conflict in state 278 between rule 189 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 278 between rule 189 and token '>' resolved as shift.
-Conflict in state 278 between rule 189 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 278 between rule 189 and token T_SL resolved as shift.
-Conflict in state 278 between rule 189 and token T_SR resolved as shift.
-Conflict in state 278 between rule 189 and token '+' resolved as shift.
-Conflict in state 278 between rule 189 and token '-' resolved as shift.
-Conflict in state 278 between rule 189 and token '.' resolved as shift.
-Conflict in state 278 between rule 189 and token '*' resolved as shift.
-Conflict in state 278 between rule 189 and token '/' resolved as shift.
-Conflict in state 278 between rule 189 and token '%' resolved as shift.
-Conflict in state 279 between rule 188 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 279 between rule 188 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 279 between rule 188 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 279 between rule 188 and token '?' resolved as reduce.
-Conflict in state 279 between rule 188 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 279 between rule 188 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 279 between rule 188 and token '|' resolved as reduce.
-Conflict in state 279 between rule 188 and token '^' resolved as reduce.
-Conflict in state 279 between rule 188 and token '&' resolved as reduce.
-Conflict in state 279 between rule 188 and token T_IS_EQUAL resolved as shift.
-Conflict in state 279 between rule 188 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 279 between rule 188 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 279 between rule 188 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 279 between rule 188 and token '<' resolved as shift.
-Conflict in state 279 between rule 188 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 279 between rule 188 and token '>' resolved as shift.
-Conflict in state 279 between rule 188 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 279 between rule 188 and token T_SL resolved as shift.
-Conflict in state 279 between rule 188 and token T_SR resolved as shift.
-Conflict in state 279 between rule 188 and token '+' resolved as shift.
-Conflict in state 279 between rule 188 and token '-' resolved as shift.
-Conflict in state 279 between rule 188 and token '.' resolved as shift.
-Conflict in state 279 between rule 188 and token '*' resolved as shift.
-Conflict in state 279 between rule 188 and token '/' resolved as shift.
-Conflict in state 279 between rule 188 and token '%' resolved as shift.
-Conflict in state 280 between rule 204 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 280 between rule 204 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 280 between rule 204 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 280 between rule 204 and token '?' resolved as reduce.
-Conflict in state 280 between rule 204 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 280 between rule 204 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 280 between rule 204 and token '|' resolved as reduce.
-Conflict in state 280 between rule 204 and token '^' resolved as reduce.
-Conflict in state 280 between rule 204 and token '&' resolved as reduce.
-Conflict in state 280 between rule 204 and token T_IS_EQUAL resolved as an error.
-Conflict in state 280 between rule 204 and token T_IS_NOT_EQUAL resolved as an error.
-Conflict in state 280 between rule 204 and token T_IS_IDENTICAL resolved as an error.
-Conflict in state 280 between rule 204 and token T_IS_NOT_IDENTICAL resolved as an error.
-Conflict in state 280 between rule 204 and token '<' resolved as shift.
-Conflict in state 280 between rule 204 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 280 between rule 204 and token '>' resolved as shift.
-Conflict in state 280 between rule 204 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 280 between rule 204 and token T_SL resolved as shift.
-Conflict in state 280 between rule 204 and token T_SR resolved as shift.
-Conflict in state 280 between rule 204 and token '+' resolved as shift.
-Conflict in state 280 between rule 204 and token '-' resolved as shift.
-Conflict in state 280 between rule 204 and token '.' resolved as shift.
-Conflict in state 280 between rule 204 and token '*' resolved as shift.
-Conflict in state 280 between rule 204 and token '/' resolved as shift.
-Conflict in state 280 between rule 204 and token '%' resolved as shift.
-Conflict in state 281 between rule 205 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 281 between rule 205 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 281 between rule 205 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 281 between rule 205 and token '?' resolved as reduce.
-Conflict in state 281 between rule 205 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 281 between rule 205 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 281 between rule 205 and token '|' resolved as reduce.
-Conflict in state 281 between rule 205 and token '^' resolved as reduce.
-Conflict in state 281 between rule 205 and token '&' resolved as reduce.
-Conflict in state 281 between rule 205 and token T_IS_EQUAL resolved as an error.
-Conflict in state 281 between rule 205 and token T_IS_NOT_EQUAL resolved as an error.
-Conflict in state 281 between rule 205 and token T_IS_IDENTICAL resolved as an error.
-Conflict in state 281 between rule 205 and token T_IS_NOT_IDENTICAL resolved as an error.
-Conflict in state 281 between rule 205 and token '<' resolved as shift.
-Conflict in state 281 between rule 205 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 281 between rule 205 and token '>' resolved as shift.
-Conflict in state 281 between rule 205 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 281 between rule 205 and token T_SL resolved as shift.
-Conflict in state 281 between rule 205 and token T_SR resolved as shift.
-Conflict in state 281 between rule 205 and token '+' resolved as shift.
-Conflict in state 281 between rule 205 and token '-' resolved as shift.
-Conflict in state 281 between rule 205 and token '.' resolved as shift.
-Conflict in state 281 between rule 205 and token '*' resolved as shift.
-Conflict in state 281 between rule 205 and token '/' resolved as shift.
-Conflict in state 281 between rule 205 and token '%' resolved as shift.
-Conflict in state 282 between rule 202 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 282 between rule 202 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 282 between rule 202 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 282 between rule 202 and token '?' resolved as reduce.
-Conflict in state 282 between rule 202 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 282 between rule 202 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 282 between rule 202 and token '|' resolved as reduce.
-Conflict in state 282 between rule 202 and token '^' resolved as reduce.
-Conflict in state 282 between rule 202 and token '&' resolved as reduce.
-Conflict in state 282 between rule 202 and token T_IS_EQUAL resolved as an error.
-Conflict in state 282 between rule 202 and token T_IS_NOT_EQUAL resolved as an error.
-Conflict in state 282 between rule 202 and token T_IS_IDENTICAL resolved as an error.
-Conflict in state 282 between rule 202 and token T_IS_NOT_IDENTICAL resolved as an error.
-Conflict in state 282 between rule 202 and token '<' resolved as shift.
-Conflict in state 282 between rule 202 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 282 between rule 202 and token '>' resolved as shift.
-Conflict in state 282 between rule 202 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 282 between rule 202 and token T_SL resolved as shift.
-Conflict in state 282 between rule 202 and token T_SR resolved as shift.
-Conflict in state 282 between rule 202 and token '+' resolved as shift.
-Conflict in state 282 between rule 202 and token '-' resolved as shift.
-Conflict in state 282 between rule 202 and token '.' resolved as shift.
-Conflict in state 282 between rule 202 and token '*' resolved as shift.
-Conflict in state 282 between rule 202 and token '/' resolved as shift.
-Conflict in state 282 between rule 202 and token '%' resolved as shift.
-Conflict in state 283 between rule 203 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 283 between rule 203 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 283 between rule 203 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 283 between rule 203 and token '?' resolved as reduce.
-Conflict in state 283 between rule 203 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 283 between rule 203 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 283 between rule 203 and token '|' resolved as reduce.
-Conflict in state 283 between rule 203 and token '^' resolved as reduce.
-Conflict in state 283 between rule 203 and token '&' resolved as reduce.
-Conflict in state 283 between rule 203 and token T_IS_EQUAL resolved as an error.
-Conflict in state 283 between rule 203 and token T_IS_NOT_EQUAL resolved as an error.
-Conflict in state 283 between rule 203 and token T_IS_IDENTICAL resolved as an error.
-Conflict in state 283 between rule 203 and token T_IS_NOT_IDENTICAL resolved as an error.
-Conflict in state 283 between rule 203 and token '<' resolved as shift.
-Conflict in state 283 between rule 203 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 283 between rule 203 and token '>' resolved as shift.
-Conflict in state 283 between rule 203 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 283 between rule 203 and token T_SL resolved as shift.
-Conflict in state 283 between rule 203 and token T_SR resolved as shift.
-Conflict in state 283 between rule 203 and token '+' resolved as shift.
-Conflict in state 283 between rule 203 and token '-' resolved as shift.
-Conflict in state 283 between rule 203 and token '.' resolved as shift.
-Conflict in state 283 between rule 203 and token '*' resolved as shift.
-Conflict in state 283 between rule 203 and token '/' resolved as shift.
-Conflict in state 283 between rule 203 and token '%' resolved as shift.
-Conflict in state 284 between rule 206 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 284 between rule 206 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 284 between rule 206 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 284 between rule 206 and token '?' resolved as reduce.
-Conflict in state 284 between rule 206 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 284 between rule 206 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 284 between rule 206 and token '|' resolved as reduce.
-Conflict in state 284 between rule 206 and token '^' resolved as reduce.
-Conflict in state 284 between rule 206 and token '&' resolved as reduce.
-Conflict in state 284 between rule 206 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 284 between rule 206 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 284 between rule 206 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 284 between rule 206 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 284 between rule 206 and token '<' resolved as an error.
-Conflict in state 284 between rule 206 and token T_IS_SMALLER_OR_EQUAL resolved as an error.
-Conflict in state 284 between rule 206 and token '>' resolved as an error.
-Conflict in state 284 between rule 206 and token T_IS_GREATER_OR_EQUAL resolved as an error.
-Conflict in state 284 between rule 206 and token T_SL resolved as shift.
-Conflict in state 284 between rule 206 and token T_SR resolved as shift.
-Conflict in state 284 between rule 206 and token '+' resolved as shift.
-Conflict in state 284 between rule 206 and token '-' resolved as shift.
-Conflict in state 284 between rule 206 and token '.' resolved as shift.
-Conflict in state 284 between rule 206 and token '*' resolved as shift.
-Conflict in state 284 between rule 206 and token '/' resolved as shift.
-Conflict in state 284 between rule 206 and token '%' resolved as shift.
-Conflict in state 285 between rule 207 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 285 between rule 207 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 285 between rule 207 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 285 between rule 207 and token '?' resolved as reduce.
-Conflict in state 285 between rule 207 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 285 between rule 207 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 285 between rule 207 and token '|' resolved as reduce.
-Conflict in state 285 between rule 207 and token '^' resolved as reduce.
-Conflict in state 285 between rule 207 and token '&' resolved as reduce.
-Conflict in state 285 between rule 207 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 285 between rule 207 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 285 between rule 207 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 285 between rule 207 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 285 between rule 207 and token '<' resolved as an error.
-Conflict in state 285 between rule 207 and token T_IS_SMALLER_OR_EQUAL resolved as an error.
-Conflict in state 285 between rule 207 and token '>' resolved as an error.
-Conflict in state 285 between rule 207 and token T_IS_GREATER_OR_EQUAL resolved as an error.
-Conflict in state 285 between rule 207 and token T_SL resolved as shift.
-Conflict in state 285 between rule 207 and token T_SR resolved as shift.
-Conflict in state 285 between rule 207 and token '+' resolved as shift.
-Conflict in state 285 between rule 207 and token '-' resolved as shift.
-Conflict in state 285 between rule 207 and token '.' resolved as shift.
-Conflict in state 285 between rule 207 and token '*' resolved as shift.
-Conflict in state 285 between rule 207 and token '/' resolved as shift.
-Conflict in state 285 between rule 207 and token '%' resolved as shift.
-Conflict in state 286 between rule 208 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 286 between rule 208 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 286 between rule 208 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 286 between rule 208 and token '?' resolved as reduce.
-Conflict in state 286 between rule 208 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 286 between rule 208 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 286 between rule 208 and token '|' resolved as reduce.
-Conflict in state 286 between rule 208 and token '^' resolved as reduce.
-Conflict in state 286 between rule 208 and token '&' resolved as reduce.
-Conflict in state 286 between rule 208 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 286 between rule 208 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 286 between rule 208 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 286 between rule 208 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 286 between rule 208 and token '<' resolved as an error.
-Conflict in state 286 between rule 208 and token T_IS_SMALLER_OR_EQUAL resolved as an error.
-Conflict in state 286 between rule 208 and token '>' resolved as an error.
-Conflict in state 286 between rule 208 and token T_IS_GREATER_OR_EQUAL resolved as an error.
-Conflict in state 286 between rule 208 and token T_SL resolved as shift.
-Conflict in state 286 between rule 208 and token T_SR resolved as shift.
-Conflict in state 286 between rule 208 and token '+' resolved as shift.
-Conflict in state 286 between rule 208 and token '-' resolved as shift.
-Conflict in state 286 between rule 208 and token '.' resolved as shift.
-Conflict in state 286 between rule 208 and token '*' resolved as shift.
-Conflict in state 286 between rule 208 and token '/' resolved as shift.
-Conflict in state 286 between rule 208 and token '%' resolved as shift.
-Conflict in state 287 between rule 209 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 287 between rule 209 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 287 between rule 209 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 287 between rule 209 and token '?' resolved as reduce.
-Conflict in state 287 between rule 209 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 287 between rule 209 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 287 between rule 209 and token '|' resolved as reduce.
-Conflict in state 287 between rule 209 and token '^' resolved as reduce.
-Conflict in state 287 between rule 209 and token '&' resolved as reduce.
-Conflict in state 287 between rule 209 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 287 between rule 209 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 287 between rule 209 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 287 between rule 209 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 287 between rule 209 and token '<' resolved as an error.
-Conflict in state 287 between rule 209 and token T_IS_SMALLER_OR_EQUAL resolved as an error.
-Conflict in state 287 between rule 209 and token '>' resolved as an error.
-Conflict in state 287 between rule 209 and token T_IS_GREATER_OR_EQUAL resolved as an error.
-Conflict in state 287 between rule 209 and token T_SL resolved as shift.
-Conflict in state 287 between rule 209 and token T_SR resolved as shift.
-Conflict in state 287 between rule 209 and token '+' resolved as shift.
-Conflict in state 287 between rule 209 and token '-' resolved as shift.
-Conflict in state 287 between rule 209 and token '.' resolved as shift.
-Conflict in state 287 between rule 209 and token '*' resolved as shift.
-Conflict in state 287 between rule 209 and token '/' resolved as shift.
-Conflict in state 287 between rule 209 and token '%' resolved as shift.
-Conflict in state 288 between rule 196 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 288 between rule 196 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 288 between rule 196 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 288 between rule 196 and token '?' resolved as reduce.
-Conflict in state 288 between rule 196 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 288 between rule 196 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 288 between rule 196 and token '|' resolved as reduce.
-Conflict in state 288 between rule 196 and token '^' resolved as reduce.
-Conflict in state 288 between rule 196 and token '&' resolved as reduce.
-Conflict in state 288 between rule 196 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 288 between rule 196 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 288 between rule 196 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 288 between rule 196 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 288 between rule 196 and token '<' resolved as reduce.
-Conflict in state 288 between rule 196 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 288 between rule 196 and token '>' resolved as reduce.
-Conflict in state 288 between rule 196 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 288 between rule 196 and token T_SL resolved as reduce.
-Conflict in state 288 between rule 196 and token T_SR resolved as reduce.
-Conflict in state 288 between rule 196 and token '+' resolved as shift.
-Conflict in state 288 between rule 196 and token '-' resolved as shift.
-Conflict in state 288 between rule 196 and token '.' resolved as shift.
-Conflict in state 288 between rule 196 and token '*' resolved as shift.
-Conflict in state 288 between rule 196 and token '/' resolved as shift.
-Conflict in state 288 between rule 196 and token '%' resolved as shift.
-Conflict in state 289 between rule 197 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 289 between rule 197 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 289 between rule 197 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 289 between rule 197 and token '?' resolved as reduce.
-Conflict in state 289 between rule 197 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 289 between rule 197 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 289 between rule 197 and token '|' resolved as reduce.
-Conflict in state 289 between rule 197 and token '^' resolved as reduce.
-Conflict in state 289 between rule 197 and token '&' resolved as reduce.
-Conflict in state 289 between rule 197 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 289 between rule 197 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 289 between rule 197 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 289 between rule 197 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 289 between rule 197 and token '<' resolved as reduce.
-Conflict in state 289 between rule 197 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 289 between rule 197 and token '>' resolved as reduce.
-Conflict in state 289 between rule 197 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 289 between rule 197 and token T_SL resolved as reduce.
-Conflict in state 289 between rule 197 and token T_SR resolved as reduce.
-Conflict in state 289 between rule 197 and token '+' resolved as shift.
-Conflict in state 289 between rule 197 and token '-' resolved as shift.
-Conflict in state 289 between rule 197 and token '.' resolved as shift.
-Conflict in state 289 between rule 197 and token '*' resolved as shift.
-Conflict in state 289 between rule 197 and token '/' resolved as shift.
-Conflict in state 289 between rule 197 and token '%' resolved as shift.
-Conflict in state 290 between rule 191 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 290 between rule 191 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 290 between rule 191 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 290 between rule 191 and token '?' resolved as reduce.
-Conflict in state 290 between rule 191 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 290 between rule 191 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 290 between rule 191 and token '|' resolved as reduce.
-Conflict in state 290 between rule 191 and token '^' resolved as reduce.
-Conflict in state 290 between rule 191 and token '&' resolved as reduce.
-Conflict in state 290 between rule 191 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 290 between rule 191 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 290 between rule 191 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 290 between rule 191 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 290 between rule 191 and token '<' resolved as reduce.
-Conflict in state 290 between rule 191 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 290 between rule 191 and token '>' resolved as reduce.
-Conflict in state 290 between rule 191 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 290 between rule 191 and token T_SL resolved as reduce.
-Conflict in state 290 between rule 191 and token T_SR resolved as reduce.
-Conflict in state 290 between rule 191 and token '+' resolved as reduce.
-Conflict in state 290 between rule 191 and token '-' resolved as reduce.
-Conflict in state 290 between rule 191 and token '.' resolved as reduce.
-Conflict in state 290 between rule 191 and token '*' resolved as shift.
-Conflict in state 290 between rule 191 and token '/' resolved as shift.
-Conflict in state 290 between rule 191 and token '%' resolved as shift.
-Conflict in state 291 between rule 192 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 291 between rule 192 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 291 between rule 192 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 291 between rule 192 and token '?' resolved as reduce.
-Conflict in state 291 between rule 192 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 291 between rule 192 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 291 between rule 192 and token '|' resolved as reduce.
-Conflict in state 291 between rule 192 and token '^' resolved as reduce.
-Conflict in state 291 between rule 192 and token '&' resolved as reduce.
-Conflict in state 291 between rule 192 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 291 between rule 192 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 291 between rule 192 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 291 between rule 192 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 291 between rule 192 and token '<' resolved as reduce.
-Conflict in state 291 between rule 192 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 291 between rule 192 and token '>' resolved as reduce.
-Conflict in state 291 between rule 192 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 291 between rule 192 and token T_SL resolved as reduce.
-Conflict in state 291 between rule 192 and token T_SR resolved as reduce.
-Conflict in state 291 between rule 192 and token '+' resolved as reduce.
-Conflict in state 291 between rule 192 and token '-' resolved as reduce.
-Conflict in state 291 between rule 192 and token '.' resolved as reduce.
-Conflict in state 291 between rule 192 and token '*' resolved as shift.
-Conflict in state 291 between rule 192 and token '/' resolved as shift.
-Conflict in state 291 between rule 192 and token '%' resolved as shift.
-Conflict in state 292 between rule 190 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 292 between rule 190 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 292 between rule 190 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 292 between rule 190 and token '?' resolved as reduce.
-Conflict in state 292 between rule 190 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 292 between rule 190 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 292 between rule 190 and token '|' resolved as reduce.
-Conflict in state 292 between rule 190 and token '^' resolved as reduce.
-Conflict in state 292 between rule 190 and token '&' resolved as reduce.
-Conflict in state 292 between rule 190 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 292 between rule 190 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 292 between rule 190 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 292 between rule 190 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 292 between rule 190 and token '<' resolved as reduce.
-Conflict in state 292 between rule 190 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 292 between rule 190 and token '>' resolved as reduce.
-Conflict in state 292 between rule 190 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 292 between rule 190 and token T_SL resolved as reduce.
-Conflict in state 292 between rule 190 and token T_SR resolved as reduce.
-Conflict in state 292 between rule 190 and token '+' resolved as reduce.
-Conflict in state 292 between rule 190 and token '-' resolved as reduce.
-Conflict in state 292 between rule 190 and token '.' resolved as reduce.
-Conflict in state 292 between rule 190 and token '*' resolved as shift.
-Conflict in state 292 between rule 190 and token '/' resolved as shift.
-Conflict in state 292 between rule 190 and token '%' resolved as shift.
-Conflict in state 293 between rule 193 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 293 between rule 193 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 293 between rule 193 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 293 between rule 193 and token '?' resolved as reduce.
-Conflict in state 293 between rule 193 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 293 between rule 193 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 293 between rule 193 and token '|' resolved as reduce.
-Conflict in state 293 between rule 193 and token '^' resolved as reduce.
-Conflict in state 293 between rule 193 and token '&' resolved as reduce.
-Conflict in state 293 between rule 193 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 293 between rule 193 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 293 between rule 193 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 293 between rule 193 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 293 between rule 193 and token '<' resolved as reduce.
-Conflict in state 293 between rule 193 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 293 between rule 193 and token '>' resolved as reduce.
-Conflict in state 293 between rule 193 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 293 between rule 193 and token T_SL resolved as reduce.
-Conflict in state 293 between rule 193 and token T_SR resolved as reduce.
-Conflict in state 293 between rule 193 and token '+' resolved as reduce.
-Conflict in state 293 between rule 193 and token '-' resolved as reduce.
-Conflict in state 293 between rule 193 and token '.' resolved as reduce.
-Conflict in state 293 between rule 193 and token '*' resolved as reduce.
-Conflict in state 293 between rule 193 and token '/' resolved as reduce.
-Conflict in state 293 between rule 193 and token '%' resolved as reduce.
-Conflict in state 294 between rule 194 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 294 between rule 194 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 294 between rule 194 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 294 between rule 194 and token '?' resolved as reduce.
-Conflict in state 294 between rule 194 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 294 between rule 194 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 294 between rule 194 and token '|' resolved as reduce.
-Conflict in state 294 between rule 194 and token '^' resolved as reduce.
-Conflict in state 294 between rule 194 and token '&' resolved as reduce.
-Conflict in state 294 between rule 194 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 294 between rule 194 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 294 between rule 194 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 294 between rule 194 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 294 between rule 194 and token '<' resolved as reduce.
-Conflict in state 294 between rule 194 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 294 between rule 194 and token '>' resolved as reduce.
-Conflict in state 294 between rule 194 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 294 between rule 194 and token T_SL resolved as reduce.
-Conflict in state 294 between rule 194 and token T_SR resolved as reduce.
-Conflict in state 294 between rule 194 and token '+' resolved as reduce.
-Conflict in state 294 between rule 194 and token '-' resolved as reduce.
-Conflict in state 294 between rule 194 and token '.' resolved as reduce.
-Conflict in state 294 between rule 194 and token '*' resolved as reduce.
-Conflict in state 294 between rule 194 and token '/' resolved as reduce.
-Conflict in state 294 between rule 194 and token '%' resolved as reduce.
-Conflict in state 295 between rule 195 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 295 between rule 195 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 295 between rule 195 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 295 between rule 195 and token '?' resolved as reduce.
-Conflict in state 295 between rule 195 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 295 between rule 195 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 295 between rule 195 and token '|' resolved as reduce.
-Conflict in state 295 between rule 195 and token '^' resolved as reduce.
-Conflict in state 295 between rule 195 and token '&' resolved as reduce.
-Conflict in state 295 between rule 195 and token T_IS_EQUAL resolved as reduce.
-Conflict in state 295 between rule 195 and token T_IS_NOT_EQUAL resolved as reduce.
-Conflict in state 295 between rule 195 and token T_IS_IDENTICAL resolved as reduce.
-Conflict in state 295 between rule 195 and token T_IS_NOT_IDENTICAL resolved as reduce.
-Conflict in state 295 between rule 195 and token '<' resolved as reduce.
-Conflict in state 295 between rule 195 and token T_IS_SMALLER_OR_EQUAL resolved as reduce.
-Conflict in state 295 between rule 195 and token '>' resolved as reduce.
-Conflict in state 295 between rule 195 and token T_IS_GREATER_OR_EQUAL resolved as reduce.
-Conflict in state 295 between rule 195 and token T_SL resolved as reduce.
-Conflict in state 295 between rule 195 and token T_SR resolved as reduce.
-Conflict in state 295 between rule 195 and token '+' resolved as reduce.
-Conflict in state 295 between rule 195 and token '-' resolved as reduce.
-Conflict in state 295 between rule 195 and token '.' resolved as reduce.
-Conflict in state 295 between rule 195 and token '*' resolved as reduce.
-Conflict in state 295 between rule 195 and token '/' resolved as reduce.
-Conflict in state 295 between rule 195 and token '%' resolved as reduce.
-Conflict in state 297 between rule 156 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 297 between rule 156 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 297 between rule 156 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 297 between rule 156 and token '?' resolved as shift.
-Conflict in state 297 between rule 156 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 297 between rule 156 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 297 between rule 156 and token '|' resolved as shift.
-Conflict in state 297 between rule 156 and token '^' resolved as shift.
-Conflict in state 297 between rule 156 and token '&' resolved as shift.
-Conflict in state 297 between rule 156 and token T_IS_EQUAL resolved as shift.
-Conflict in state 297 between rule 156 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 297 between rule 156 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 297 between rule 156 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 297 between rule 156 and token '<' resolved as shift.
-Conflict in state 297 between rule 156 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 297 between rule 156 and token '>' resolved as shift.
-Conflict in state 297 between rule 156 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 297 between rule 156 and token T_SL resolved as shift.
-Conflict in state 297 between rule 156 and token T_SR resolved as shift.
-Conflict in state 297 between rule 156 and token '+' resolved as shift.
-Conflict in state 297 between rule 156 and token '-' resolved as shift.
-Conflict in state 297 between rule 156 and token '.' resolved as shift.
-Conflict in state 297 between rule 156 and token '*' resolved as shift.
-Conflict in state 297 between rule 156 and token '/' resolved as shift.
-Conflict in state 297 between rule 156 and token '%' resolved as shift.
-Conflict in state 298 between rule 163 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 298 between rule 163 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 298 between rule 163 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 298 between rule 163 and token '?' resolved as shift.
-Conflict in state 298 between rule 163 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 298 between rule 163 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 298 between rule 163 and token '|' resolved as shift.
-Conflict in state 298 between rule 163 and token '^' resolved as shift.
-Conflict in state 298 between rule 163 and token '&' resolved as shift.
-Conflict in state 298 between rule 163 and token T_IS_EQUAL resolved as shift.
-Conflict in state 298 between rule 163 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 298 between rule 163 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 298 between rule 163 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 298 between rule 163 and token '<' resolved as shift.
-Conflict in state 298 between rule 163 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 298 between rule 163 and token '>' resolved as shift.
-Conflict in state 298 between rule 163 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 298 between rule 163 and token T_SL resolved as shift.
-Conflict in state 298 between rule 163 and token T_SR resolved as shift.
-Conflict in state 298 between rule 163 and token '+' resolved as shift.
-Conflict in state 298 between rule 163 and token '-' resolved as shift.
-Conflict in state 298 between rule 163 and token '.' resolved as shift.
-Conflict in state 298 between rule 163 and token '*' resolved as shift.
-Conflict in state 298 between rule 163 and token '/' resolved as shift.
-Conflict in state 298 between rule 163 and token '%' resolved as shift.
-Conflict in state 299 between rule 164 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 299 between rule 164 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 299 between rule 164 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 299 between rule 164 and token '?' resolved as shift.
-Conflict in state 299 between rule 164 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 299 between rule 164 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 299 between rule 164 and token '|' resolved as shift.
-Conflict in state 299 between rule 164 and token '^' resolved as shift.
-Conflict in state 299 between rule 164 and token '&' resolved as shift.
-Conflict in state 299 between rule 164 and token T_IS_EQUAL resolved as shift.
-Conflict in state 299 between rule 164 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 299 between rule 164 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 299 between rule 164 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 299 between rule 164 and token '<' resolved as shift.
-Conflict in state 299 between rule 164 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 299 between rule 164 and token '>' resolved as shift.
-Conflict in state 299 between rule 164 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 299 between rule 164 and token T_SL resolved as shift.
-Conflict in state 299 between rule 164 and token T_SR resolved as shift.
-Conflict in state 299 between rule 164 and token '+' resolved as shift.
-Conflict in state 299 between rule 164 and token '-' resolved as shift.
-Conflict in state 299 between rule 164 and token '.' resolved as shift.
-Conflict in state 299 between rule 164 and token '*' resolved as shift.
-Conflict in state 299 between rule 164 and token '/' resolved as shift.
-Conflict in state 299 between rule 164 and token '%' resolved as shift.
-Conflict in state 300 between rule 165 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 300 between rule 165 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 300 between rule 165 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 300 between rule 165 and token '?' resolved as shift.
-Conflict in state 300 between rule 165 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 300 between rule 165 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 300 between rule 165 and token '|' resolved as shift.
-Conflict in state 300 between rule 165 and token '^' resolved as shift.
-Conflict in state 300 between rule 165 and token '&' resolved as shift.
-Conflict in state 300 between rule 165 and token T_IS_EQUAL resolved as shift.
-Conflict in state 300 between rule 165 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 300 between rule 165 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 300 between rule 165 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 300 between rule 165 and token '<' resolved as shift.
-Conflict in state 300 between rule 165 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 300 between rule 165 and token '>' resolved as shift.
-Conflict in state 300 between rule 165 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 300 between rule 165 and token T_SL resolved as shift.
-Conflict in state 300 between rule 165 and token T_SR resolved as shift.
-Conflict in state 300 between rule 165 and token '+' resolved as shift.
-Conflict in state 300 between rule 165 and token '-' resolved as shift.
-Conflict in state 300 between rule 165 and token '.' resolved as shift.
-Conflict in state 300 between rule 165 and token '*' resolved as shift.
-Conflict in state 300 between rule 165 and token '/' resolved as shift.
-Conflict in state 300 between rule 165 and token '%' resolved as shift.
-Conflict in state 301 between rule 166 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 301 between rule 166 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 301 between rule 166 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 301 between rule 166 and token '?' resolved as shift.
-Conflict in state 301 between rule 166 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 301 between rule 166 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 301 between rule 166 and token '|' resolved as shift.
-Conflict in state 301 between rule 166 and token '^' resolved as shift.
-Conflict in state 301 between rule 166 and token '&' resolved as shift.
-Conflict in state 301 between rule 166 and token T_IS_EQUAL resolved as shift.
-Conflict in state 301 between rule 166 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 301 between rule 166 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 301 between rule 166 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 301 between rule 166 and token '<' resolved as shift.
-Conflict in state 301 between rule 166 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 301 between rule 166 and token '>' resolved as shift.
-Conflict in state 301 between rule 166 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 301 between rule 166 and token T_SL resolved as shift.
-Conflict in state 301 between rule 166 and token T_SR resolved as shift.
-Conflict in state 301 between rule 166 and token '+' resolved as shift.
-Conflict in state 301 between rule 166 and token '-' resolved as shift.
-Conflict in state 301 between rule 166 and token '.' resolved as shift.
-Conflict in state 301 between rule 166 and token '*' resolved as shift.
-Conflict in state 301 between rule 166 and token '/' resolved as shift.
-Conflict in state 301 between rule 166 and token '%' resolved as shift.
-Conflict in state 302 between rule 167 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 302 between rule 167 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 302 between rule 167 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 302 between rule 167 and token '?' resolved as shift.
-Conflict in state 302 between rule 167 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 302 between rule 167 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 302 between rule 167 and token '|' resolved as shift.
-Conflict in state 302 between rule 167 and token '^' resolved as shift.
-Conflict in state 302 between rule 167 and token '&' resolved as shift.
-Conflict in state 302 between rule 167 and token T_IS_EQUAL resolved as shift.
-Conflict in state 302 between rule 167 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 302 between rule 167 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 302 between rule 167 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 302 between rule 167 and token '<' resolved as shift.
-Conflict in state 302 between rule 167 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 302 between rule 167 and token '>' resolved as shift.
-Conflict in state 302 between rule 167 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 302 between rule 167 and token T_SL resolved as shift.
-Conflict in state 302 between rule 167 and token T_SR resolved as shift.
-Conflict in state 302 between rule 167 and token '+' resolved as shift.
-Conflict in state 302 between rule 167 and token '-' resolved as shift.
-Conflict in state 302 between rule 167 and token '.' resolved as shift.
-Conflict in state 302 between rule 167 and token '*' resolved as shift.
-Conflict in state 302 between rule 167 and token '/' resolved as shift.
-Conflict in state 302 between rule 167 and token '%' resolved as shift.
-Conflict in state 303 between rule 168 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 303 between rule 168 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 303 between rule 168 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 303 between rule 168 and token '?' resolved as shift.
-Conflict in state 303 between rule 168 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 303 between rule 168 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 303 between rule 168 and token '|' resolved as shift.
-Conflict in state 303 between rule 168 and token '^' resolved as shift.
-Conflict in state 303 between rule 168 and token '&' resolved as shift.
-Conflict in state 303 between rule 168 and token T_IS_EQUAL resolved as shift.
-Conflict in state 303 between rule 168 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 303 between rule 168 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 303 between rule 168 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 303 between rule 168 and token '<' resolved as shift.
-Conflict in state 303 between rule 168 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 303 between rule 168 and token '>' resolved as shift.
-Conflict in state 303 between rule 168 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 303 between rule 168 and token T_SL resolved as shift.
-Conflict in state 303 between rule 168 and token T_SR resolved as shift.
-Conflict in state 303 between rule 168 and token '+' resolved as shift.
-Conflict in state 303 between rule 168 and token '-' resolved as shift.
-Conflict in state 303 between rule 168 and token '.' resolved as shift.
-Conflict in state 303 between rule 168 and token '*' resolved as shift.
-Conflict in state 303 between rule 168 and token '/' resolved as shift.
-Conflict in state 303 between rule 168 and token '%' resolved as shift.
-Conflict in state 304 between rule 169 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 304 between rule 169 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 304 between rule 169 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 304 between rule 169 and token '?' resolved as shift.
-Conflict in state 304 between rule 169 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 304 between rule 169 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 304 between rule 169 and token '|' resolved as shift.
-Conflict in state 304 between rule 169 and token '^' resolved as shift.
-Conflict in state 304 between rule 169 and token '&' resolved as shift.
-Conflict in state 304 between rule 169 and token T_IS_EQUAL resolved as shift.
-Conflict in state 304 between rule 169 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 304 between rule 169 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 304 between rule 169 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 304 between rule 169 and token '<' resolved as shift.
-Conflict in state 304 between rule 169 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 304 between rule 169 and token '>' resolved as shift.
-Conflict in state 304 between rule 169 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 304 between rule 169 and token T_SL resolved as shift.
-Conflict in state 304 between rule 169 and token T_SR resolved as shift.
-Conflict in state 304 between rule 169 and token '+' resolved as shift.
-Conflict in state 304 between rule 169 and token '-' resolved as shift.
-Conflict in state 304 between rule 169 and token '.' resolved as shift.
-Conflict in state 304 between rule 169 and token '*' resolved as shift.
-Conflict in state 304 between rule 169 and token '/' resolved as shift.
-Conflict in state 304 between rule 169 and token '%' resolved as shift.
-Conflict in state 305 between rule 170 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 305 between rule 170 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 305 between rule 170 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 305 between rule 170 and token '?' resolved as shift.
-Conflict in state 305 between rule 170 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 305 between rule 170 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 305 between rule 170 and token '|' resolved as shift.
-Conflict in state 305 between rule 170 and token '^' resolved as shift.
-Conflict in state 305 between rule 170 and token '&' resolved as shift.
-Conflict in state 305 between rule 170 and token T_IS_EQUAL resolved as shift.
-Conflict in state 305 between rule 170 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 305 between rule 170 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 305 between rule 170 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 305 between rule 170 and token '<' resolved as shift.
-Conflict in state 305 between rule 170 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 305 between rule 170 and token '>' resolved as shift.
-Conflict in state 305 between rule 170 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 305 between rule 170 and token T_SL resolved as shift.
-Conflict in state 305 between rule 170 and token T_SR resolved as shift.
-Conflict in state 305 between rule 170 and token '+' resolved as shift.
-Conflict in state 305 between rule 170 and token '-' resolved as shift.
-Conflict in state 305 between rule 170 and token '.' resolved as shift.
-Conflict in state 305 between rule 170 and token '*' resolved as shift.
-Conflict in state 305 between rule 170 and token '/' resolved as shift.
-Conflict in state 305 between rule 170 and token '%' resolved as shift.
-Conflict in state 306 between rule 171 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 306 between rule 171 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 306 between rule 171 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 306 between rule 171 and token '?' resolved as shift.
-Conflict in state 306 between rule 171 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 306 between rule 171 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 306 between rule 171 and token '|' resolved as shift.
-Conflict in state 306 between rule 171 and token '^' resolved as shift.
-Conflict in state 306 between rule 171 and token '&' resolved as shift.
-Conflict in state 306 between rule 171 and token T_IS_EQUAL resolved as shift.
-Conflict in state 306 between rule 171 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 306 between rule 171 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 306 between rule 171 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 306 between rule 171 and token '<' resolved as shift.
-Conflict in state 306 between rule 171 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 306 between rule 171 and token '>' resolved as shift.
-Conflict in state 306 between rule 171 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 306 between rule 171 and token T_SL resolved as shift.
-Conflict in state 306 between rule 171 and token T_SR resolved as shift.
-Conflict in state 306 between rule 171 and token '+' resolved as shift.
-Conflict in state 306 between rule 171 and token '-' resolved as shift.
-Conflict in state 306 between rule 171 and token '.' resolved as shift.
-Conflict in state 306 between rule 171 and token '*' resolved as shift.
-Conflict in state 306 between rule 171 and token '/' resolved as shift.
-Conflict in state 306 between rule 171 and token '%' resolved as shift.
-Conflict in state 307 between rule 172 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 307 between rule 172 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 307 between rule 172 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 307 between rule 172 and token '?' resolved as shift.
-Conflict in state 307 between rule 172 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 307 between rule 172 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 307 between rule 172 and token '|' resolved as shift.
-Conflict in state 307 between rule 172 and token '^' resolved as shift.
-Conflict in state 307 between rule 172 and token '&' resolved as shift.
-Conflict in state 307 between rule 172 and token T_IS_EQUAL resolved as shift.
-Conflict in state 307 between rule 172 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 307 between rule 172 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 307 between rule 172 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 307 between rule 172 and token '<' resolved as shift.
-Conflict in state 307 between rule 172 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 307 between rule 172 and token '>' resolved as shift.
-Conflict in state 307 between rule 172 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 307 between rule 172 and token T_SL resolved as shift.
-Conflict in state 307 between rule 172 and token T_SR resolved as shift.
-Conflict in state 307 between rule 172 and token '+' resolved as shift.
-Conflict in state 307 between rule 172 and token '-' resolved as shift.
-Conflict in state 307 between rule 172 and token '.' resolved as shift.
-Conflict in state 307 between rule 172 and token '*' resolved as shift.
-Conflict in state 307 between rule 172 and token '/' resolved as shift.
-Conflict in state 307 between rule 172 and token '%' resolved as shift.
-Conflict in state 308 between rule 173 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 308 between rule 173 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 308 between rule 173 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 308 between rule 173 and token '?' resolved as shift.
-Conflict in state 308 between rule 173 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 308 between rule 173 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 308 between rule 173 and token '|' resolved as shift.
-Conflict in state 308 between rule 173 and token '^' resolved as shift.
-Conflict in state 308 between rule 173 and token '&' resolved as shift.
-Conflict in state 308 between rule 173 and token T_IS_EQUAL resolved as shift.
-Conflict in state 308 between rule 173 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 308 between rule 173 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 308 between rule 173 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 308 between rule 173 and token '<' resolved as shift.
-Conflict in state 308 between rule 173 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 308 between rule 173 and token '>' resolved as shift.
-Conflict in state 308 between rule 173 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 308 between rule 173 and token T_SL resolved as shift.
-Conflict in state 308 between rule 173 and token T_SR resolved as shift.
-Conflict in state 308 between rule 173 and token '+' resolved as shift.
-Conflict in state 308 between rule 173 and token '-' resolved as shift.
-Conflict in state 308 between rule 173 and token '.' resolved as shift.
-Conflict in state 308 between rule 173 and token '*' resolved as shift.
-Conflict in state 308 between rule 173 and token '/' resolved as shift.
-Conflict in state 308 between rule 173 and token '%' resolved as shift.
-Conflict in state 373 between rule 183 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 373 between rule 183 and token T_LOGICAL_XOR resolved as shift.
-Conflict in state 373 between rule 183 and token T_LOGICAL_AND resolved as shift.
-Conflict in state 373 between rule 183 and token '?' resolved as shift.
-Conflict in state 373 between rule 183 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 373 between rule 183 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 373 between rule 183 and token '|' resolved as shift.
-Conflict in state 373 between rule 183 and token '^' resolved as shift.
-Conflict in state 373 between rule 183 and token '&' resolved as shift.
-Conflict in state 373 between rule 183 and token T_IS_EQUAL resolved as shift.
-Conflict in state 373 between rule 183 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 373 between rule 183 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 373 between rule 183 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 373 between rule 183 and token '<' resolved as shift.
-Conflict in state 373 between rule 183 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 373 between rule 183 and token '>' resolved as shift.
-Conflict in state 373 between rule 183 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 373 between rule 183 and token T_SL resolved as shift.
-Conflict in state 373 between rule 183 and token T_SR resolved as shift.
-Conflict in state 373 between rule 183 and token '+' resolved as shift.
-Conflict in state 373 between rule 183 and token '-' resolved as shift.
-Conflict in state 373 between rule 183 and token '.' resolved as shift.
-Conflict in state 373 between rule 183 and token '*' resolved as shift.
-Conflict in state 373 between rule 183 and token '/' resolved as shift.
-Conflict in state 373 between rule 183 and token '%' resolved as shift.
-Conflict in state 374 between rule 185 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 374 between rule 185 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 374 between rule 185 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 374 between rule 185 and token '?' resolved as shift.
-Conflict in state 374 between rule 185 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 374 between rule 185 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 374 between rule 185 and token '|' resolved as shift.
-Conflict in state 374 between rule 185 and token '^' resolved as shift.
-Conflict in state 374 between rule 185 and token '&' resolved as shift.
-Conflict in state 374 between rule 185 and token T_IS_EQUAL resolved as shift.
-Conflict in state 374 between rule 185 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 374 between rule 185 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 374 between rule 185 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 374 between rule 185 and token '<' resolved as shift.
-Conflict in state 374 between rule 185 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 374 between rule 185 and token '>' resolved as shift.
-Conflict in state 374 between rule 185 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 374 between rule 185 and token T_SL resolved as shift.
-Conflict in state 374 between rule 185 and token T_SR resolved as shift.
-Conflict in state 374 between rule 185 and token '+' resolved as shift.
-Conflict in state 374 between rule 185 and token '-' resolved as shift.
-Conflict in state 374 between rule 185 and token '.' resolved as shift.
-Conflict in state 374 between rule 185 and token '*' resolved as shift.
-Conflict in state 374 between rule 185 and token '/' resolved as shift.
-Conflict in state 374 between rule 185 and token '%' resolved as shift.
-Conflict in state 376 between rule 179 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 376 between rule 179 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 376 between rule 179 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 376 between rule 179 and token '?' resolved as reduce.
-Conflict in state 376 between rule 179 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 376 between rule 179 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 376 between rule 179 and token '|' resolved as shift.
-Conflict in state 376 between rule 179 and token '^' resolved as shift.
-Conflict in state 376 between rule 179 and token '&' resolved as shift.
-Conflict in state 376 between rule 179 and token T_IS_EQUAL resolved as shift.
-Conflict in state 376 between rule 179 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 376 between rule 179 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 376 between rule 179 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 376 between rule 179 and token '<' resolved as shift.
-Conflict in state 376 between rule 179 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 376 between rule 179 and token '>' resolved as shift.
-Conflict in state 376 between rule 179 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 376 between rule 179 and token T_SL resolved as shift.
-Conflict in state 376 between rule 179 and token T_SR resolved as shift.
-Conflict in state 376 between rule 179 and token '+' resolved as shift.
-Conflict in state 376 between rule 179 and token '-' resolved as shift.
-Conflict in state 376 between rule 179 and token '.' resolved as shift.
-Conflict in state 376 between rule 179 and token '*' resolved as shift.
-Conflict in state 376 between rule 179 and token '/' resolved as shift.
-Conflict in state 376 between rule 179 and token '%' resolved as shift.
-Conflict in state 377 between rule 181 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 377 between rule 181 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 377 between rule 181 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 377 between rule 181 and token '?' resolved as reduce.
-Conflict in state 377 between rule 181 and token T_BOOLEAN_OR resolved as reduce.
-Conflict in state 377 between rule 181 and token T_BOOLEAN_AND resolved as reduce.
-Conflict in state 377 between rule 181 and token '|' resolved as shift.
-Conflict in state 377 between rule 181 and token '^' resolved as shift.
-Conflict in state 377 between rule 181 and token '&' resolved as shift.
-Conflict in state 377 between rule 181 and token T_IS_EQUAL resolved as shift.
-Conflict in state 377 between rule 181 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 377 between rule 181 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 377 between rule 181 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 377 between rule 181 and token '<' resolved as shift.
-Conflict in state 377 between rule 181 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 377 between rule 181 and token '>' resolved as shift.
-Conflict in state 377 between rule 181 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 377 between rule 181 and token T_SL resolved as shift.
-Conflict in state 377 between rule 181 and token T_SR resolved as shift.
-Conflict in state 377 between rule 181 and token '+' resolved as shift.
-Conflict in state 377 between rule 181 and token '-' resolved as shift.
-Conflict in state 377 between rule 181 and token '.' resolved as shift.
-Conflict in state 377 between rule 181 and token '*' resolved as shift.
-Conflict in state 377 between rule 181 and token '/' resolved as shift.
-Conflict in state 377 between rule 181 and token '%' resolved as shift.
-Conflict in state 531 between rule 155 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 531 between rule 155 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 531 between rule 155 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 531 between rule 155 and token '?' resolved as shift.
-Conflict in state 531 between rule 155 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 531 between rule 155 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 531 between rule 155 and token '|' resolved as shift.
-Conflict in state 531 between rule 155 and token '^' resolved as shift.
-Conflict in state 531 between rule 155 and token '&' resolved as shift.
-Conflict in state 531 between rule 155 and token T_IS_EQUAL resolved as shift.
-Conflict in state 531 between rule 155 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 531 between rule 155 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 531 between rule 155 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 531 between rule 155 and token '<' resolved as shift.
-Conflict in state 531 between rule 155 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 531 between rule 155 and token '>' resolved as shift.
-Conflict in state 531 between rule 155 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 531 between rule 155 and token T_SL resolved as shift.
-Conflict in state 531 between rule 155 and token T_SR resolved as shift.
-Conflict in state 531 between rule 155 and token '+' resolved as shift.
-Conflict in state 531 between rule 155 and token '-' resolved as shift.
-Conflict in state 531 between rule 155 and token '.' resolved as shift.
-Conflict in state 531 between rule 155 and token '*' resolved as shift.
-Conflict in state 531 between rule 155 and token '/' resolved as shift.
-Conflict in state 531 between rule 155 and token '%' resolved as shift.
-Conflict in state 536 between rule 213 and token T_LOGICAL_OR resolved as reduce.
-Conflict in state 536 between rule 213 and token T_LOGICAL_XOR resolved as reduce.
-Conflict in state 536 between rule 213 and token T_LOGICAL_AND resolved as reduce.
-Conflict in state 536 between rule 213 and token '?' resolved as reduce.
-Conflict in state 536 between rule 213 and token T_BOOLEAN_OR resolved as shift.
-Conflict in state 536 between rule 213 and token T_BOOLEAN_AND resolved as shift.
-Conflict in state 536 between rule 213 and token '|' resolved as shift.
-Conflict in state 536 between rule 213 and token '^' resolved as shift.
-Conflict in state 536 between rule 213 and token '&' resolved as shift.
-Conflict in state 536 between rule 213 and token T_IS_EQUAL resolved as shift.
-Conflict in state 536 between rule 213 and token T_IS_NOT_EQUAL resolved as shift.
-Conflict in state 536 between rule 213 and token T_IS_IDENTICAL resolved as shift.
-Conflict in state 536 between rule 213 and token T_IS_NOT_IDENTICAL resolved as shift.
-Conflict in state 536 between rule 213 and token '<' resolved as shift.
-Conflict in state 536 between rule 213 and token T_IS_SMALLER_OR_EQUAL resolved as shift.
-Conflict in state 536 between rule 213 and token '>' resolved as shift.
-Conflict in state 536 between rule 213 and token T_IS_GREATER_OR_EQUAL resolved as shift.
-Conflict in state 536 between rule 213 and token T_SL resolved as shift.
-Conflict in state 536 between rule 213 and token T_SR resolved as shift.
-Conflict in state 536 between rule 213 and token '+' resolved as shift.
-Conflict in state 536 between rule 213 and token '-' resolved as shift.
-Conflict in state 536 between rule 213 and token '.' resolved as shift.
-Conflict in state 536 between rule 213 and token '*' resolved as shift.
-Conflict in state 536 between rule 213 and token '/' resolved as shift.
-Conflict in state 536 between rule 213 and token '%' resolved as shift.
-
-
-Terminals which are not used:
-
-   T_COMMENT
-   T_ML_COMMENT
-   T_OPEN_TAG
-   T_OPEN_TAG_WITH_ECHO
-   T_CLOSE_TAG
-   T_WHITESPACE
-
-
-State 251 contains 2 shift/reduce conflicts.
-State 542 contains 2 shift/reduce conflicts.
-
-
-Grammar
-
-  Number, Line, Rule
-    1 139 start -> top_statement_list
-    2 143 @1 -> /* empty */
-    3 143 top_statement_list -> top_statement_list @1 top_statement
-    4 145 top_statement_list -> /* empty */
-    5 149 top_statement -> statement
-    6 151 top_statement -> declaration_statement
-    7 155 @2 -> /* empty */
-    8 155 inner_statement_list -> inner_statement_list @2 inner_statement
-    9 157 inner_statement_list -> /* empty */
-   10 161 inner_statement -> statement
-   11 163 inner_statement -> declaration_statement
-   12 167 statement -> unticked_statement
-   13 172 unticked_statement -> '{' inner_statement_list '}'
-   14 174 @3 -> /* empty */
-   15 174 @4 -> /* empty */
-   16 174 unticked_statement -> T_IF '(' expr ')' @3 statement @4 elseif_list else_single
-   17 175 @5 -> /* empty */
-   18 175 @6 -> /* empty */
-   19 175 unticked_statement -> T_IF '(' expr ')' ':' @5 inner_statement_list @6 new_elseif_list new_else_single T_ENDIF ';'
-   20 176 @7 -> /* empty */
-   21 176 @8 -> /* empty */
-   22 176 unticked_statement -> T_WHILE '(' @7 expr ')' @8 while_statement
-   23 177 @9 -> /* empty */
-   24 177 @10 -> /* empty */
-   25 177 unticked_statement -> T_DO @9 statement T_WHILE '(' @10 expr ')' ';'
-   26 178 @11 -> /* empty */
-   27 178 @12 -> /* empty */
-   28 178 @13 -> /* empty */
-   29 178 unticked_statement -> T_FOR '(' for_expr ';' @11 for_expr ';' @12 for_expr ')' @13 for_statement
-   30 187 @14 -> /* empty */
-   31 187 unticked_statement -> T_SWITCH '(' expr ')' @14 switch_case_list
-   32 188 unticked_statement -> T_BREAK ';'
-   33 189 unticked_statement -> T_BREAK expr ';'
-   34 190 unticked_statement -> T_CONTINUE ';'
-   35 191 unticked_statement -> T_CONTINUE expr ';'
-   36 192 unticked_statement -> T_RETURN ';'
-   37 193 unticked_statement -> T_RETURN expr_without_variable ';'
-   38 194 unticked_statement -> T_RETURN cvar ';'
-   39 195 unticked_statement -> T_GLOBAL global_var_list ';'
-   40 196 unticked_statement -> T_STATIC static_var_list ';'
-   41 197 unticked_statement -> T_ECHO echo_expr_list ';'
-   42 198 unticked_statement -> T_INLINE_HTML
-   43 199 unticked_statement -> expr ';'
-   44 200 unticked_statement -> T_USE use_filename ';'
-   45 201 unticked_statement -> T_UNSET '(' unset_variables ')' ';'
-   46 202 @15 -> /* empty */
-   47 202 @16 -> /* empty */
-   48 202 unticked_statement -> T_FOREACH '(' w_cvar T_AS @15 w_cvar foreach_optional_arg ')' @16 foreach_statement
-   49 203 @17 -> /* empty */
-   50 203 @18 -> /* empty */
-   51 203 unticked_statement -> T_FOREACH '(' expr_without_variable T_AS @17 w_cvar foreach_optional_arg ')' @18 foreach_statement
-   52 204 @19 -> /* empty */
-   53 204 unticked_statement -> T_DECLARE @19 '(' declare_list ')' declare_statement
-   54 205 unticked_statement -> ';'
-   55 208 unset_variables -> unset_variable
-   56 210 unset_variables -> unset_variables ',' unset_variable
-   57 213 unset_variable -> cvar
-   58 217 use_filename -> T_CONSTANT_ENCAPSED_STRING
-   59 219 use_filename -> '(' T_CONSTANT_ENCAPSED_STRING ')'
-   60 223 declaration_statement -> unticked_declaration_statement
-   61 228 @20 -> /* empty */
-   62 228 @21 -> /* empty */
-   63 228 unticked_declaration_statement -> T_FUNCTION @20 is_reference T_STRING @21 '(' parameter_list ')' '{' inner_statement_list '}'
-   64 231 @22 -> /* empty */
-   65 231 @23 -> /* empty */
-   66 231 unticked_declaration_statement -> T_OLD_FUNCTION @22 is_reference T_STRING @23 parameter_list '(' inner_statement_list ')' ';'
-   67 233 @24 -> /* empty */
-   68 233 unticked_declaration_statement -> T_CLASS T_STRING @24 '{' class_statement_list '}'
-   69 234 @25 -> /* empty */
-   70 234 unticked_declaration_statement -> T_CLASS T_STRING T_EXTENDS T_STRING @25 '{' class_statement_list '}'
-   71 238 foreach_optional_arg -> /* empty */
-   72 240 foreach_optional_arg -> T_DOUBLE_ARROW w_cvar
-   73 244 for_statement -> statement
-   74 246 for_statement -> ':' inner_statement_list T_ENDFOR ';'
-   75 250 foreach_statement -> statement
-   76 252 foreach_statement -> ':' inner_statement_list T_ENDFOREACH ';'
-   77 256 declare_statement -> statement
-   78 258 declare_statement -> ':' inner_statement_list T_ENDDECLARE ';'
-   79 262 declare_list -> T_STRING '=' static_scalar
-   80 264 declare_list -> declare_list ',' T_STRING '=' static_scalar
-   81 268 switch_case_list -> '{' case_list '}'
-   82 270 switch_case_list -> '{' ';' case_list '}'
-   83 271 switch_case_list -> ':' case_list T_ENDSWITCH ';'
-   84 272 switch_case_list -> ':' ';' case_list T_ENDSWITCH ';'
-   85 276 case_list -> /* empty */
-   86 278 @26 -> /* empty */
-   87 278 case_list -> case_list T_CASE expr case_separator @26 inner_statement_list
-   88 279 @27 -> /* empty */
-   89 279 case_list -> case_list T_DEFAULT case_separator @27 inner_statement_list
-   90 283 case_separator -> ':'
-   91 285 case_separator -> ';'
-   92 289 while_statement -> statement
-   93 291 while_statement -> ':' inner_statement_list T_ENDWHILE ';'
-   94 296 elseif_list -> /* empty */
-   95 298 @28 -> /* empty */
-   96 298 elseif_list -> elseif_list T_ELSEIF '(' expr ')' @28 statement
-   97 302 new_elseif_list -> /* empty */
-   98 304 @29 -> /* empty */
-   99 304 new_elseif_list -> new_elseif_list T_ELSEIF '(' expr ')' ':' @29 inner_statement_list
-  100 308 else_single -> /* empty */
-  101 310 else_single -> T_ELSE statement
-  102 314 new_else_single -> /* empty */
-  103 316 new_else_single -> T_ELSE ':' inner_statement_list
-  104 320 parameter_list -> non_empty_parameter_list
-  105 322 parameter_list -> /* empty */
-  106 326 non_empty_parameter_list -> T_VARIABLE
-  107 328 non_empty_parameter_list -> '&' T_VARIABLE
-  108 329 non_empty_parameter_list -> T_CONST T_VARIABLE
-  109 330 non_empty_parameter_list -> T_VARIABLE '=' static_scalar
-  110 331 non_empty_parameter_list -> non_empty_parameter_list ',' T_VARIABLE
-  111 332 non_empty_parameter_list -> non_empty_parameter_list ',' '&' T_VARIABLE
-  112 333 non_empty_parameter_list -> non_empty_parameter_list ',' T_CONST T_VARIABLE
-  113 334 non_empty_parameter_list -> non_empty_parameter_list ',' T_VARIABLE '=' static_scalar
-  114 338 function_call_parameter_list -> non_empty_function_call_parameter_list
-  115 340 function_call_parameter_list -> /* empty */
-  116 344 non_empty_function_call_parameter_list -> expr_without_variable
-  117 346 non_empty_function_call_parameter_list -> cvar
-  118 347 non_empty_function_call_parameter_list -> '&' w_cvar
-  119 348 non_empty_function_call_parameter_list -> non_empty_function_call_parameter_list ',' expr_without_variable
-  120 349 non_empty_function_call_parameter_list -> non_empty_function_call_parameter_list ',' cvar
-  121 350 non_empty_function_call_parameter_list -> non_empty_function_call_parameter_list ',' '&' w_cvar
-  122 353 global_var_list -> global_var_list ',' global_var
-  123 355 global_var_list -> global_var
-  124 359 global_var -> T_VARIABLE
-  125 361 global_var -> '$' r_cvar
-  126 362 global_var -> '$' '{' expr '}'
-  127 366 static_var_list -> static_var_list ',' T_VARIABLE
-  128 368 static_var_list -> static_var_list ',' T_VARIABLE '=' static_scalar
-  129 369 static_var_list -> T_VARIABLE
-  130 370 static_var_list -> T_VARIABLE '=' static_scalar
-  131 375 class_statement_list -> class_statement_list class_statement
-  132 377 class_statement_list -> /* empty */
-  133 381 class_statement -> T_VAR class_variable_decleration ';'
-  134 383 @30 -> /* empty */
-  135 383 @31 -> /* empty */
-  136 383 class_statement -> T_FUNCTION @30 is_reference T_STRING @31 '(' parameter_list ')' '{' inner_statement_list '}'
-  137 385 @32 -> /* empty */
-  138 385 @33 -> /* empty */
-  139 385 class_statement -> T_OLD_FUNCTION @32 is_reference T_STRING @33 parameter_list '(' inner_statement_list ')' ';'
-  140 390 is_reference -> /* empty */
-  141 392 is_reference -> '&'
-  142 395 class_variable_decleration -> class_variable_decleration ',' T_VARIABLE
-  143 397 class_variable_decleration -> class_variable_decleration ',' T_VARIABLE '=' static_scalar
-  144 398 class_variable_decleration -> T_VARIABLE
-  145 399 class_variable_decleration -> T_VARIABLE '=' static_scalar
-  146 403 echo_expr_list -> /* empty */
-  147 404 echo_expr_list -> echo_expr_list ',' expr
-  148 405 echo_expr_list -> expr
-  149 409 for_expr -> /* empty */
-  150 411 for_expr -> non_empty_for_expr
-  151 414 @34 -> /* empty */
-  152 414 non_empty_for_expr -> non_empty_for_expr ',' @34 expr
-  153 416 non_empty_for_expr -> expr
-  154 420 @35 -> /* empty */
-  155 420 expr_without_variable -> T_LIST '(' @35 assignment_list ')' '=' expr
-  156 422 expr_without_variable -> cvar '=' expr
-  157 423 expr_without_variable -> cvar '=' '&' w_cvar
-  158 424 expr_without_variable -> cvar '=' '&' function_call
-  159 425 @36 -> /* empty */
-  160 425 expr_without_variable -> cvar '=' '&' T_NEW static_or_variable_string @36 ctor_arguments
-  161 426 @37 -> /* empty */
-  162 426 expr_without_variable -> T_NEW static_or_variable_string @37 ctor_arguments
-  163 427 expr_without_variable -> cvar T_PLUS_EQUAL expr
-  164 428 expr_without_variable -> cvar T_MINUS_EQUAL expr
-  165 429 expr_without_variable -> cvar T_MUL_EQUAL expr
-  166 430 expr_without_variable -> cvar T_DIV_EQUAL expr
-  167 431 expr_without_variable -> cvar T_CONCAT_EQUAL expr
-  168 432 expr_without_variable -> cvar T_MOD_EQUAL expr
-  169 433 expr_without_variable -> cvar T_AND_EQUAL expr
-  170 434 expr_without_variable -> cvar T_OR_EQUAL expr
-  171 435 expr_without_variable -> cvar T_XOR_EQUAL expr
-  172 436 expr_without_variable -> cvar T_SL_EQUAL expr
-  173 437 expr_without_variable -> cvar T_SR_EQUAL expr
-  174 438 expr_without_variable -> rw_cvar T_INC
-  175 439 expr_without_variable -> T_INC rw_cvar
-  176 440 expr_without_variable -> rw_cvar T_DEC
-  177 441 expr_without_variable -> T_DEC rw_cvar
-  178 442 @38 -> /* empty */
-  179 442 expr_without_variable -> expr T_BOOLEAN_OR @38 expr
-  180 443 @39 -> /* empty */
-  181 443 expr_without_variable -> expr T_BOOLEAN_AND @39 expr
-  182 444 @40 -> /* empty */
-  183 444 expr_without_variable -> expr T_LOGICAL_OR @40 expr
-  184 445 @41 -> /* empty */
-  185 445 expr_without_variable -> expr T_LOGICAL_AND @41 expr
-  186 446 expr_without_variable -> expr T_LOGICAL_XOR expr
-  187 447 expr_without_variable -> expr '|' expr
-  188 448 expr_without_variable -> expr '&' expr
-  189 449 expr_without_variable -> expr '^' expr
-  190 450 expr_without_variable -> expr '.' expr
-  191 451 expr_without_variable -> expr '+' expr
-  192 452 expr_without_variable -> expr '-' expr
-  193 453 expr_without_variable -> expr '*' expr
-  194 454 expr_without_variable -> expr '/' expr
-  195 455 expr_without_variable -> expr '%' expr
-  196 456 expr_without_variable -> expr T_SL expr
-  197 457 expr_without_variable -> expr T_SR expr
-  198 458 expr_without_variable -> '+' expr
-  199 459 expr_without_variable -> '-' expr
-  200 460 expr_without_variable -> '!' expr
-  201 461 expr_without_variable -> '~' expr
-  202 462 expr_without_variable -> expr T_IS_IDENTICAL expr
-  203 463 expr_without_variable -> expr T_IS_NOT_IDENTICAL expr
-  204 464 expr_without_variable -> expr T_IS_EQUAL expr
-  205 465 expr_without_variable -> expr T_IS_NOT_EQUAL expr
-  206 466 expr_without_variable -> expr '<' expr
-  207 467 expr_without_variable -> expr T_IS_SMALLER_OR_EQUAL expr
-  208 468 expr_without_variable -> expr '>' expr
-  209 469 expr_without_variable -> expr T_IS_GREATER_OR_EQUAL expr
-  210 470 expr_without_variable -> '(' expr ')'
-  211 471 @42 -> /* empty */
-  212 471 @43 -> /* empty */
-  213 471 expr_without_variable -> expr '?' @42 expr ':' @43 expr
-  214 474 expr_without_variable -> function_call
-  215 475 expr_without_variable -> internal_functions_in_yacc
-  216 476 expr_without_variable -> T_INT_CAST expr
-  217 477 expr_without_variable -> T_DOUBLE_CAST expr
-  218 478 expr_without_variable -> T_STRING_CAST expr
-  219 479 expr_without_variable -> T_ARRAY_CAST expr
-  220 480 expr_without_variable -> T_OBJECT_CAST expr
-  221 481 expr_without_variable -> T_BOOL_CAST expr
-  222 482 expr_without_variable -> T_UNSET_CAST expr
-  223 483 expr_without_variable -> T_EXIT exit_expr
-  224 484 @44 -> /* empty */
-  225 484 expr_without_variable -> '@' @44 expr
-  226 485 expr_without_variable -> scalar
-  227 486 expr_without_variable -> T_ARRAY '(' array_pair_list ')'
-  228 487 expr_without_variable -> '`' encaps_list '`'
-  229 488 expr_without_variable -> T_PRINT expr
-  230 491 @45 -> /* empty */
-  231 491 function_call -> T_STRING '(' @45 function_call_parameter_list ')'
-  232 495 @46 -> /* empty */
-  233 495 function_call -> cvar '(' @46 function_call_parameter_list ')'
-  234 498 @47 -> /* empty */
-  235 498 function_call -> T_STRING T_PAAMAYIM_NEKUDOTAYIM static_or_variable_string '(' @47 function_call_parameter_list ')'
-  236 504 static_or_variable_string -> T_STRING
-  237 506 static_or_variable_string -> r_cvar
-  238 510 exit_expr -> /* empty */
-  239 512 exit_expr -> '(' ')'
-  240 513 exit_expr -> '(' expr ')'
-  241 517 ctor_arguments -> /* empty */
-  242 519 ctor_arguments -> '(' function_call_parameter_list ')'
-  243 523 common_scalar -> T_LNUMBER
-  244 525 common_scalar -> T_DNUMBER
-  245 526 common_scalar -> T_CONSTANT_ENCAPSED_STRING
-  246 527 common_scalar -> T_LINE
-  247 528 common_scalar -> T_FILE
-  248 529 common_scalar -> T_CLASS_C
-  249 530 common_scalar -> T_FUNC_C
-  250 534 static_scalar -> common_scalar
-  251 536 static_scalar -> T_STRING
-  252 537 static_scalar -> '+' static_scalar
-  253 538 static_scalar -> '-' static_scalar
-  254 539 static_scalar -> T_ARRAY '(' static_array_pair_list ')'
-  255 543 scalar -> T_STRING
-  256 545 scalar -> T_STRING_VARNAME
-  257 546 scalar -> common_scalar
-  258 547 scalar -> '\"' encaps_list '\"'
-  259 548 scalar -> '\'' encaps_list '\''
-  260 549 scalar -> T_START_HEREDOC encaps_list T_END_HEREDOC
-  261 553 static_array_pair_list -> /* empty */
-  262 555 static_array_pair_list -> non_empty_static_array_pair_list possible_comma
-  263 558 possible_comma -> /* empty */
-  264 560 possible_comma -> ','
-  265 563 non_empty_static_array_pair_list -> non_empty_static_array_pair_list ',' static_scalar T_DOUBLE_ARROW static_scalar
-  266 565 non_empty_static_array_pair_list -> non_empty_static_array_pair_list ',' static_scalar
-  267 566 non_empty_static_array_pair_list -> static_scalar T_DOUBLE_ARROW static_scalar
-  268 567 non_empty_static_array_pair_list -> static_scalar
-  269 570 expr -> r_cvar
-  270 572 expr -> expr_without_variable
-  271 576 r_cvar -> cvar
-  272 581 w_cvar -> cvar
-  273 586 rw_cvar -> cvar
-  274 591 cvar -> cvar_without_objects
-  275 593 @48 -> /* empty */
-  276 593 cvar -> cvar_without_objects T_OBJECT_OPERATOR @48 ref_list
-  277 597 cvar_without_objects -> reference_variable
-  278 599 cvar_without_objects -> simple_indirect_reference reference_variable
-  279 603 reference_variable -> reference_variable '[' dim_offset ']'
-  280 605 reference_variable -> reference_variable '{' expr '}'
-  281 606 reference_variable -> compound_variable
-  282 610 compound_variable -> T_VARIABLE
-  283 612 compound_variable -> '$' '{' expr '}'
-  284 615 dim_offset -> /* empty */
-  285 617 dim_offset -> expr
-  286 620 ref_list -> object_property
-  287 622 @49 -> /* empty */
-  288 622 ref_list -> ref_list T_OBJECT_OPERATOR @49 object_property
-  289 625 object_property -> object_dim_list
-  290 627 @50 -> /* empty */
-  291 627 object_property -> cvar_without_objects @50
-  292 630 object_dim_list -> object_dim_list '[' dim_offset ']'
-  293 632 object_dim_list -> object_dim_list '{' expr '}'
-  294 633 object_dim_list -> variable_name
-  295 636 variable_name -> T_STRING
-  296 638 variable_name -> '{' expr '}'
-  297 642 simple_indirect_reference -> '$'
-  298 644 simple_indirect_reference -> simple_indirect_reference '$'
-  299 647 assignment_list -> assignment_list ',' assignment_list_element
-  300 649 assignment_list -> assignment_list_element
-  301 653 assignment_list_element -> cvar
-  302 655 @51 -> /* empty */
-  303 655 assignment_list_element -> T_LIST '(' @51 assignment_list ')'
-  304 656 assignment_list_element -> /* empty */
-  305 660 array_pair_list -> /* empty */
-  306 662 array_pair_list -> non_empty_array_pair_list possible_comma
-  307 665 non_empty_array_pair_list -> non_empty_array_pair_list ',' expr T_DOUBLE_ARROW expr
-  308 667 non_empty_array_pair_list -> non_empty_array_pair_list ',' expr
-  309 668 non_empty_array_pair_list -> expr T_DOUBLE_ARROW expr
-  310 669 non_empty_array_pair_list -> expr
-  311 670 non_empty_array_pair_list -> non_empty_array_pair_list ',' expr T_DOUBLE_ARROW '&' w_cvar
-  312 671 non_empty_array_pair_list -> non_empty_array_pair_list ',' '&' w_cvar
-  313 672 non_empty_array_pair_list -> expr T_DOUBLE_ARROW '&' w_cvar
-  314 673 non_empty_array_pair_list -> '&' w_cvar
-  315 676 encaps_list -> encaps_list encaps_var
-  316 678 encaps_list -> encaps_list T_STRING
-  317 679 encaps_list -> encaps_list T_NUM_STRING
-  318 680 encaps_list -> encaps_list T_ENCAPSED_AND_WHITESPACE
-  319 681 encaps_list -> encaps_list T_CHARACTER
-  320 682 encaps_list -> encaps_list T_BAD_CHARACTER
-  321 683 encaps_list -> encaps_list '['
-  322 684 encaps_list -> encaps_list ']'
-  323 685 encaps_list -> encaps_list '{'
-  324 686 encaps_list -> encaps_list '}'
-  325 687 encaps_list -> encaps_list T_OBJECT_OPERATOR
-  326 688 encaps_list -> /* empty */
-  327 694 encaps_var -> T_VARIABLE
-  328 696 @52 -> /* empty */
-  329 696 encaps_var -> T_VARIABLE '[' @52 encaps_var_offset ']'
-  330 697 encaps_var -> T_VARIABLE T_OBJECT_OPERATOR T_STRING
-  331 698 encaps_var -> T_DOLLAR_OPEN_CURLY_BRACES expr '}'
-  332 699 encaps_var -> T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '[' expr ']' '}'
-  333 700 encaps_var -> T_CURLY_OPEN cvar '}'
-  334 704 encaps_var_offset -> T_STRING
-  335 706 encaps_var_offset -> T_NUM_STRING
-  336 707 encaps_var_offset -> T_VARIABLE
-  337 711 internal_functions_in_yacc -> T_ISSET '(' isset_variables ')'
-  338 713 internal_functions_in_yacc -> T_EMPTY '(' cvar ')'
-  339 714 internal_functions_in_yacc -> T_INCLUDE expr
-  340 715 internal_functions_in_yacc -> T_INCLUDE_ONCE expr
-  341 716 internal_functions_in_yacc -> T_EVAL '(' expr ')'
-  342 717 internal_functions_in_yacc -> T_REQUIRE expr
-  343 718 internal_functions_in_yacc -> T_REQUIRE_ONCE expr
-  344 721 isset_variables -> cvar
-  345 723 @53 -> /* empty */
-  346 723 isset_variables -> isset_variables ',' @53 cvar
-
-
-Terminals, with rules where they appear
-
-$ (-1)
-'!' (33) 200
-'\"' (34) 258
-'$' (36) 125 126 283 297 298
-'%' (37) 195
-'&' (38) 107 111 118 121 141 157 158 160 188 311 312 313 314
-'\'' (39) 259
-'(' (40) 16 19 22 25 29 31 45 48 51 53 59 63 66 96 99 136 139 155 210
-    227 231 233 235 239 240 242 254 303 337 338 341
-')' (41) 16 19 22 25 29 31 45 48 51 53 59 63 66 96 99 136 139 155 210
-    227 231 233 235 239 240 242 254 303 337 338 341
-'*' (42) 193
-'+' (43) 191 198 252
-',' (44) 56 80 110 111 112 113 119 120 121 122 127 128 142 143 147
-    152 264 265 266 299 307 308 311 312 346
-'-' (45) 192 199 253
-'.' (46) 190
-'/' (47) 194
-':' (58) 19 74 76 78 83 84 90 93 99 103 213
-';' (59) 19 25 29 32 33 34 35 36 37 38 39 40 41 43 44 45 54 66 74 76
-    78 82 83 84 91 93 133 139
-'<' (60) 206
-'=' (61) 79 80 109 113 128 130 143 145 155 156 157 158 160
-'>' (62) 208
-'?' (63) 213
-'@' (64) 225
-'[' (91) 279 292 321 329 332
-']' (93) 279 292 322 329 332
-'^' (94) 189
-'`' (96) 228
-'{' (123) 13 63 68 70 81 82 126 136 280 283 293 296 323
-'|' (124) 187
-'}' (125) 13 63 68 70 81 82 126 136 280 283 293 296 324 331 332 333
-'~' (126) 201
-error (256)
-T_INCLUDE (257) 339
-T_INCLUDE_ONCE (258) 340
-T_EVAL (259) 341
-T_REQUIRE (260) 342
-T_REQUIRE_ONCE (261) 343
-T_LOGICAL_OR (262) 183
-T_LOGICAL_XOR (263) 186
-T_LOGICAL_AND (264) 185
-T_PRINT (265) 229
-T_PLUS_EQUAL (266) 163
-T_MINUS_EQUAL (267) 164
-T_MUL_EQUAL (268) 165
-T_DIV_EQUAL (269) 166
-T_CONCAT_EQUAL (270) 167
-T_MOD_EQUAL (271) 168
-T_AND_EQUAL (272) 169
-T_OR_EQUAL (273) 170
-T_XOR_EQUAL (274) 171
-T_SL_EQUAL (275) 172
-T_SR_EQUAL (276) 173
-T_BOOLEAN_OR (277) 179
-T_BOOLEAN_AND (278) 181
-T_IS_EQUAL (279) 204
-T_IS_NOT_EQUAL (280) 205
-T_IS_IDENTICAL (281) 202
-T_IS_NOT_IDENTICAL (282) 203
-T_IS_SMALLER_OR_EQUAL (283) 207
-T_IS_GREATER_OR_EQUAL (284) 209
-T_SL (285) 196
-T_SR (286) 197
-T_INC (287) 174 175
-T_DEC (288) 176 177
-T_INT_CAST (289) 216
-T_DOUBLE_CAST (290) 217
-T_STRING_CAST (291) 218
-T_ARRAY_CAST (292) 219
-T_OBJECT_CAST (293) 220
-T_BOOL_CAST (294) 221
-T_UNSET_CAST (295) 222
-T_NEW (296) 160 162
-T_EXIT (297) 223
-T_IF (298) 16 19
-T_ELSEIF (299) 96 99
-T_ELSE (300) 101 103
-T_ENDIF (301) 19
-T_LNUMBER (302) 243
-T_DNUMBER (303) 244
-T_STRING (304) 63 66 68 70 79 80 136 139 231 235 236 251 255 295 316
-    330 334
-T_STRING_VARNAME (305) 256 332
-T_VARIABLE (306) 106 107 108 109 110 111 112 113 124 127 128 129 130
-    142 143 144 145 282 327 329 330 336
-T_NUM_STRING (307) 317 335
-T_INLINE_HTML (308) 42
-T_CHARACTER (309) 319
-T_BAD_CHARACTER (310) 320
-T_ENCAPSED_AND_WHITESPACE (311) 318
-T_CONSTANT_ENCAPSED_STRING (312) 58 59 245
-T_ECHO (313) 41
-T_DO (314) 25
-T_WHILE (315) 22 25
-T_ENDWHILE (316) 93
-T_FOR (317) 29
-T_ENDFOR (318) 74
-T_FOREACH (319) 48 51
-T_ENDFOREACH (320) 76
-T_DECLARE (321) 53
-T_ENDDECLARE (322) 78
-T_AS (323) 48 51
-T_SWITCH (324) 31
-T_ENDSWITCH (325) 83 84
-T_CASE (326) 87
-T_DEFAULT (327) 89
-T_BREAK (328) 32 33
-T_CONTINUE (329) 34 35
-T_OLD_FUNCTION (330) 66 139
-T_FUNCTION (331) 63 136
-T_CONST (332) 108 112
-T_RETURN (333) 36 37 38
-T_USE (334) 44
-T_GLOBAL (335) 39
-T_STATIC (336) 40
-T_VAR (337) 133
-T_UNSET (338) 45
-T_ISSET (339) 337
-T_EMPTY (340) 338
-T_CLASS (341) 68 70
-T_EXTENDS (342) 70
-T_OBJECT_OPERATOR (343) 276 288 325 330
-T_DOUBLE_ARROW (344) 72 265 267 307 309 311 313
-T_LIST (345) 155 303
-T_ARRAY (346) 227 254
-T_CLASS_C (347) 248
-T_FUNC_C (348) 249
-T_LINE (349) 246
-T_FILE (350) 247
-T_COMMENT (351)
-T_ML_COMMENT (352)
-T_OPEN_TAG (353)
-T_OPEN_TAG_WITH_ECHO (354)
-T_CLOSE_TAG (355)
-T_WHITESPACE (356)
-T_START_HEREDOC (357) 260
-T_END_HEREDOC (358) 260
-T_DOLLAR_OPEN_CURLY_BRACES (359) 331 332
-T_CURLY_OPEN (360) 333
-T_PAAMAYIM_NEKUDOTAYIM (361) 235
-
-
-Nonterminals, with rules where they appear
-
-start (137)
-    on left: 1
-top_statement_list (138)
-    on left: 3 4, on right: 1 3
-@1 (139)
-    on left: 2, on right: 3
-top_statement (140)
-    on left: 5 6, on right: 3
-inner_statement_list (141)
-    on left: 8 9, on right: 8 13 19 63 66 74 76 78 87 89 93 99 103
-    136 139
-@2 (142)
-    on left: 7, on right: 8
-inner_statement (143)
-    on left: 10 11, on right: 8
-statement (144)
-    on left: 12, on right: 5 10 16 25 73 75 77 92 96 101
-unticked_statement (145)
-    on left: 13 16 19 22 25 29 31 32 33 34 35 36 37 38 39 40 41 42
-    43 44 45 48 51 53 54, on right: 12
-@3 (146)
-    on left: 14, on right: 16
-@4 (147)
-    on left: 15, on right: 16
-@5 (148)
-    on left: 17, on right: 19
-@6 (149)
-    on left: 18, on right: 19
-@7 (150)
-    on left: 20, on right: 22
-@8 (151)
-    on left: 21, on right: 22
-@9 (152)
-    on left: 23, on right: 25
-@10 (153)
-    on left: 24, on right: 25
-@11 (154)
-    on left: 26, on right: 29
-@12 (155)
-    on left: 27, on right: 29
-@13 (156)
-    on left: 28, on right: 29
-@14 (157)
-    on left: 30, on right: 31
-@15 (158)
-    on left: 46, on right: 48
-@16 (159)
-    on left: 47, on right: 48
-@17 (160)
-    on left: 49, on right: 51
-@18 (161)
-    on left: 50, on right: 51
-@19 (162)
-    on left: 52, on right: 53
-unset_variables (163)
-    on left: 55 56, on right: 45 56
-unset_variable (164)
-    on left: 57, on right: 55 56
-use_filename (165)
-    on left: 58 59, on right: 44
-declaration_statement (166)
-    on left: 60, on right: 6 11
-unticked_declaration_statement (167)
-    on left: 63 66 68 70, on right: 60
-@20 (168)
-    on left: 61, on right: 63
-@21 (169)
-    on left: 62, on right: 63
-@22 (170)
-    on left: 64, on right: 66
-@23 (171)
-    on left: 65, on right: 66
-@24 (172)
-    on left: 67, on right: 68
-@25 (173)
-    on left: 69, on right: 70
-foreach_optional_arg (174)
-    on left: 71 72, on right: 48 51
-for_statement (175)
-    on left: 73 74, on right: 29
-foreach_statement (176)
-    on left: 75 76, on right: 48 51
-declare_statement (177)
-    on left: 77 78, on right: 53
-declare_list (178)
-    on left: 79 80, on right: 53 80
-switch_case_list (179)
-    on left: 81 82 83 84, on right: 31
-case_list (180)
-    on left: 85 87 89, on right: 81 82 83 84 87 89
-@26 (181)
-    on left: 86, on right: 87
-@27 (182)
-    on left: 88, on right: 89
-case_separator (183)
-    on left: 90 91, on right: 87 89
-while_statement (184)
-    on left: 92 93, on right: 22
-elseif_list (185)
-    on left: 94 96, on right: 16 96
-@28 (186)
-    on left: 95, on right: 96
-new_elseif_list (187)
-    on left: 97 99, on right: 19 99
-@29 (188)
-    on left: 98, on right: 99
-else_single (189)
-    on left: 100 101, on right: 16
-new_else_single (190)
-    on left: 102 103, on right: 19
-parameter_list (191)
-    on left: 104 105, on right: 63 66 136 139
-non_empty_parameter_list (192)
-    on left: 106 107 108 109 110 111 112 113, on right: 104 110 111
-    112 113
-function_call_parameter_list (193)
-    on left: 114 115, on right: 231 233 235 242
-non_empty_function_call_parameter_list (194)
-    on left: 116 117 118 119 120 121, on right: 114 119 120 121
-global_var_list (195)
-    on left: 122 123, on right: 39 122
-global_var (196)
-    on left: 124 125 126, on right: 122 123
-static_var_list (197)
-    on left: 127 128 129 130, on right: 40 127 128
-class_statement_list (198)
-    on left: 131 132, on right: 68 70 131
-class_statement (199)
-    on left: 133 136 139, on right: 131
-@30 (200)
-    on left: 134, on right: 136
-@31 (201)
-    on left: 135, on right: 136
-@32 (202)
-    on left: 137, on right: 139
-@33 (203)
-    on left: 138, on right: 139
-is_reference (204)
-    on left: 140 141, on right: 63 66 136 139
-class_variable_decleration (205)
-    on left: 142 143 144 145, on right: 133 142 143
-echo_expr_list (206)
-    on left: 146 147 148, on right: 41 147
-for_expr (207)
-    on left: 149 150, on right: 29
-non_empty_for_expr (208)
-    on left: 152 153, on right: 150 152
-@34 (209)
-    on left: 151, on right: 152
-expr_without_variable (210)
-    on left: 155 156 157 158 160 162 163 164 165 166 167 168 169 170
-    171 172 173 174 175 176 177 179 181 183 185 186 187 188 189 190
-    191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206
-    207 208 209 210 213 214 215 216 217 218 219 220 221 222 223 225
-    226 227 228 229, on right: 37 51 116 119 270
-@35 (211)
-    on left: 154, on right: 155
-@36 (212)
-    on left: 159, on right: 160
-@37 (213)
-    on left: 161, on right: 162
-@38 (214)
-    on left: 178, on right: 179
-@39 (215)
-    on left: 180, on right: 181
-@40 (216)
-    on left: 182, on right: 183
-@41 (217)
-    on left: 184, on right: 185
-@42 (218)
-    on left: 211, on right: 213
-@43 (219)
-    on left: 212, on right: 213
-@44 (220)
-    on left: 224, on right: 225
-function_call (221)
-    on left: 231 233 235, on right: 158 214
-@45 (222)
-    on left: 230, on right: 231
-@46 (223)
-    on left: 232, on right: 233
-@47 (224)
-    on left: 234, on right: 235
-static_or_variable_string (225)
-    on left: 236 237, on right: 160 162 235
-exit_expr (226)
-    on left: 238 239 240, on right: 223
-ctor_arguments (227)
-    on left: 241 242, on right: 160 162
-common_scalar (228)
-    on left: 243 244 245 246 247 248 249, on right: 250 257
-static_scalar (229)
-    on left: 250 251 252 253 254, on right: 79 80 109 113 128 130 143
-    145 252 253 265 266 267 268
-scalar (230)
-    on left: 255 256 257 258 259 260, on right: 226
-static_array_pair_list (231)
-    on left: 261 262, on right: 254
-possible_comma (232)
-    on left: 263 264, on right: 262 306
-non_empty_static_array_pair_list (233)
-    on left: 265 266 267 268, on right: 262 265 266
-expr (234)
-    on left: 269 270, on right: 16 19 22 25 31 33 35 43 87 96 99 126
-    147 148 152 153 155 156 163 164 165 166 167 168 169 170 171 172
-    173 179 181 183 185 186 187 188 189 190 191 192 193 194 195 196
-    197 198 199 200 201 202 203 204 205 206 207 208 209 210 213 216
-    217 218 219 220 221 222 225 229 240 280 283 285 293 296 307 308
-    309 310 311 313 331 332 339 340 341 342 343
-r_cvar (235)
-    on left: 271, on right: 125 237 269
-w_cvar (236)
-    on left: 272, on right: 48 51 72 118 121 157 311 312 313 314
-rw_cvar (237)
-    on left: 273, on right: 174 175 176 177
-cvar (238)
-    on left: 274 276, on right: 38 57 117 120 156 157 158 160 163 164
-    165 166 167 168 169 170 171 172 173 233 271 272 273 301 333 338
-    344 346
-@48 (239)
-    on left: 275, on right: 276
-cvar_without_objects (240)
-    on left: 277 278, on right: 274 276 291
-reference_variable (241)
-    on left: 279 280 281, on right: 277 278 279 280
-compound_variable (242)
-    on left: 282 283, on right: 281
-dim_offset (243)
-    on left: 284 285, on right: 279 292
-ref_list (244)
-    on left: 286 288, on right: 276 288
-@49 (245)
-    on left: 287, on right: 288
-object_property (246)
-    on left: 289 291, on right: 286 288
-@50 (247)
-    on left: 290, on right: 291
-object_dim_list (248)
-    on left: 292 293 294, on right: 289 292 293
-variable_name (249)
-    on left: 295 296, on right: 294
-simple_indirect_reference (250)
-    on left: 297 298, on right: 278 298
-assignment_list (251)
-    on left: 299 300, on right: 155 299 303
-assignment_list_element (252)
-    on left: 301 303 304, on right: 299 300
-@51 (253)
-    on left: 302, on right: 303
-array_pair_list (254)
-    on left: 305 306, on right: 227
-non_empty_array_pair_list (255)
-    on left: 307 308 309 310 311 312 313 314, on right: 306 307 308
-    311 312
-encaps_list (256)
-    on left: 315 316 317 318 319 320 321 322 323 324 325 326,
-    on right: 228 258 259 260 315 316 317 318 319 320 321 322 323 324
-    325
-encaps_var (257)
-    on left: 327 329 330 331 332 333, on right: 315
-@52 (258)
-    on left: 328, on right: 329
-encaps_var_offset (259)
-    on left: 334 335 336, on right: 329
-internal_functions_in_yacc (260)
-    on left: 337 338 339 340 341 342 343, on right: 215
-isset_variables (261)
-    on left: 344 346, on right: 337 346
-@53 (262)
-    on left: 345, on right: 346
-
-
-state 0
-
-    $default	reduce using rule 4 (top_statement_list)
-
-    start	go to state 662
-    top_statement_list	go to state 1
-
-
-
-state 1
-
-    start  ->  top_statement_list .   (rule 1)
-    top_statement_list  ->  top_statement_list . @1 top_statement   (rule 3)
-
-    $   	reduce using rule 1 (start)
-    $default	reduce using rule 2 (@1)
-    @1  	go to state 2
-
-
-
-state 2
-
-    top_statement_list  ->  top_statement_list @1 . top_statement   (rule 3)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_IF	shift, and go to state 25
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_INLINE_HTML	shift, and go to state 31
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ECHO	shift, and go to state 33
-    T_DO	shift, and go to state 34
-    T_WHILE	shift, and go to state 35
-    T_FOR	shift, and go to state 36
-    T_FOREACH	shift, and go to state 37
-    T_DECLARE	shift, and go to state 38
-    T_SWITCH	shift, and go to state 39
-    T_BREAK	shift, and go to state 40
-    T_CONTINUE	shift, and go to state 41
-    T_OLD_FUNCTION	shift, and go to state 42
-    T_FUNCTION	shift, and go to state 43
-    T_RETURN	shift, and go to state 44
-    T_USE	shift, and go to state 45
-    T_GLOBAL	shift, and go to state 46
-    T_STATIC	shift, and go to state 47
-    T_UNSET	shift, and go to state 48
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_CLASS	shift, and go to state 51
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '{' 	shift, and go to state 59
-    '(' 	shift, and go to state 60
-    ';' 	shift, and go to state 61
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    top_statement	go to state 66
-    statement	go to state 67
-    unticked_statement	go to state 68
-    declaration_statement	go to state 69
-    unticked_declaration_statement	go to state 70
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 75
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 3
-
-    internal_functions_in_yacc  ->  T_INCLUDE . expr   (rule 339)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 84
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 4
-
-    internal_functions_in_yacc  ->  T_INCLUDE_ONCE . expr   (rule 340)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 85
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 5
-
-    internal_functions_in_yacc  ->  T_EVAL . '(' expr ')'   (rule 341)
-
-    '(' 	shift, and go to state 86
-
-
-
-state 6
-
-    internal_functions_in_yacc  ->  T_REQUIRE . expr   (rule 342)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 87
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 7
-
-    internal_functions_in_yacc  ->  T_REQUIRE_ONCE . expr   (rule 343)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 88
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 8
-
-    expr_without_variable  ->  T_PRINT . expr   (rule 229)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 89
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 9
-
-    expr_without_variable  ->  '+' . expr   (rule 198)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 90
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 10
-
-    expr_without_variable  ->  '-' . expr   (rule 199)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 91
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 11
-
-    expr_without_variable  ->  '!' . expr   (rule 200)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 92
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 12
-
-    expr_without_variable  ->  '~' . expr   (rule 201)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 93
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 13
-
-    expr_without_variable  ->  T_INC . rw_cvar   (rule 175)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    rw_cvar	go to state 94
-    cvar	go to state 95
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 14
-
-    expr_without_variable  ->  T_DEC . rw_cvar   (rule 177)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    rw_cvar	go to state 96
-    cvar	go to state 95
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 15
-
-    expr_without_variable  ->  T_INT_CAST . expr   (rule 216)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 97
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 16
-
-    expr_without_variable  ->  T_DOUBLE_CAST . expr   (rule 217)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 98
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 17
-
-    expr_without_variable  ->  T_STRING_CAST . expr   (rule 218)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 99
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 18
-
-    expr_without_variable  ->  T_ARRAY_CAST . expr   (rule 219)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 100
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 19
-
-    expr_without_variable  ->  T_OBJECT_CAST . expr   (rule 220)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 101
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 20
-
-    expr_without_variable  ->  T_BOOL_CAST . expr   (rule 221)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 102
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 21
-
-    expr_without_variable  ->  T_UNSET_CAST . expr   (rule 222)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 103
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 22
-
-    expr_without_variable  ->  '@' . @44 expr   (rule 225)
-
-    $default	reduce using rule 224 (@44)
-
-    @44 	go to state 104
-
-
-
-state 23
-
-    expr_without_variable  ->  T_NEW . static_or_variable_string @37 ctor_arguments   (rule 162)
-
-    T_STRING	shift, and go to state 105
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    static_or_variable_string	go to state 106
-    r_cvar	go to state 107
-    cvar	go to state 108
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 24
-
-    expr_without_variable  ->  T_EXIT . exit_expr   (rule 223)
-
-    '(' 	shift, and go to state 109
-
-    $default	reduce using rule 238 (exit_expr)
-
-    exit_expr	go to state 110
-
-
-
-state 25
-
-    unticked_statement  ->  T_IF . '(' expr ')' @3 statement @4 elseif_list else_single   (rule 16)
-    unticked_statement  ->  T_IF . '(' expr ')' ':' @5 inner_statement_list @6 new_elseif_list new_else_single T_ENDIF ';'   (rule 19)
-
-    '(' 	shift, and go to state 111
-
-
-
-state 26
-
-    common_scalar  ->  T_LNUMBER .   (rule 243)
-
-    $default	reduce using rule 243 (common_scalar)
-
-
-
-state 27
-
-    common_scalar  ->  T_DNUMBER .   (rule 244)
-
-    $default	reduce using rule 244 (common_scalar)
-
-
-
-state 28
-
-    function_call  ->  T_STRING . '(' @45 function_call_parameter_list ')'   (rule 231)
-    function_call  ->  T_STRING . T_PAAMAYIM_NEKUDOTAYIM static_or_variable_string '(' @47 function_call_parameter_list ')'   (rule 235)
-    scalar  ->  T_STRING .   (rule 255)
-
-    T_PAAMAYIM_NEKUDOTAYIM	shift, and go to state 112
-    '(' 	shift, and go to state 113
-
-    $default	reduce using rule 255 (scalar)
-
-
-
-state 29
-
-    scalar  ->  T_STRING_VARNAME .   (rule 256)
-
-    $default	reduce using rule 256 (scalar)
-
-
-
-state 30
-
-    compound_variable  ->  T_VARIABLE .   (rule 282)
-
-    $default	reduce using rule 282 (compound_variable)
-
-
-
-state 31
-
-    unticked_statement  ->  T_INLINE_HTML .   (rule 42)
-
-    $default	reduce using rule 42 (unticked_statement)
-
-
-
-state 32
-
-    common_scalar  ->  T_CONSTANT_ENCAPSED_STRING .   (rule 245)
-
-    $default	reduce using rule 245 (common_scalar)
-
-
-
-state 33
-
-    unticked_statement  ->  T_ECHO . echo_expr_list ';'   (rule 41)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    $default	reduce using rule 146 (echo_expr_list)
-
-    echo_expr_list	go to state 114
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 115
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 34
-
-    unticked_statement  ->  T_DO . @9 statement T_WHILE '(' @10 expr ')' ';'   (rule 25)
-
-    $default	reduce using rule 23 (@9)
-
-    @9  	go to state 116
-
-
-
-state 35
-
-    unticked_statement  ->  T_WHILE . '(' @7 expr ')' @8 while_statement   (rule 22)
-
-    '(' 	shift, and go to state 117
-
-
-
-state 36
-
-    unticked_statement  ->  T_FOR . '(' for_expr ';' @11 for_expr ';' @12 for_expr ')' @13 for_statement   (rule 29)
-
-    '(' 	shift, and go to state 118
-
-
-
-state 37
-
-    unticked_statement  ->  T_FOREACH . '(' w_cvar T_AS @15 w_cvar foreach_optional_arg ')' @16 foreach_statement   (rule 48)
-    unticked_statement  ->  T_FOREACH . '(' expr_without_variable T_AS @17 w_cvar foreach_optional_arg ')' @18 foreach_statement   (rule 51)
-
-    '(' 	shift, and go to state 119
-
-
-
-state 38
-
-    unticked_statement  ->  T_DECLARE . @19 '(' declare_list ')' declare_statement   (rule 53)
-
-    $default	reduce using rule 52 (@19)
-
-    @19 	go to state 120
-
-
-
-state 39
-
-    unticked_statement  ->  T_SWITCH . '(' expr ')' @14 switch_case_list   (rule 31)
-
-    '(' 	shift, and go to state 121
-
-
-
-state 40
-
-    unticked_statement  ->  T_BREAK . ';'   (rule 32)
-    unticked_statement  ->  T_BREAK . expr ';'   (rule 33)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    ';' 	shift, and go to state 122
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 123
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 41
-
-    unticked_statement  ->  T_CONTINUE . ';'   (rule 34)
-    unticked_statement  ->  T_CONTINUE . expr ';'   (rule 35)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    ';' 	shift, and go to state 124
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 125
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 42
-
-    unticked_declaration_statement  ->  T_OLD_FUNCTION . @22 is_reference T_STRING @23 parameter_list '(' inner_statement_list ')' ';'   (rule 66)
-
-    $default	reduce using rule 64 (@22)
-
-    @22 	go to state 126
-
-
-
-state 43
-
-    unticked_declaration_statement  ->  T_FUNCTION . @20 is_reference T_STRING @21 '(' parameter_list ')' '{' inner_statement_list '}'   (rule 63)
-
-    $default	reduce using rule 61 (@20)
-
-    @20 	go to state 127
-
-
-
-state 44
-
-    unticked_statement  ->  T_RETURN . ';'   (rule 36)
-    unticked_statement  ->  T_RETURN . expr_without_variable ';'   (rule 37)
-    unticked_statement  ->  T_RETURN . cvar ';'   (rule 38)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    ';' 	shift, and go to state 128
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 129
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 130
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 131
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 45
-
-    unticked_statement  ->  T_USE . use_filename ';'   (rule 44)
-
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 132
-    '(' 	shift, and go to state 133
-
-    use_filename	go to state 134
-
-
-
-state 46
-
-    unticked_statement  ->  T_GLOBAL . global_var_list ';'   (rule 39)
-
-    T_VARIABLE	shift, and go to state 135
-    '$' 	shift, and go to state 136
-
-    global_var_list	go to state 137
-    global_var	go to state 138
-
-
-
-state 47
-
-    unticked_statement  ->  T_STATIC . static_var_list ';'   (rule 40)
-
-    T_VARIABLE	shift, and go to state 139
-
-    static_var_list	go to state 140
-
-
-
-state 48
-
-    unticked_statement  ->  T_UNSET . '(' unset_variables ')' ';'   (rule 45)
-
-    '(' 	shift, and go to state 141
-
-
-
-state 49
-
-    internal_functions_in_yacc  ->  T_ISSET . '(' isset_variables ')'   (rule 337)
-
-    '(' 	shift, and go to state 142
-
-
-
-state 50
-
-    internal_functions_in_yacc  ->  T_EMPTY . '(' cvar ')'   (rule 338)
-
-    '(' 	shift, and go to state 143
-
-
-
-state 51
-
-    unticked_declaration_statement  ->  T_CLASS . T_STRING @24 '{' class_statement_list '}'   (rule 68)
-    unticked_declaration_statement  ->  T_CLASS . T_STRING T_EXTENDS T_STRING @25 '{' class_statement_list '}'   (rule 70)
-
-    T_STRING	shift, and go to state 144
-
-
-
-state 52
-
-    expr_without_variable  ->  T_LIST . '(' @35 assignment_list ')' '=' expr   (rule 155)
-
-    '(' 	shift, and go to state 145
-
-
-
-state 53
-
-    expr_without_variable  ->  T_ARRAY . '(' array_pair_list ')'   (rule 227)
-
-    '(' 	shift, and go to state 146
-
-
-
-state 54
-
-    common_scalar  ->  T_CLASS_C .   (rule 248)
-
-    $default	reduce using rule 248 (common_scalar)
-
-
-
-state 55
-
-    common_scalar  ->  T_FUNC_C .   (rule 249)
-
-    $default	reduce using rule 249 (common_scalar)
-
-
-
-state 56
-
-    common_scalar  ->  T_LINE .   (rule 246)
-
-    $default	reduce using rule 246 (common_scalar)
-
-
-
-state 57
-
-    common_scalar  ->  T_FILE .   (rule 247)
-
-    $default	reduce using rule 247 (common_scalar)
-
-
-
-state 58
-
-    scalar  ->  T_START_HEREDOC . encaps_list T_END_HEREDOC   (rule 260)
-
-    $default	reduce using rule 326 (encaps_list)
-
-    encaps_list	go to state 147
-
-
-
-state 59
-
-    unticked_statement  ->  '{' . inner_statement_list '}'   (rule 13)
-
-    $default	reduce using rule 9 (inner_statement_list)
-
-    inner_statement_list	go to state 148
-
-
-
-state 60
-
-    expr_without_variable  ->  '(' . expr ')'   (rule 210)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 149
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 61
-
-    unticked_statement  ->  ';' .   (rule 54)
-
-    $default	reduce using rule 54 (unticked_statement)
-
-
-
-state 62
-
-    compound_variable  ->  '$' . '{' expr '}'   (rule 283)
-    simple_indirect_reference  ->  '$' .   (rule 297)
-
-    '{' 	shift, and go to state 150
-
-    $default	reduce using rule 297 (simple_indirect_reference)
-
-
-
-state 63
-
-    expr_without_variable  ->  '`' . encaps_list '`'   (rule 228)
-
-    $default	reduce using rule 326 (encaps_list)
-
-    encaps_list	go to state 151
-
-
-
-state 64
-
-    scalar  ->  '\"' . encaps_list '\"'   (rule 258)
-
-    $default	reduce using rule 326 (encaps_list)
-
-    encaps_list	go to state 152
-
-
-
-state 65
-
-    scalar  ->  '\'' . encaps_list '\''   (rule 259)
-
-    $default	reduce using rule 326 (encaps_list)
-
-    encaps_list	go to state 153
-
-
-
-state 66
-
-    top_statement_list  ->  top_statement_list @1 top_statement .   (rule 3)
-
-    $default	reduce using rule 3 (top_statement_list)
-
-
-
-state 67
-
-    top_statement  ->  statement .   (rule 5)
-
-    $default	reduce using rule 5 (top_statement)
-
-
-
-state 68
-
-    statement  ->  unticked_statement .   (rule 12)
-
-    $default	reduce using rule 12 (statement)
-
-
-
-state 69
-
-    top_statement  ->  declaration_statement .   (rule 6)
-
-    $default	reduce using rule 6 (top_statement)
-
-
-
-state 70
-
-    declaration_statement  ->  unticked_declaration_statement .   (rule 60)
-
-    $default	reduce using rule 60 (declaration_statement)
-
-
-
-state 71
-
-    expr  ->  expr_without_variable .   (rule 270)
-
-    $default	reduce using rule 270 (expr)
-
-
-
-state 72
-
-    expr_without_variable  ->  function_call .   (rule 214)
-
-    $default	reduce using rule 214 (expr_without_variable)
-
-
-
-state 73
-
-    scalar  ->  common_scalar .   (rule 257)
-
-    $default	reduce using rule 257 (scalar)
-
-
-
-state 74
-
-    expr_without_variable  ->  scalar .   (rule 226)
-
-    $default	reduce using rule 226 (expr_without_variable)
-
-
-
-state 75
-
-    unticked_statement  ->  expr . ';'   (rule 43)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    ';' 	shift, and go to state 179
-
-
-
-state 76
-
-    expr  ->  r_cvar .   (rule 269)
-
-    $default	reduce using rule 269 (expr)
-
-
-
-state 77
-
-    expr_without_variable  ->  rw_cvar . T_INC   (rule 174)
-    expr_without_variable  ->  rw_cvar . T_DEC   (rule 176)
-
-    T_INC	shift, and go to state 180
-    T_DEC	shift, and go to state 181
-
-
-
-state 78
-
-    expr_without_variable  ->  cvar . '=' expr   (rule 156)
-    expr_without_variable  ->  cvar . '=' '&' w_cvar   (rule 157)
-    expr_without_variable  ->  cvar . '=' '&' function_call   (rule 158)
-    expr_without_variable  ->  cvar . '=' '&' T_NEW static_or_variable_string @36 ctor_arguments   (rule 160)
-    expr_without_variable  ->  cvar . T_PLUS_EQUAL expr   (rule 163)
-    expr_without_variable  ->  cvar . T_MINUS_EQUAL expr   (rule 164)
-    expr_without_variable  ->  cvar . T_MUL_EQUAL expr   (rule 165)
-    expr_without_variable  ->  cvar . T_DIV_EQUAL expr   (rule 166)
-    expr_without_variable  ->  cvar . T_CONCAT_EQUAL expr   (rule 167)
-    expr_without_variable  ->  cvar . T_MOD_EQUAL expr   (rule 168)
-    expr_without_variable  ->  cvar . T_AND_EQUAL expr   (rule 169)
-    expr_without_variable  ->  cvar . T_OR_EQUAL expr   (rule 170)
-    expr_without_variable  ->  cvar . T_XOR_EQUAL expr   (rule 171)
-    expr_without_variable  ->  cvar . T_SL_EQUAL expr   (rule 172)
-    expr_without_variable  ->  cvar . T_SR_EQUAL expr   (rule 173)
-    function_call  ->  cvar . '(' @46 function_call_parameter_list ')'   (rule 233)
-    r_cvar  ->  cvar .   (rule 271)
-    rw_cvar  ->  cvar .   (rule 273)
-
-    '=' 	shift, and go to state 182
-    T_PLUS_EQUAL	shift, and go to state 183
-    T_MINUS_EQUAL	shift, and go to state 184
-    T_MUL_EQUAL	shift, and go to state 185
-    T_DIV_EQUAL	shift, and go to state 186
-    T_CONCAT_EQUAL	shift, and go to state 187
-    T_MOD_EQUAL	shift, and go to state 188
-    T_AND_EQUAL	shift, and go to state 189
-    T_OR_EQUAL	shift, and go to state 190
-    T_XOR_EQUAL	shift, and go to state 191
-    T_SL_EQUAL	shift, and go to state 192
-    T_SR_EQUAL	shift, and go to state 193
-    '(' 	shift, and go to state 194
-
-    T_INC	reduce using rule 273 (rw_cvar)
-    T_DEC	reduce using rule 273 (rw_cvar)
-    $default	reduce using rule 271 (r_cvar)
-
-
-state 79
-
-    cvar  ->  cvar_without_objects .   (rule 274)
-    cvar  ->  cvar_without_objects . T_OBJECT_OPERATOR @48 ref_list   (rule 276)
-
-    T_OBJECT_OPERATOR	shift, and go to state 195
-
-    $default	reduce using rule 274 (cvar)
-
-
-
-state 80
-
-    cvar_without_objects  ->  reference_variable .   (rule 277)
-    reference_variable  ->  reference_variable . '[' dim_offset ']'   (rule 279)
-    reference_variable  ->  reference_variable . '{' expr '}'   (rule 280)
-
-    '[' 	shift, and go to state 196
-    '{' 	shift, and go to state 197
-
-    $default	reduce using rule 277 (cvar_without_objects)
-
-
-
-state 81
-
-    reference_variable  ->  compound_variable .   (rule 281)
-
-    $default	reduce using rule 281 (reference_variable)
-
-
-
-state 82
-
-    cvar_without_objects  ->  simple_indirect_reference . reference_variable   (rule 278)
-    simple_indirect_reference  ->  simple_indirect_reference . '$'   (rule 298)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 198
-
-    reference_variable	go to state 199
-    compound_variable	go to state 81
-
-
-
-state 83
-
-    expr_without_variable  ->  internal_functions_in_yacc .   (rule 215)
-
-    $default	reduce using rule 215 (expr_without_variable)
-
-
-
-state 84
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    internal_functions_in_yacc  ->  T_INCLUDE expr .   (rule 339)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 339 (internal_functions_in_yacc)
-
-
-
-state 85
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    internal_functions_in_yacc  ->  T_INCLUDE_ONCE expr .   (rule 340)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 340 (internal_functions_in_yacc)
-
-
-
-state 86
-
-    internal_functions_in_yacc  ->  T_EVAL '(' . expr ')'   (rule 341)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 200
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 87
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    internal_functions_in_yacc  ->  T_REQUIRE expr .   (rule 342)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 342 (internal_functions_in_yacc)
-
-
-
-state 88
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    internal_functions_in_yacc  ->  T_REQUIRE_ONCE expr .   (rule 343)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 343 (internal_functions_in_yacc)
-
-
-
-state 89
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    expr_without_variable  ->  T_PRINT expr .   (rule 229)
-
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 229 (expr_without_variable)
-
-
-
-state 90
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  '+' expr .   (rule 198)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 198 (expr_without_variable)
-
-
-
-state 91
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  '-' expr .   (rule 199)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 199 (expr_without_variable)
-
-
-
-state 92
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  '!' expr .   (rule 200)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-
-    $default	reduce using rule 200 (expr_without_variable)
-
-
-
-state 93
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  '~' expr .   (rule 201)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-
-    $default	reduce using rule 201 (expr_without_variable)
-
-
-
-state 94
-
-    expr_without_variable  ->  T_INC rw_cvar .   (rule 175)
-
-    $default	reduce using rule 175 (expr_without_variable)
-
-
-
-state 95
-
-    rw_cvar  ->  cvar .   (rule 273)
-
-    $default	reduce using rule 273 (rw_cvar)
-
-
-
-state 96
-
-    expr_without_variable  ->  T_DEC rw_cvar .   (rule 177)
-
-    $default	reduce using rule 177 (expr_without_variable)
-
-
-
-state 97
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    expr_without_variable  ->  T_INT_CAST expr .   (rule 216)
-
-
-    $default	reduce using rule 216 (expr_without_variable)
-
-
-
-state 98
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    expr_without_variable  ->  T_DOUBLE_CAST expr .   (rule 217)
-
-
-    $default	reduce using rule 217 (expr_without_variable)
-
-
-
-state 99
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    expr_without_variable  ->  T_STRING_CAST expr .   (rule 218)
-
-
-    $default	reduce using rule 218 (expr_without_variable)
-
-
-
-state 100
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    expr_without_variable  ->  T_ARRAY_CAST expr .   (rule 219)
-
-
-    $default	reduce using rule 219 (expr_without_variable)
-
-
-
-state 101
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    expr_without_variable  ->  T_OBJECT_CAST expr .   (rule 220)
-
-
-    $default	reduce using rule 220 (expr_without_variable)
-
-
-
-state 102
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    expr_without_variable  ->  T_BOOL_CAST expr .   (rule 221)
-
-
-    $default	reduce using rule 221 (expr_without_variable)
-
-
-
-state 103
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    expr_without_variable  ->  T_UNSET_CAST expr .   (rule 222)
-
-
-    $default	reduce using rule 222 (expr_without_variable)
-
-
-
-state 104
-
-    expr_without_variable  ->  '@' @44 . expr   (rule 225)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 201
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 105
-
-    static_or_variable_string  ->  T_STRING .   (rule 236)
-
-    $default	reduce using rule 236 (static_or_variable_string)
-
-
-
-state 106
-
-    expr_without_variable  ->  T_NEW static_or_variable_string . @37 ctor_arguments   (rule 162)
-
-    $default	reduce using rule 161 (@37)
-
-    @37 	go to state 202
-
-
-
-state 107
-
-    static_or_variable_string  ->  r_cvar .   (rule 237)
-
-    $default	reduce using rule 237 (static_or_variable_string)
-
-
-
-state 108
-
-    r_cvar  ->  cvar .   (rule 271)
-
-    $default	reduce using rule 271 (r_cvar)
-
-
-
-state 109
-
-    exit_expr  ->  '(' . ')'   (rule 239)
-    exit_expr  ->  '(' . expr ')'   (rule 240)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    ')' 	shift, and go to state 203
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 204
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 110
-
-    expr_without_variable  ->  T_EXIT exit_expr .   (rule 223)
-
-    $default	reduce using rule 223 (expr_without_variable)
-
-
-
-state 111
-
-    unticked_statement  ->  T_IF '(' . expr ')' @3 statement @4 elseif_list else_single   (rule 16)
-    unticked_statement  ->  T_IF '(' . expr ')' ':' @5 inner_statement_list @6 new_elseif_list new_else_single T_ENDIF ';'   (rule 19)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 205
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 112
-
-    function_call  ->  T_STRING T_PAAMAYIM_NEKUDOTAYIM . static_or_variable_string '(' @47 function_call_parameter_list ')'   (rule 235)
-
-    T_STRING	shift, and go to state 105
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    static_or_variable_string	go to state 206
-    r_cvar	go to state 107
-    cvar	go to state 108
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 113
-
-    function_call  ->  T_STRING '(' . @45 function_call_parameter_list ')'   (rule 231)
-
-    $default	reduce using rule 230 (@45)
-
-    @45 	go to state 207
-
-
-
-state 114
-
-    unticked_statement  ->  T_ECHO echo_expr_list . ';'   (rule 41)
-    echo_expr_list  ->  echo_expr_list . ',' expr   (rule 147)
-
-    ',' 	shift, and go to state 208
-    ';' 	shift, and go to state 209
-
-
-
-state 115
-
-    echo_expr_list  ->  expr .   (rule 148)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 148 (echo_expr_list)
-
-
-
-state 116
-
-    unticked_statement  ->  T_DO @9 . statement T_WHILE '(' @10 expr ')' ';'   (rule 25)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_IF	shift, and go to state 25
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_INLINE_HTML	shift, and go to state 31
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ECHO	shift, and go to state 33
-    T_DO	shift, and go to state 34
-    T_WHILE	shift, and go to state 35
-    T_FOR	shift, and go to state 36
-    T_FOREACH	shift, and go to state 37
-    T_DECLARE	shift, and go to state 38
-    T_SWITCH	shift, and go to state 39
-    T_BREAK	shift, and go to state 40
-    T_CONTINUE	shift, and go to state 41
-    T_RETURN	shift, and go to state 44
-    T_USE	shift, and go to state 45
-    T_GLOBAL	shift, and go to state 46
-    T_STATIC	shift, and go to state 47
-    T_UNSET	shift, and go to state 48
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '{' 	shift, and go to state 59
-    '(' 	shift, and go to state 60
-    ';' 	shift, and go to state 61
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    statement	go to state 210
-    unticked_statement	go to state 68
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 75
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 117
-
-    unticked_statement  ->  T_WHILE '(' . @7 expr ')' @8 while_statement   (rule 22)
-
-    $default	reduce using rule 20 (@7)
-
-    @7  	go to state 211
-
-
-
-state 118
-
-    unticked_statement  ->  T_FOR '(' . for_expr ';' @11 for_expr ';' @12 for_expr ')' @13 for_statement   (rule 29)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    $default	reduce using rule 149 (for_expr)
-
-    for_expr	go to state 212
-    non_empty_for_expr	go to state 213
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 214
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 119
-
-    unticked_statement  ->  T_FOREACH '(' . w_cvar T_AS @15 w_cvar foreach_optional_arg ')' @16 foreach_statement   (rule 48)
-    unticked_statement  ->  T_FOREACH '(' . expr_without_variable T_AS @17 w_cvar foreach_optional_arg ')' @18 foreach_statement   (rule 51)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 215
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 130
-    r_cvar	go to state 76
-    w_cvar	go to state 216
-    rw_cvar	go to state 77
-    cvar	go to state 217
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 120
-
-    unticked_statement  ->  T_DECLARE @19 . '(' declare_list ')' declare_statement   (rule 53)
-
-    '(' 	shift, and go to state 218
-
-
-
-state 121
-
-    unticked_statement  ->  T_SWITCH '(' . expr ')' @14 switch_case_list   (rule 31)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 219
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 122
-
-    unticked_statement  ->  T_BREAK ';' .   (rule 32)
-
-    $default	reduce using rule 32 (unticked_statement)
-
-
-
-state 123
-
-    unticked_statement  ->  T_BREAK expr . ';'   (rule 33)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    ';' 	shift, and go to state 220
-
-
-
-state 124
-
-    unticked_statement  ->  T_CONTINUE ';' .   (rule 34)
-
-    $default	reduce using rule 34 (unticked_statement)
-
-
-
-state 125
-
-    unticked_statement  ->  T_CONTINUE expr . ';'   (rule 35)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    ';' 	shift, and go to state 221
-
-
-
-state 126
-
-    unticked_declaration_statement  ->  T_OLD_FUNCTION @22 . is_reference T_STRING @23 parameter_list '(' inner_statement_list ')' ';'   (rule 66)
-
-    '&' 	shift, and go to state 222
-
-    $default	reduce using rule 140 (is_reference)
-
-    is_reference	go to state 223
-
-
-
-state 127
-
-    unticked_declaration_statement  ->  T_FUNCTION @20 . is_reference T_STRING @21 '(' parameter_list ')' '{' inner_statement_list '}'   (rule 63)
-
-    '&' 	shift, and go to state 222
-
-    $default	reduce using rule 140 (is_reference)
-
-    is_reference	go to state 224
-
-
-
-state 128
-
-    unticked_statement  ->  T_RETURN ';' .   (rule 36)
-
-    $default	reduce using rule 36 (unticked_statement)
-
-
-
-state 129
-
-    unticked_statement  ->  T_RETURN expr_without_variable . ';'   (rule 37)
-    expr  ->  expr_without_variable .   (rule 270)
-
-    ';' 	shift, and go to state 225
-
-    $default	reduce using rule 270 (expr)
-
-
-
-state 130
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-
-
-state 131
-
-    unticked_statement  ->  T_RETURN cvar . ';'   (rule 38)
-    expr_without_variable  ->  cvar . '=' expr   (rule 156)
-    expr_without_variable  ->  cvar . '=' '&' w_cvar   (rule 157)
-    expr_without_variable  ->  cvar . '=' '&' function_call   (rule 158)
-    expr_without_variable  ->  cvar . '=' '&' T_NEW static_or_variable_string @36 ctor_arguments   (rule 160)
-    expr_without_variable  ->  cvar . T_PLUS_EQUAL expr   (rule 163)
-    expr_without_variable  ->  cvar . T_MINUS_EQUAL expr   (rule 164)
-    expr_without_variable  ->  cvar . T_MUL_EQUAL expr   (rule 165)
-    expr_without_variable  ->  cvar . T_DIV_EQUAL expr   (rule 166)
-    expr_without_variable  ->  cvar . T_CONCAT_EQUAL expr   (rule 167)
-    expr_without_variable  ->  cvar . T_MOD_EQUAL expr   (rule 168)
-    expr_without_variable  ->  cvar . T_AND_EQUAL expr   (rule 169)
-    expr_without_variable  ->  cvar . T_OR_EQUAL expr   (rule 170)
-    expr_without_variable  ->  cvar . T_XOR_EQUAL expr   (rule 171)
-    expr_without_variable  ->  cvar . T_SL_EQUAL expr   (rule 172)
-    expr_without_variable  ->  cvar . T_SR_EQUAL expr   (rule 173)
-    function_call  ->  cvar . '(' @46 function_call_parameter_list ')'   (rule 233)
-    r_cvar  ->  cvar .   (rule 271)
-    rw_cvar  ->  cvar .   (rule 273)
-
-    '=' 	shift, and go to state 182
-    T_PLUS_EQUAL	shift, and go to state 183
-    T_MINUS_EQUAL	shift, and go to state 184
-    T_MUL_EQUAL	shift, and go to state 185
-    T_DIV_EQUAL	shift, and go to state 186
-    T_CONCAT_EQUAL	shift, and go to state 187
-    T_MOD_EQUAL	shift, and go to state 188
-    T_AND_EQUAL	shift, and go to state 189
-    T_OR_EQUAL	shift, and go to state 190
-    T_XOR_EQUAL	shift, and go to state 191
-    T_SL_EQUAL	shift, and go to state 192
-    T_SR_EQUAL	shift, and go to state 193
-    '(' 	shift, and go to state 194
-    ';' 	shift, and go to state 226
-
-    T_INC	reduce using rule 273 (rw_cvar)
-    T_DEC	reduce using rule 273 (rw_cvar)
-    $default	reduce using rule 271 (r_cvar)
-
-
-state 132
-
-    use_filename  ->  T_CONSTANT_ENCAPSED_STRING .   (rule 58)
-
-    $default	reduce using rule 58 (use_filename)
-
-
-
-state 133
-
-    use_filename  ->  '(' . T_CONSTANT_ENCAPSED_STRING ')'   (rule 59)
-
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 227
-
-
-
-state 134
-
-    unticked_statement  ->  T_USE use_filename . ';'   (rule 44)
-
-    ';' 	shift, and go to state 228
-
-
-
-state 135
-
-    global_var  ->  T_VARIABLE .   (rule 124)
-
-    $default	reduce using rule 124 (global_var)
-
-
-
-state 136
-
-    global_var  ->  '$' . r_cvar   (rule 125)
-    global_var  ->  '$' . '{' expr '}'   (rule 126)
-
-    T_VARIABLE	shift, and go to state 30
-    '{' 	shift, and go to state 229
-    '$' 	shift, and go to state 62
-
-    r_cvar	go to state 230
-    cvar	go to state 108
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 137
-
-    unticked_statement  ->  T_GLOBAL global_var_list . ';'   (rule 39)
-    global_var_list  ->  global_var_list . ',' global_var   (rule 122)
-
-    ',' 	shift, and go to state 231
-    ';' 	shift, and go to state 232
-
-
-
-state 138
-
-    global_var_list  ->  global_var .   (rule 123)
-
-    $default	reduce using rule 123 (global_var_list)
-
-
-
-state 139
-
-    static_var_list  ->  T_VARIABLE .   (rule 129)
-    static_var_list  ->  T_VARIABLE . '=' static_scalar   (rule 130)
-
-    '=' 	shift, and go to state 233
-
-    $default	reduce using rule 129 (static_var_list)
-
-
-
-state 140
-
-    unticked_statement  ->  T_STATIC static_var_list . ';'   (rule 40)
-    static_var_list  ->  static_var_list . ',' T_VARIABLE   (rule 127)
-    static_var_list  ->  static_var_list . ',' T_VARIABLE '=' static_scalar   (rule 128)
-
-    ',' 	shift, and go to state 234
-    ';' 	shift, and go to state 235
-
-
-
-state 141
-
-    unticked_statement  ->  T_UNSET '(' . unset_variables ')' ';'   (rule 45)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    unset_variables	go to state 236
-    unset_variable	go to state 237
-    cvar	go to state 238
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 142
-
-    internal_functions_in_yacc  ->  T_ISSET '(' . isset_variables ')'   (rule 337)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    cvar	go to state 239
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    isset_variables	go to state 240
-
-
-
-state 143
-
-    internal_functions_in_yacc  ->  T_EMPTY '(' . cvar ')'   (rule 338)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    cvar	go to state 241
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 144
-
-    unticked_declaration_statement  ->  T_CLASS T_STRING . @24 '{' class_statement_list '}'   (rule 68)
-    unticked_declaration_statement  ->  T_CLASS T_STRING . T_EXTENDS T_STRING @25 '{' class_statement_list '}'   (rule 70)
-
-    T_EXTENDS	shift, and go to state 242
-
-    $default	reduce using rule 67 (@24)
-
-    @24 	go to state 243
-
-
-
-state 145
-
-    expr_without_variable  ->  T_LIST '(' . @35 assignment_list ')' '=' expr   (rule 155)
-
-    $default	reduce using rule 154 (@35)
-
-    @35 	go to state 244
-
-
-
-state 146
-
-    expr_without_variable  ->  T_ARRAY '(' . array_pair_list ')'   (rule 227)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '&' 	shift, and go to state 245
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    $default	reduce using rule 305 (array_pair_list)
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 246
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    array_pair_list	go to state 247
-    non_empty_array_pair_list	go to state 248
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 147
-
-    scalar  ->  T_START_HEREDOC encaps_list . T_END_HEREDOC   (rule 260)
-    encaps_list  ->  encaps_list . encaps_var   (rule 315)
-    encaps_list  ->  encaps_list . T_STRING   (rule 316)
-    encaps_list  ->  encaps_list . T_NUM_STRING   (rule 317)
-    encaps_list  ->  encaps_list . T_ENCAPSED_AND_WHITESPACE   (rule 318)
-    encaps_list  ->  encaps_list . T_CHARACTER   (rule 319)
-    encaps_list  ->  encaps_list . T_BAD_CHARACTER   (rule 320)
-    encaps_list  ->  encaps_list . '['   (rule 321)
-    encaps_list  ->  encaps_list . ']'   (rule 322)
-    encaps_list  ->  encaps_list . '{'   (rule 323)
-    encaps_list  ->  encaps_list . '}'   (rule 324)
-    encaps_list  ->  encaps_list . T_OBJECT_OPERATOR   (rule 325)
-
-    '[' 	shift, and go to state 249
-    T_STRING	shift, and go to state 250
-    T_VARIABLE	shift, and go to state 251
-    T_NUM_STRING	shift, and go to state 252
-    T_CHARACTER	shift, and go to state 253
-    T_BAD_CHARACTER	shift, and go to state 254
-    T_ENCAPSED_AND_WHITESPACE	shift, and go to state 255
-    T_OBJECT_OPERATOR	shift, and go to state 256
-    T_END_HEREDOC	shift, and go to state 257
-    T_DOLLAR_OPEN_CURLY_BRACES	shift, and go to state 258
-    T_CURLY_OPEN	shift, and go to state 259
-    '{' 	shift, and go to state 260
-    '}' 	shift, and go to state 261
-    ']' 	shift, and go to state 262
-
-    encaps_var	go to state 263
-
-
-
-state 148
-
-    inner_statement_list  ->  inner_statement_list . @2 inner_statement   (rule 8)
-    unticked_statement  ->  '{' inner_statement_list . '}'   (rule 13)
-
-    '}' 	shift, and go to state 264
-
-    $default	reduce using rule 7 (@2)
-
-    @2  	go to state 265
-
-
-
-state 149
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  '(' expr . ')'   (rule 210)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    ')' 	shift, and go to state 266
-
-
-
-state 150
-
-    compound_variable  ->  '$' '{' . expr '}'   (rule 283)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 267
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 151
-
-    expr_without_variable  ->  '`' encaps_list . '`'   (rule 228)
-    encaps_list  ->  encaps_list . encaps_var   (rule 315)
-    encaps_list  ->  encaps_list . T_STRING   (rule 316)
-    encaps_list  ->  encaps_list . T_NUM_STRING   (rule 317)
-    encaps_list  ->  encaps_list . T_ENCAPSED_AND_WHITESPACE   (rule 318)
-    encaps_list  ->  encaps_list . T_CHARACTER   (rule 319)
-    encaps_list  ->  encaps_list . T_BAD_CHARACTER   (rule 320)
-    encaps_list  ->  encaps_list . '['   (rule 321)
-    encaps_list  ->  encaps_list . ']'   (rule 322)
-    encaps_list  ->  encaps_list . '{'   (rule 323)
-    encaps_list  ->  encaps_list . '}'   (rule 324)
-    encaps_list  ->  encaps_list . T_OBJECT_OPERATOR   (rule 325)
-
-    '[' 	shift, and go to state 249
-    T_STRING	shift, and go to state 250
-    T_VARIABLE	shift, and go to state 251
-    T_NUM_STRING	shift, and go to state 252
-    T_CHARACTER	shift, and go to state 253
-    T_BAD_CHARACTER	shift, and go to state 254
-    T_ENCAPSED_AND_WHITESPACE	shift, and go to state 255
-    T_OBJECT_OPERATOR	shift, and go to state 256
-    T_DOLLAR_OPEN_CURLY_BRACES	shift, and go to state 258
-    T_CURLY_OPEN	shift, and go to state 259
-    '{' 	shift, and go to state 260
-    '}' 	shift, and go to state 261
-    '`' 	shift, and go to state 268
-    ']' 	shift, and go to state 262
-
-    encaps_var	go to state 263
-
-
-
-state 152
-
-    scalar  ->  '\"' encaps_list . '\"'   (rule 258)
-    encaps_list  ->  encaps_list . encaps_var   (rule 315)
-    encaps_list  ->  encaps_list . T_STRING   (rule 316)
-    encaps_list  ->  encaps_list . T_NUM_STRING   (rule 317)
-    encaps_list  ->  encaps_list . T_ENCAPSED_AND_WHITESPACE   (rule 318)
-    encaps_list  ->  encaps_list . T_CHARACTER   (rule 319)
-    encaps_list  ->  encaps_list . T_BAD_CHARACTER   (rule 320)
-    encaps_list  ->  encaps_list . '['   (rule 321)
-    encaps_list  ->  encaps_list . ']'   (rule 322)
-    encaps_list  ->  encaps_list . '{'   (rule 323)
-    encaps_list  ->  encaps_list . '}'   (rule 324)
-    encaps_list  ->  encaps_list . T_OBJECT_OPERATOR   (rule 325)
-
-    '[' 	shift, and go to state 249
-    T_STRING	shift, and go to state 250
-    T_VARIABLE	shift, and go to state 251
-    T_NUM_STRING	shift, and go to state 252
-    T_CHARACTER	shift, and go to state 253
-    T_BAD_CHARACTER	shift, and go to state 254
-    T_ENCAPSED_AND_WHITESPACE	shift, and go to state 255
-    T_OBJECT_OPERATOR	shift, and go to state 256
-    T_DOLLAR_OPEN_CURLY_BRACES	shift, and go to state 258
-    T_CURLY_OPEN	shift, and go to state 259
-    '{' 	shift, and go to state 260
-    '}' 	shift, and go to state 261
-    '\"'	shift, and go to state 269
-    ']' 	shift, and go to state 262
-
-    encaps_var	go to state 263
-
-
-
-state 153
-
-    scalar  ->  '\'' encaps_list . '\''   (rule 259)
-    encaps_list  ->  encaps_list . encaps_var   (rule 315)
-    encaps_list  ->  encaps_list . T_STRING   (rule 316)
-    encaps_list  ->  encaps_list . T_NUM_STRING   (rule 317)
-    encaps_list  ->  encaps_list . T_ENCAPSED_AND_WHITESPACE   (rule 318)
-    encaps_list  ->  encaps_list . T_CHARACTER   (rule 319)
-    encaps_list  ->  encaps_list . T_BAD_CHARACTER   (rule 320)
-    encaps_list  ->  encaps_list . '['   (rule 321)
-    encaps_list  ->  encaps_list . ']'   (rule 322)
-    encaps_list  ->  encaps_list . '{'   (rule 323)
-    encaps_list  ->  encaps_list . '}'   (rule 324)
-    encaps_list  ->  encaps_list . T_OBJECT_OPERATOR   (rule 325)
-
-    '[' 	shift, and go to state 249
-    T_STRING	shift, and go to state 250
-    T_VARIABLE	shift, and go to state 251
-    T_NUM_STRING	shift, and go to state 252
-    T_CHARACTER	shift, and go to state 253
-    T_BAD_CHARACTER	shift, and go to state 254
-    T_ENCAPSED_AND_WHITESPACE	shift, and go to state 255
-    T_OBJECT_OPERATOR	shift, and go to state 256
-    T_DOLLAR_OPEN_CURLY_BRACES	shift, and go to state 258
-    T_CURLY_OPEN	shift, and go to state 259
-    '{' 	shift, and go to state 260
-    '}' 	shift, and go to state 261
-    '\''	shift, and go to state 270
-    ']' 	shift, and go to state 262
-
-    encaps_var	go to state 263
-
-
-
-state 154
-
-    expr_without_variable  ->  expr T_LOGICAL_OR . @40 expr   (rule 183)
-
-    $default	reduce using rule 182 (@40)
-
-    @40 	go to state 271
-
-
-
-state 155
-
-    expr_without_variable  ->  expr T_LOGICAL_XOR . expr   (rule 186)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 272
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 156
-
-    expr_without_variable  ->  expr T_LOGICAL_AND . @41 expr   (rule 185)
-
-    $default	reduce using rule 184 (@41)
-
-    @41 	go to state 273
-
-
-
-state 157
-
-    expr_without_variable  ->  expr '?' . @42 expr ':' @43 expr   (rule 213)
-
-    $default	reduce using rule 211 (@42)
-
-    @42 	go to state 274
-
-
-
-state 158
-
-    expr_without_variable  ->  expr T_BOOLEAN_OR . @38 expr   (rule 179)
-
-    $default	reduce using rule 178 (@38)
-
-    @38 	go to state 275
-
-
-
-state 159
-
-    expr_without_variable  ->  expr T_BOOLEAN_AND . @39 expr   (rule 181)
-
-    $default	reduce using rule 180 (@39)
-
-    @39 	go to state 276
-
-
-
-state 160
-
-    expr_without_variable  ->  expr '|' . expr   (rule 187)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 277
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 161
-
-    expr_without_variable  ->  expr '^' . expr   (rule 189)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 278
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 162
-
-    expr_without_variable  ->  expr '&' . expr   (rule 188)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 279
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 163
-
-    expr_without_variable  ->  expr T_IS_EQUAL . expr   (rule 204)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 280
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 164
-
-    expr_without_variable  ->  expr T_IS_NOT_EQUAL . expr   (rule 205)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 281
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 165
-
-    expr_without_variable  ->  expr T_IS_IDENTICAL . expr   (rule 202)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 282
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 166
-
-    expr_without_variable  ->  expr T_IS_NOT_IDENTICAL . expr   (rule 203)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 283
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 167
-
-    expr_without_variable  ->  expr '<' . expr   (rule 206)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 284
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 168
-
-    expr_without_variable  ->  expr T_IS_SMALLER_OR_EQUAL . expr   (rule 207)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 285
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 169
-
-    expr_without_variable  ->  expr '>' . expr   (rule 208)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 286
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 170
-
-    expr_without_variable  ->  expr T_IS_GREATER_OR_EQUAL . expr   (rule 209)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 287
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 171
-
-    expr_without_variable  ->  expr T_SL . expr   (rule 196)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 288
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 172
-
-    expr_without_variable  ->  expr T_SR . expr   (rule 197)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 289
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 173
-
-    expr_without_variable  ->  expr '+' . expr   (rule 191)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 290
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 174
-
-    expr_without_variable  ->  expr '-' . expr   (rule 192)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 291
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 175
-
-    expr_without_variable  ->  expr '.' . expr   (rule 190)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 292
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 176
-
-    expr_without_variable  ->  expr '*' . expr   (rule 193)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 293
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 177
-
-    expr_without_variable  ->  expr '/' . expr   (rule 194)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 294
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 178
-
-    expr_without_variable  ->  expr '%' . expr   (rule 195)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 295
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 179
-
-    unticked_statement  ->  expr ';' .   (rule 43)
-
-    $default	reduce using rule 43 (unticked_statement)
-
-
-
-state 180
-
-    expr_without_variable  ->  rw_cvar T_INC .   (rule 174)
-
-    $default	reduce using rule 174 (expr_without_variable)
-
-
-
-state 181
-
-    expr_without_variable  ->  rw_cvar T_DEC .   (rule 176)
-
-    $default	reduce using rule 176 (expr_without_variable)
-
-
-
-state 182
-
-    expr_without_variable  ->  cvar '=' . expr   (rule 156)
-    expr_without_variable  ->  cvar '=' . '&' w_cvar   (rule 157)
-    expr_without_variable  ->  cvar '=' . '&' function_call   (rule 158)
-    expr_without_variable  ->  cvar '=' . '&' T_NEW static_or_variable_string @36 ctor_arguments   (rule 160)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '&' 	shift, and go to state 296
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 297
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 183
-
-    expr_without_variable  ->  cvar T_PLUS_EQUAL . expr   (rule 163)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 298
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 184
-
-    expr_without_variable  ->  cvar T_MINUS_EQUAL . expr   (rule 164)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 299
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 185
-
-    expr_without_variable  ->  cvar T_MUL_EQUAL . expr   (rule 165)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 300
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 186
-
-    expr_without_variable  ->  cvar T_DIV_EQUAL . expr   (rule 166)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 301
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 187
-
-    expr_without_variable  ->  cvar T_CONCAT_EQUAL . expr   (rule 167)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 302
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 188
-
-    expr_without_variable  ->  cvar T_MOD_EQUAL . expr   (rule 168)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 303
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 189
-
-    expr_without_variable  ->  cvar T_AND_EQUAL . expr   (rule 169)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 304
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 190
-
-    expr_without_variable  ->  cvar T_OR_EQUAL . expr   (rule 170)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 305
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 191
-
-    expr_without_variable  ->  cvar T_XOR_EQUAL . expr   (rule 171)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 306
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 192
-
-    expr_without_variable  ->  cvar T_SL_EQUAL . expr   (rule 172)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 307
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 193
-
-    expr_without_variable  ->  cvar T_SR_EQUAL . expr   (rule 173)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 308
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 194
-
-    function_call  ->  cvar '(' . @46 function_call_parameter_list ')'   (rule 233)
-
-    $default	reduce using rule 232 (@46)
-
-    @46 	go to state 309
-
-
-
-state 195
-
-    cvar  ->  cvar_without_objects T_OBJECT_OPERATOR . @48 ref_list   (rule 276)
-
-    $default	reduce using rule 275 (@48)
-
-    @48 	go to state 310
-
-
-
-state 196
-
-    reference_variable  ->  reference_variable '[' . dim_offset ']'   (rule 279)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    $default	reduce using rule 284 (dim_offset)
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 311
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    dim_offset	go to state 312
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 197
-
-    reference_variable  ->  reference_variable '{' . expr '}'   (rule 280)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 313
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 198
-
-    compound_variable  ->  '$' . '{' expr '}'   (rule 283)
-    simple_indirect_reference  ->  simple_indirect_reference '$' .   (rule 298)
-
-    '{' 	shift, and go to state 150
-
-    $default	reduce using rule 298 (simple_indirect_reference)
-
-
-
-state 199
-
-    cvar_without_objects  ->  simple_indirect_reference reference_variable .   (rule 278)
-    reference_variable  ->  reference_variable . '[' dim_offset ']'   (rule 279)
-    reference_variable  ->  reference_variable . '{' expr '}'   (rule 280)
-
-    '[' 	shift, and go to state 196
-    '{' 	shift, and go to state 197
-
-    $default	reduce using rule 278 (cvar_without_objects)
-
-
-
-state 200
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    internal_functions_in_yacc  ->  T_EVAL '(' expr . ')'   (rule 341)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    ')' 	shift, and go to state 314
-
-
-
-state 201
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    expr_without_variable  ->  '@' @44 expr .   (rule 225)
-
-
-    $default	reduce using rule 225 (expr_without_variable)
-
-
-
-state 202
-
-    expr_without_variable  ->  T_NEW static_or_variable_string @37 . ctor_arguments   (rule 162)
-
-    '(' 	shift, and go to state 315
-
-    $default	reduce using rule 241 (ctor_arguments)
-
-    ctor_arguments	go to state 316
-
-
-
-state 203
-
-    exit_expr  ->  '(' ')' .   (rule 239)
-
-    $default	reduce using rule 239 (exit_expr)
-
-
-
-state 204
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    exit_expr  ->  '(' expr . ')'   (rule 240)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    ')' 	shift, and go to state 317
-
-
-
-state 205
-
-    unticked_statement  ->  T_IF '(' expr . ')' @3 statement @4 elseif_list else_single   (rule 16)
-    unticked_statement  ->  T_IF '(' expr . ')' ':' @5 inner_statement_list @6 new_elseif_list new_else_single T_ENDIF ';'   (rule 19)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    ')' 	shift, and go to state 318
-
-
-
-state 206
-
-    function_call  ->  T_STRING T_PAAMAYIM_NEKUDOTAYIM static_or_variable_string . '(' @47 function_call_parameter_list ')'   (rule 235)
-
-    '(' 	shift, and go to state 319
-
-
-
-state 207
-
-    function_call  ->  T_STRING '(' @45 . function_call_parameter_list ')'   (rule 231)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '&' 	shift, and go to state 320
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    $default	reduce using rule 115 (function_call_parameter_list)
-
-    function_call_parameter_list	go to state 321
-    non_empty_function_call_parameter_list	go to state 322
-    expr_without_variable	go to state 323
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 130
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 324
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 208
-
-    echo_expr_list  ->  echo_expr_list ',' . expr   (rule 147)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 325
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 209
-
-    unticked_statement  ->  T_ECHO echo_expr_list ';' .   (rule 41)
-
-    $default	reduce using rule 41 (unticked_statement)
-
-
-
-state 210
-
-    unticked_statement  ->  T_DO @9 statement . T_WHILE '(' @10 expr ')' ';'   (rule 25)
-
-    T_WHILE	shift, and go to state 326
-
-
-
-state 211
-
-    unticked_statement  ->  T_WHILE '(' @7 . expr ')' @8 while_statement   (rule 22)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 327
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 212
-
-    unticked_statement  ->  T_FOR '(' for_expr . ';' @11 for_expr ';' @12 for_expr ')' @13 for_statement   (rule 29)
-
-    ';' 	shift, and go to state 328
-
-
-
-state 213
-
-    for_expr  ->  non_empty_for_expr .   (rule 150)
-    non_empty_for_expr  ->  non_empty_for_expr . ',' @34 expr   (rule 152)
-
-    ',' 	shift, and go to state 329
-
-    $default	reduce using rule 150 (for_expr)
-
-
-
-state 214
-
-    non_empty_for_expr  ->  expr .   (rule 153)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 153 (non_empty_for_expr)
-
-
-
-state 215
-
-    unticked_statement  ->  T_FOREACH '(' expr_without_variable . T_AS @17 w_cvar foreach_optional_arg ')' @18 foreach_statement   (rule 51)
-    expr  ->  expr_without_variable .   (rule 270)
-
-    T_AS	shift, and go to state 330
-
-    $default	reduce using rule 270 (expr)
-
-
-
-state 216
-
-    unticked_statement  ->  T_FOREACH '(' w_cvar . T_AS @15 w_cvar foreach_optional_arg ')' @16 foreach_statement   (rule 48)
-
-    T_AS	shift, and go to state 331
-
-
-
-state 217
-
-    expr_without_variable  ->  cvar . '=' expr   (rule 156)
-    expr_without_variable  ->  cvar . '=' '&' w_cvar   (rule 157)
-    expr_without_variable  ->  cvar . '=' '&' function_call   (rule 158)
-    expr_without_variable  ->  cvar . '=' '&' T_NEW static_or_variable_string @36 ctor_arguments   (rule 160)
-    expr_without_variable  ->  cvar . T_PLUS_EQUAL expr   (rule 163)
-    expr_without_variable  ->  cvar . T_MINUS_EQUAL expr   (rule 164)
-    expr_without_variable  ->  cvar . T_MUL_EQUAL expr   (rule 165)
-    expr_without_variable  ->  cvar . T_DIV_EQUAL expr   (rule 166)
-    expr_without_variable  ->  cvar . T_CONCAT_EQUAL expr   (rule 167)
-    expr_without_variable  ->  cvar . T_MOD_EQUAL expr   (rule 168)
-    expr_without_variable  ->  cvar . T_AND_EQUAL expr   (rule 169)
-    expr_without_variable  ->  cvar . T_OR_EQUAL expr   (rule 170)
-    expr_without_variable  ->  cvar . T_XOR_EQUAL expr   (rule 171)
-    expr_without_variable  ->  cvar . T_SL_EQUAL expr   (rule 172)
-    expr_without_variable  ->  cvar . T_SR_EQUAL expr   (rule 173)
-    function_call  ->  cvar . '(' @46 function_call_parameter_list ')'   (rule 233)
-    r_cvar  ->  cvar .   (rule 271)
-    w_cvar  ->  cvar .   (rule 272)
-    rw_cvar  ->  cvar .   (rule 273)
-
-    '=' 	shift, and go to state 182
-    T_PLUS_EQUAL	shift, and go to state 183
-    T_MINUS_EQUAL	shift, and go to state 184
-    T_MUL_EQUAL	shift, and go to state 185
-    T_DIV_EQUAL	shift, and go to state 186
-    T_CONCAT_EQUAL	shift, and go to state 187
-    T_MOD_EQUAL	shift, and go to state 188
-    T_AND_EQUAL	shift, and go to state 189
-    T_OR_EQUAL	shift, and go to state 190
-    T_XOR_EQUAL	shift, and go to state 191
-    T_SL_EQUAL	shift, and go to state 192
-    T_SR_EQUAL	shift, and go to state 193
-    '(' 	shift, and go to state 194
-
-    T_INC	reduce using rule 273 (rw_cvar)
-    T_DEC	reduce using rule 273 (rw_cvar)
-    T_AS	reduce using rule 272 (w_cvar)
-    $default	reduce using rule 271 (r_cvar)
-
-
-state 218
-
-    unticked_statement  ->  T_DECLARE @19 '(' . declare_list ')' declare_statement   (rule 53)
-
-    T_STRING	shift, and go to state 332
-
-    declare_list	go to state 333
-
-
-
-state 219
-
-    unticked_statement  ->  T_SWITCH '(' expr . ')' @14 switch_case_list   (rule 31)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    ')' 	shift, and go to state 334
-
-
-
-state 220
-
-    unticked_statement  ->  T_BREAK expr ';' .   (rule 33)
-
-    $default	reduce using rule 33 (unticked_statement)
-
-
-
-state 221
-
-    unticked_statement  ->  T_CONTINUE expr ';' .   (rule 35)
-
-    $default	reduce using rule 35 (unticked_statement)
-
-
-
-state 222
-
-    is_reference  ->  '&' .   (rule 141)
-
-    $default	reduce using rule 141 (is_reference)
-
-
-
-state 223
-
-    unticked_declaration_statement  ->  T_OLD_FUNCTION @22 is_reference . T_STRING @23 parameter_list '(' inner_statement_list ')' ';'   (rule 66)
-
-    T_STRING	shift, and go to state 335
-
-
-
-state 224
-
-    unticked_declaration_statement  ->  T_FUNCTION @20 is_reference . T_STRING @21 '(' parameter_list ')' '{' inner_statement_list '}'   (rule 63)
-
-    T_STRING	shift, and go to state 336
-
-
-
-state 225
-
-    unticked_statement  ->  T_RETURN expr_without_variable ';' .   (rule 37)
-
-    $default	reduce using rule 37 (unticked_statement)
-
-
-
-state 226
-
-    unticked_statement  ->  T_RETURN cvar ';' .   (rule 38)
-
-    $default	reduce using rule 38 (unticked_statement)
-
-
-
-state 227
-
-    use_filename  ->  '(' T_CONSTANT_ENCAPSED_STRING . ')'   (rule 59)
-
-    ')' 	shift, and go to state 337
-
-
-
-state 228
-
-    unticked_statement  ->  T_USE use_filename ';' .   (rule 44)
-
-    $default	reduce using rule 44 (unticked_statement)
-
-
-
-state 229
-
-    global_var  ->  '$' '{' . expr '}'   (rule 126)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 338
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 230
-
-    global_var  ->  '$' r_cvar .   (rule 125)
-
-    $default	reduce using rule 125 (global_var)
-
-
-
-state 231
-
-    global_var_list  ->  global_var_list ',' . global_var   (rule 122)
-
-    T_VARIABLE	shift, and go to state 135
-    '$' 	shift, and go to state 136
-
-    global_var	go to state 339
-
-
-
-state 232
-
-    unticked_statement  ->  T_GLOBAL global_var_list ';' .   (rule 39)
-
-    $default	reduce using rule 39 (unticked_statement)
-
-
-
-state 233
-
-    static_var_list  ->  T_VARIABLE '=' . static_scalar   (rule 130)
-
-    '+' 	shift, and go to state 340
-    '-' 	shift, and go to state 341
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 342
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ARRAY	shift, and go to state 343
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-
-    common_scalar	go to state 344
-    static_scalar	go to state 345
-
-
-
-state 234
-
-    static_var_list  ->  static_var_list ',' . T_VARIABLE   (rule 127)
-    static_var_list  ->  static_var_list ',' . T_VARIABLE '=' static_scalar   (rule 128)
-
-    T_VARIABLE	shift, and go to state 346
-
-
-
-state 235
-
-    unticked_statement  ->  T_STATIC static_var_list ';' .   (rule 40)
-
-    $default	reduce using rule 40 (unticked_statement)
-
-
-
-state 236
-
-    unticked_statement  ->  T_UNSET '(' unset_variables . ')' ';'   (rule 45)
-    unset_variables  ->  unset_variables . ',' unset_variable   (rule 56)
-
-    ',' 	shift, and go to state 347
-    ')' 	shift, and go to state 348
-
-
-
-state 237
-
-    unset_variables  ->  unset_variable .   (rule 55)
-
-    $default	reduce using rule 55 (unset_variables)
-
-
-
-state 238
-
-    unset_variable  ->  cvar .   (rule 57)
-
-    $default	reduce using rule 57 (unset_variable)
-
-
-
-state 239
-
-    isset_variables  ->  cvar .   (rule 344)
-
-    $default	reduce using rule 344 (isset_variables)
-
-
-
-state 240
-
-    internal_functions_in_yacc  ->  T_ISSET '(' isset_variables . ')'   (rule 337)
-    isset_variables  ->  isset_variables . ',' @53 cvar   (rule 346)
-
-    ',' 	shift, and go to state 349
-    ')' 	shift, and go to state 350
-
-
-
-state 241
-
-    internal_functions_in_yacc  ->  T_EMPTY '(' cvar . ')'   (rule 338)
-
-    ')' 	shift, and go to state 351
-
-
-
-state 242
-
-    unticked_declaration_statement  ->  T_CLASS T_STRING T_EXTENDS . T_STRING @25 '{' class_statement_list '}'   (rule 70)
-
-    T_STRING	shift, and go to state 352
-
-
-
-state 243
-
-    unticked_declaration_statement  ->  T_CLASS T_STRING @24 . '{' class_statement_list '}'   (rule 68)
-
-    '{' 	shift, and go to state 353
-
-
-
-state 244
-
-    expr_without_variable  ->  T_LIST '(' @35 . assignment_list ')' '=' expr   (rule 155)
-
-    T_VARIABLE	shift, and go to state 30
-    T_LIST	shift, and go to state 354
-    '$' 	shift, and go to state 62
-
-    $default	reduce using rule 304 (assignment_list_element)
-
-    cvar	go to state 355
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    assignment_list	go to state 356
-    assignment_list_element	go to state 357
-
-
-
-state 245
-
-    non_empty_array_pair_list  ->  '&' . w_cvar   (rule 314)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    w_cvar	go to state 358
-    cvar	go to state 359
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 246
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    non_empty_array_pair_list  ->  expr . T_DOUBLE_ARROW expr   (rule 309)
-    non_empty_array_pair_list  ->  expr .   (rule 310)
-    non_empty_array_pair_list  ->  expr . T_DOUBLE_ARROW '&' w_cvar   (rule 313)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    T_DOUBLE_ARROW	shift, and go to state 360
-
-    $default	reduce using rule 310 (non_empty_array_pair_list)
-
-
-
-state 247
-
-    expr_without_variable  ->  T_ARRAY '(' array_pair_list . ')'   (rule 227)
-
-    ')' 	shift, and go to state 361
-
-
-
-state 248
-
-    array_pair_list  ->  non_empty_array_pair_list . possible_comma   (rule 306)
-    non_empty_array_pair_list  ->  non_empty_array_pair_list . ',' expr T_DOUBLE_ARROW expr   (rule 307)
-    non_empty_array_pair_list  ->  non_empty_array_pair_list . ',' expr   (rule 308)
-    non_empty_array_pair_list  ->  non_empty_array_pair_list . ',' expr T_DOUBLE_ARROW '&' w_cvar   (rule 311)
-    non_empty_array_pair_list  ->  non_empty_array_pair_list . ',' '&' w_cvar   (rule 312)
-
-    ',' 	shift, and go to state 362
-
-    $default	reduce using rule 263 (possible_comma)
-
-    possible_comma	go to state 363
-
-
-
-state 249
-
-    encaps_list  ->  encaps_list '[' .   (rule 321)
-
-    $default	reduce using rule 321 (encaps_list)
-
-
-
-state 250
-
-    encaps_list  ->  encaps_list T_STRING .   (rule 316)
-
-    $default	reduce using rule 316 (encaps_list)
-
-
-
-state 251
-
-    encaps_var  ->  T_VARIABLE .   (rule 327)
-    encaps_var  ->  T_VARIABLE . '[' @52 encaps_var_offset ']'   (rule 329)
-    encaps_var  ->  T_VARIABLE . T_OBJECT_OPERATOR T_STRING   (rule 330)
-
-    '[' 	shift, and go to state 364
-    T_OBJECT_OPERATOR	shift, and go to state 365
-
-    '[' 	[reduce using rule 327 (encaps_var)]
-    T_OBJECT_OPERATOR	[reduce using rule 327 (encaps_var)]
-    $default	reduce using rule 327 (encaps_var)
-
-
-
-state 252
-
-    encaps_list  ->  encaps_list T_NUM_STRING .   (rule 317)
-
-    $default	reduce using rule 317 (encaps_list)
-
-
-
-state 253
-
-    encaps_list  ->  encaps_list T_CHARACTER .   (rule 319)
-
-    $default	reduce using rule 319 (encaps_list)
-
-
-
-state 254
-
-    encaps_list  ->  encaps_list T_BAD_CHARACTER .   (rule 320)
-
-    $default	reduce using rule 320 (encaps_list)
-
-
-
-state 255
-
-    encaps_list  ->  encaps_list T_ENCAPSED_AND_WHITESPACE .   (rule 318)
-
-    $default	reduce using rule 318 (encaps_list)
-
-
-
-state 256
-
-    encaps_list  ->  encaps_list T_OBJECT_OPERATOR .   (rule 325)
-
-    $default	reduce using rule 325 (encaps_list)
-
-
-
-state 257
-
-    scalar  ->  T_START_HEREDOC encaps_list T_END_HEREDOC .   (rule 260)
-
-    $default	reduce using rule 260 (scalar)
-
-
-
-state 258
-
-    encaps_var  ->  T_DOLLAR_OPEN_CURLY_BRACES . expr '}'   (rule 331)
-    encaps_var  ->  T_DOLLAR_OPEN_CURLY_BRACES . T_STRING_VARNAME '[' expr ']' '}'   (rule 332)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 366
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 367
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 259
-
-    encaps_var  ->  T_CURLY_OPEN . cvar '}'   (rule 333)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    cvar	go to state 368
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 260
-
-    encaps_list  ->  encaps_list '{' .   (rule 323)
-
-    $default	reduce using rule 323 (encaps_list)
-
-
-
-state 261
-
-    encaps_list  ->  encaps_list '}' .   (rule 324)
-
-    $default	reduce using rule 324 (encaps_list)
-
-
-
-state 262
-
-    encaps_list  ->  encaps_list ']' .   (rule 322)
-
-    $default	reduce using rule 322 (encaps_list)
-
-
-
-state 263
-
-    encaps_list  ->  encaps_list encaps_var .   (rule 315)
-
-    $default	reduce using rule 315 (encaps_list)
-
-
-
-state 264
-
-    unticked_statement  ->  '{' inner_statement_list '}' .   (rule 13)
-
-    $default	reduce using rule 13 (unticked_statement)
-
-
-
-state 265
-
-    inner_statement_list  ->  inner_statement_list @2 . inner_statement   (rule 8)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_IF	shift, and go to state 25
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_INLINE_HTML	shift, and go to state 31
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ECHO	shift, and go to state 33
-    T_DO	shift, and go to state 34
-    T_WHILE	shift, and go to state 35
-    T_FOR	shift, and go to state 36
-    T_FOREACH	shift, and go to state 37
-    T_DECLARE	shift, and go to state 38
-    T_SWITCH	shift, and go to state 39
-    T_BREAK	shift, and go to state 40
-    T_CONTINUE	shift, and go to state 41
-    T_OLD_FUNCTION	shift, and go to state 42
-    T_FUNCTION	shift, and go to state 43
-    T_RETURN	shift, and go to state 44
-    T_USE	shift, and go to state 45
-    T_GLOBAL	shift, and go to state 46
-    T_STATIC	shift, and go to state 47
-    T_UNSET	shift, and go to state 48
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_CLASS	shift, and go to state 51
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '{' 	shift, and go to state 59
-    '(' 	shift, and go to state 60
-    ';' 	shift, and go to state 61
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    inner_statement	go to state 369
-    statement	go to state 370
-    unticked_statement	go to state 68
-    declaration_statement	go to state 371
-    unticked_declaration_statement	go to state 70
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 75
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 266
-
-    expr_without_variable  ->  '(' expr ')' .   (rule 210)
-
-    $default	reduce using rule 210 (expr_without_variable)
-
-
-
-state 267
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    compound_variable  ->  '$' '{' expr . '}'   (rule 283)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    '}' 	shift, and go to state 372
-
-
-
-state 268
-
-    expr_without_variable  ->  '`' encaps_list '`' .   (rule 228)
-
-    $default	reduce using rule 228 (expr_without_variable)
-
-
-
-state 269
-
-    scalar  ->  '\"' encaps_list '\"' .   (rule 258)
-
-    $default	reduce using rule 258 (scalar)
-
-
-
-state 270
-
-    scalar  ->  '\'' encaps_list '\'' .   (rule 259)
-
-    $default	reduce using rule 259 (scalar)
-
-
-
-state 271
-
-    expr_without_variable  ->  expr T_LOGICAL_OR @40 . expr   (rule 183)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 373
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 272
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr T_LOGICAL_XOR expr .   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 186 (expr_without_variable)
-
-
-
-state 273
-
-    expr_without_variable  ->  expr T_LOGICAL_AND @41 . expr   (rule 185)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 374
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 274
-
-    expr_without_variable  ->  expr '?' @42 . expr ':' @43 expr   (rule 213)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 375
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 275
-
-    expr_without_variable  ->  expr T_BOOLEAN_OR @38 . expr   (rule 179)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 376
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 276
-
-    expr_without_variable  ->  expr T_BOOLEAN_AND @39 . expr   (rule 181)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 377
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 277
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr '|' expr .   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 187 (expr_without_variable)
-
-
-
-state 278
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr '^' expr .   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 189 (expr_without_variable)
-
-
-
-state 279
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr '&' expr .   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 188 (expr_without_variable)
-
-
-
-state 280
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr T_IS_EQUAL expr .   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    T_IS_EQUAL	error (nonassociative)
-    T_IS_NOT_EQUAL	error (nonassociative)
-    T_IS_IDENTICAL	error (nonassociative)
-    T_IS_NOT_IDENTICAL	error (nonassociative)
-
-    $default	reduce using rule 204 (expr_without_variable)
-
-
-
-state 281
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr T_IS_NOT_EQUAL expr .   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    T_IS_EQUAL	error (nonassociative)
-    T_IS_NOT_EQUAL	error (nonassociative)
-    T_IS_IDENTICAL	error (nonassociative)
-    T_IS_NOT_IDENTICAL	error (nonassociative)
-
-    $default	reduce using rule 205 (expr_without_variable)
-
-
-
-state 282
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr T_IS_IDENTICAL expr .   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    T_IS_EQUAL	error (nonassociative)
-    T_IS_NOT_EQUAL	error (nonassociative)
-    T_IS_IDENTICAL	error (nonassociative)
-    T_IS_NOT_IDENTICAL	error (nonassociative)
-
-    $default	reduce using rule 202 (expr_without_variable)
-
-
-
-state 283
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr T_IS_NOT_IDENTICAL expr .   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    T_IS_EQUAL	error (nonassociative)
-    T_IS_NOT_EQUAL	error (nonassociative)
-    T_IS_IDENTICAL	error (nonassociative)
-    T_IS_NOT_IDENTICAL	error (nonassociative)
-
-    $default	reduce using rule 203 (expr_without_variable)
-
-
-
-state 284
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr '<' expr .   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    '<' 	error (nonassociative)
-    T_IS_SMALLER_OR_EQUAL	error (nonassociative)
-    '>' 	error (nonassociative)
-    T_IS_GREATER_OR_EQUAL	error (nonassociative)
-
-    $default	reduce using rule 206 (expr_without_variable)
-
-
-
-state 285
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr T_IS_SMALLER_OR_EQUAL expr .   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    '<' 	error (nonassociative)
-    T_IS_SMALLER_OR_EQUAL	error (nonassociative)
-    '>' 	error (nonassociative)
-    T_IS_GREATER_OR_EQUAL	error (nonassociative)
-
-    $default	reduce using rule 207 (expr_without_variable)
-
-
-
-state 286
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr '>' expr .   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    '<' 	error (nonassociative)
-    T_IS_SMALLER_OR_EQUAL	error (nonassociative)
-    '>' 	error (nonassociative)
-    T_IS_GREATER_OR_EQUAL	error (nonassociative)
-
-    $default	reduce using rule 208 (expr_without_variable)
-
-
-
-state 287
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr T_IS_GREATER_OR_EQUAL expr .   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    '<' 	error (nonassociative)
-    T_IS_SMALLER_OR_EQUAL	error (nonassociative)
-    '>' 	error (nonassociative)
-    T_IS_GREATER_OR_EQUAL	error (nonassociative)
-
-    $default	reduce using rule 209 (expr_without_variable)
-
-
-
-state 288
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr T_SL expr .   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 196 (expr_without_variable)
-
-
-
-state 289
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr T_SR expr .   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 197 (expr_without_variable)
-
-
-
-state 290
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr '+' expr .   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 191 (expr_without_variable)
-
-
-
-state 291
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr '-' expr .   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 192 (expr_without_variable)
-
-
-
-state 292
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr '.' expr .   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 190 (expr_without_variable)
-
-
-
-state 293
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr '*' expr .   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-
-    $default	reduce using rule 193 (expr_without_variable)
-
-
-
-state 294
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr '/' expr .   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-
-    $default	reduce using rule 194 (expr_without_variable)
-
-
-
-state 295
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr '%' expr .   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-
-    $default	reduce using rule 195 (expr_without_variable)
-
-
-
-state 296
-
-    expr_without_variable  ->  cvar '=' '&' . w_cvar   (rule 157)
-    expr_without_variable  ->  cvar '=' '&' . function_call   (rule 158)
-    expr_without_variable  ->  cvar '=' '&' . T_NEW static_or_variable_string @36 ctor_arguments   (rule 160)
-
-    T_NEW	shift, and go to state 378
-    T_STRING	shift, and go to state 379
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    function_call	go to state 380
-    w_cvar	go to state 381
-    cvar	go to state 382
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 297
-
-    expr_without_variable  ->  cvar '=' expr .   (rule 156)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 156 (expr_without_variable)
-
-
-
-state 298
-
-    expr_without_variable  ->  cvar T_PLUS_EQUAL expr .   (rule 163)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 163 (expr_without_variable)
-
-
-
-state 299
-
-    expr_without_variable  ->  cvar T_MINUS_EQUAL expr .   (rule 164)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 164 (expr_without_variable)
-
-
-
-state 300
-
-    expr_without_variable  ->  cvar T_MUL_EQUAL expr .   (rule 165)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 165 (expr_without_variable)
-
-
-
-state 301
-
-    expr_without_variable  ->  cvar T_DIV_EQUAL expr .   (rule 166)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 166 (expr_without_variable)
-
-
-
-state 302
-
-    expr_without_variable  ->  cvar T_CONCAT_EQUAL expr .   (rule 167)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 167 (expr_without_variable)
-
-
-
-state 303
-
-    expr_without_variable  ->  cvar T_MOD_EQUAL expr .   (rule 168)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 168 (expr_without_variable)
-
-
-
-state 304
-
-    expr_without_variable  ->  cvar T_AND_EQUAL expr .   (rule 169)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 169 (expr_without_variable)
-
-
-
-state 305
-
-    expr_without_variable  ->  cvar T_OR_EQUAL expr .   (rule 170)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 170 (expr_without_variable)
-
-
-
-state 306
-
-    expr_without_variable  ->  cvar T_XOR_EQUAL expr .   (rule 171)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 171 (expr_without_variable)
-
-
-
-state 307
-
-    expr_without_variable  ->  cvar T_SL_EQUAL expr .   (rule 172)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 172 (expr_without_variable)
-
-
-
-state 308
-
-    expr_without_variable  ->  cvar T_SR_EQUAL expr .   (rule 173)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 173 (expr_without_variable)
-
-
-
-state 309
-
-    function_call  ->  cvar '(' @46 . function_call_parameter_list ')'   (rule 233)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '&' 	shift, and go to state 320
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    $default	reduce using rule 115 (function_call_parameter_list)
-
-    function_call_parameter_list	go to state 383
-    non_empty_function_call_parameter_list	go to state 322
-    expr_without_variable	go to state 323
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 130
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 324
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 310
-
-    cvar  ->  cvar_without_objects T_OBJECT_OPERATOR @48 . ref_list   (rule 276)
-
-    T_STRING	shift, and go to state 384
-    T_VARIABLE	shift, and go to state 30
-    '{' 	shift, and go to state 385
-    '$' 	shift, and go to state 62
-
-    cvar_without_objects	go to state 386
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    ref_list	go to state 387
-    object_property	go to state 388
-    object_dim_list	go to state 389
-    variable_name	go to state 390
-    simple_indirect_reference	go to state 82
-
-
-
-state 311
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    dim_offset  ->  expr .   (rule 285)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 285 (dim_offset)
-
-
-
-state 312
-
-    reference_variable  ->  reference_variable '[' dim_offset . ']'   (rule 279)
-
-    ']' 	shift, and go to state 391
-
-
-
-state 313
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    reference_variable  ->  reference_variable '{' expr . '}'   (rule 280)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    '}' 	shift, and go to state 392
-
-
-
-state 314
-
-    internal_functions_in_yacc  ->  T_EVAL '(' expr ')' .   (rule 341)
-
-    $default	reduce using rule 341 (internal_functions_in_yacc)
-
-
-
-state 315
-
-    ctor_arguments  ->  '(' . function_call_parameter_list ')'   (rule 242)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '&' 	shift, and go to state 320
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    $default	reduce using rule 115 (function_call_parameter_list)
-
-    function_call_parameter_list	go to state 393
-    non_empty_function_call_parameter_list	go to state 322
-    expr_without_variable	go to state 323
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 130
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 324
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 316
-
-    expr_without_variable  ->  T_NEW static_or_variable_string @37 ctor_arguments .   (rule 162)
-
-    $default	reduce using rule 162 (expr_without_variable)
-
-
-
-state 317
-
-    exit_expr  ->  '(' expr ')' .   (rule 240)
-
-    $default	reduce using rule 240 (exit_expr)
-
-
-
-state 318
-
-    unticked_statement  ->  T_IF '(' expr ')' . @3 statement @4 elseif_list else_single   (rule 16)
-    unticked_statement  ->  T_IF '(' expr ')' . ':' @5 inner_statement_list @6 new_elseif_list new_else_single T_ENDIF ';'   (rule 19)
-
-    ':' 	shift, and go to state 394
-
-    $default	reduce using rule 14 (@3)
-
-    @3  	go to state 395
-
-
-
-state 319
-
-    function_call  ->  T_STRING T_PAAMAYIM_NEKUDOTAYIM static_or_variable_string '(' . @47 function_call_parameter_list ')'   (rule 235)
-
-    $default	reduce using rule 234 (@47)
-
-    @47 	go to state 396
-
-
-
-state 320
-
-    non_empty_function_call_parameter_list  ->  '&' . w_cvar   (rule 118)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    w_cvar	go to state 397
-    cvar	go to state 359
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 321
-
-    function_call  ->  T_STRING '(' @45 function_call_parameter_list . ')'   (rule 231)
-
-    ')' 	shift, and go to state 398
-
-
-
-state 322
-
-    function_call_parameter_list  ->  non_empty_function_call_parameter_list .   (rule 114)
-    non_empty_function_call_parameter_list  ->  non_empty_function_call_parameter_list . ',' expr_without_variable   (rule 119)
-    non_empty_function_call_parameter_list  ->  non_empty_function_call_parameter_list . ',' cvar   (rule 120)
-    non_empty_function_call_parameter_list  ->  non_empty_function_call_parameter_list . ',' '&' w_cvar   (rule 121)
-
-    ',' 	shift, and go to state 399
-
-    $default	reduce using rule 114 (function_call_parameter_list)
-
-
-
-state 323
-
-    non_empty_function_call_parameter_list  ->  expr_without_variable .   (rule 116)
-    expr  ->  expr_without_variable .   (rule 270)
-
-    ',' 	reduce using rule 116 (non_empty_function_call_parameter_list)
-    ')' 	reduce using rule 116 (non_empty_function_call_parameter_list)
-    $default	reduce using rule 270 (expr)
-
-
-state 324
-
-    non_empty_function_call_parameter_list  ->  cvar .   (rule 117)
-    expr_without_variable  ->  cvar . '=' expr   (rule 156)
-    expr_without_variable  ->  cvar . '=' '&' w_cvar   (rule 157)
-    expr_without_variable  ->  cvar . '=' '&' function_call   (rule 158)
-    expr_without_variable  ->  cvar . '=' '&' T_NEW static_or_variable_string @36 ctor_arguments   (rule 160)
-    expr_without_variable  ->  cvar . T_PLUS_EQUAL expr   (rule 163)
-    expr_without_variable  ->  cvar . T_MINUS_EQUAL expr   (rule 164)
-    expr_without_variable  ->  cvar . T_MUL_EQUAL expr   (rule 165)
-    expr_without_variable  ->  cvar . T_DIV_EQUAL expr   (rule 166)
-    expr_without_variable  ->  cvar . T_CONCAT_EQUAL expr   (rule 167)
-    expr_without_variable  ->  cvar . T_MOD_EQUAL expr   (rule 168)
-    expr_without_variable  ->  cvar . T_AND_EQUAL expr   (rule 169)
-    expr_without_variable  ->  cvar . T_OR_EQUAL expr   (rule 170)
-    expr_without_variable  ->  cvar . T_XOR_EQUAL expr   (rule 171)
-    expr_without_variable  ->  cvar . T_SL_EQUAL expr   (rule 172)
-    expr_without_variable  ->  cvar . T_SR_EQUAL expr   (rule 173)
-    function_call  ->  cvar . '(' @46 function_call_parameter_list ')'   (rule 233)
-    r_cvar  ->  cvar .   (rule 271)
-    rw_cvar  ->  cvar .   (rule 273)
-
-    '=' 	shift, and go to state 182
-    T_PLUS_EQUAL	shift, and go to state 183
-    T_MINUS_EQUAL	shift, and go to state 184
-    T_MUL_EQUAL	shift, and go to state 185
-    T_DIV_EQUAL	shift, and go to state 186
-    T_CONCAT_EQUAL	shift, and go to state 187
-    T_MOD_EQUAL	shift, and go to state 188
-    T_AND_EQUAL	shift, and go to state 189
-    T_OR_EQUAL	shift, and go to state 190
-    T_XOR_EQUAL	shift, and go to state 191
-    T_SL_EQUAL	shift, and go to state 192
-    T_SR_EQUAL	shift, and go to state 193
-    '(' 	shift, and go to state 194
-
-    ',' 	reduce using rule 117 (non_empty_function_call_parameter_list)
-    T_INC	reduce using rule 273 (rw_cvar)
-    T_DEC	reduce using rule 273 (rw_cvar)
-    ')' 	reduce using rule 117 (non_empty_function_call_parameter_list)
-    $default	reduce using rule 271 (r_cvar)
-
-
-state 325
-
-    echo_expr_list  ->  echo_expr_list ',' expr .   (rule 147)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 147 (echo_expr_list)
-
-
-
-state 326
-
-    unticked_statement  ->  T_DO @9 statement T_WHILE . '(' @10 expr ')' ';'   (rule 25)
-
-    '(' 	shift, and go to state 400
-
-
-
-state 327
-
-    unticked_statement  ->  T_WHILE '(' @7 expr . ')' @8 while_statement   (rule 22)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    ')' 	shift, and go to state 401
-
-
-
-state 328
-
-    unticked_statement  ->  T_FOR '(' for_expr ';' . @11 for_expr ';' @12 for_expr ')' @13 for_statement   (rule 29)
-
-    $default	reduce using rule 26 (@11)
-
-    @11 	go to state 402
-
-
-
-state 329
-
-    non_empty_for_expr  ->  non_empty_for_expr ',' . @34 expr   (rule 152)
-
-    $default	reduce using rule 151 (@34)
-
-    @34 	go to state 403
-
-
-
-state 330
-
-    unticked_statement  ->  T_FOREACH '(' expr_without_variable T_AS . @17 w_cvar foreach_optional_arg ')' @18 foreach_statement   (rule 51)
-
-    $default	reduce using rule 49 (@17)
-
-    @17 	go to state 404
-
-
-
-state 331
-
-    unticked_statement  ->  T_FOREACH '(' w_cvar T_AS . @15 w_cvar foreach_optional_arg ')' @16 foreach_statement   (rule 48)
-
-    $default	reduce using rule 46 (@15)
-
-    @15 	go to state 405
-
-
-
-state 332
-
-    declare_list  ->  T_STRING . '=' static_scalar   (rule 79)
-
-    '=' 	shift, and go to state 406
-
-
-
-state 333
-
-    unticked_statement  ->  T_DECLARE @19 '(' declare_list . ')' declare_statement   (rule 53)
-    declare_list  ->  declare_list . ',' T_STRING '=' static_scalar   (rule 80)
-
-    ',' 	shift, and go to state 407
-    ')' 	shift, and go to state 408
-
-
-
-state 334
-
-    unticked_statement  ->  T_SWITCH '(' expr ')' . @14 switch_case_list   (rule 31)
-
-    $default	reduce using rule 30 (@14)
-
-    @14 	go to state 409
-
-
-
-state 335
-
-    unticked_declaration_statement  ->  T_OLD_FUNCTION @22 is_reference T_STRING . @23 parameter_list '(' inner_statement_list ')' ';'   (rule 66)
-
-    $default	reduce using rule 65 (@23)
-
-    @23 	go to state 410
-
-
-
-state 336
-
-    unticked_declaration_statement  ->  T_FUNCTION @20 is_reference T_STRING . @21 '(' parameter_list ')' '{' inner_statement_list '}'   (rule 63)
-
-    $default	reduce using rule 62 (@21)
-
-    @21 	go to state 411
-
-
-
-state 337
-
-    use_filename  ->  '(' T_CONSTANT_ENCAPSED_STRING ')' .   (rule 59)
-
-    $default	reduce using rule 59 (use_filename)
-
-
-
-state 338
-
-    global_var  ->  '$' '{' expr . '}'   (rule 126)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    '}' 	shift, and go to state 412
-
-
-
-state 339
-
-    global_var_list  ->  global_var_list ',' global_var .   (rule 122)
-
-    $default	reduce using rule 122 (global_var_list)
-
-
-
-state 340
-
-    static_scalar  ->  '+' . static_scalar   (rule 252)
-
-    '+' 	shift, and go to state 340
-    '-' 	shift, and go to state 341
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 342
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ARRAY	shift, and go to state 343
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-
-    common_scalar	go to state 344
-    static_scalar	go to state 413
-
-
-
-state 341
-
-    static_scalar  ->  '-' . static_scalar   (rule 253)
-
-    '+' 	shift, and go to state 340
-    '-' 	shift, and go to state 341
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 342
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ARRAY	shift, and go to state 343
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-
-    common_scalar	go to state 344
-    static_scalar	go to state 414
-
-
-
-state 342
-
-    static_scalar  ->  T_STRING .   (rule 251)
-
-    $default	reduce using rule 251 (static_scalar)
-
-
-
-state 343
-
-    static_scalar  ->  T_ARRAY . '(' static_array_pair_list ')'   (rule 254)
-
-    '(' 	shift, and go to state 415
-
-
-
-state 344
-
-    static_scalar  ->  common_scalar .   (rule 250)
-
-    $default	reduce using rule 250 (static_scalar)
-
-
-
-state 345
-
-    static_var_list  ->  T_VARIABLE '=' static_scalar .   (rule 130)
-
-    $default	reduce using rule 130 (static_var_list)
-
-
-
-state 346
-
-    static_var_list  ->  static_var_list ',' T_VARIABLE .   (rule 127)
-    static_var_list  ->  static_var_list ',' T_VARIABLE . '=' static_scalar   (rule 128)
-
-    '=' 	shift, and go to state 416
-
-    $default	reduce using rule 127 (static_var_list)
-
-
-
-state 347
-
-    unset_variables  ->  unset_variables ',' . unset_variable   (rule 56)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    unset_variable	go to state 417
-    cvar	go to state 238
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 348
-
-    unticked_statement  ->  T_UNSET '(' unset_variables ')' . ';'   (rule 45)
-
-    ';' 	shift, and go to state 418
-
-
-
-state 349
-
-    isset_variables  ->  isset_variables ',' . @53 cvar   (rule 346)
-
-    $default	reduce using rule 345 (@53)
-
-    @53 	go to state 419
-
-
-
-state 350
-
-    internal_functions_in_yacc  ->  T_ISSET '(' isset_variables ')' .   (rule 337)
-
-    $default	reduce using rule 337 (internal_functions_in_yacc)
-
-
-
-state 351
-
-    internal_functions_in_yacc  ->  T_EMPTY '(' cvar ')' .   (rule 338)
-
-    $default	reduce using rule 338 (internal_functions_in_yacc)
-
-
-
-state 352
-
-    unticked_declaration_statement  ->  T_CLASS T_STRING T_EXTENDS T_STRING . @25 '{' class_statement_list '}'   (rule 70)
-
-    $default	reduce using rule 69 (@25)
-
-    @25 	go to state 420
-
-
-
-state 353
-
-    unticked_declaration_statement  ->  T_CLASS T_STRING @24 '{' . class_statement_list '}'   (rule 68)
-
-    $default	reduce using rule 132 (class_statement_list)
-
-    class_statement_list	go to state 421
-
-
-
-state 354
-
-    assignment_list_element  ->  T_LIST . '(' @51 assignment_list ')'   (rule 303)
-
-    '(' 	shift, and go to state 422
-
-
-
-state 355
-
-    assignment_list_element  ->  cvar .   (rule 301)
-
-    $default	reduce using rule 301 (assignment_list_element)
-
-
-
-state 356
-
-    expr_without_variable  ->  T_LIST '(' @35 assignment_list . ')' '=' expr   (rule 155)
-    assignment_list  ->  assignment_list . ',' assignment_list_element   (rule 299)
-
-    ',' 	shift, and go to state 423
-    ')' 	shift, and go to state 424
-
-
-
-state 357
-
-    assignment_list  ->  assignment_list_element .   (rule 300)
-
-    $default	reduce using rule 300 (assignment_list)
-
-
-
-state 358
-
-    non_empty_array_pair_list  ->  '&' w_cvar .   (rule 314)
-
-    $default	reduce using rule 314 (non_empty_array_pair_list)
-
-
-
-state 359
-
-    w_cvar  ->  cvar .   (rule 272)
-
-    $default	reduce using rule 272 (w_cvar)
-
-
-
-state 360
-
-    non_empty_array_pair_list  ->  expr T_DOUBLE_ARROW . expr   (rule 309)
-    non_empty_array_pair_list  ->  expr T_DOUBLE_ARROW . '&' w_cvar   (rule 313)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '&' 	shift, and go to state 425
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 426
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 361
-
-    expr_without_variable  ->  T_ARRAY '(' array_pair_list ')' .   (rule 227)
-
-    $default	reduce using rule 227 (expr_without_variable)
-
-
-
-state 362
-
-    possible_comma  ->  ',' .   (rule 264)
-    non_empty_array_pair_list  ->  non_empty_array_pair_list ',' . expr T_DOUBLE_ARROW expr   (rule 307)
-    non_empty_array_pair_list  ->  non_empty_array_pair_list ',' . expr   (rule 308)
-    non_empty_array_pair_list  ->  non_empty_array_pair_list ',' . expr T_DOUBLE_ARROW '&' w_cvar   (rule 311)
-    non_empty_array_pair_list  ->  non_empty_array_pair_list ',' . '&' w_cvar   (rule 312)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '&' 	shift, and go to state 427
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    $default	reduce using rule 264 (possible_comma)
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 428
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 363
-
-    array_pair_list  ->  non_empty_array_pair_list possible_comma .   (rule 306)
-
-    $default	reduce using rule 306 (array_pair_list)
-
-
-
-state 364
-
-    encaps_var  ->  T_VARIABLE '[' . @52 encaps_var_offset ']'   (rule 329)
-
-    $default	reduce using rule 328 (@52)
-
-    @52 	go to state 429
-
-
-
-state 365
-
-    encaps_var  ->  T_VARIABLE T_OBJECT_OPERATOR . T_STRING   (rule 330)
-
-    T_STRING	shift, and go to state 430
-
-
-
-state 366
-
-    scalar  ->  T_STRING_VARNAME .   (rule 256)
-    encaps_var  ->  T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME . '[' expr ']' '}'   (rule 332)
-
-    '[' 	shift, and go to state 431
-
-    $default	reduce using rule 256 (scalar)
-
-
-
-state 367
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    encaps_var  ->  T_DOLLAR_OPEN_CURLY_BRACES expr . '}'   (rule 331)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    '}' 	shift, and go to state 432
-
-
-
-state 368
-
-    encaps_var  ->  T_CURLY_OPEN cvar . '}'   (rule 333)
-
-    '}' 	shift, and go to state 433
-
-
-
-state 369
-
-    inner_statement_list  ->  inner_statement_list @2 inner_statement .   (rule 8)
-
-    $default	reduce using rule 8 (inner_statement_list)
-
-
-
-state 370
-
-    inner_statement  ->  statement .   (rule 10)
-
-    $default	reduce using rule 10 (inner_statement)
-
-
-
-state 371
-
-    inner_statement  ->  declaration_statement .   (rule 11)
-
-    $default	reduce using rule 11 (inner_statement)
-
-
-
-state 372
-
-    compound_variable  ->  '$' '{' expr '}' .   (rule 283)
-
-    $default	reduce using rule 283 (compound_variable)
-
-
-
-state 373
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr T_LOGICAL_OR @40 expr .   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 183 (expr_without_variable)
-
-
-
-state 374
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr T_LOGICAL_AND @41 expr .   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 185 (expr_without_variable)
-
-
-
-state 375
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    expr_without_variable  ->  expr '?' @42 expr . ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    ':' 	shift, and go to state 434
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-
-
-state 376
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr T_BOOLEAN_OR @38 expr .   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 179 (expr_without_variable)
-
-
-
-state 377
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr T_BOOLEAN_AND @39 expr .   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 181 (expr_without_variable)
-
-
-
-state 378
-
-    expr_without_variable  ->  cvar '=' '&' T_NEW . static_or_variable_string @36 ctor_arguments   (rule 160)
-
-    T_STRING	shift, and go to state 105
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    static_or_variable_string	go to state 435
-    r_cvar	go to state 107
-    cvar	go to state 108
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 379
-
-    function_call  ->  T_STRING . '(' @45 function_call_parameter_list ')'   (rule 231)
-    function_call  ->  T_STRING . T_PAAMAYIM_NEKUDOTAYIM static_or_variable_string '(' @47 function_call_parameter_list ')'   (rule 235)
-
-    T_PAAMAYIM_NEKUDOTAYIM	shift, and go to state 112
-    '(' 	shift, and go to state 113
-
-
-
-state 380
-
-    expr_without_variable  ->  cvar '=' '&' function_call .   (rule 158)
-
-    $default	reduce using rule 158 (expr_without_variable)
-
-
-
-state 381
-
-    expr_without_variable  ->  cvar '=' '&' w_cvar .   (rule 157)
-
-    $default	reduce using rule 157 (expr_without_variable)
-
-
-
-state 382
-
-    function_call  ->  cvar . '(' @46 function_call_parameter_list ')'   (rule 233)
-    w_cvar  ->  cvar .   (rule 272)
-
-    '(' 	shift, and go to state 194
-
-    $default	reduce using rule 272 (w_cvar)
-
-
-
-state 383
-
-    function_call  ->  cvar '(' @46 function_call_parameter_list . ')'   (rule 233)
-
-    ')' 	shift, and go to state 436
-
-
-
-state 384
-
-    variable_name  ->  T_STRING .   (rule 295)
-
-    $default	reduce using rule 295 (variable_name)
-
-
-
-state 385
-
-    variable_name  ->  '{' . expr '}'   (rule 296)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 437
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 386
-
-    object_property  ->  cvar_without_objects . @50   (rule 291)
-
-    $default	reduce using rule 290 (@50)
-
-    @50 	go to state 438
-
-
-
-state 387
-
-    cvar  ->  cvar_without_objects T_OBJECT_OPERATOR @48 ref_list .   (rule 276)
-    ref_list  ->  ref_list . T_OBJECT_OPERATOR @49 object_property   (rule 288)
-
-    T_OBJECT_OPERATOR	shift, and go to state 439
-
-    $default	reduce using rule 276 (cvar)
-
-
-
-state 388
-
-    ref_list  ->  object_property .   (rule 286)
-
-    $default	reduce using rule 286 (ref_list)
-
-
-
-state 389
-
-    object_property  ->  object_dim_list .   (rule 289)
-    object_dim_list  ->  object_dim_list . '[' dim_offset ']'   (rule 292)
-    object_dim_list  ->  object_dim_list . '{' expr '}'   (rule 293)
-
-    '[' 	shift, and go to state 440
-    '{' 	shift, and go to state 441
-
-    $default	reduce using rule 289 (object_property)
-
-
-
-state 390
-
-    object_dim_list  ->  variable_name .   (rule 294)
-
-    $default	reduce using rule 294 (object_dim_list)
-
-
-
-state 391
-
-    reference_variable  ->  reference_variable '[' dim_offset ']' .   (rule 279)
-
-    $default	reduce using rule 279 (reference_variable)
-
-
-
-state 392
-
-    reference_variable  ->  reference_variable '{' expr '}' .   (rule 280)
-
-    $default	reduce using rule 280 (reference_variable)
-
-
-
-state 393
-
-    ctor_arguments  ->  '(' function_call_parameter_list . ')'   (rule 242)
-
-    ')' 	shift, and go to state 442
-
-
-
-state 394
-
-    unticked_statement  ->  T_IF '(' expr ')' ':' . @5 inner_statement_list @6 new_elseif_list new_else_single T_ENDIF ';'   (rule 19)
-
-    $default	reduce using rule 17 (@5)
-
-    @5  	go to state 443
-
-
-
-state 395
-
-    unticked_statement  ->  T_IF '(' expr ')' @3 . statement @4 elseif_list else_single   (rule 16)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_IF	shift, and go to state 25
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_INLINE_HTML	shift, and go to state 31
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ECHO	shift, and go to state 33
-    T_DO	shift, and go to state 34
-    T_WHILE	shift, and go to state 35
-    T_FOR	shift, and go to state 36
-    T_FOREACH	shift, and go to state 37
-    T_DECLARE	shift, and go to state 38
-    T_SWITCH	shift, and go to state 39
-    T_BREAK	shift, and go to state 40
-    T_CONTINUE	shift, and go to state 41
-    T_RETURN	shift, and go to state 44
-    T_USE	shift, and go to state 45
-    T_GLOBAL	shift, and go to state 46
-    T_STATIC	shift, and go to state 47
-    T_UNSET	shift, and go to state 48
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '{' 	shift, and go to state 59
-    '(' 	shift, and go to state 60
-    ';' 	shift, and go to state 61
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    statement	go to state 444
-    unticked_statement	go to state 68
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 75
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 396
-
-    function_call  ->  T_STRING T_PAAMAYIM_NEKUDOTAYIM static_or_variable_string '(' @47 . function_call_parameter_list ')'   (rule 235)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '&' 	shift, and go to state 320
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    $default	reduce using rule 115 (function_call_parameter_list)
-
-    function_call_parameter_list	go to state 445
-    non_empty_function_call_parameter_list	go to state 322
-    expr_without_variable	go to state 323
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 130
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 324
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 397
-
-    non_empty_function_call_parameter_list  ->  '&' w_cvar .   (rule 118)
-
-    $default	reduce using rule 118 (non_empty_function_call_parameter_list)
-
-
-
-state 398
-
-    function_call  ->  T_STRING '(' @45 function_call_parameter_list ')' .   (rule 231)
-
-    $default	reduce using rule 231 (function_call)
-
-
-
-state 399
-
-    non_empty_function_call_parameter_list  ->  non_empty_function_call_parameter_list ',' . expr_without_variable   (rule 119)
-    non_empty_function_call_parameter_list  ->  non_empty_function_call_parameter_list ',' . cvar   (rule 120)
-    non_empty_function_call_parameter_list  ->  non_empty_function_call_parameter_list ',' . '&' w_cvar   (rule 121)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '&' 	shift, and go to state 446
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 447
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 130
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 448
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 400
-
-    unticked_statement  ->  T_DO @9 statement T_WHILE '(' . @10 expr ')' ';'   (rule 25)
-
-    $default	reduce using rule 24 (@10)
-
-    @10 	go to state 449
-
-
-
-state 401
-
-    unticked_statement  ->  T_WHILE '(' @7 expr ')' . @8 while_statement   (rule 22)
-
-    $default	reduce using rule 21 (@8)
-
-    @8  	go to state 450
-
-
-
-state 402
-
-    unticked_statement  ->  T_FOR '(' for_expr ';' @11 . for_expr ';' @12 for_expr ')' @13 for_statement   (rule 29)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    $default	reduce using rule 149 (for_expr)
-
-    for_expr	go to state 451
-    non_empty_for_expr	go to state 213
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 214
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 403
-
-    non_empty_for_expr  ->  non_empty_for_expr ',' @34 . expr   (rule 152)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 452
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 404
-
-    unticked_statement  ->  T_FOREACH '(' expr_without_variable T_AS @17 . w_cvar foreach_optional_arg ')' @18 foreach_statement   (rule 51)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    w_cvar	go to state 453
-    cvar	go to state 359
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 405
-
-    unticked_statement  ->  T_FOREACH '(' w_cvar T_AS @15 . w_cvar foreach_optional_arg ')' @16 foreach_statement   (rule 48)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    w_cvar	go to state 454
-    cvar	go to state 359
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 406
-
-    declare_list  ->  T_STRING '=' . static_scalar   (rule 79)
-
-    '+' 	shift, and go to state 340
-    '-' 	shift, and go to state 341
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 342
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ARRAY	shift, and go to state 343
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-
-    common_scalar	go to state 344
-    static_scalar	go to state 455
-
-
-
-state 407
-
-    declare_list  ->  declare_list ',' . T_STRING '=' static_scalar   (rule 80)
-
-    T_STRING	shift, and go to state 456
-
-
-
-state 408
-
-    unticked_statement  ->  T_DECLARE @19 '(' declare_list ')' . declare_statement   (rule 53)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    ':' 	shift, and go to state 457
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_IF	shift, and go to state 25
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_INLINE_HTML	shift, and go to state 31
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ECHO	shift, and go to state 33
-    T_DO	shift, and go to state 34
-    T_WHILE	shift, and go to state 35
-    T_FOR	shift, and go to state 36
-    T_FOREACH	shift, and go to state 37
-    T_DECLARE	shift, and go to state 38
-    T_SWITCH	shift, and go to state 39
-    T_BREAK	shift, and go to state 40
-    T_CONTINUE	shift, and go to state 41
-    T_RETURN	shift, and go to state 44
-    T_USE	shift, and go to state 45
-    T_GLOBAL	shift, and go to state 46
-    T_STATIC	shift, and go to state 47
-    T_UNSET	shift, and go to state 48
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '{' 	shift, and go to state 59
-    '(' 	shift, and go to state 60
-    ';' 	shift, and go to state 61
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    statement	go to state 458
-    unticked_statement	go to state 68
-    declare_statement	go to state 459
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 75
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 409
-
-    unticked_statement  ->  T_SWITCH '(' expr ')' @14 . switch_case_list   (rule 31)
-
-    ':' 	shift, and go to state 460
-    '{' 	shift, and go to state 461
-
-    switch_case_list	go to state 462
-
-
-
-state 410
-
-    unticked_declaration_statement  ->  T_OLD_FUNCTION @22 is_reference T_STRING @23 . parameter_list '(' inner_statement_list ')' ';'   (rule 66)
-
-    '&' 	shift, and go to state 463
-    T_VARIABLE	shift, and go to state 464
-    T_CONST	shift, and go to state 465
-
-    $default	reduce using rule 105 (parameter_list)
-
-    parameter_list	go to state 466
-    non_empty_parameter_list	go to state 467
-
-
-
-state 411
-
-    unticked_declaration_statement  ->  T_FUNCTION @20 is_reference T_STRING @21 . '(' parameter_list ')' '{' inner_statement_list '}'   (rule 63)
-
-    '(' 	shift, and go to state 468
-
-
-
-state 412
-
-    global_var  ->  '$' '{' expr '}' .   (rule 126)
-
-    $default	reduce using rule 126 (global_var)
-
-
-
-state 413
-
-    static_scalar  ->  '+' static_scalar .   (rule 252)
-
-    $default	reduce using rule 252 (static_scalar)
-
-
-
-state 414
-
-    static_scalar  ->  '-' static_scalar .   (rule 253)
-
-    $default	reduce using rule 253 (static_scalar)
-
-
-
-state 415
-
-    static_scalar  ->  T_ARRAY '(' . static_array_pair_list ')'   (rule 254)
-
-    '+' 	shift, and go to state 340
-    '-' 	shift, and go to state 341
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 342
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ARRAY	shift, and go to state 343
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-
-    $default	reduce using rule 261 (static_array_pair_list)
-
-    common_scalar	go to state 344
-    static_scalar	go to state 469
-    static_array_pair_list	go to state 470
-    non_empty_static_array_pair_list	go to state 471
-
-
-
-state 416
-
-    static_var_list  ->  static_var_list ',' T_VARIABLE '=' . static_scalar   (rule 128)
-
-    '+' 	shift, and go to state 340
-    '-' 	shift, and go to state 341
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 342
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ARRAY	shift, and go to state 343
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-
-    common_scalar	go to state 344
-    static_scalar	go to state 472
-
-
-
-state 417
-
-    unset_variables  ->  unset_variables ',' unset_variable .   (rule 56)
-
-    $default	reduce using rule 56 (unset_variables)
-
-
-
-state 418
-
-    unticked_statement  ->  T_UNSET '(' unset_variables ')' ';' .   (rule 45)
-
-    $default	reduce using rule 45 (unticked_statement)
-
-
-
-state 419
-
-    isset_variables  ->  isset_variables ',' @53 . cvar   (rule 346)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    cvar	go to state 473
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 420
-
-    unticked_declaration_statement  ->  T_CLASS T_STRING T_EXTENDS T_STRING @25 . '{' class_statement_list '}'   (rule 70)
-
-    '{' 	shift, and go to state 474
-
-
-
-state 421
-
-    unticked_declaration_statement  ->  T_CLASS T_STRING @24 '{' class_statement_list . '}'   (rule 68)
-    class_statement_list  ->  class_statement_list . class_statement   (rule 131)
-
-    T_OLD_FUNCTION	shift, and go to state 475
-    T_FUNCTION	shift, and go to state 476
-    T_VAR	shift, and go to state 477
-    '}' 	shift, and go to state 478
-
-    class_statement	go to state 479
-
-
-
-state 422
-
-    assignment_list_element  ->  T_LIST '(' . @51 assignment_list ')'   (rule 303)
-
-    $default	reduce using rule 302 (@51)
-
-    @51 	go to state 480
-
-
-
-state 423
-
-    assignment_list  ->  assignment_list ',' . assignment_list_element   (rule 299)
-
-    T_VARIABLE	shift, and go to state 30
-    T_LIST	shift, and go to state 354
-    '$' 	shift, and go to state 62
-
-    $default	reduce using rule 304 (assignment_list_element)
-
-    cvar	go to state 355
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    assignment_list_element	go to state 481
-
-
-
-state 424
-
-    expr_without_variable  ->  T_LIST '(' @35 assignment_list ')' . '=' expr   (rule 155)
-
-    '=' 	shift, and go to state 482
-
-
-
-state 425
-
-    non_empty_array_pair_list  ->  expr T_DOUBLE_ARROW '&' . w_cvar   (rule 313)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    w_cvar	go to state 483
-    cvar	go to state 359
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 426
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    non_empty_array_pair_list  ->  expr T_DOUBLE_ARROW expr .   (rule 309)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 309 (non_empty_array_pair_list)
-
-
-
-state 427
-
-    non_empty_array_pair_list  ->  non_empty_array_pair_list ',' '&' . w_cvar   (rule 312)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    w_cvar	go to state 484
-    cvar	go to state 359
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 428
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    non_empty_array_pair_list  ->  non_empty_array_pair_list ',' expr . T_DOUBLE_ARROW expr   (rule 307)
-    non_empty_array_pair_list  ->  non_empty_array_pair_list ',' expr .   (rule 308)
-    non_empty_array_pair_list  ->  non_empty_array_pair_list ',' expr . T_DOUBLE_ARROW '&' w_cvar   (rule 311)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    T_DOUBLE_ARROW	shift, and go to state 485
-
-    $default	reduce using rule 308 (non_empty_array_pair_list)
-
-
-
-state 429
-
-    encaps_var  ->  T_VARIABLE '[' @52 . encaps_var_offset ']'   (rule 329)
-
-    T_STRING	shift, and go to state 486
-    T_VARIABLE	shift, and go to state 487
-    T_NUM_STRING	shift, and go to state 488
-
-    encaps_var_offset	go to state 489
-
-
-
-state 430
-
-    encaps_var  ->  T_VARIABLE T_OBJECT_OPERATOR T_STRING .   (rule 330)
-
-    $default	reduce using rule 330 (encaps_var)
-
-
-
-state 431
-
-    encaps_var  ->  T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '[' . expr ']' '}'   (rule 332)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 490
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 432
-
-    encaps_var  ->  T_DOLLAR_OPEN_CURLY_BRACES expr '}' .   (rule 331)
-
-    $default	reduce using rule 331 (encaps_var)
-
-
-
-state 433
-
-    encaps_var  ->  T_CURLY_OPEN cvar '}' .   (rule 333)
-
-    $default	reduce using rule 333 (encaps_var)
-
-
-
-state 434
-
-    expr_without_variable  ->  expr '?' @42 expr ':' . @43 expr   (rule 213)
-
-    $default	reduce using rule 212 (@43)
-
-    @43 	go to state 491
-
-
-
-state 435
-
-    expr_without_variable  ->  cvar '=' '&' T_NEW static_or_variable_string . @36 ctor_arguments   (rule 160)
-
-    $default	reduce using rule 159 (@36)
-
-    @36 	go to state 492
-
-
-
-state 436
-
-    function_call  ->  cvar '(' @46 function_call_parameter_list ')' .   (rule 233)
-
-    $default	reduce using rule 233 (function_call)
-
-
-
-state 437
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    variable_name  ->  '{' expr . '}'   (rule 296)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    '}' 	shift, and go to state 493
-
-
-
-state 438
-
-    object_property  ->  cvar_without_objects @50 .   (rule 291)
-
-    $default	reduce using rule 291 (object_property)
-
-
-
-state 439
-
-    ref_list  ->  ref_list T_OBJECT_OPERATOR . @49 object_property   (rule 288)
-
-    $default	reduce using rule 287 (@49)
-
-    @49 	go to state 494
-
-
-
-state 440
-
-    object_dim_list  ->  object_dim_list '[' . dim_offset ']'   (rule 292)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    $default	reduce using rule 284 (dim_offset)
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 311
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    dim_offset	go to state 495
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 441
-
-    object_dim_list  ->  object_dim_list '{' . expr '}'   (rule 293)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 496
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 442
-
-    ctor_arguments  ->  '(' function_call_parameter_list ')' .   (rule 242)
-
-    $default	reduce using rule 242 (ctor_arguments)
-
-
-
-state 443
-
-    unticked_statement  ->  T_IF '(' expr ')' ':' @5 . inner_statement_list @6 new_elseif_list new_else_single T_ENDIF ';'   (rule 19)
-
-    $default	reduce using rule 9 (inner_statement_list)
-
-    inner_statement_list	go to state 497
-
-
-
-state 444
-
-    unticked_statement  ->  T_IF '(' expr ')' @3 statement . @4 elseif_list else_single   (rule 16)
-
-    $default	reduce using rule 15 (@4)
-
-    @4  	go to state 498
-
-
-
-state 445
-
-    function_call  ->  T_STRING T_PAAMAYIM_NEKUDOTAYIM static_or_variable_string '(' @47 function_call_parameter_list . ')'   (rule 235)
-
-    ')' 	shift, and go to state 499
-
-
-
-state 446
-
-    non_empty_function_call_parameter_list  ->  non_empty_function_call_parameter_list ',' '&' . w_cvar   (rule 121)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    w_cvar	go to state 500
-    cvar	go to state 359
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 447
-
-    non_empty_function_call_parameter_list  ->  non_empty_function_call_parameter_list ',' expr_without_variable .   (rule 119)
-    expr  ->  expr_without_variable .   (rule 270)
-
-    ',' 	reduce using rule 119 (non_empty_function_call_parameter_list)
-    ')' 	reduce using rule 119 (non_empty_function_call_parameter_list)
-    $default	reduce using rule 270 (expr)
-
-
-state 448
-
-    non_empty_function_call_parameter_list  ->  non_empty_function_call_parameter_list ',' cvar .   (rule 120)
-    expr_without_variable  ->  cvar . '=' expr   (rule 156)
-    expr_without_variable  ->  cvar . '=' '&' w_cvar   (rule 157)
-    expr_without_variable  ->  cvar . '=' '&' function_call   (rule 158)
-    expr_without_variable  ->  cvar . '=' '&' T_NEW static_or_variable_string @36 ctor_arguments   (rule 160)
-    expr_without_variable  ->  cvar . T_PLUS_EQUAL expr   (rule 163)
-    expr_without_variable  ->  cvar . T_MINUS_EQUAL expr   (rule 164)
-    expr_without_variable  ->  cvar . T_MUL_EQUAL expr   (rule 165)
-    expr_without_variable  ->  cvar . T_DIV_EQUAL expr   (rule 166)
-    expr_without_variable  ->  cvar . T_CONCAT_EQUAL expr   (rule 167)
-    expr_without_variable  ->  cvar . T_MOD_EQUAL expr   (rule 168)
-    expr_without_variable  ->  cvar . T_AND_EQUAL expr   (rule 169)
-    expr_without_variable  ->  cvar . T_OR_EQUAL expr   (rule 170)
-    expr_without_variable  ->  cvar . T_XOR_EQUAL expr   (rule 171)
-    expr_without_variable  ->  cvar . T_SL_EQUAL expr   (rule 172)
-    expr_without_variable  ->  cvar . T_SR_EQUAL expr   (rule 173)
-    function_call  ->  cvar . '(' @46 function_call_parameter_list ')'   (rule 233)
-    r_cvar  ->  cvar .   (rule 271)
-    rw_cvar  ->  cvar .   (rule 273)
-
-    '=' 	shift, and go to state 182
-    T_PLUS_EQUAL	shift, and go to state 183
-    T_MINUS_EQUAL	shift, and go to state 184
-    T_MUL_EQUAL	shift, and go to state 185
-    T_DIV_EQUAL	shift, and go to state 186
-    T_CONCAT_EQUAL	shift, and go to state 187
-    T_MOD_EQUAL	shift, and go to state 188
-    T_AND_EQUAL	shift, and go to state 189
-    T_OR_EQUAL	shift, and go to state 190
-    T_XOR_EQUAL	shift, and go to state 191
-    T_SL_EQUAL	shift, and go to state 192
-    T_SR_EQUAL	shift, and go to state 193
-    '(' 	shift, and go to state 194
-
-    ',' 	reduce using rule 120 (non_empty_function_call_parameter_list)
-    T_INC	reduce using rule 273 (rw_cvar)
-    T_DEC	reduce using rule 273 (rw_cvar)
-    ')' 	reduce using rule 120 (non_empty_function_call_parameter_list)
-    $default	reduce using rule 271 (r_cvar)
-
-
-state 449
-
-    unticked_statement  ->  T_DO @9 statement T_WHILE '(' @10 . expr ')' ';'   (rule 25)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 501
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 450
-
-    unticked_statement  ->  T_WHILE '(' @7 expr ')' @8 . while_statement   (rule 22)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    ':' 	shift, and go to state 502
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_IF	shift, and go to state 25
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_INLINE_HTML	shift, and go to state 31
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ECHO	shift, and go to state 33
-    T_DO	shift, and go to state 34
-    T_WHILE	shift, and go to state 35
-    T_FOR	shift, and go to state 36
-    T_FOREACH	shift, and go to state 37
-    T_DECLARE	shift, and go to state 38
-    T_SWITCH	shift, and go to state 39
-    T_BREAK	shift, and go to state 40
-    T_CONTINUE	shift, and go to state 41
-    T_RETURN	shift, and go to state 44
-    T_USE	shift, and go to state 45
-    T_GLOBAL	shift, and go to state 46
-    T_STATIC	shift, and go to state 47
-    T_UNSET	shift, and go to state 48
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '{' 	shift, and go to state 59
-    '(' 	shift, and go to state 60
-    ';' 	shift, and go to state 61
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    statement	go to state 503
-    unticked_statement	go to state 68
-    while_statement	go to state 504
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 75
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 451
-
-    unticked_statement  ->  T_FOR '(' for_expr ';' @11 for_expr . ';' @12 for_expr ')' @13 for_statement   (rule 29)
-
-    ';' 	shift, and go to state 505
-
-
-
-state 452
-
-    non_empty_for_expr  ->  non_empty_for_expr ',' @34 expr .   (rule 152)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 152 (non_empty_for_expr)
-
-
-
-state 453
-
-    unticked_statement  ->  T_FOREACH '(' expr_without_variable T_AS @17 w_cvar . foreach_optional_arg ')' @18 foreach_statement   (rule 51)
-
-    T_DOUBLE_ARROW	shift, and go to state 506
-
-    $default	reduce using rule 71 (foreach_optional_arg)
-
-    foreach_optional_arg	go to state 507
-
-
-
-state 454
-
-    unticked_statement  ->  T_FOREACH '(' w_cvar T_AS @15 w_cvar . foreach_optional_arg ')' @16 foreach_statement   (rule 48)
-
-    T_DOUBLE_ARROW	shift, and go to state 506
-
-    $default	reduce using rule 71 (foreach_optional_arg)
-
-    foreach_optional_arg	go to state 508
-
-
-
-state 455
-
-    declare_list  ->  T_STRING '=' static_scalar .   (rule 79)
-
-    $default	reduce using rule 79 (declare_list)
-
-
-
-state 456
-
-    declare_list  ->  declare_list ',' T_STRING . '=' static_scalar   (rule 80)
-
-    '=' 	shift, and go to state 509
-
-
-
-state 457
-
-    declare_statement  ->  ':' . inner_statement_list T_ENDDECLARE ';'   (rule 78)
-
-    $default	reduce using rule 9 (inner_statement_list)
-
-    inner_statement_list	go to state 510
-
-
-
-state 458
-
-    declare_statement  ->  statement .   (rule 77)
-
-    $default	reduce using rule 77 (declare_statement)
-
-
-
-state 459
-
-    unticked_statement  ->  T_DECLARE @19 '(' declare_list ')' declare_statement .   (rule 53)
-
-    $default	reduce using rule 53 (unticked_statement)
-
-
-
-state 460
-
-    switch_case_list  ->  ':' . case_list T_ENDSWITCH ';'   (rule 83)
-    switch_case_list  ->  ':' . ';' case_list T_ENDSWITCH ';'   (rule 84)
-
-    ';' 	shift, and go to state 511
-
-    $default	reduce using rule 85 (case_list)
-
-    case_list	go to state 512
-
-
-
-state 461
-
-    switch_case_list  ->  '{' . case_list '}'   (rule 81)
-    switch_case_list  ->  '{' . ';' case_list '}'   (rule 82)
-
-    ';' 	shift, and go to state 513
-
-    $default	reduce using rule 85 (case_list)
-
-    case_list	go to state 514
-
-
-
-state 462
-
-    unticked_statement  ->  T_SWITCH '(' expr ')' @14 switch_case_list .   (rule 31)
-
-    $default	reduce using rule 31 (unticked_statement)
-
-
-
-state 463
-
-    non_empty_parameter_list  ->  '&' . T_VARIABLE   (rule 107)
-
-    T_VARIABLE	shift, and go to state 515
-
-
-
-state 464
-
-    non_empty_parameter_list  ->  T_VARIABLE .   (rule 106)
-    non_empty_parameter_list  ->  T_VARIABLE . '=' static_scalar   (rule 109)
-
-    '=' 	shift, and go to state 516
-
-    $default	reduce using rule 106 (non_empty_parameter_list)
-
-
-
-state 465
-
-    non_empty_parameter_list  ->  T_CONST . T_VARIABLE   (rule 108)
-
-    T_VARIABLE	shift, and go to state 517
-
-
-
-state 466
-
-    unticked_declaration_statement  ->  T_OLD_FUNCTION @22 is_reference T_STRING @23 parameter_list . '(' inner_statement_list ')' ';'   (rule 66)
-
-    '(' 	shift, and go to state 518
-
-
-
-state 467
-
-    parameter_list  ->  non_empty_parameter_list .   (rule 104)
-    non_empty_parameter_list  ->  non_empty_parameter_list . ',' T_VARIABLE   (rule 110)
-    non_empty_parameter_list  ->  non_empty_parameter_list . ',' '&' T_VARIABLE   (rule 111)
-    non_empty_parameter_list  ->  non_empty_parameter_list . ',' T_CONST T_VARIABLE   (rule 112)
-    non_empty_parameter_list  ->  non_empty_parameter_list . ',' T_VARIABLE '=' static_scalar   (rule 113)
-
-    ',' 	shift, and go to state 519
-
-    $default	reduce using rule 104 (parameter_list)
-
-
-
-state 468
-
-    unticked_declaration_statement  ->  T_FUNCTION @20 is_reference T_STRING @21 '(' . parameter_list ')' '{' inner_statement_list '}'   (rule 63)
-
-    '&' 	shift, and go to state 463
-    T_VARIABLE	shift, and go to state 464
-    T_CONST	shift, and go to state 465
-
-    $default	reduce using rule 105 (parameter_list)
-
-    parameter_list	go to state 520
-    non_empty_parameter_list	go to state 467
-
-
-
-state 469
-
-    non_empty_static_array_pair_list  ->  static_scalar . T_DOUBLE_ARROW static_scalar   (rule 267)
-    non_empty_static_array_pair_list  ->  static_scalar .   (rule 268)
-
-    T_DOUBLE_ARROW	shift, and go to state 521
-
-    $default	reduce using rule 268 (non_empty_static_array_pair_list)
-
-
-
-state 470
-
-    static_scalar  ->  T_ARRAY '(' static_array_pair_list . ')'   (rule 254)
-
-    ')' 	shift, and go to state 522
-
-
-
-state 471
-
-    static_array_pair_list  ->  non_empty_static_array_pair_list . possible_comma   (rule 262)
-    non_empty_static_array_pair_list  ->  non_empty_static_array_pair_list . ',' static_scalar T_DOUBLE_ARROW static_scalar   (rule 265)
-    non_empty_static_array_pair_list  ->  non_empty_static_array_pair_list . ',' static_scalar   (rule 266)
-
-    ',' 	shift, and go to state 523
-
-    $default	reduce using rule 263 (possible_comma)
-
-    possible_comma	go to state 524
-
-
-
-state 472
-
-    static_var_list  ->  static_var_list ',' T_VARIABLE '=' static_scalar .   (rule 128)
-
-    $default	reduce using rule 128 (static_var_list)
-
-
-
-state 473
-
-    isset_variables  ->  isset_variables ',' @53 cvar .   (rule 346)
-
-    $default	reduce using rule 346 (isset_variables)
-
-
-
-state 474
-
-    unticked_declaration_statement  ->  T_CLASS T_STRING T_EXTENDS T_STRING @25 '{' . class_statement_list '}'   (rule 70)
-
-    $default	reduce using rule 132 (class_statement_list)
-
-    class_statement_list	go to state 525
-
-
-
-state 475
-
-    class_statement  ->  T_OLD_FUNCTION . @32 is_reference T_STRING @33 parameter_list '(' inner_statement_list ')' ';'   (rule 139)
-
-    $default	reduce using rule 137 (@32)
-
-    @32 	go to state 526
-
-
-
-state 476
-
-    class_statement  ->  T_FUNCTION . @30 is_reference T_STRING @31 '(' parameter_list ')' '{' inner_statement_list '}'   (rule 136)
-
-    $default	reduce using rule 134 (@30)
-
-    @30 	go to state 527
-
-
-
-state 477
-
-    class_statement  ->  T_VAR . class_variable_decleration ';'   (rule 133)
-
-    T_VARIABLE	shift, and go to state 528
-
-    class_variable_decleration	go to state 529
-
-
-
-state 478
-
-    unticked_declaration_statement  ->  T_CLASS T_STRING @24 '{' class_statement_list '}' .   (rule 68)
-
-    $default	reduce using rule 68 (unticked_declaration_statement)
-
-
-
-state 479
-
-    class_statement_list  ->  class_statement_list class_statement .   (rule 131)
-
-    $default	reduce using rule 131 (class_statement_list)
-
-
-
-state 480
-
-    assignment_list_element  ->  T_LIST '(' @51 . assignment_list ')'   (rule 303)
-
-    T_VARIABLE	shift, and go to state 30
-    T_LIST	shift, and go to state 354
-    '$' 	shift, and go to state 62
-
-    $default	reduce using rule 304 (assignment_list_element)
-
-    cvar	go to state 355
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    assignment_list	go to state 530
-    assignment_list_element	go to state 357
-
-
-
-state 481
-
-    assignment_list  ->  assignment_list ',' assignment_list_element .   (rule 299)
-
-    $default	reduce using rule 299 (assignment_list)
-
-
-
-state 482
-
-    expr_without_variable  ->  T_LIST '(' @35 assignment_list ')' '=' . expr   (rule 155)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 531
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 483
-
-    non_empty_array_pair_list  ->  expr T_DOUBLE_ARROW '&' w_cvar .   (rule 313)
-
-    $default	reduce using rule 313 (non_empty_array_pair_list)
-
-
-
-state 484
-
-    non_empty_array_pair_list  ->  non_empty_array_pair_list ',' '&' w_cvar .   (rule 312)
-
-    $default	reduce using rule 312 (non_empty_array_pair_list)
-
-
-
-state 485
-
-    non_empty_array_pair_list  ->  non_empty_array_pair_list ',' expr T_DOUBLE_ARROW . expr   (rule 307)
-    non_empty_array_pair_list  ->  non_empty_array_pair_list ',' expr T_DOUBLE_ARROW . '&' w_cvar   (rule 311)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '&' 	shift, and go to state 532
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 533
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 486
-
-    encaps_var_offset  ->  T_STRING .   (rule 334)
-
-    $default	reduce using rule 334 (encaps_var_offset)
-
-
-
-state 487
-
-    encaps_var_offset  ->  T_VARIABLE .   (rule 336)
-
-    $default	reduce using rule 336 (encaps_var_offset)
-
-
-
-state 488
-
-    encaps_var_offset  ->  T_NUM_STRING .   (rule 335)
-
-    $default	reduce using rule 335 (encaps_var_offset)
-
-
-
-state 489
-
-    encaps_var  ->  T_VARIABLE '[' @52 encaps_var_offset . ']'   (rule 329)
-
-    ']' 	shift, and go to state 534
-
-
-
-state 490
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    encaps_var  ->  T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '[' expr . ']' '}'   (rule 332)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    ']' 	shift, and go to state 535
-
-
-
-state 491
-
-    expr_without_variable  ->  expr '?' @42 expr ':' @43 . expr   (rule 213)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 536
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 492
-
-    expr_without_variable  ->  cvar '=' '&' T_NEW static_or_variable_string @36 . ctor_arguments   (rule 160)
-
-    '(' 	shift, and go to state 315
-
-    $default	reduce using rule 241 (ctor_arguments)
-
-    ctor_arguments	go to state 537
-
-
-
-state 493
-
-    variable_name  ->  '{' expr '}' .   (rule 296)
-
-    $default	reduce using rule 296 (variable_name)
-
-
-
-state 494
-
-    ref_list  ->  ref_list T_OBJECT_OPERATOR @49 . object_property   (rule 288)
-
-    T_STRING	shift, and go to state 384
-    T_VARIABLE	shift, and go to state 30
-    '{' 	shift, and go to state 385
-    '$' 	shift, and go to state 62
-
-    cvar_without_objects	go to state 386
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    object_property	go to state 538
-    object_dim_list	go to state 389
-    variable_name	go to state 390
-    simple_indirect_reference	go to state 82
-
-
-
-state 495
-
-    object_dim_list  ->  object_dim_list '[' dim_offset . ']'   (rule 292)
-
-    ']' 	shift, and go to state 539
-
-
-
-state 496
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    object_dim_list  ->  object_dim_list '{' expr . '}'   (rule 293)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    '}' 	shift, and go to state 540
-
-
-
-state 497
-
-    inner_statement_list  ->  inner_statement_list . @2 inner_statement   (rule 8)
-    unticked_statement  ->  T_IF '(' expr ')' ':' @5 inner_statement_list . @6 new_elseif_list new_else_single T_ENDIF ';'   (rule 19)
-
-    T_ELSEIF	reduce using rule 18 (@6)
-    T_ELSE	reduce using rule 18 (@6)
-    T_ENDIF	reduce using rule 18 (@6)
-    $default	reduce using rule 7 (@2)
-    @2  	go to state 265
-    @6  	go to state 541
-
-
-
-state 498
-
-    unticked_statement  ->  T_IF '(' expr ')' @3 statement @4 . elseif_list else_single   (rule 16)
-
-    $default	reduce using rule 94 (elseif_list)
-
-    elseif_list	go to state 542
-
-
-
-state 499
-
-    function_call  ->  T_STRING T_PAAMAYIM_NEKUDOTAYIM static_or_variable_string '(' @47 function_call_parameter_list ')' .   (rule 235)
-
-    $default	reduce using rule 235 (function_call)
-
-
-
-state 500
-
-    non_empty_function_call_parameter_list  ->  non_empty_function_call_parameter_list ',' '&' w_cvar .   (rule 121)
-
-    $default	reduce using rule 121 (non_empty_function_call_parameter_list)
-
-
-
-state 501
-
-    unticked_statement  ->  T_DO @9 statement T_WHILE '(' @10 expr . ')' ';'   (rule 25)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    ')' 	shift, and go to state 543
-
-
-
-state 502
-
-    while_statement  ->  ':' . inner_statement_list T_ENDWHILE ';'   (rule 93)
-
-    $default	reduce using rule 9 (inner_statement_list)
-
-    inner_statement_list	go to state 544
-
-
-
-state 503
-
-    while_statement  ->  statement .   (rule 92)
-
-    $default	reduce using rule 92 (while_statement)
-
-
-
-state 504
-
-    unticked_statement  ->  T_WHILE '(' @7 expr ')' @8 while_statement .   (rule 22)
-
-    $default	reduce using rule 22 (unticked_statement)
-
-
-
-state 505
-
-    unticked_statement  ->  T_FOR '(' for_expr ';' @11 for_expr ';' . @12 for_expr ')' @13 for_statement   (rule 29)
-
-    $default	reduce using rule 27 (@12)
-
-    @12 	go to state 545
-
-
-
-state 506
-
-    foreach_optional_arg  ->  T_DOUBLE_ARROW . w_cvar   (rule 72)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    w_cvar	go to state 546
-    cvar	go to state 359
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 507
-
-    unticked_statement  ->  T_FOREACH '(' expr_without_variable T_AS @17 w_cvar foreach_optional_arg . ')' @18 foreach_statement   (rule 51)
-
-    ')' 	shift, and go to state 547
-
-
-
-state 508
-
-    unticked_statement  ->  T_FOREACH '(' w_cvar T_AS @15 w_cvar foreach_optional_arg . ')' @16 foreach_statement   (rule 48)
-
-    ')' 	shift, and go to state 548
-
-
-
-state 509
-
-    declare_list  ->  declare_list ',' T_STRING '=' . static_scalar   (rule 80)
-
-    '+' 	shift, and go to state 340
-    '-' 	shift, and go to state 341
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 342
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ARRAY	shift, and go to state 343
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-
-    common_scalar	go to state 344
-    static_scalar	go to state 549
-
-
-
-state 510
-
-    inner_statement_list  ->  inner_statement_list . @2 inner_statement   (rule 8)
-    declare_statement  ->  ':' inner_statement_list . T_ENDDECLARE ';'   (rule 78)
-
-    T_ENDDECLARE	shift, and go to state 550
-
-    $default	reduce using rule 7 (@2)
-
-    @2  	go to state 265
-
-
-
-state 511
-
-    switch_case_list  ->  ':' ';' . case_list T_ENDSWITCH ';'   (rule 84)
-
-    $default	reduce using rule 85 (case_list)
-
-    case_list	go to state 551
-
-
-
-state 512
-
-    switch_case_list  ->  ':' case_list . T_ENDSWITCH ';'   (rule 83)
-    case_list  ->  case_list . T_CASE expr case_separator @26 inner_statement_list   (rule 87)
-    case_list  ->  case_list . T_DEFAULT case_separator @27 inner_statement_list   (rule 89)
-
-    T_ENDSWITCH	shift, and go to state 552
-    T_CASE	shift, and go to state 553
-    T_DEFAULT	shift, and go to state 554
-
-
-
-state 513
-
-    switch_case_list  ->  '{' ';' . case_list '}'   (rule 82)
-
-    $default	reduce using rule 85 (case_list)
-
-    case_list	go to state 555
-
-
-
-state 514
-
-    switch_case_list  ->  '{' case_list . '}'   (rule 81)
-    case_list  ->  case_list . T_CASE expr case_separator @26 inner_statement_list   (rule 87)
-    case_list  ->  case_list . T_DEFAULT case_separator @27 inner_statement_list   (rule 89)
-
-    T_CASE	shift, and go to state 553
-    T_DEFAULT	shift, and go to state 554
-    '}' 	shift, and go to state 556
-
-
-
-state 515
-
-    non_empty_parameter_list  ->  '&' T_VARIABLE .   (rule 107)
-
-    $default	reduce using rule 107 (non_empty_parameter_list)
-
-
-
-state 516
-
-    non_empty_parameter_list  ->  T_VARIABLE '=' . static_scalar   (rule 109)
-
-    '+' 	shift, and go to state 340
-    '-' 	shift, and go to state 341
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 342
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ARRAY	shift, and go to state 343
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-
-    common_scalar	go to state 344
-    static_scalar	go to state 557
-
-
-
-state 517
-
-    non_empty_parameter_list  ->  T_CONST T_VARIABLE .   (rule 108)
-
-    $default	reduce using rule 108 (non_empty_parameter_list)
-
-
-
-state 518
-
-    unticked_declaration_statement  ->  T_OLD_FUNCTION @22 is_reference T_STRING @23 parameter_list '(' . inner_statement_list ')' ';'   (rule 66)
-
-    $default	reduce using rule 9 (inner_statement_list)
-
-    inner_statement_list	go to state 558
-
-
-
-state 519
-
-    non_empty_parameter_list  ->  non_empty_parameter_list ',' . T_VARIABLE   (rule 110)
-    non_empty_parameter_list  ->  non_empty_parameter_list ',' . '&' T_VARIABLE   (rule 111)
-    non_empty_parameter_list  ->  non_empty_parameter_list ',' . T_CONST T_VARIABLE   (rule 112)
-    non_empty_parameter_list  ->  non_empty_parameter_list ',' . T_VARIABLE '=' static_scalar   (rule 113)
-
-    '&' 	shift, and go to state 559
-    T_VARIABLE	shift, and go to state 560
-    T_CONST	shift, and go to state 561
-
-
-
-state 520
-
-    unticked_declaration_statement  ->  T_FUNCTION @20 is_reference T_STRING @21 '(' parameter_list . ')' '{' inner_statement_list '}'   (rule 63)
-
-    ')' 	shift, and go to state 562
-
-
-
-state 521
-
-    non_empty_static_array_pair_list  ->  static_scalar T_DOUBLE_ARROW . static_scalar   (rule 267)
-
-    '+' 	shift, and go to state 340
-    '-' 	shift, and go to state 341
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 342
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ARRAY	shift, and go to state 343
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-
-    common_scalar	go to state 344
-    static_scalar	go to state 563
-
-
-
-state 522
-
-    static_scalar  ->  T_ARRAY '(' static_array_pair_list ')' .   (rule 254)
-
-    $default	reduce using rule 254 (static_scalar)
-
-
-
-state 523
-
-    possible_comma  ->  ',' .   (rule 264)
-    non_empty_static_array_pair_list  ->  non_empty_static_array_pair_list ',' . static_scalar T_DOUBLE_ARROW static_scalar   (rule 265)
-    non_empty_static_array_pair_list  ->  non_empty_static_array_pair_list ',' . static_scalar   (rule 266)
-
-    '+' 	shift, and go to state 340
-    '-' 	shift, and go to state 341
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 342
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ARRAY	shift, and go to state 343
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-
-    $default	reduce using rule 264 (possible_comma)
-
-    common_scalar	go to state 344
-    static_scalar	go to state 564
-
-
-
-state 524
-
-    static_array_pair_list  ->  non_empty_static_array_pair_list possible_comma .   (rule 262)
-
-    $default	reduce using rule 262 (static_array_pair_list)
-
-
-
-state 525
-
-    unticked_declaration_statement  ->  T_CLASS T_STRING T_EXTENDS T_STRING @25 '{' class_statement_list . '}'   (rule 70)
-    class_statement_list  ->  class_statement_list . class_statement   (rule 131)
-
-    T_OLD_FUNCTION	shift, and go to state 475
-    T_FUNCTION	shift, and go to state 476
-    T_VAR	shift, and go to state 477
-    '}' 	shift, and go to state 565
-
-    class_statement	go to state 479
-
-
-
-state 526
-
-    class_statement  ->  T_OLD_FUNCTION @32 . is_reference T_STRING @33 parameter_list '(' inner_statement_list ')' ';'   (rule 139)
-
-    '&' 	shift, and go to state 222
-
-    $default	reduce using rule 140 (is_reference)
-
-    is_reference	go to state 566
-
-
-
-state 527
-
-    class_statement  ->  T_FUNCTION @30 . is_reference T_STRING @31 '(' parameter_list ')' '{' inner_statement_list '}'   (rule 136)
-
-    '&' 	shift, and go to state 222
-
-    $default	reduce using rule 140 (is_reference)
-
-    is_reference	go to state 567
-
-
-
-state 528
-
-    class_variable_decleration  ->  T_VARIABLE .   (rule 144)
-    class_variable_decleration  ->  T_VARIABLE . '=' static_scalar   (rule 145)
-
-    '=' 	shift, and go to state 568
-
-    $default	reduce using rule 144 (class_variable_decleration)
-
-
-
-state 529
-
-    class_statement  ->  T_VAR class_variable_decleration . ';'   (rule 133)
-    class_variable_decleration  ->  class_variable_decleration . ',' T_VARIABLE   (rule 142)
-    class_variable_decleration  ->  class_variable_decleration . ',' T_VARIABLE '=' static_scalar   (rule 143)
-
-    ',' 	shift, and go to state 569
-    ';' 	shift, and go to state 570
-
-
-
-state 530
-
-    assignment_list  ->  assignment_list . ',' assignment_list_element   (rule 299)
-    assignment_list_element  ->  T_LIST '(' @51 assignment_list . ')'   (rule 303)
-
-    ',' 	shift, and go to state 423
-    ')' 	shift, and go to state 571
-
-
-
-state 531
-
-    expr_without_variable  ->  T_LIST '(' @35 assignment_list ')' '=' expr .   (rule 155)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 155 (expr_without_variable)
-
-
-
-state 532
-
-    non_empty_array_pair_list  ->  non_empty_array_pair_list ',' expr T_DOUBLE_ARROW '&' . w_cvar   (rule 311)
-
-    T_VARIABLE	shift, and go to state 30
-    '$' 	shift, and go to state 62
-
-    w_cvar	go to state 572
-    cvar	go to state 359
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-
-
-
-state 533
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    non_empty_array_pair_list  ->  non_empty_array_pair_list ',' expr T_DOUBLE_ARROW expr .   (rule 307)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 307 (non_empty_array_pair_list)
-
-
-
-state 534
-
-    encaps_var  ->  T_VARIABLE '[' @52 encaps_var_offset ']' .   (rule 329)
-
-    $default	reduce using rule 329 (encaps_var)
-
-
-
-state 535
-
-    encaps_var  ->  T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '[' expr ']' . '}'   (rule 332)
-
-    '}' 	shift, and go to state 573
-
-
-
-state 536
-
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-    expr_without_variable  ->  expr '?' @42 expr ':' @43 expr .   (rule 213)
-
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-
-    $default	reduce using rule 213 (expr_without_variable)
-
-
-
-state 537
-
-    expr_without_variable  ->  cvar '=' '&' T_NEW static_or_variable_string @36 ctor_arguments .   (rule 160)
-
-    $default	reduce using rule 160 (expr_without_variable)
-
-
-
-state 538
-
-    ref_list  ->  ref_list T_OBJECT_OPERATOR @49 object_property .   (rule 288)
-
-    $default	reduce using rule 288 (ref_list)
-
-
-
-state 539
-
-    object_dim_list  ->  object_dim_list '[' dim_offset ']' .   (rule 292)
-
-    $default	reduce using rule 292 (object_dim_list)
-
-
-
-state 540
-
-    object_dim_list  ->  object_dim_list '{' expr '}' .   (rule 293)
-
-    $default	reduce using rule 293 (object_dim_list)
-
-
-
-state 541
-
-    unticked_statement  ->  T_IF '(' expr ')' ':' @5 inner_statement_list @6 . new_elseif_list new_else_single T_ENDIF ';'   (rule 19)
-
-    $default	reduce using rule 97 (new_elseif_list)
-
-    new_elseif_list	go to state 574
-
-
-
-state 542
-
-    unticked_statement  ->  T_IF '(' expr ')' @3 statement @4 elseif_list . else_single   (rule 16)
-    elseif_list  ->  elseif_list . T_ELSEIF '(' expr ')' @28 statement   (rule 96)
-
-    T_ELSEIF	shift, and go to state 575
-    T_ELSE	shift, and go to state 576
-
-    T_ELSEIF	[reduce using rule 100 (else_single)]
-    T_ELSE	[reduce using rule 100 (else_single)]
-    $default	reduce using rule 100 (else_single)
-
-    else_single	go to state 577
-
-
-
-state 543
-
-    unticked_statement  ->  T_DO @9 statement T_WHILE '(' @10 expr ')' . ';'   (rule 25)
-
-    ';' 	shift, and go to state 578
-
-
-
-state 544
-
-    inner_statement_list  ->  inner_statement_list . @2 inner_statement   (rule 8)
-    while_statement  ->  ':' inner_statement_list . T_ENDWHILE ';'   (rule 93)
-
-    T_ENDWHILE	shift, and go to state 579
-
-    $default	reduce using rule 7 (@2)
-
-    @2  	go to state 265
-
-
-
-state 545
-
-    unticked_statement  ->  T_FOR '(' for_expr ';' @11 for_expr ';' @12 . for_expr ')' @13 for_statement   (rule 29)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    $default	reduce using rule 149 (for_expr)
-
-    for_expr	go to state 580
-    non_empty_for_expr	go to state 213
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 214
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 546
-
-    foreach_optional_arg  ->  T_DOUBLE_ARROW w_cvar .   (rule 72)
-
-    $default	reduce using rule 72 (foreach_optional_arg)
-
-
-
-state 547
-
-    unticked_statement  ->  T_FOREACH '(' expr_without_variable T_AS @17 w_cvar foreach_optional_arg ')' . @18 foreach_statement   (rule 51)
-
-    $default	reduce using rule 50 (@18)
-
-    @18 	go to state 581
-
-
-
-state 548
-
-    unticked_statement  ->  T_FOREACH '(' w_cvar T_AS @15 w_cvar foreach_optional_arg ')' . @16 foreach_statement   (rule 48)
-
-    $default	reduce using rule 47 (@16)
-
-    @16 	go to state 582
-
-
-
-state 549
-
-    declare_list  ->  declare_list ',' T_STRING '=' static_scalar .   (rule 80)
-
-    $default	reduce using rule 80 (declare_list)
-
-
-
-state 550
-
-    declare_statement  ->  ':' inner_statement_list T_ENDDECLARE . ';'   (rule 78)
-
-    ';' 	shift, and go to state 583
-
-
-
-state 551
-
-    switch_case_list  ->  ':' ';' case_list . T_ENDSWITCH ';'   (rule 84)
-    case_list  ->  case_list . T_CASE expr case_separator @26 inner_statement_list   (rule 87)
-    case_list  ->  case_list . T_DEFAULT case_separator @27 inner_statement_list   (rule 89)
-
-    T_ENDSWITCH	shift, and go to state 584
-    T_CASE	shift, and go to state 553
-    T_DEFAULT	shift, and go to state 554
-
-
-
-state 552
-
-    switch_case_list  ->  ':' case_list T_ENDSWITCH . ';'   (rule 83)
-
-    ';' 	shift, and go to state 585
-
-
-
-state 553
-
-    case_list  ->  case_list T_CASE . expr case_separator @26 inner_statement_list   (rule 87)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 586
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 554
-
-    case_list  ->  case_list T_DEFAULT . case_separator @27 inner_statement_list   (rule 89)
-
-    ':' 	shift, and go to state 587
-    ';' 	shift, and go to state 588
-
-    case_separator	go to state 589
-
-
-
-state 555
-
-    switch_case_list  ->  '{' ';' case_list . '}'   (rule 82)
-    case_list  ->  case_list . T_CASE expr case_separator @26 inner_statement_list   (rule 87)
-    case_list  ->  case_list . T_DEFAULT case_separator @27 inner_statement_list   (rule 89)
-
-    T_CASE	shift, and go to state 553
-    T_DEFAULT	shift, and go to state 554
-    '}' 	shift, and go to state 590
-
-
-
-state 556
-
-    switch_case_list  ->  '{' case_list '}' .   (rule 81)
-
-    $default	reduce using rule 81 (switch_case_list)
-
-
-
-state 557
-
-    non_empty_parameter_list  ->  T_VARIABLE '=' static_scalar .   (rule 109)
-
-    $default	reduce using rule 109 (non_empty_parameter_list)
-
-
-
-state 558
-
-    inner_statement_list  ->  inner_statement_list . @2 inner_statement   (rule 8)
-    unticked_declaration_statement  ->  T_OLD_FUNCTION @22 is_reference T_STRING @23 parameter_list '(' inner_statement_list . ')' ';'   (rule 66)
-
-    ')' 	shift, and go to state 591
-
-    $default	reduce using rule 7 (@2)
-
-    @2  	go to state 265
-
-
-
-state 559
-
-    non_empty_parameter_list  ->  non_empty_parameter_list ',' '&' . T_VARIABLE   (rule 111)
-
-    T_VARIABLE	shift, and go to state 592
-
-
-
-state 560
-
-    non_empty_parameter_list  ->  non_empty_parameter_list ',' T_VARIABLE .   (rule 110)
-    non_empty_parameter_list  ->  non_empty_parameter_list ',' T_VARIABLE . '=' static_scalar   (rule 113)
-
-    '=' 	shift, and go to state 593
-
-    $default	reduce using rule 110 (non_empty_parameter_list)
-
-
-
-state 561
-
-    non_empty_parameter_list  ->  non_empty_parameter_list ',' T_CONST . T_VARIABLE   (rule 112)
-
-    T_VARIABLE	shift, and go to state 594
-
-
-
-state 562
-
-    unticked_declaration_statement  ->  T_FUNCTION @20 is_reference T_STRING @21 '(' parameter_list ')' . '{' inner_statement_list '}'   (rule 63)
-
-    '{' 	shift, and go to state 595
-
-
-
-state 563
-
-    non_empty_static_array_pair_list  ->  static_scalar T_DOUBLE_ARROW static_scalar .   (rule 267)
-
-    $default	reduce using rule 267 (non_empty_static_array_pair_list)
-
-
-
-state 564
-
-    non_empty_static_array_pair_list  ->  non_empty_static_array_pair_list ',' static_scalar . T_DOUBLE_ARROW static_scalar   (rule 265)
-    non_empty_static_array_pair_list  ->  non_empty_static_array_pair_list ',' static_scalar .   (rule 266)
-
-    T_DOUBLE_ARROW	shift, and go to state 596
-
-    $default	reduce using rule 266 (non_empty_static_array_pair_list)
-
-
-
-state 565
-
-    unticked_declaration_statement  ->  T_CLASS T_STRING T_EXTENDS T_STRING @25 '{' class_statement_list '}' .   (rule 70)
-
-    $default	reduce using rule 70 (unticked_declaration_statement)
-
-
-
-state 566
-
-    class_statement  ->  T_OLD_FUNCTION @32 is_reference . T_STRING @33 parameter_list '(' inner_statement_list ')' ';'   (rule 139)
-
-    T_STRING	shift, and go to state 597
-
-
-
-state 567
-
-    class_statement  ->  T_FUNCTION @30 is_reference . T_STRING @31 '(' parameter_list ')' '{' inner_statement_list '}'   (rule 136)
-
-    T_STRING	shift, and go to state 598
-
-
-
-state 568
-
-    class_variable_decleration  ->  T_VARIABLE '=' . static_scalar   (rule 145)
-
-    '+' 	shift, and go to state 340
-    '-' 	shift, and go to state 341
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 342
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ARRAY	shift, and go to state 343
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-
-    common_scalar	go to state 344
-    static_scalar	go to state 599
-
-
-
-state 569
-
-    class_variable_decleration  ->  class_variable_decleration ',' . T_VARIABLE   (rule 142)
-    class_variable_decleration  ->  class_variable_decleration ',' . T_VARIABLE '=' static_scalar   (rule 143)
-
-    T_VARIABLE	shift, and go to state 600
-
-
-
-state 570
-
-    class_statement  ->  T_VAR class_variable_decleration ';' .   (rule 133)
-
-    $default	reduce using rule 133 (class_statement)
-
-
-
-state 571
-
-    assignment_list_element  ->  T_LIST '(' @51 assignment_list ')' .   (rule 303)
-
-    $default	reduce using rule 303 (assignment_list_element)
-
-
-
-state 572
-
-    non_empty_array_pair_list  ->  non_empty_array_pair_list ',' expr T_DOUBLE_ARROW '&' w_cvar .   (rule 311)
-
-    $default	reduce using rule 311 (non_empty_array_pair_list)
-
-
-
-state 573
-
-    encaps_var  ->  T_DOLLAR_OPEN_CURLY_BRACES T_STRING_VARNAME '[' expr ']' '}' .   (rule 332)
-
-    $default	reduce using rule 332 (encaps_var)
-
-
-
-state 574
-
-    unticked_statement  ->  T_IF '(' expr ')' ':' @5 inner_statement_list @6 new_elseif_list . new_else_single T_ENDIF ';'   (rule 19)
-    new_elseif_list  ->  new_elseif_list . T_ELSEIF '(' expr ')' ':' @29 inner_statement_list   (rule 99)
-
-    T_ELSEIF	shift, and go to state 601
-    T_ELSE	shift, and go to state 602
-
-    $default	reduce using rule 102 (new_else_single)
-
-    new_else_single	go to state 603
-
-
-
-state 575
-
-    elseif_list  ->  elseif_list T_ELSEIF . '(' expr ')' @28 statement   (rule 96)
-
-    '(' 	shift, and go to state 604
-
-
-
-state 576
-
-    else_single  ->  T_ELSE . statement   (rule 101)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_IF	shift, and go to state 25
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_INLINE_HTML	shift, and go to state 31
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ECHO	shift, and go to state 33
-    T_DO	shift, and go to state 34
-    T_WHILE	shift, and go to state 35
-    T_FOR	shift, and go to state 36
-    T_FOREACH	shift, and go to state 37
-    T_DECLARE	shift, and go to state 38
-    T_SWITCH	shift, and go to state 39
-    T_BREAK	shift, and go to state 40
-    T_CONTINUE	shift, and go to state 41
-    T_RETURN	shift, and go to state 44
-    T_USE	shift, and go to state 45
-    T_GLOBAL	shift, and go to state 46
-    T_STATIC	shift, and go to state 47
-    T_UNSET	shift, and go to state 48
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '{' 	shift, and go to state 59
-    '(' 	shift, and go to state 60
-    ';' 	shift, and go to state 61
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    statement	go to state 605
-    unticked_statement	go to state 68
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 75
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 577
-
-    unticked_statement  ->  T_IF '(' expr ')' @3 statement @4 elseif_list else_single .   (rule 16)
-
-    $default	reduce using rule 16 (unticked_statement)
-
-
-
-state 578
-
-    unticked_statement  ->  T_DO @9 statement T_WHILE '(' @10 expr ')' ';' .   (rule 25)
-
-    $default	reduce using rule 25 (unticked_statement)
-
-
-
-state 579
-
-    while_statement  ->  ':' inner_statement_list T_ENDWHILE . ';'   (rule 93)
-
-    ';' 	shift, and go to state 606
-
-
-
-state 580
-
-    unticked_statement  ->  T_FOR '(' for_expr ';' @11 for_expr ';' @12 for_expr . ')' @13 for_statement   (rule 29)
-
-    ')' 	shift, and go to state 607
-
-
-
-state 581
-
-    unticked_statement  ->  T_FOREACH '(' expr_without_variable T_AS @17 w_cvar foreach_optional_arg ')' @18 . foreach_statement   (rule 51)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    ':' 	shift, and go to state 608
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_IF	shift, and go to state 25
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_INLINE_HTML	shift, and go to state 31
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ECHO	shift, and go to state 33
-    T_DO	shift, and go to state 34
-    T_WHILE	shift, and go to state 35
-    T_FOR	shift, and go to state 36
-    T_FOREACH	shift, and go to state 37
-    T_DECLARE	shift, and go to state 38
-    T_SWITCH	shift, and go to state 39
-    T_BREAK	shift, and go to state 40
-    T_CONTINUE	shift, and go to state 41
-    T_RETURN	shift, and go to state 44
-    T_USE	shift, and go to state 45
-    T_GLOBAL	shift, and go to state 46
-    T_STATIC	shift, and go to state 47
-    T_UNSET	shift, and go to state 48
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '{' 	shift, and go to state 59
-    '(' 	shift, and go to state 60
-    ';' 	shift, and go to state 61
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    statement	go to state 609
-    unticked_statement	go to state 68
-    foreach_statement	go to state 610
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 75
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 582
-
-    unticked_statement  ->  T_FOREACH '(' w_cvar T_AS @15 w_cvar foreach_optional_arg ')' @16 . foreach_statement   (rule 48)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    ':' 	shift, and go to state 608
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_IF	shift, and go to state 25
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_INLINE_HTML	shift, and go to state 31
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ECHO	shift, and go to state 33
-    T_DO	shift, and go to state 34
-    T_WHILE	shift, and go to state 35
-    T_FOR	shift, and go to state 36
-    T_FOREACH	shift, and go to state 37
-    T_DECLARE	shift, and go to state 38
-    T_SWITCH	shift, and go to state 39
-    T_BREAK	shift, and go to state 40
-    T_CONTINUE	shift, and go to state 41
-    T_RETURN	shift, and go to state 44
-    T_USE	shift, and go to state 45
-    T_GLOBAL	shift, and go to state 46
-    T_STATIC	shift, and go to state 47
-    T_UNSET	shift, and go to state 48
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '{' 	shift, and go to state 59
-    '(' 	shift, and go to state 60
-    ';' 	shift, and go to state 61
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    statement	go to state 609
-    unticked_statement	go to state 68
-    foreach_statement	go to state 611
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 75
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 583
-
-    declare_statement  ->  ':' inner_statement_list T_ENDDECLARE ';' .   (rule 78)
-
-    $default	reduce using rule 78 (declare_statement)
-
-
-
-state 584
-
-    switch_case_list  ->  ':' ';' case_list T_ENDSWITCH . ';'   (rule 84)
-
-    ';' 	shift, and go to state 612
-
-
-
-state 585
-
-    switch_case_list  ->  ':' case_list T_ENDSWITCH ';' .   (rule 83)
-
-    $default	reduce using rule 83 (switch_case_list)
-
-
-
-state 586
-
-    case_list  ->  case_list T_CASE expr . case_separator @26 inner_statement_list   (rule 87)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    ':' 	shift, and go to state 587
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    ';' 	shift, and go to state 588
-
-    case_separator	go to state 613
-
-
-
-state 587
-
-    case_separator  ->  ':' .   (rule 90)
-
-    $default	reduce using rule 90 (case_separator)
-
-
-
-state 588
-
-    case_separator  ->  ';' .   (rule 91)
-
-    $default	reduce using rule 91 (case_separator)
-
-
-
-state 589
-
-    case_list  ->  case_list T_DEFAULT case_separator . @27 inner_statement_list   (rule 89)
-
-    $default	reduce using rule 88 (@27)
-
-    @27 	go to state 614
-
-
-
-state 590
-
-    switch_case_list  ->  '{' ';' case_list '}' .   (rule 82)
-
-    $default	reduce using rule 82 (switch_case_list)
-
-
-
-state 591
-
-    unticked_declaration_statement  ->  T_OLD_FUNCTION @22 is_reference T_STRING @23 parameter_list '(' inner_statement_list ')' . ';'   (rule 66)
-
-    ';' 	shift, and go to state 615
-
-
-
-state 592
-
-    non_empty_parameter_list  ->  non_empty_parameter_list ',' '&' T_VARIABLE .   (rule 111)
-
-    $default	reduce using rule 111 (non_empty_parameter_list)
-
-
-
-state 593
-
-    non_empty_parameter_list  ->  non_empty_parameter_list ',' T_VARIABLE '=' . static_scalar   (rule 113)
-
-    '+' 	shift, and go to state 340
-    '-' 	shift, and go to state 341
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 342
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ARRAY	shift, and go to state 343
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-
-    common_scalar	go to state 344
-    static_scalar	go to state 616
-
-
-
-state 594
-
-    non_empty_parameter_list  ->  non_empty_parameter_list ',' T_CONST T_VARIABLE .   (rule 112)
-
-    $default	reduce using rule 112 (non_empty_parameter_list)
-
-
-
-state 595
-
-    unticked_declaration_statement  ->  T_FUNCTION @20 is_reference T_STRING @21 '(' parameter_list ')' '{' . inner_statement_list '}'   (rule 63)
-
-    $default	reduce using rule 9 (inner_statement_list)
-
-    inner_statement_list	go to state 617
-
-
-
-state 596
-
-    non_empty_static_array_pair_list  ->  non_empty_static_array_pair_list ',' static_scalar T_DOUBLE_ARROW . static_scalar   (rule 265)
-
-    '+' 	shift, and go to state 340
-    '-' 	shift, and go to state 341
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 342
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ARRAY	shift, and go to state 343
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-
-    common_scalar	go to state 344
-    static_scalar	go to state 618
-
-
-
-state 597
-
-    class_statement  ->  T_OLD_FUNCTION @32 is_reference T_STRING . @33 parameter_list '(' inner_statement_list ')' ';'   (rule 139)
-
-    $default	reduce using rule 138 (@33)
-
-    @33 	go to state 619
-
-
-
-state 598
-
-    class_statement  ->  T_FUNCTION @30 is_reference T_STRING . @31 '(' parameter_list ')' '{' inner_statement_list '}'   (rule 136)
-
-    $default	reduce using rule 135 (@31)
-
-    @31 	go to state 620
-
-
-
-state 599
-
-    class_variable_decleration  ->  T_VARIABLE '=' static_scalar .   (rule 145)
-
-    $default	reduce using rule 145 (class_variable_decleration)
-
-
-
-state 600
-
-    class_variable_decleration  ->  class_variable_decleration ',' T_VARIABLE .   (rule 142)
-    class_variable_decleration  ->  class_variable_decleration ',' T_VARIABLE . '=' static_scalar   (rule 143)
-
-    '=' 	shift, and go to state 621
-
-    $default	reduce using rule 142 (class_variable_decleration)
-
-
-
-state 601
-
-    new_elseif_list  ->  new_elseif_list T_ELSEIF . '(' expr ')' ':' @29 inner_statement_list   (rule 99)
-
-    '(' 	shift, and go to state 622
-
-
-
-state 602
-
-    new_else_single  ->  T_ELSE . ':' inner_statement_list   (rule 103)
-
-    ':' 	shift, and go to state 623
-
-
-
-state 603
-
-    unticked_statement  ->  T_IF '(' expr ')' ':' @5 inner_statement_list @6 new_elseif_list new_else_single . T_ENDIF ';'   (rule 19)
-
-    T_ENDIF	shift, and go to state 624
-
-
-
-state 604
-
-    elseif_list  ->  elseif_list T_ELSEIF '(' . expr ')' @28 statement   (rule 96)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 625
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 605
-
-    else_single  ->  T_ELSE statement .   (rule 101)
-
-    $default	reduce using rule 101 (else_single)
-
-
-
-state 606
-
-    while_statement  ->  ':' inner_statement_list T_ENDWHILE ';' .   (rule 93)
-
-    $default	reduce using rule 93 (while_statement)
-
-
-
-state 607
-
-    unticked_statement  ->  T_FOR '(' for_expr ';' @11 for_expr ';' @12 for_expr ')' . @13 for_statement   (rule 29)
-
-    $default	reduce using rule 28 (@13)
-
-    @13 	go to state 626
-
-
-
-state 608
-
-    foreach_statement  ->  ':' . inner_statement_list T_ENDFOREACH ';'   (rule 76)
-
-    $default	reduce using rule 9 (inner_statement_list)
-
-    inner_statement_list	go to state 627
-
-
-
-state 609
-
-    foreach_statement  ->  statement .   (rule 75)
-
-    $default	reduce using rule 75 (foreach_statement)
-
-
-
-state 610
-
-    unticked_statement  ->  T_FOREACH '(' expr_without_variable T_AS @17 w_cvar foreach_optional_arg ')' @18 foreach_statement .   (rule 51)
-
-    $default	reduce using rule 51 (unticked_statement)
-
-
-
-state 611
-
-    unticked_statement  ->  T_FOREACH '(' w_cvar T_AS @15 w_cvar foreach_optional_arg ')' @16 foreach_statement .   (rule 48)
-
-    $default	reduce using rule 48 (unticked_statement)
-
-
-
-state 612
-
-    switch_case_list  ->  ':' ';' case_list T_ENDSWITCH ';' .   (rule 84)
-
-    $default	reduce using rule 84 (switch_case_list)
-
-
-
-state 613
-
-    case_list  ->  case_list T_CASE expr case_separator . @26 inner_statement_list   (rule 87)
-
-    $default	reduce using rule 86 (@26)
-
-    @26 	go to state 628
-
-
-
-state 614
-
-    case_list  ->  case_list T_DEFAULT case_separator @27 . inner_statement_list   (rule 89)
-
-    $default	reduce using rule 9 (inner_statement_list)
-
-    inner_statement_list	go to state 629
-
-
-
-state 615
-
-    unticked_declaration_statement  ->  T_OLD_FUNCTION @22 is_reference T_STRING @23 parameter_list '(' inner_statement_list ')' ';' .   (rule 66)
-
-    $default	reduce using rule 66 (unticked_declaration_statement)
-
-
-
-state 616
-
-    non_empty_parameter_list  ->  non_empty_parameter_list ',' T_VARIABLE '=' static_scalar .   (rule 113)
-
-    $default	reduce using rule 113 (non_empty_parameter_list)
-
-
-
-state 617
-
-    inner_statement_list  ->  inner_statement_list . @2 inner_statement   (rule 8)
-    unticked_declaration_statement  ->  T_FUNCTION @20 is_reference T_STRING @21 '(' parameter_list ')' '{' inner_statement_list . '}'   (rule 63)
-
-    '}' 	shift, and go to state 630
-
-    $default	reduce using rule 7 (@2)
-
-    @2  	go to state 265
-
-
-
-state 618
-
-    non_empty_static_array_pair_list  ->  non_empty_static_array_pair_list ',' static_scalar T_DOUBLE_ARROW static_scalar .   (rule 265)
-
-    $default	reduce using rule 265 (non_empty_static_array_pair_list)
-
-
-
-state 619
-
-    class_statement  ->  T_OLD_FUNCTION @32 is_reference T_STRING @33 . parameter_list '(' inner_statement_list ')' ';'   (rule 139)
-
-    '&' 	shift, and go to state 463
-    T_VARIABLE	shift, and go to state 464
-    T_CONST	shift, and go to state 465
-
-    $default	reduce using rule 105 (parameter_list)
-
-    parameter_list	go to state 631
-    non_empty_parameter_list	go to state 467
-
-
-
-state 620
-
-    class_statement  ->  T_FUNCTION @30 is_reference T_STRING @31 . '(' parameter_list ')' '{' inner_statement_list '}'   (rule 136)
-
-    '(' 	shift, and go to state 632
-
-
-
-state 621
-
-    class_variable_decleration  ->  class_variable_decleration ',' T_VARIABLE '=' . static_scalar   (rule 143)
-
-    '+' 	shift, and go to state 340
-    '-' 	shift, and go to state 341
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 342
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ARRAY	shift, and go to state 343
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-
-    common_scalar	go to state 344
-    static_scalar	go to state 633
-
-
-
-state 622
-
-    new_elseif_list  ->  new_elseif_list T_ELSEIF '(' . expr ')' ':' @29 inner_statement_list   (rule 99)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '(' 	shift, and go to state 60
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 634
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 623
-
-    new_else_single  ->  T_ELSE ':' . inner_statement_list   (rule 103)
-
-    $default	reduce using rule 9 (inner_statement_list)
-
-    inner_statement_list	go to state 635
-
-
-
-state 624
-
-    unticked_statement  ->  T_IF '(' expr ')' ':' @5 inner_statement_list @6 new_elseif_list new_else_single T_ENDIF . ';'   (rule 19)
-
-    ';' 	shift, and go to state 636
-
-
-
-state 625
-
-    elseif_list  ->  elseif_list T_ELSEIF '(' expr . ')' @28 statement   (rule 96)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    ')' 	shift, and go to state 637
-
-
-
-state 626
-
-    unticked_statement  ->  T_FOR '(' for_expr ';' @11 for_expr ';' @12 for_expr ')' @13 . for_statement   (rule 29)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    ':' 	shift, and go to state 638
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_IF	shift, and go to state 25
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_INLINE_HTML	shift, and go to state 31
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ECHO	shift, and go to state 33
-    T_DO	shift, and go to state 34
-    T_WHILE	shift, and go to state 35
-    T_FOR	shift, and go to state 36
-    T_FOREACH	shift, and go to state 37
-    T_DECLARE	shift, and go to state 38
-    T_SWITCH	shift, and go to state 39
-    T_BREAK	shift, and go to state 40
-    T_CONTINUE	shift, and go to state 41
-    T_RETURN	shift, and go to state 44
-    T_USE	shift, and go to state 45
-    T_GLOBAL	shift, and go to state 46
-    T_STATIC	shift, and go to state 47
-    T_UNSET	shift, and go to state 48
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '{' 	shift, and go to state 59
-    '(' 	shift, and go to state 60
-    ';' 	shift, and go to state 61
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    statement	go to state 639
-    unticked_statement	go to state 68
-    for_statement	go to state 640
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 75
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 627
-
-    inner_statement_list  ->  inner_statement_list . @2 inner_statement   (rule 8)
-    foreach_statement  ->  ':' inner_statement_list . T_ENDFOREACH ';'   (rule 76)
-
-    T_ENDFOREACH	shift, and go to state 641
-
-    $default	reduce using rule 7 (@2)
-
-    @2  	go to state 265
-
-
-
-state 628
-
-    case_list  ->  case_list T_CASE expr case_separator @26 . inner_statement_list   (rule 87)
-
-    $default	reduce using rule 9 (inner_statement_list)
-
-    inner_statement_list	go to state 642
-
-
-
-state 629
-
-    inner_statement_list  ->  inner_statement_list . @2 inner_statement   (rule 8)
-    case_list  ->  case_list T_DEFAULT case_separator @27 inner_statement_list .   (rule 89)
-
-    T_ENDSWITCH	reduce using rule 89 (case_list)
-    T_CASE	reduce using rule 89 (case_list)
-    T_DEFAULT	reduce using rule 89 (case_list)
-    '}' 	reduce using rule 89 (case_list)
-    $default	reduce using rule 7 (@2)
-    @2  	go to state 265
-
-
-
-state 630
-
-    unticked_declaration_statement  ->  T_FUNCTION @20 is_reference T_STRING @21 '(' parameter_list ')' '{' inner_statement_list '}' .   (rule 63)
-
-    $default	reduce using rule 63 (unticked_declaration_statement)
-
-
-
-state 631
-
-    class_statement  ->  T_OLD_FUNCTION @32 is_reference T_STRING @33 parameter_list . '(' inner_statement_list ')' ';'   (rule 139)
-
-    '(' 	shift, and go to state 643
-
-
-
-state 632
-
-    class_statement  ->  T_FUNCTION @30 is_reference T_STRING @31 '(' . parameter_list ')' '{' inner_statement_list '}'   (rule 136)
-
-    '&' 	shift, and go to state 463
-    T_VARIABLE	shift, and go to state 464
-    T_CONST	shift, and go to state 465
-
-    $default	reduce using rule 105 (parameter_list)
-
-    parameter_list	go to state 644
-    non_empty_parameter_list	go to state 467
-
-
-
-state 633
-
-    class_variable_decleration  ->  class_variable_decleration ',' T_VARIABLE '=' static_scalar .   (rule 143)
-
-    $default	reduce using rule 143 (class_variable_decleration)
-
-
-
-state 634
-
-    new_elseif_list  ->  new_elseif_list T_ELSEIF '(' expr . ')' ':' @29 inner_statement_list   (rule 99)
-    expr_without_variable  ->  expr . T_BOOLEAN_OR @38 expr   (rule 179)
-    expr_without_variable  ->  expr . T_BOOLEAN_AND @39 expr   (rule 181)
-    expr_without_variable  ->  expr . T_LOGICAL_OR @40 expr   (rule 183)
-    expr_without_variable  ->  expr . T_LOGICAL_AND @41 expr   (rule 185)
-    expr_without_variable  ->  expr . T_LOGICAL_XOR expr   (rule 186)
-    expr_without_variable  ->  expr . '|' expr   (rule 187)
-    expr_without_variable  ->  expr . '&' expr   (rule 188)
-    expr_without_variable  ->  expr . '^' expr   (rule 189)
-    expr_without_variable  ->  expr . '.' expr   (rule 190)
-    expr_without_variable  ->  expr . '+' expr   (rule 191)
-    expr_without_variable  ->  expr . '-' expr   (rule 192)
-    expr_without_variable  ->  expr . '*' expr   (rule 193)
-    expr_without_variable  ->  expr . '/' expr   (rule 194)
-    expr_without_variable  ->  expr . '%' expr   (rule 195)
-    expr_without_variable  ->  expr . T_SL expr   (rule 196)
-    expr_without_variable  ->  expr . T_SR expr   (rule 197)
-    expr_without_variable  ->  expr . T_IS_IDENTICAL expr   (rule 202)
-    expr_without_variable  ->  expr . T_IS_NOT_IDENTICAL expr   (rule 203)
-    expr_without_variable  ->  expr . T_IS_EQUAL expr   (rule 204)
-    expr_without_variable  ->  expr . T_IS_NOT_EQUAL expr   (rule 205)
-    expr_without_variable  ->  expr . '<' expr   (rule 206)
-    expr_without_variable  ->  expr . T_IS_SMALLER_OR_EQUAL expr   (rule 207)
-    expr_without_variable  ->  expr . '>' expr   (rule 208)
-    expr_without_variable  ->  expr . T_IS_GREATER_OR_EQUAL expr   (rule 209)
-    expr_without_variable  ->  expr . '?' @42 expr ':' @43 expr   (rule 213)
-
-    T_LOGICAL_OR	shift, and go to state 154
-    T_LOGICAL_XOR	shift, and go to state 155
-    T_LOGICAL_AND	shift, and go to state 156
-    '?' 	shift, and go to state 157
-    T_BOOLEAN_OR	shift, and go to state 158
-    T_BOOLEAN_AND	shift, and go to state 159
-    '|' 	shift, and go to state 160
-    '^' 	shift, and go to state 161
-    '&' 	shift, and go to state 162
-    T_IS_EQUAL	shift, and go to state 163
-    T_IS_NOT_EQUAL	shift, and go to state 164
-    T_IS_IDENTICAL	shift, and go to state 165
-    T_IS_NOT_IDENTICAL	shift, and go to state 166
-    '<' 	shift, and go to state 167
-    T_IS_SMALLER_OR_EQUAL	shift, and go to state 168
-    '>' 	shift, and go to state 169
-    T_IS_GREATER_OR_EQUAL	shift, and go to state 170
-    T_SL	shift, and go to state 171
-    T_SR	shift, and go to state 172
-    '+' 	shift, and go to state 173
-    '-' 	shift, and go to state 174
-    '.' 	shift, and go to state 175
-    '*' 	shift, and go to state 176
-    '/' 	shift, and go to state 177
-    '%' 	shift, and go to state 178
-    ')' 	shift, and go to state 645
-
-
-
-state 635
-
-    inner_statement_list  ->  inner_statement_list . @2 inner_statement   (rule 8)
-    new_else_single  ->  T_ELSE ':' inner_statement_list .   (rule 103)
-
-    T_ENDIF	reduce using rule 103 (new_else_single)
-    $default	reduce using rule 7 (@2)
-    @2  	go to state 265
-
-
-
-state 636
-
-    unticked_statement  ->  T_IF '(' expr ')' ':' @5 inner_statement_list @6 new_elseif_list new_else_single T_ENDIF ';' .   (rule 19)
-
-    $default	reduce using rule 19 (unticked_statement)
-
-
-
-state 637
-
-    elseif_list  ->  elseif_list T_ELSEIF '(' expr ')' . @28 statement   (rule 96)
-
-    $default	reduce using rule 95 (@28)
-
-    @28 	go to state 646
-
-
-
-state 638
-
-    for_statement  ->  ':' . inner_statement_list T_ENDFOR ';'   (rule 74)
-
-    $default	reduce using rule 9 (inner_statement_list)
-
-    inner_statement_list	go to state 647
-
-
-
-state 639
-
-    for_statement  ->  statement .   (rule 73)
-
-    $default	reduce using rule 73 (for_statement)
-
-
-
-state 640
-
-    unticked_statement  ->  T_FOR '(' for_expr ';' @11 for_expr ';' @12 for_expr ')' @13 for_statement .   (rule 29)
-
-    $default	reduce using rule 29 (unticked_statement)
-
-
-
-state 641
-
-    foreach_statement  ->  ':' inner_statement_list T_ENDFOREACH . ';'   (rule 76)
-
-    ';' 	shift, and go to state 648
-
-
-
-state 642
-
-    inner_statement_list  ->  inner_statement_list . @2 inner_statement   (rule 8)
-    case_list  ->  case_list T_CASE expr case_separator @26 inner_statement_list .   (rule 87)
-
-    T_ENDSWITCH	reduce using rule 87 (case_list)
-    T_CASE	reduce using rule 87 (case_list)
-    T_DEFAULT	reduce using rule 87 (case_list)
-    '}' 	reduce using rule 87 (case_list)
-    $default	reduce using rule 7 (@2)
-    @2  	go to state 265
-
-
-
-state 643
-
-    class_statement  ->  T_OLD_FUNCTION @32 is_reference T_STRING @33 parameter_list '(' . inner_statement_list ')' ';'   (rule 139)
-
-    $default	reduce using rule 9 (inner_statement_list)
-
-    inner_statement_list	go to state 649
-
-
-
-state 644
-
-    class_statement  ->  T_FUNCTION @30 is_reference T_STRING @31 '(' parameter_list . ')' '{' inner_statement_list '}'   (rule 136)
-
-    ')' 	shift, and go to state 650
-
-
-
-state 645
-
-    new_elseif_list  ->  new_elseif_list T_ELSEIF '(' expr ')' . ':' @29 inner_statement_list   (rule 99)
-
-    ':' 	shift, and go to state 651
-
-
-
-state 646
-
-    elseif_list  ->  elseif_list T_ELSEIF '(' expr ')' @28 . statement   (rule 96)
-
-    T_INCLUDE	shift, and go to state 3
-    T_INCLUDE_ONCE	shift, and go to state 4
-    T_EVAL	shift, and go to state 5
-    T_REQUIRE	shift, and go to state 6
-    T_REQUIRE_ONCE	shift, and go to state 7
-    T_PRINT	shift, and go to state 8
-    '+' 	shift, and go to state 9
-    '-' 	shift, and go to state 10
-    '!' 	shift, and go to state 11
-    '~' 	shift, and go to state 12
-    T_INC	shift, and go to state 13
-    T_DEC	shift, and go to state 14
-    T_INT_CAST	shift, and go to state 15
-    T_DOUBLE_CAST	shift, and go to state 16
-    T_STRING_CAST	shift, and go to state 17
-    T_ARRAY_CAST	shift, and go to state 18
-    T_OBJECT_CAST	shift, and go to state 19
-    T_BOOL_CAST	shift, and go to state 20
-    T_UNSET_CAST	shift, and go to state 21
-    '@' 	shift, and go to state 22
-    T_NEW	shift, and go to state 23
-    T_EXIT	shift, and go to state 24
-    T_IF	shift, and go to state 25
-    T_LNUMBER	shift, and go to state 26
-    T_DNUMBER	shift, and go to state 27
-    T_STRING	shift, and go to state 28
-    T_STRING_VARNAME	shift, and go to state 29
-    T_VARIABLE	shift, and go to state 30
-    T_INLINE_HTML	shift, and go to state 31
-    T_CONSTANT_ENCAPSED_STRING	shift, and go to state 32
-    T_ECHO	shift, and go to state 33
-    T_DO	shift, and go to state 34
-    T_WHILE	shift, and go to state 35
-    T_FOR	shift, and go to state 36
-    T_FOREACH	shift, and go to state 37
-    T_DECLARE	shift, and go to state 38
-    T_SWITCH	shift, and go to state 39
-    T_BREAK	shift, and go to state 40
-    T_CONTINUE	shift, and go to state 41
-    T_RETURN	shift, and go to state 44
-    T_USE	shift, and go to state 45
-    T_GLOBAL	shift, and go to state 46
-    T_STATIC	shift, and go to state 47
-    T_UNSET	shift, and go to state 48
-    T_ISSET	shift, and go to state 49
-    T_EMPTY	shift, and go to state 50
-    T_LIST	shift, and go to state 52
-    T_ARRAY	shift, and go to state 53
-    T_CLASS_C	shift, and go to state 54
-    T_FUNC_C	shift, and go to state 55
-    T_LINE	shift, and go to state 56
-    T_FILE	shift, and go to state 57
-    T_START_HEREDOC	shift, and go to state 58
-    '{' 	shift, and go to state 59
-    '(' 	shift, and go to state 60
-    ';' 	shift, and go to state 61
-    '$' 	shift, and go to state 62
-    '`' 	shift, and go to state 63
-    '\"'	shift, and go to state 64
-    '\''	shift, and go to state 65
-
-    statement	go to state 652
-    unticked_statement	go to state 68
-    expr_without_variable	go to state 71
-    function_call	go to state 72
-    common_scalar	go to state 73
-    scalar	go to state 74
-    expr	go to state 75
-    r_cvar	go to state 76
-    rw_cvar	go to state 77
-    cvar	go to state 78
-    cvar_without_objects	go to state 79
-    reference_variable	go to state 80
-    compound_variable	go to state 81
-    simple_indirect_reference	go to state 82
-    internal_functions_in_yacc	go to state 83
-
-
-
-state 647
-
-    inner_statement_list  ->  inner_statement_list . @2 inner_statement   (rule 8)
-    for_statement  ->  ':' inner_statement_list . T_ENDFOR ';'   (rule 74)
-
-    T_ENDFOR	shift, and go to state 653
-
-    $default	reduce using rule 7 (@2)
-
-    @2  	go to state 265
-
-
-
-state 648
-
-    foreach_statement  ->  ':' inner_statement_list T_ENDFOREACH ';' .   (rule 76)
-
-    $default	reduce using rule 76 (foreach_statement)
-
-
-
-state 649
-
-    inner_statement_list  ->  inner_statement_list . @2 inner_statement   (rule 8)
-    class_statement  ->  T_OLD_FUNCTION @32 is_reference T_STRING @33 parameter_list '(' inner_statement_list . ')' ';'   (rule 139)
-
-    ')' 	shift, and go to state 654
-
-    $default	reduce using rule 7 (@2)
-
-    @2  	go to state 265
-
-
-
-state 650
-
-    class_statement  ->  T_FUNCTION @30 is_reference T_STRING @31 '(' parameter_list ')' . '{' inner_statement_list '}'   (rule 136)
-
-    '{' 	shift, and go to state 655
-
-
-
-state 651
-
-    new_elseif_list  ->  new_elseif_list T_ELSEIF '(' expr ')' ':' . @29 inner_statement_list   (rule 99)
-
-    $default	reduce using rule 98 (@29)
-
-    @29 	go to state 656
-
-
-
-state 652
-
-    elseif_list  ->  elseif_list T_ELSEIF '(' expr ')' @28 statement .   (rule 96)
-
-    $default	reduce using rule 96 (elseif_list)
-
-
-
-state 653
-
-    for_statement  ->  ':' inner_statement_list T_ENDFOR . ';'   (rule 74)
-
-    ';' 	shift, and go to state 657
-
-
-
-state 654
-
-    class_statement  ->  T_OLD_FUNCTION @32 is_reference T_STRING @33 parameter_list '(' inner_statement_list ')' . ';'   (rule 139)
-
-    ';' 	shift, and go to state 658
-
-
-
-state 655
-
-    class_statement  ->  T_FUNCTION @30 is_reference T_STRING @31 '(' parameter_list ')' '{' . inner_statement_list '}'   (rule 136)
-
-    $default	reduce using rule 9 (inner_statement_list)
-
-    inner_statement_list	go to state 659
-
-
-
-state 656
-
-    new_elseif_list  ->  new_elseif_list T_ELSEIF '(' expr ')' ':' @29 . inner_statement_list   (rule 99)
-
-    $default	reduce using rule 9 (inner_statement_list)
-
-    inner_statement_list	go to state 660
-
-
-
-state 657
-
-    for_statement  ->  ':' inner_statement_list T_ENDFOR ';' .   (rule 74)
-
-    $default	reduce using rule 74 (for_statement)
-
-
-
-state 658
-
-    class_statement  ->  T_OLD_FUNCTION @32 is_reference T_STRING @33 parameter_list '(' inner_statement_list ')' ';' .   (rule 139)
-
-    $default	reduce using rule 139 (class_statement)
-
-
-
-state 659
-
-    inner_statement_list  ->  inner_statement_list . @2 inner_statement   (rule 8)
-    class_statement  ->  T_FUNCTION @30 is_reference T_STRING @31 '(' parameter_list ')' '{' inner_statement_list . '}'   (rule 136)
-
-    '}' 	shift, and go to state 661
-
-    $default	reduce using rule 7 (@2)
-
-    @2  	go to state 265
-
-
-
-state 660
-
-    inner_statement_list  ->  inner_statement_list . @2 inner_statement   (rule 8)
-    new_elseif_list  ->  new_elseif_list T_ELSEIF '(' expr ')' ':' @29 inner_statement_list .   (rule 99)
-
-    T_ELSEIF	reduce using rule 99 (new_elseif_list)
-    T_ELSE	reduce using rule 99 (new_elseif_list)
-    T_ENDIF	reduce using rule 99 (new_elseif_list)
-    $default	reduce using rule 7 (@2)
-    @2  	go to state 265
-
-
-
-state 661
-
-    class_statement  ->  T_FUNCTION @30 is_reference T_STRING @31 '(' parameter_list ')' '{' inner_statement_list '}' .   (rule 136)
-
-    $default	reduce using rule 136 (class_statement)
-
-
-
-state 662
-
-    $   	go to state 663
-
-
-
-state 663
-
-    $   	go to state 664
-
-
-
-state 664
-
-    $default	accept
-
-
diff -Nur php-4.3.11/Zend/zend_language_scanner.c php/Zend/zend_language_scanner.c
--- php-4.3.11/Zend/zend_language_scanner.c	2005-03-30 22:35:48.000000000 +0800
+++ php/Zend/zend_language_scanner.c	2007-07-23 21:44:28.000000000 +0800
@@ -1,5968 +1,6110 @@
-#define yy_create_buffer zend_create_buffer
-#define yy_delete_buffer zend_delete_buffer
-#define yy_scan_buffer zend_scan_buffer
-#define yy_scan_string zend_scan_string
-#define yy_scan_bytes zend_scan_bytes
-#define yy_flex_debug zend_flex_debug
-#define yy_init_buffer zend_init_buffer
-#define yy_flush_buffer zend_flush_buffer
-#define yy_load_buffer_state zend_load_buffer_state
-#define yy_switch_to_buffer zend_switch_to_buffer
-#define yyin zendin
-#define yyleng zendleng
-#define yylex zendlex
-#define yyout zendout
-#define yyrestart zendrestart
-#define yytext zendtext
-
-/* A Lexical scanner generated by flex */
-
-/* Scanner skeleton version:
- * $Header: /repository/Zend/Attic/flex.skl,v 1.27.4.4 2003/05/31 01:37:43 sniper Exp $
- */
-
-#define FLEX_SCANNER
-#define YY_FLEX_MAJOR_VERSION 2
-#define YY_FLEX_MINOR_VERSION 5
-
-
-/* for HAVE_* */
-#include "zend.h"
-
-/* for recv */
-#ifdef HAVE_SYS_TYPES_H
-# include <sys/types.h>
-#endif
-#ifdef HAVE_SYS_SOCKET_H
-# include <sys/socket.h> 
-#endif
-
-/* for read */
-#ifdef HAVE_UNISTD_H
-# include <unistd.h>
-#endif
-#include <stdio.h>
-
-
-/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
-#ifdef c_plusplus
-#ifndef __cplusplus
-#define __cplusplus
-#endif
-#endif
-
-
-#ifdef __cplusplus
-
-#include <stdlib.h>
-#if HAVE_UNISTD_H
-#include <unistd.h>
-#endif
-
-/* Use prototypes in function declarations. */
-#define YY_USE_PROTOS
-
-/* The "const" storage-class-modifier is valid. */
-#define YY_USE_CONST
-
-#else	/* ! __cplusplus */
-
-#if __STDC__
-
-#define YY_USE_PROTOS
-#define YY_USE_CONST
-
-#endif	/* __STDC__ */
-#endif	/* ! __cplusplus */
-
-#ifdef __TURBOC__
- #pragma warn -rch
- #pragma warn -use
-#include <io.h>
-#include <stdlib.h>
-#define YY_USE_CONST
-#define YY_USE_PROTOS
-#endif
-
-#ifdef YY_USE_CONST
-#define yyconst const
-#else
-#define yyconst
-#endif
-
-#undef YY_USE_PROTOS
-#define YY_USE_PROTOS
-
-#ifdef YY_USE_PROTOS
-#define YY_PROTO(proto) proto
-#else
-#define YY_PROTO(proto) ()
-#endif
-
-/* Returned upon end-of-file. */
-#define YY_NULL 0
-
-/* Promotes a possibly negative, possibly signed char to an unsigned
- * integer for use as an array index.  If the signed char is negative,
- * we want to instead treat it as an 8-bit unsigned char, hence the
- * double cast.
- */
-#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
-
-/* Enter a start condition.  This macro really ought to take a parameter,
- * but we do it the disgusting crufty way forced on us by the ()-less
- * definition of BEGIN.
- */
-#define BEGIN yy_start = 1 + 2 *
-
-/* Translate the current start state into a value that can be later handed
- * to BEGIN to return to the state.  The YYSTATE alias is for lex
- * compatibility.
- */
-#define YY_START ((yy_start - 1) / 2)
-#define YYSTATE YY_START
-
-/* Action number for EOF rule of a given start state. */
-#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
-
-/* Special action meaning "start processing a new file". */
-#define YY_NEW_FILE yyrestart( SCNG(yy_in) TSRMLS_CC )
-
-#define YY_END_OF_BUFFER_CHAR 0
-
-/* Size of default input buffer. */
-#define YY_BUF_SIZE 16384
-
-typedef struct yy_buffer_state *YY_BUFFER_STATE;
-
-extern int yyleng;
-
-
-#define EOB_ACT_CONTINUE_SCAN 0
-#define EOB_ACT_END_OF_FILE 1
-#define EOB_ACT_LAST_MATCH 2
-
-/* The funky do-while in the following #define is used to turn the definition
- * int a single C statement (which needs a semi-colon terminator).  This
- * avoids problems with code like:
- *
- * 	if ( condition_holds )
- *		yyless( 5 );
- *	else
- *		do_something_else();
- *
- * Prior to using the do-while the compiler would get upset at the
- * "else" because it interpreted the "if" statement as being all
- * done when it reached the ';' after the yyless() call.
- */
-
-/* Return all but the first 'n' matched characters back to the input stream. */
-
-#define yyless(n) \
-	do \
-		{ \
-		/* Undo effects of setting up yytext. */ \
-		*yy_cp = yy_hold_char; \
-		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
-		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
-		} \
-	while ( 0 )
-
-#define unput(c) yyunput( c, yytext_ptr TSRMLS_CC )
-
-/* The following is because we cannot portably get our hands on size_t
- * (without autoconf's help, which isn't available because we want
- * flex-generated scanners to compile on their own).
- */
-typedef unsigned int yy_size_t;
-
-
-struct yy_buffer_state
-	{
-	struct _zend_file_handle *yy_input_file;
-
-	char *yy_ch_buf;		/* input buffer */
-	char *yy_buf_pos;		/* current position in input buffer */
-
-	/* Size of input buffer in bytes, not including room for EOB
-	 * characters.
-	 */
-	yy_size_t yy_buf_size;
-
-	/* Number of characters read into yy_ch_buf, not including EOB
-	 * characters.
-	 */
-	int yy_n_chars;
-
-	/* Whether we "own" the buffer - i.e., we know we created it,
-	 * and can realloc() it to grow it, and should free() it to
-	 * delete it.
-	 */
-	int yy_is_our_buffer;
-
-	/* Whether we're considered to be at the beginning of a line.
-	 * If so, '^' rules will be active on the next match, otherwise
-	 * not.
-	 */
-	int yy_at_bol;
-
-	/* Whether to try to fill the input buffer when we reach the
-	 * end of it.
-	 */
-	int yy_fill_buffer;
-
-	int yy_buffer_status;
-#define YY_BUFFER_NEW 0
-#define YY_BUFFER_NORMAL 1
-	/* When an EOF's been seen but there's still some text to process
-	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
-	 * shouldn't try reading from the input source any more.  We might
-	 * still have a bunch of tokens to match, though, because of
-	 * possible backing-up.
-	 *
-	 * When we actually see the EOF, we change the status to "new"
-	 * (via yyrestart()), so that the user can continue scanning by
-	 * just pointing yyin at a new input file.
-	 */
-#define YY_BUFFER_EOF_PENDING 2
-	};
-
-#define yy_current_buffer SCNG(current_buffer)
-#define yy_hold_char SCNG(_yy_hold_char)
-
-/* We provide macros for accessing buffer states in case in the
- * future we want to put the buffer states in a more general
- * "scanner state".
- */
-#define YY_CURRENT_BUFFER yy_current_buffer
-
-
-/* yy_hold_char holds the character lost when yytext is formed. */
-
-#if 0
-static char yy_hold_char;
-
-static int yy_n_chars;		/* number of characters read into yy_ch_buf */
-#endif
-
-/* Points to current character in buffer. */
-#define yy_c_buf_p SCNG(c_buf_p)
-#define yy_init SCNG(init)
-#define yy_start SCNG(start)
-
-/* Flag which is used to allow yywrap()'s to do buffer switches
- * instead of setting up a fresh yyin.  A bit of a hack ...
- */
-/* static int yy_did_buffer_switch_on_eof; */
-#define yy_did_buffer_switch_on_eof SCNG(_yy_did_buffer_switch_on_eof)
-
-void yyrestart YY_PROTO(( struct _zend_file_handle  *input_file TSRMLS_DC ));
-
-void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer TSRMLS_DC ));
-void yy_load_buffer_state YY_PROTO(( TSRMLS_D ));
-YY_BUFFER_STATE yy_create_buffer YY_PROTO(( struct _zend_file_handle *file, int size TSRMLS_DC ));
-void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b TSRMLS_DC ));
-void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, struct _zend_file_handle *file TSRMLS_DC ));
-void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b TSRMLS_DC ));
-#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer TSRMLS_CC )
-
-YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size TSRMLS_DC ));
-YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str TSRMLS_DC ));
-YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len TSRMLS_DC ));
-
-
-static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
-static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
-static void yy_flex_free YY_PROTO(( void * ));
-
-#define yy_new_buffer yy_create_buffer
-
-#define yy_set_interactive(is_interactive) \
-	{ \
-	if ( ! yy_current_buffer ) \
-		yy_current_buffer = yy_create_buffer( SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC ); \
-	}
-
-#define yy_set_bol(at_bol) \
-	{ \
-	if ( ! yy_current_buffer ) \
-		yy_current_buffer = yy_create_buffer( SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC ); \
-	yy_current_buffer->yy_at_bol = at_bol; \
-	}
-
-#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
-
-
-#define yywrap() 1
-#define YY_SKIP_YYWRAP
-typedef unsigned char YY_CHAR;
-FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
-typedef int yy_state_type;
-extern char *yytext;
-#define yytext_ptr yytext
-#undef yyleng
-#define yyleng SCNG(yy_leng)
-#undef yytext
-#define yytext SCNG(yy_text)
-#undef yytext_ptr
-#define yytext_ptr SCNG(yy_text)
-#undef yyin
-#define yyin SCNG(yy_in)
-#undef yyout
-#define yyout SCNG(yy_out)
-#undef yy_last_accepting_state
-#define yy_last_accepting_state SCNG(_yy_last_accepting_state)
-#undef yy_last_accepting_cpos
-#define yy_last_accepting_cpos SCNG(_yy_last_accepting_cpos)
-#undef yy_more_flag
-#define yy_more_flag SCNG(_yy_more_flag)
-#undef yy_more_len
-#define yy_more_len SCNG(_yy_more_len)
-
-
-static yy_state_type yy_get_previous_state YY_PROTO(( TSRMLS_D ));
-static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state TSRMLS_DC ));
-static int yy_get_next_buffer YY_PROTO(( TSRMLS_D ));
-static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));
-
-/* Done after the current pattern has been matched and before the
- * corresponding action - sets up yytext.
- */
-#define YY_DO_BEFORE_ACTION \
-	yytext_ptr = yy_bp; \
-	yytext_ptr -= yy_more_len; \
-	yyleng = (int) (yy_cp - yytext_ptr); \
-	yy_hold_char = *yy_cp; \
-	*yy_cp = '\0'; \
-	yy_c_buf_p = yy_cp;
-
-#undef yyleng
-#undef yytext
-#undef yytext_ptr
-#undef yyin
-#undef yyout
-#undef yy_last_accepting_state
-#undef yy_last_accepting_cpos
-#undef yy_more_flag
-#undef yy_more_len
-
-
-#define YY_NUM_RULES 145
-#define YY_END_OF_BUFFER 146
-static yyconst short int yy_accept[1351] =
-    {   0,
-        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
-      146,   98,   98,  144,  107,   84,  121,  108,   84,   84,
-       84,  124,   84,   84,   84,   84,   84,   84,   84,   90,
-       90,   84,   84,   84,   84,   84,   84,  105,  123,  105,
-      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
-      105,  105,  105,  105,  105,  105,  105,  105,   85,   84,
-       87,  126,  141,  131,  126,   92,   92,  131,  144,  106,
-      128,  131,  127,  143,  144,  129,  144,  142,  140,  126,
-      144,  106,   33,   32,   89,   88,  114,  116,  110,  111,
-
-      111,  109,  109,  109,   98,    0,   98,  101,   99,   98,
-      107,   63,    0,  119,    0,  104,   71,  118,   78,   74,
-        0,  120,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,   68,   58,   66,   59,   67,   31,   93,
-       70,  113,  108,   69,   93,   90,    0,    0,   34,    0,
-       82,   64,   63,   62,   55,   65,   83,  117,   76,  105,
-      105,  105,  105,   20,  105,  105,  105,  105,  105,  105,
-      105,   13,  105,  105,  105,  105,  105,  105,  105,  105,
-      105,    7,  105,  105,  105,  105,  105,   79,  105,  105,
-      105,  105,  105,  105,  105,  105,  105,   75,   77,  126,
-
-      130,   86,   31,   92,    0,  139,  135,  137,  139,  106,
-      128,  132,  127,    0,  133,  134,  129,  136,  140,  126,
-      125,  125,  106,    0,   32,   88,  114,  115,  110,  111,
-      112,   98,    0,  100,    0,    0,   61,  104,  118,  118,
-        0,    0,    0,    0,    0,    0,    0,    0,    0,   93,
-        0,   93,   91,    0,    0,   72,   60,   73,  117,  117,
-      105,  105,  105,   80,  105,  105,  105,  105,  105,  105,
-      105,  105,    2,  105,  105,  105,  105,  105,  105,  105,
-       14,  105,  105,  105,  105,  105,   35,  105,  105,  105,
-      105,  105,  105,  105,   49,   36,  105,   81,   92,  137,
-
-      138,   98,    0,    0,    0,    0,    0,    0,    0,    0,
-        0,    0,    0,    0,    0,    0,    0,  105,  105,  105,
-      105,  105,  105,   23,  105,  105,  105,  105,  105,  105,
-       27,   10,  105,  105,  105,  105,  105,  105,   44,    1,
-      105,  105,  105,  105,  105,  105,   56,  105,  105,  105,
-      105,  105,  105,  105,  105,  137,  138,   98,    0,    0,
-        0,    0,    0,    0,    0,    0,   37,    0,    0,    0,
-        0,    0,    0,  122,  122,    0,  105,  105,  105,  105,
-       57,   25,  105,   29,    5,  105,  105,  105,  105,   52,
-      105,  105,    9,  105,  105,  105,  105,  105,  105,  105,
-
-       51,  105,   28,  105,  105,  105,  105,   54,   11,   98,
-        0,  102,  102,    0,    0,    0,    0,   42,    0,    0,
-        0,    0,    0,   38,    0,    0,    0,  105,  105,  105,
-      105,  105,  105,  105,  105,    8,  105,   15,  105,  105,
-      105,  105,  105,   50,  105,  105,  105,    6,   53,   21,
-       98,    0,    0,    0,    0,   40,    0,    0,    0,    0,
-        0,   43,    0,  105,  105,  105,  105,  105,  105,   18,
-       24,  105,  105,  105,  105,   30,   16,  105,   45,  105,
-       47,   98,    0,    0,    0,    0,    0,    0,   41,    0,
-       39,    0,  105,   97,  105,   96,  105,   26,  105,  105,
-
-      105,   12,    4,  105,  105,  105,   98,    0,    0,    0,
-        0,   94,  105,  105,  105,   22,  105,  105,  105,   98,
-        0,    0,    0,  105,   19,   17,  105,  105,  105,   98,
-        0,    0,    0,  105,  105,  105,  105,   98,    0,    0,
-        0,   95,   46,    3,   48,   98,    0,    0,    0,   98,
-        0,    0,    0,   98,    0,    0,    0,   98,    0,    0,
-        0,   98,    0,    0,    0,    0,   98,    0,  103,    0,
-        0,    0,    0,   98,    0,  103,  103,    0,    0,    0,
-       98,    0,    0,    0,    0,   98,    0,    0,    0,    0,
-       99,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
-        0,   98,    0,   98,    0,   98,    0,   98,    0,    0
-    } ;
-
-static yyconst int yy_ec[256] =
-    {   0,
-        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
-        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
-        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
-        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
-       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
-       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
-       26,   27,   28,   16,   34,   35,   36,   37,   38,   39,
-       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
-       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
-       29,   30,   29,   31,   32,   33,   34,   35,   36,   37,
-
-       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
-       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
-       58,   59,   60,   61,   62,   16,   59,   59,   59,   59,
-       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
-       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
-       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
-       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
-       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
-       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
-       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
-
-       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
-       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
-       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
-       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
-       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
-       59,   59,   59,   59,   59
-    } ;
-
-static yyconst int yy_meta[63] =
-    {   0,
-        1,    2,    3,    3,    4,    1,    4,    5,    6,    4,
-        7,    4,    4,    8,    4,    4,    4,    4,    4,    9,
-        9,    9,    4,   10,   11,    4,    6,    6,    1,    1,
-        4,   12,    1,   12,   12,   12,   12,   12,   12,   12,
-       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
-       12,   12,   12,   12,   12,   12,   12,   12,   12,    1,
-        4,    1
-    } ;
-
-static yyconst short int yy_base[1771] =
-    {   0,
-     7910, 7909,    0,    0,   62,    0,  114,  115,  121,  122,
-      123,  151,  210,    0,  272,    0, 7919, 7918,  132,  139,
-     7931, 7905,  121, 7936,  129, 7903,  131, 7936,    0,  112,
-      137,  135,  333, 7936, 7902,  143,  151,  150,  322,  322,
-      331, 7904,  320,  148,  153, 7899, 7899, 7892, 7936,  303,
-     7872,  332,  340,  347,  308, 7877,    0,  351, 7879, 7882,
-      312, 7868, 7880,  305,  312, 7883, 7875, 7867, 7936,  312,
-     7936,    0, 7936,  404, 7887,  447,  375, 7936,  464,    0,
-     7880, 7904, 7881, 7936,  460, 7904,  453, 7936,  466,  469,
-      458,  479, 7936,    0, 7936,    0,    0, 7890,    0, 7936,
-
-     7905, 7880, 7936, 7879, 7880,  467, 7879, 7877,  350, 7866,
-      485, 7875,  134, 7936,  383,    0, 7936,  397, 7936, 7936,
-      470, 7936, 7897,    0, 7848, 7850, 7849, 7851, 7848, 7859,
-     7855, 7839, 7844, 7936, 7936, 7936, 7936, 7936, 7936,  476,
-     7936, 7936, 7936, 7936,  485,  491,  505,  496, 7936, 7838,
-      468, 7936, 7936, 7863, 7936, 7936, 7862,  533, 7936,    0,
-      502, 7850, 7835,    0, 7847, 7832, 7829, 7848, 7834,  503,
-     7842,    0, 7838, 7826, 7828, 7839, 7841,  498, 7823, 7826,
-     7824,    0, 7835, 7818, 7817, 7812, 7830,    0, 7824,  493,
-     7831, 7822, 7811, 7824, 7810, 7818, 7808, 7936, 7936,    0,
-
-     7936, 7936,    0,  528,  532, 7936, 7936,  524,  538,    0,
-     7825, 7936, 7827, 7826, 7936, 7936, 7849, 7936,  550,  551,
-     7936, 7851,  561,  575,    0,    0,    0, 7936,    0, 7936,
-     7936, 7828,  571, 7936, 7811, 7800, 7936,    0, 7936, 7847,
-     7798, 7800, 7793, 7798, 7792, 7801, 7809, 7791, 7789,  566,
-      569,  572,  580, 7804, 7837, 7936, 7936, 7936, 7936, 7835,
-     7792,  553, 7794,    0, 7801, 7800, 7795, 7785, 7779,  529,
-     7785, 7795,    0, 7780, 7789, 7773,  569, 7780, 7771, 7785,
-     7784, 7785, 7785, 7774, 7780, 7764,    0, 7784, 7768, 7760,
-     7759, 7759, 7758, 7772,    0,    0, 7764,    0,  606,  577,
-
-      612, 7783,  611, 7758, 7764, 7771, 7759, 7768, 7768,  622,
-     7763, 7755, 7757, 7760, 3005, 3053,  606, 3019, 3007, 3004,
-     3003, 2991, 2990,    0, 2997, 2980, 2978, 2988, 2995, 2974,
-        0, 2985, 2968, 2973, 2962, 2951, 2931, 2939,    0,    0,
-     2924, 2936, 2914, 2932, 2909, 2907,    0, 2920, 2905, 2915,
-     2905, 2907, 2905, 2887, 2886, 7936, 7936, 2895,  628,  627,
-     2866, 2856,  652, 2848, 2834,  653, 7936, 2775, 2777,  655,
-     2765, 2758, 2766, 7936, 2804,  609, 2754, 2767, 2767, 2764,
-        0,    0, 2748,    0,    0, 2753, 2747, 2752, 2757,    0,
-     2759, 2743,    0, 2751, 2749, 2751, 2748, 2736, 2731, 2728,
-
-        0, 2709,    0, 2711, 2713, 2722, 2712,    0,    0, 2726,
-      649, 7936, 2746, 2695, 2677,  659,  660, 7936, 2689, 2682,
-     2681, 2665,  662, 7936, 2677,  665, 2665, 2661, 2676, 2650,
-     2660, 2641, 2626, 2640, 2624,    0, 2629, 2635, 2610, 2615,
-     2605, 2602, 2592,    0, 2600, 2590, 2596,    0,    0,    0,
-     2600,  660, 2572,  679,  674, 7936, 2575, 2569,  682,  684,
-      687, 7936, 2550, 2568, 2565, 2552, 2558, 2539, 2547,    0,
-        0, 2549, 2546, 2532, 2519,    0,    0, 2508, 2522, 2516,
-     2518, 2520,  682, 2509,  690,  696,  700,  701, 7936,  702,
-     7936,  714, 2509,    0, 2492,    0, 2475,    0, 2464, 2476,
-
-     2470,    0,    0, 2462, 2456, 2458, 2480,  696, 2464, 2461,
-      723,    0, 2437, 2437, 2431,    0, 2423, 2427, 2419, 2440,
-      711, 2411, 2405, 2417,    0,    0, 2399, 2384, 2394, 2404,
-      719, 2394, 2377, 2383, 2376, 2365, 2357, 2367,  721, 2334,
-     2332,    0,    0,    0,    0, 2357,  728, 2345, 2343, 2350,
-      729, 2321, 2320, 2324,  733, 2295, 2308, 2319,  734, 2314,
-      729, 2312,  742, 2308,  762,  772, 2308,  759,  667,  787,
-     2283, 2265, 2266, 2279,  787, 7936, 2300, 2261, 2260, 2249,
-     2272,  788, 2243, 2238,  797, 2251,  794, 2261, 2253,  802,
-     7936, 2237,  798, 2236,  800, 2233,  805, 2232,  809, 2222,
-
-      823, 2219,  834, 2216,  835, 2202,  840, 2199,  844, 2197,
-      845, 2196,  846, 2193,  855, 2184,  857, 2182,  875, 2181,
-      880, 2179,  885, 2162,  886, 2159,  890, 2156,  892, 2153,
-      897, 2149,  903, 2146,  915, 2144,  920, 2142,  925, 2139,
-      926, 2127,  932, 2116,  937, 2114,  938, 2113,  943, 2111,
-      955, 2109,  960, 2104,  966, 2102,  972, 2100,  973, 2099,
-      977, 2081,  978, 2074,  983, 2071,  995, 2070, 1006, 2069,
-     1008, 2068, 1012, 2065, 1013, 2064, 1017, 2059, 1018, 2054,
-     1023, 2043, 1043, 2034, 1048, 2031, 1052, 2029, 1053, 2028,
-     1054, 2025, 1058, 2024, 1063, 2014, 1065, 2011, 1083, 2008,
-
-     1088, 1994, 1093, 1991, 1094, 1989, 1098, 1988, 1100, 1985,
-     1105, 1976, 1111, 1974, 1123, 1973, 1128, 1971, 1133, 1954,
-     1134, 1951, 1140, 1948, 1145, 1945, 1146, 1941, 1151, 1938,
-     1163, 1936, 1168, 1934, 1174, 1931, 1180, 1919, 1181, 1908,
-     1185, 1906, 1186, 1905, 1191, 1903, 1203, 1901, 1214, 1896,
-     1216, 1894, 1220, 1892, 1221, 1891, 1225, 1873, 1226, 1866,
-     1231, 1863, 1251, 1862, 1256, 1861, 1260, 1860, 1261, 1857,
-     1262, 1856, 1266, 1851, 1271, 1846, 1273, 1835, 1291, 1826,
-     1296, 1823, 1301, 1821, 1302, 1820, 1306, 1817, 1308, 1816,
-     1313, 1806, 1319, 1803, 1331, 1800, 1336, 1786, 1341, 1783,
-
-     1342, 1781, 1348, 1780, 1353, 1777, 1354, 1768, 1359, 1766,
-     1371, 1765, 1376, 1763, 1382, 1746, 1388, 1743, 1389, 1740,
-     1393, 1737, 1394, 1733, 1399, 1730, 1411, 1728, 1422, 1726,
-     1424, 1723, 1428, 1711, 1429, 1700, 1433, 1698, 1434, 1697,
-     1439, 1695, 1459, 1693, 1464, 1688, 1468, 1686, 1469, 1684,
-     1470, 1683, 1474, 1665, 1479, 1658, 1481, 1655, 1499, 1654,
-     1504, 1653, 1509, 1652, 1510, 1649, 1514, 1648, 1516, 1643,
-     1521, 1638, 1527, 1627, 1539, 1618, 1544, 1615, 1549, 1613,
-     1550, 1612, 1556, 1609, 1561, 1608, 1562, 1598, 1567, 1595,
-     1579, 1592, 1584, 1578, 1590, 1575, 1596, 1573, 1597, 1572,
-
-     1601, 1569, 1602, 1560, 1607, 1558, 1619, 1557, 1630, 1555,
-     1632, 1538, 1636, 1535, 1637, 1532, 1641, 1529, 1642, 1525,
-     1647, 1522, 1667, 1520, 1672, 1518, 1676, 1515, 1677, 1503,
-     1678, 1492, 1682, 1490, 1687, 1489, 1689, 1487, 1707, 1485,
-     1712, 1480, 1717, 1478, 1718, 1476, 1722, 1475, 1724, 1457,
-     1729,  125, 1735,  157, 1747,  312, 1752,  340, 1757,  349,
-     1758,  364, 1764,  466, 1769,  476, 1770,  483, 1775,  499,
-     1787,  503, 1792,  530, 1798,  538, 1804,  578, 1805,  580,
-     1809,  597, 1810,  613, 1815,  627, 1827,  654, 1838,  671,
-     1840,  674, 1844,  681, 1845,  683, 1849,  686, 1850,  694,
-
-     1855,  697, 1875,  698, 1880,  704, 1884,  715, 1885,  720,
-     1886,  727, 1890,  735, 1895,  744, 1897,  747, 1915,  752,
-     1920,  754, 1925,  757, 1926,  767, 1930,  770, 1932,  777,
-     1937,  783, 1943,  785, 1955,  792, 1960,  795, 1965,  802,
-     1966,  806, 1972,  810, 1977,  813, 1978,  816, 1983,  817,
-     1995,  820, 2000,  822, 2006,  831, 2012,  833, 2013,  842,
-     2017,  851, 2018,  852, 2023,  853, 2035,  854, 2046,  856,
-     2048,  863, 2052,  865, 2053,  866, 2057,  868, 2058,  877,
-     2063,  879, 2083,  891, 2088,  894, 2092,  896, 2093,  898,
-     2094,  901, 2098,  905, 2103,  908, 2105,  911, 2123,  914,
-
-     2128,  931, 2133,  933, 2134,  934, 2138,  936, 2140,  945,
-     2145,  948, 2151,  949, 2163,  951, 2168,  954, 2173,  968,
-     2174,  971, 2180,  974, 2185,  984, 2186,  985, 2191,  988,
-     2203,  989, 2208,  991, 2214,  994, 2220, 1003, 2221, 1014,
-     2225, 1019, 2226, 1024, 2231, 1025, 2243, 1028, 2254, 1029,
-     2256, 1030, 2260, 1031, 2261, 1034, 2265, 1041, 2266, 1059,
-     2271, 1060, 2291, 1062, 2296, 1064, 2300, 1069, 2301, 1071,
-     2302, 1073, 2306, 1074, 2311, 1076, 2313, 1087, 2331, 1099,
-     2336, 1102, 2341, 1104, 2342, 1106, 2346, 1109, 2348, 1113,
-     2353, 1116, 2359, 1119, 2371, 1122, 2376, 1139, 2381, 1141,
-
-     2382, 1142, 2388, 1144, 2393, 1153, 2394, 1156, 2399, 1157,
-     2411, 1159, 2416, 1162, 2422, 1176, 2428, 1179, 2429, 1182,
-     2433, 1192, 2434, 1193, 2439, 1196, 2451, 1197, 2462, 1199,
-     2464, 1202, 2468, 1211, 2469, 1222, 2473, 1227, 2474, 1232,
-     2479, 1233, 2499, 1236, 2504, 1237, 2508, 1238, 2509, 1239,
-     2510, 1242, 2514, 1249, 2519, 1267, 2521, 1268, 2539, 1270,
-     2544, 1272, 2549, 1277, 2550, 1279, 2554, 1281, 2556, 1282,
-     2561, 1284, 2567, 1295, 2579, 1307, 2584, 1310, 2589, 1312,
-     2590, 1314, 2596, 1317, 2601, 1321, 2602, 1324, 2607, 1327,
-     2619, 1330, 2624, 1347, 2630, 1349, 2636, 1350, 2637, 1352,
-
-     2641, 1361, 2642, 1364, 2647, 1365, 2659, 1367, 2670, 1370,
-     2672, 1384, 2676, 1387, 2677, 1390, 2681, 1400, 2682, 1401,
-     2687, 1404, 2707, 1405, 2712, 1407, 2716, 1410, 2717, 1419,
-     2718, 1430, 2722, 1435, 2727, 1440, 2729, 1441, 2747, 1444,
-     2752, 1445, 2757, 1446, 2758, 1447, 2762, 7936, 2764, 7936,
-     2816, 2828, 2840, 2852, 2864, 2876, 2888, 1463, 2900, 2904,
-     2915, 2926, 2930, 2942, 2952, 2956, 2960, 2972, 2984, 2996,
-     3000, 3012, 3023, 3035, 3045, 3057, 3069, 3081, 3093, 3105,
-     3117, 3129, 3141, 3153, 3165, 3177, 3189, 3201, 3213, 3225,
-     3237, 3249, 3261, 3273, 3285, 3297, 3309, 3321, 3333, 3345,
-
-     3357, 3369, 3381, 3393, 3405, 3417, 3429, 3441, 3453, 3465,
-     3477, 3489, 3501, 3513, 3525, 3537, 3549, 3561, 3573, 3585,
-     3597, 3609, 3621, 3633, 3645, 3657, 3669, 3681, 3693, 3705,
-     3717, 3729, 3741, 3753, 3765, 3777, 3789, 3801, 3813, 3825,
-     3837, 3849, 3861, 3873, 3885, 3897, 3909, 3921, 3933, 3945,
-     3957, 3969, 3981, 3993, 4005, 4017, 4029, 4041, 4053, 4065,
-     4077, 4089, 4101, 4113, 4125, 4137, 4149, 4161, 4173, 4185,
-     4197, 4209, 4221, 4233, 4245, 4257, 4269, 4281, 4293, 4305,
-     4317, 4329, 4341, 4353, 4365, 4377, 4389, 4401, 4413, 4425,
-     4437, 4449, 4461, 4473, 4485, 4497, 4509, 4521, 4533, 4545,
-
-     4557, 4569, 4581, 4593, 4605, 4617, 4629, 4641, 4653, 4665,
-     4677, 4689, 4701, 4713, 4725, 4737, 4749, 4761, 4773, 4785,
-     4797, 4809, 4821, 4833, 4845, 4857, 4869, 4881, 4893, 4905,
-     4917, 4929, 4941, 4953, 4965, 4977, 4989, 5001, 5013, 5025,
-     5037, 5049, 5061, 5073, 5085, 5097, 5109, 5121, 5133, 5145,
-     5157, 5169, 5181, 5193, 5205, 5217, 5229, 5241, 5253, 5265,
-     5277, 5289, 5301, 5313, 5325, 5337, 5349, 5361, 5373, 5385,
-     5397, 5409, 5421, 5433, 5445, 5457, 5469, 5481, 5493, 5505,
-     5517, 5529, 5541, 5553, 5565, 5577, 5589, 5601, 5613, 5625,
-     5637, 5649, 5661, 5673, 5685, 5697, 5709, 5721, 5733, 5745,
-
-     5757, 5769, 5781, 5793, 5805, 5817, 5829, 5841, 5853, 5865,
-     5877, 5889, 5901, 5913, 5925, 5937, 5949, 5961, 5973, 5985,
-     5997, 6009, 6021, 6033, 6045, 6057, 6069, 6081, 6093, 6105,
-     6117, 6129, 6141, 6153, 6165, 6177, 6189, 6201, 6213, 6225,
-     6237, 6249, 6261, 6273, 6285, 6297, 6309, 6321, 6333, 6345,
-     6357, 6369, 6381, 6393, 6405, 6417, 6429, 6441, 6453, 6465,
-     6477, 6489, 6501, 6513, 6525, 6537, 6549, 6561, 6573, 6585,
-     6597, 6609, 6621, 6633, 6645, 6657, 6669, 6681, 6693, 6705,
-     6717, 6729, 6741, 6753, 6765, 6777, 6789, 6801, 6813, 6825,
-     6837, 6849, 6861, 6873, 6885, 6897, 6909, 6921, 6933, 6945,
-
-     6957, 6969, 6981, 6993, 7005, 7017, 7029, 7041, 7053, 7065,
-     7077, 7089, 7101, 7113, 7125, 7137, 7149, 7161, 7173, 7185,
-     7197, 7209, 7221, 7233, 7245, 7257, 7269, 7281, 7293, 7305,
-     7317, 7329, 7341, 7353, 7365, 7377, 7389, 7401, 7413, 7425,
-     7437, 7449, 7461, 7473, 7485, 7497, 7509, 7521, 7533, 7545,
-     7557, 7569, 7581, 7593, 7605, 7617, 7629, 7641, 7653, 7665,
-     7677, 7689, 7701, 7713, 7725, 7737, 7749, 7761, 7773, 7785
-    } ;
-
-static yyconst short int yy_def[1771] =
-    {   0,
-     1351, 1351, 1350,    3, 1350,    5, 1352, 1352,    5,    5,
-        5,    5, 1350,   13, 1350,   15, 1353, 1353, 1354, 1354,
-     1350, 1355, 1356, 1350, 1350, 1350, 1357, 1350, 1358, 1350,
-     1350, 1359, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1360, 1350, 1360,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1350, 1350,
-     1350, 1361, 1350, 1350, 1361, 1350, 1350, 1350, 1362, 1363,
-     1350, 1350, 1364, 1350, 1364, 1350, 1362, 1350, 1350, 1361,
-     1362, 1365, 1350, 1366, 1350, 1367, 1368, 1350, 1369, 1350,
-
-     1350, 1350, 1350, 1350, 1370, 1355, 1355, 1350, 1350, 1350,
-     1350, 1350, 1357, 1350, 1357, 1371, 1350, 1350, 1350, 1350,
-     1359, 1350, 1359,   33, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1360,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1350, 1350, 1361,
-
-     1350, 1350, 1361, 1350, 1350, 1350, 1350, 1350, 1350, 1363,
-     1350, 1350, 1364, 1364, 1350, 1350, 1350, 1350, 1350, 1361,
-     1350, 1350, 1365, 1350, 1366, 1367, 1368, 1350, 1369, 1350,
-     1350, 1372, 1370, 1350, 1350, 1350, 1350, 1371, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1373, 1350, 1350, 1350, 1350, 1350,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1350, 1350,
-
-     1350, 1374, 1372, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1373, 1375, 1360, 1360, 1360,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
-     1360, 1360, 1360, 1360, 1360, 1350, 1350, 1376, 1374, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1375, 1360, 1360, 1360, 1360,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
-
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1377,
-     1376, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1360, 1360, 1360,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
-     1378, 1377, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
-     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
-     1360, 1379, 1378, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
-
-     1360, 1360, 1360, 1360, 1360, 1360, 1380, 1379, 1350, 1350,
-     1350, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1381,
-     1380, 1350, 1350, 1360, 1360, 1360, 1360, 1360, 1360, 1382,
-     1381, 1350, 1350, 1360, 1360, 1360, 1360, 1383, 1382, 1350,
-     1350, 1360, 1360, 1360, 1360, 1384, 1383, 1350, 1350, 1385,
-     1384, 1350, 1350, 1386, 1385, 1350, 1350, 1387, 1386, 1350,
-     1350, 1388, 1387, 1350, 1350, 1350, 1389, 1388, 1350, 1350,
-     1350, 1350, 1350, 1390, 1389, 1350, 1350, 1350, 1350, 1350,
-     1391, 1390, 1350, 1350, 1350, 1392, 1391, 1350, 1350, 1350,
-     1350, 1393, 1392, 1394, 1393, 1395, 1394, 1396, 1395, 1397,
-
-     1396, 1398, 1397, 1399, 1398, 1400, 1399, 1401, 1400, 1402,
-     1401, 1403, 1402, 1404, 1403, 1405, 1404, 1406, 1405, 1407,
-     1406, 1408, 1407, 1409, 1408, 1410, 1409, 1411, 1410, 1412,
-     1411, 1413, 1412, 1414, 1413, 1415, 1414, 1416, 1415, 1417,
-     1416, 1418, 1417, 1419, 1418, 1420, 1419, 1421, 1420, 1422,
-     1421, 1423, 1422, 1424, 1423, 1425, 1424, 1426, 1425, 1427,
-     1426, 1428, 1427, 1429, 1428, 1430, 1429, 1431, 1430, 1432,
-     1431, 1433, 1432, 1434, 1433, 1435, 1434, 1436, 1435, 1437,
-     1436, 1438, 1437, 1439, 1438, 1440, 1439, 1441, 1440, 1442,
-     1441, 1443, 1442, 1444, 1443, 1445, 1444, 1446, 1445, 1447,
-
-     1446, 1448, 1447, 1449, 1448, 1450, 1449, 1451, 1450, 1452,
-     1451, 1453, 1452, 1454, 1453, 1455, 1454, 1456, 1455, 1457,
-     1456, 1458, 1457, 1459, 1458, 1460, 1459, 1461, 1460, 1462,
-     1461, 1463, 1462, 1464, 1463, 1465, 1464, 1466, 1465, 1467,
-     1466, 1468, 1467, 1469, 1468, 1470, 1469, 1471, 1470, 1472,
-     1471, 1473, 1472, 1474, 1473, 1475, 1474, 1476, 1475, 1477,
-     1476, 1478, 1477, 1479, 1478, 1480, 1479, 1481, 1480, 1482,
-     1481, 1483, 1482, 1484, 1483, 1485, 1484, 1486, 1485, 1487,
-     1486, 1488, 1487, 1489, 1488, 1490, 1489, 1491, 1490, 1492,
-     1491, 1493, 1492, 1494, 1493, 1495, 1494, 1496, 1495, 1497,
-
-     1496, 1498, 1497, 1499, 1498, 1500, 1499, 1501, 1500, 1502,
-     1501, 1503, 1502, 1504, 1503, 1505, 1504, 1506, 1505, 1507,
-     1506, 1508, 1507, 1509, 1508, 1510, 1509, 1511, 1510, 1512,
-     1511, 1513, 1512, 1514, 1513, 1515, 1514, 1516, 1515, 1517,
-     1516, 1518, 1517, 1519, 1518, 1520, 1519, 1521, 1520, 1522,
-     1521, 1523, 1522, 1524, 1523, 1525, 1524, 1526, 1525, 1527,
-     1526, 1528, 1527, 1529, 1528, 1530, 1529, 1531, 1530, 1532,
-     1531, 1533, 1532, 1534, 1533, 1535, 1534, 1536, 1535, 1537,
-     1536, 1538, 1537, 1539, 1538, 1540, 1539, 1541, 1540, 1542,
-     1541, 1543, 1542, 1544, 1543, 1545, 1544, 1546, 1545, 1547,
-
-     1546, 1548, 1547, 1549, 1548, 1550, 1549, 1551, 1550, 1552,
-     1551, 1553, 1552, 1554, 1553, 1555, 1554, 1556, 1555, 1557,
-     1556, 1558, 1557, 1559, 1558, 1560, 1559, 1561, 1560, 1562,
-     1561, 1563, 1562, 1564, 1563, 1565, 1564, 1566, 1565, 1567,
-     1566, 1568, 1567, 1569, 1568, 1570, 1569, 1571, 1570, 1572,
-     1571, 1573, 1572, 1574, 1573, 1575, 1574, 1576, 1575, 1577,
-     1576, 1578, 1577, 1579, 1578, 1580, 1579, 1581, 1580, 1582,
-     1581, 1583, 1582, 1584, 1583, 1585, 1584, 1586, 1585, 1587,
-     1586, 1588, 1587, 1589, 1588, 1590, 1589, 1591, 1590, 1592,
-     1591, 1593, 1592, 1594, 1593, 1595, 1594, 1596, 1595, 1597,
-
-     1596, 1598, 1597, 1599, 1598, 1600, 1599, 1601, 1600, 1602,
-     1601, 1603, 1602, 1604, 1603, 1605, 1604, 1606, 1605, 1607,
-     1606, 1608, 1607, 1609, 1608, 1610, 1609, 1611, 1610, 1612,
-     1611, 1613, 1612, 1614, 1613, 1615, 1614, 1616, 1615, 1617,
-     1616, 1618, 1617, 1619, 1618, 1620, 1619, 1621, 1620, 1622,
-     1621, 1623, 1622, 1624, 1623, 1625, 1624, 1626, 1625, 1627,
-     1626, 1628, 1627, 1629, 1628, 1630, 1629, 1631, 1630, 1632,
-     1631, 1633, 1632, 1634, 1633, 1635, 1634, 1636, 1635, 1637,
-     1636, 1638, 1637, 1639, 1638, 1640, 1639, 1641, 1640, 1642,
-     1641, 1643, 1642, 1644, 1643, 1645, 1644, 1646, 1645, 1647,
-
-     1646, 1648, 1647, 1649, 1648, 1650, 1649, 1651, 1650, 1652,
-     1651, 1653, 1652, 1654, 1653, 1655, 1654, 1656, 1655, 1657,
-     1656, 1658, 1657, 1659, 1658, 1660, 1659, 1661, 1660, 1662,
-     1661, 1663, 1662, 1664, 1663, 1665, 1664, 1666, 1665, 1667,
-     1666, 1668, 1667, 1669, 1668, 1670, 1669, 1671, 1670, 1672,
-     1671, 1673, 1672, 1674, 1673, 1675, 1674, 1676, 1675, 1677,
-     1676, 1678, 1677, 1679, 1678, 1680, 1679, 1681, 1680, 1682,
-     1681, 1683, 1682, 1684, 1683, 1685, 1684, 1686, 1685, 1687,
-     1686, 1688, 1687, 1689, 1688, 1690, 1689, 1691, 1690, 1692,
-     1691, 1693, 1692, 1694, 1693, 1695, 1694, 1696, 1695, 1697,
-
-     1696, 1698, 1697, 1699, 1698, 1700, 1699, 1701, 1700, 1702,
-     1701, 1703, 1702, 1704, 1703, 1705, 1704, 1706, 1705, 1707,
-     1706, 1708, 1707, 1709, 1708, 1710, 1709, 1711, 1710, 1712,
-     1711, 1713, 1712, 1714, 1713, 1715, 1714, 1716, 1715, 1717,
-     1716, 1718, 1717, 1719, 1718, 1720, 1719, 1721, 1720, 1722,
-     1721, 1723, 1722, 1724, 1723, 1725, 1724, 1726, 1725, 1727,
-     1726, 1728, 1727, 1729, 1728, 1730, 1729, 1731, 1730, 1732,
-     1731, 1733, 1732, 1734, 1733, 1735, 1734, 1736, 1735, 1737,
-     1736, 1738, 1737, 1739, 1738, 1740, 1739, 1741, 1740, 1742,
-     1741, 1743, 1742, 1744, 1743, 1745, 1744, 1746, 1745, 1747,
-
-     1746, 1748, 1747, 1749, 1748, 1750, 1749, 1751, 1750, 1752,
-     1751, 1753, 1752, 1754, 1753, 1755, 1754, 1756, 1755, 1757,
-     1756, 1758, 1757, 1759, 1758, 1760, 1759, 1761, 1760, 1762,
-     1761, 1763, 1762, 1764, 1763, 1765, 1764, 1766, 1765, 1767,
-     1766, 1768, 1767, 1769, 1768, 1770, 1769, 1350, 1770,    0,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350
-    } ;
-
-static yyconst short int yy_nxt[7999] =
-    {   0,
-       24,   25,   25,   25,   26,   27,   28,   29,   30,   31,
-       32,   33,   34,   35,   36,   34,   37,   38,   39,   40,
-       41,   41,   42,   34,   43,   44,   45,   46,   34,   24,
-       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
-       57,   58,   57,   57,   59,   57,   60,   61,   62,   57,
-       63,   64,   57,   65,   66,   67,   68,   57,   57,   69,
-       70,   71,   24,   72,   72,   72,   72,   73,   72,   74,
-       72,   72,   72,   72,   72,   72,   72,   72,   75,   72,
-       72,   76,   77,   77,   72,   72,   72,   72,   72,   72,
-       78,   79,   72,   80,   81,   80,   80,   80,   80,   80,
-
-       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
-       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
-       80,   82,   72,   78,   84,   84,   86,   86,   89,  108,
-      111,  111,  111,   90,  100,  101,  114,  117,  118,  114,
-      102,  100,  101,   85,   85,  122,  119,  102,  109,  955,
-       87,   87,   91,   88,   88,   89,   89,  135,  103,  104,
-      115,   90,  120,  115,  123,  103,  104,  137,  136,  140,
-      140,  140,  110,  154,  155,  141,  138,  139,  156,  157,
-       91,  957,   92,   89,   92,   92,   92,   92,   92,   92,
-       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
-
-       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
-       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
-       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
-       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
-       93,   94,   93,   94,   94,   94,   94,   94,   94,   94,
-       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
-       94,   94,   94,   94,   94,   94,   94,   94,   94,   93,
-       93,   93,   95,   95,   95,   95,   95,   95,   95,   95,
-       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
-       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
-
-       95,   95,   95,   96,   95,   96,   96,   96,   96,   96,
-       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
-       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
-       96,   95,   95,   95,  124,  142,  959,  198,  150,  145,
-      143,  146,  146,  146,  151,  152,  153,  144,  145,  162,
-      146,  146,  146,  163,  164,  179,  187,  191,  193,  147,
-      192,  180,  188,  194,  961,  166,  125,  126,  147,  127,
-      167,  128,  199,  963,  129,  234,  168,  170,  148,  169,
-      130,  171,  173,  131,  132, 1350,  133,  172,  965,  182,
-      113,  174,  175,  176,  204,  204,  204,  183,  235,  239,
-
-      240,  177,  184,  178,  201,  201,  201,  201,  201,  201,
-      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
-      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
-      201,  201,  201,  201,  201,  116,  201,  116,  116,  116,
-      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
-      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
-      116,  116,  116,  202,  201,  201,  204,  204,  204,  207,
-      215,  219,  208,  208,  219, 1350,  219,  208,  208,  220,
-      122,  221,  222,  208,  208,  218,  111,  111,  111,  216,
-      967, 1350,  255,  256, 1350,  140,  140,  140,  219,  123,
-
-      969,  219,  224,  205,  250,  250,  250,  971,  145,  209,
-      146,  146,  146,  147,  209,  253,  253,  253, 1350,  251,
-      209,  251,  147,  973,  252,  252,  252,  975,  147,  253,
-      253,  253,  253,  253,  253,  259,  260,  261,  271,  279,
-      262,  272,  290,  300,  300,  291,  263,  204,  204,  204,
-      280,  299,  299,  299,  977,  219,  219,  301,  301,  301,
-      219,  220,  979,  221,  222,  299,  299,  299,  299,  299,
-      299,  301,  301,  301,  301,  301,  301,  221,  222, 1350,
-      327,  328,  219,  219,  224,  250,  250,  250,  252,  252,
-      252,  252,  252,  252,  319, 1350,  356,  356, 1350,  253,
-
-      253,  253,  981,  147,  983,  334,  320,  335,  374,  375,
-      336,  374,  375,  253,  253,  253,  253,  253,  253, 1350,
-      337,  985, 1350,  366,  338,  299,  299,  299,  412,  412,
-      413,  357,  357,  357,  367, 1350, 1350,  987, 1350,  299,
-      299,  299,  299,  299,  299,  357,  357,  357,  357,  357,
-      357,  989, 1350,  417,  366, 1350,  423, 1350,  414,  368,
-      455,  417, 1350,  423,  418,  367,  461,  424, 1350,  576,
-      577,  456,  418, 1350,  424,  455, 1350,  462,  991, 1350,
-      485,  485,  485,  488, 1350,  490,  456, 1350,  461,  419,
-     1350,  485,  485,  485,  489,  993,  491,  417,  995,  462,
-
-     1350,  366,  488,  490, 1350,  997, 1350,  999,  418, 1350,
-     1001, 1350,  367,  489,  491,  511,  511,  511, 1003, 1350,
-     1350, 1005, 1007, 1350,  511,  511,  511, 1350, 1009, 1350,
-      565,  565,  565, 1350,  510, 1350, 1350, 1350, 1350, 1011,
-      158, 1350, 1350, 1350, 1013, 1350, 1350, 1350, 1350,  158,
-     1350, 1015, 1350, 1350,  566, 1350, 1350, 1350, 1350, 1017,
-     1350, 1350, 1350,  565,  565,  565, 1350, 1350, 1019, 1350,
-     1350, 1021, 1350,  570,  570,  570, 1023,  571, 1025, 1350,
-     1350, 1027,  572, 1350, 1350, 1350, 1350,  566,  570,  570,
-      570, 1029,  571, 1350, 1031, 1350, 1350,  572,  590,  590,
-
-      590, 1033, 1350,  590,  590,  590, 1350, 1035, 1350, 1037,
-     1350, 1350, 1350, 1350, 1350, 1350, 1039, 1350, 1350, 1041,
-      573, 1350, 1350,  591, 1350, 1350, 1043, 1350,  591, 1350,
-     1045, 1350, 1350, 1350, 1047,  573, 1350, 1049, 1350, 1350,
-     1051, 1053, 1350, 1350, 1055, 1350, 1057, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1059, 1350, 1061, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1063, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1065, 1067, 1069, 1071, 1350,
-     1073, 1350, 1350, 1350, 1350, 1350, 1350, 1075, 1350, 1077,
-     1079, 1350, 1081, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-
-     1350, 1083, 1350, 1085, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1087, 1350, 1350, 1089, 1350,
-     1091, 1350, 1093, 1350, 1350, 1095, 1350, 1350, 1350, 1097,
-     1350, 1350, 1099, 1350, 1350, 1101, 1350, 1350, 1103, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1105, 1350, 1107, 1109, 1350,
-     1111, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1113,
-     1350, 1350, 1115, 1117, 1350, 1119, 1350, 1350, 1121, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1123, 1350, 1350, 1125, 1350, 1350, 1127, 1350,
-
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1129, 1131,
-     1350, 1350, 1133, 1135, 1350, 1137, 1350, 1350, 1139, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1141, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1143, 1350,
-     1350, 1350, 1350, 1145, 1350, 1350, 1350, 1350, 1147, 1149,
-     1350, 1350, 1151, 1153, 1155, 1157, 1350, 1350, 1159, 1350,
-     1350, 1350, 1350, 1350, 1350, 1161, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1163, 1165, 1350, 1167, 1350, 1169, 1350,
-     1350, 1350, 1350, 1171, 1350, 1173, 1350, 1175, 1177, 1350,
-
-     1179, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1181, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1183, 1350, 1350, 1185, 1350, 1187, 1350,
-     1189, 1350, 1350, 1191, 1350, 1350, 1350, 1193, 1350, 1350,
-     1195, 1350, 1350, 1197, 1350, 1350, 1199, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1201, 1350, 1203, 1205, 1350, 1207, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1209, 1350, 1350,
-     1211, 1213, 1350, 1215, 1350, 1350, 1217, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-
-     1219, 1350, 1350, 1221, 1350, 1350, 1223, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1225, 1227, 1350, 1350,
-     1229, 1231, 1350, 1233, 1350, 1350, 1235, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1237, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1239, 1350, 1350, 1350,
-     1350, 1241, 1350, 1350, 1350, 1350, 1243, 1245, 1350, 1350,
-     1247, 1249, 1251, 1253, 1350, 1350, 1255, 1350, 1350, 1350,
-     1350, 1350, 1350, 1257, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1259, 1261, 1350, 1263, 1350, 1265, 1350, 1350, 1350,
-
-     1350, 1267, 1350, 1269, 1350, 1271, 1273, 1350, 1275, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1277,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1279, 1350, 1350, 1281, 1350, 1283, 1350, 1285, 1350,
-     1350, 1287, 1350, 1350, 1350, 1289, 1350, 1350, 1291, 1350,
-     1350, 1293, 1350, 1350, 1295, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1297, 1350, 1299, 1301, 1350, 1303, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1305, 1350, 1350, 1307, 1309,
-     1350, 1311, 1350, 1350, 1313, 1350, 1350, 1350, 1350, 1350,
-
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1315, 1350,
-     1350, 1317, 1350, 1350, 1319, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1321, 1323, 1350, 1350, 1325, 1327,
-     1350, 1329, 1350, 1350, 1331, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1333, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1335, 1350, 1350, 1350, 1350, 1337,
-     1350, 1350, 1350, 1350, 1339, 1341, 1350, 1350, 1343, 1345,
-     1347, 1349, 1350, 1350,  116, 1350, 1350, 1350, 1350, 1350,
-     1350,  953, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  951,
-
-      949, 1350,  947, 1350,  945, 1350, 1350, 1350, 1350,  943,
-     1350,  941, 1350,  939,  937, 1350,  935, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350,  933, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  931,
-     1350, 1350,  929, 1350,  927, 1350,  925, 1350, 1350,  923,
-     1350, 1350, 1350,  921, 1350, 1350,  919, 1350, 1350,  917,
-     1350, 1350,  915, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  913,
-     1350,  911,  909, 1350,  907, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350,  905, 1350, 1350,  903,  901, 1350,  899,
-
-     1350, 1350,  897, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350,  895, 1350, 1350,  893,
-     1350, 1350,  891, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350,  889,  887, 1350, 1350,  885,  883, 1350,  881,
-     1350, 1350,  879, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350,  877, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350,  875, 1350, 1350, 1350, 1350,  873, 1350, 1350,
-     1350, 1350,  871,  869, 1350, 1350,  867,  865,  863,  861,
-     1350, 1350,  859, 1350, 1350, 1350, 1350, 1350, 1350,  857,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-
-     1350, 1350, 1350, 1350, 1350, 1350, 1350,  855,  853, 1350,
-      851, 1350,  849, 1350, 1350, 1350, 1350,  847, 1350,  845,
-     1350,  843,  841, 1350,  839, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350,  837, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350,  835, 1350, 1350,
-      833, 1350,  831, 1350,  829, 1350, 1350,  827, 1350, 1350,
-     1350,  825, 1350, 1350,  823, 1350, 1350,  821, 1350, 1350,
-      819, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350,  817, 1350,  815,
-      813, 1350,  811, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-
-     1350,  809, 1350, 1350,  807,  805, 1350,  803, 1350, 1350,
-      801, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350,  799, 1350, 1350,  797, 1350, 1350,
-      795, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-      793,  791, 1350, 1350,  789,  787, 1350,  785, 1350, 1350,
-      783, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  781,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-      779, 1350, 1350, 1350, 1350,  777, 1350, 1350, 1350, 1350,
-      775,  773, 1350, 1350,  771,  769,  767,  765, 1350, 1350,
-      763, 1350, 1350, 1350, 1350, 1350, 1350,  761, 1350, 1350,
-
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350,  759,  757, 1350,  755, 1350,
-      753, 1350, 1350, 1350, 1350,  751, 1350,  749, 1350,  747,
-      745, 1350,  743, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350,  741, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350,  739, 1350, 1350,  737, 1350,
-      735, 1350,  733, 1350, 1350,  731, 1350, 1350, 1350,  729,
-     1350, 1350,  727, 1350, 1350,  725, 1350, 1350,  723, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350,  721, 1350,  719,  717, 1350,
-
-      715, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  713,
-     1350, 1350,  711,  709, 1350,  707, 1350, 1350,  705, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350,  703, 1350, 1350,  701, 1350, 1350,  699, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  697,  695,
-     1350, 1350,  693,  691, 1350,  689, 1350, 1350,  687, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350,  685, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  683, 1350,
-     1350, 1350, 1350,  681, 1350, 1350, 1350, 1350,  679,  677,
-     1350, 1350,  675,  673,  671,  669, 1350, 1350,  667, 1350,
-
-     1350, 1350, 1350, 1350, 1350,  665, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350,  663,  661, 1350,  659, 1350,  657, 1350,
-     1350, 1350, 1350,  655, 1350,  653, 1350,  651,  649, 1350,
-      647, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350,  645, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350,  643, 1350, 1350,  641, 1350,  639, 1350,
-      637, 1350, 1350,  635, 1350, 1350, 1350,  633, 1350, 1350,
-      631, 1350, 1350,  629, 1350, 1350,  627, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-
-     1350, 1350, 1350,  625, 1350,  623,  621, 1350,  619, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350,  617, 1350, 1350,
-      615,  613, 1350,  611, 1350, 1350,  609, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-      607, 1350, 1350,  605, 1350, 1350,  603, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350,  601,  599, 1350, 1350,
-      597,  595, 1350,  585, 1350, 1350,  585, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350,  593, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350,  589, 1350, 1350, 1350,
-     1350,  588, 1350, 1350, 1350, 1350,  587,  585, 1350, 1350,
-
-      584,  583,  576,  582, 1350, 1350,  580, 1350, 1350, 1350,
-     1350, 1350, 1350,  579, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350,  578,  575, 1350,  569, 1350,  568, 1350, 1350, 1350,
-     1350,  564, 1350,  563, 1350,  561,  560, 1350,  559, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  557,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350,  556, 1350, 1350,  555, 1350,  553, 1350,  552, 1350,
-     1350,  551, 1350, 1350, 1350,  549, 1350, 1350,  548, 1350,
-     1350,  547, 1350, 1350,  545, 1350, 1350, 1350, 1350, 1350,
-
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350,  544, 1350,  543,  542, 1350,  541, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350,  540, 1350, 1350,  539,  537,
-     1350,  536, 1350, 1350,  535, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  534, 1350,
-     1350,  533, 1350, 1350,  532, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350,  531,  529, 1350, 1350,  528,  527,
-     1350,  526, 1350, 1350,  525, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350,  524, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350,  523, 1350, 1350, 1350, 1350,  522,
-
-     1350, 1350, 1350, 1350,  521,  519, 1350, 1350,  518,  517,
-      516,  515, 1350, 1350,  514, 1350, 1350, 1350, 1350, 1350,
-     1350,  503, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  513,
-      512, 1350,  509, 1350,  508, 1350, 1350, 1350, 1350,  506,
-     1350,  505, 1350,  504,  503, 1350,  502, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350,  501, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  500,
-     1350, 1350,  499, 1350,  498, 1350,  497, 1350, 1350,  496,
-     1350, 1350, 1350,  495, 1350, 1350,  494, 1350, 1350,  493,
-
-     1350, 1350,  492, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  487,
-     1350,  486,  484, 1350,  483, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350,  481, 1350, 1350,  480,  479, 1350,  478,
-     1350, 1350,  477, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350,  476, 1350, 1350,  475,
-     1350, 1350,  474, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350,  473,  472, 1350, 1350,  471,  470, 1350,  469,
-     1350, 1350,  468, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350,  467, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-
-     1350, 1350,  466, 1350, 1350, 1350, 1350,  465, 1350, 1350,
-     1350, 1350,  464,  463, 1350, 1350,  460,  459,  458,  370,
-     1350, 1350,  457, 1350, 1350, 1350, 1350, 1350, 1350,  454,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350,  453,  412, 1350,
-      452, 1350,  450, 1350, 1350, 1350, 1350,  449, 1350,  448,
-     1350,  447,  446, 1350,  445, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350,  444, 1350,  443, 1350, 1350,
-     1350, 1350, 1350,  442, 1350, 1350, 1350,  441, 1350, 1350,
-      440, 1350,  439,  438,  437,  436,  435,  434, 1350,  433,
-
-      432,  431,  430, 1350,  429,  428,  374,  427, 1350, 1350,
-      426,  425,  422, 1350,  421, 1350,   22,   22,   22,   22,
-       22,   22,   22,   22,   22,   22,   22,   22,   83,   83,
-       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
-       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
-       97,   97,   99,   99,   99,   99,   99,   99,   99,   99,
-       99,   99,   99,   99,  105,  105,  105,  105,  105,  105,
-      105,  105,  105,  105,  105,  105,  107,  107,  107,  107,
-      107,  107,  107,  107,  107,  107,  370,  107,  113,  113,
-      113,  113,  420,  113,  113,  113,  113,  113,  113,  113,
-
-      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
-      121,  121,  160,  416,  415,  160,  200,  200,  200,  411,
-      200,  200,  200,  409,  200,  200,  206,  206,  206,  206,
-      206,  206,  206,  206,  206,  206,  206,  206,  210,  408,
-      407,  210,  213,  213,  213,  213,  213,  213,  406,  213,
-      213,  213,  213,  213,  223,  405,  404,  403,  402,  401,
-      223,  223,  400,  223,  225,  399,  398,  225,  226,  397,
-      396,  226,  227,  227,  227,  227,  227,  227,  227,  395,
-      227,  227,  227,  227,  229,  229,  394,  229,  229,  393,
-      229,  229,  229,  229,  229,  229,  232,  232,  232,  232,
-
-      232,  232,  232,  232,  232,  232,  232,  232,  238,  392,
-      391,  238,  302,  302,  302,  302,  302,  302,  302,  302,
-      302,  302,  302,  302,  317,  390,  389,  388,  387,  386,
-      385,  384,  383,  382,  317,  358,  358,  358,  358,  358,
-      358,  358,  358,  358,  358,  358,  358,  376,  381,  380,
-      379,  378,  377,  376,  316,  373,  376,  410,  410,  410,
-      410,  410,  410,  410,  410,  410,  410,  410,  410,  451,
-      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
-      451,  482,  482,  482,  482,  482,  482,  482,  482,  482,
-      482,  482,  482,  507,  507,  507,  507,  507,  507,  507,
-
-      507,  507,  507,  507,  507,  520,  520,  520,  520,  520,
-      520,  520,  520,  520,  520,  520,  520,  530,  530,  530,
-      530,  530,  530,  530,  530,  530,  530,  530,  530,  538,
-      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
-      538,  546,  546,  546,  546,  546,  546,  546,  546,  546,
-      546,  546,  546,  550,  550,  550,  550,  550,  550,  550,
-      550,  550,  550,  550,  550,  554,  554,  554,  554,  554,
-      554,  554,  554,  554,  554,  554,  554,  558,  558,  558,
-      558,  558,  558,  558,  558,  558,  558,  558,  558,  562,
-      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
-
-      562,  567,  567,  567,  567,  567,  567,  567,  567,  567,
-      567,  567,  567,  574,  574,  574,  574,  574,  574,  574,
-      574,  574,  574,  574,  574,  581,  581,  581,  581,  581,
-      581,  581,  581,  581,  581,  581,  581,  586,  586,  586,
-      586,  586,  586,  586,  586,  586,  586,  586,  586,  592,
-      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
-      592,  594,  594,  594,  594,  594,  594,  594,  594,  594,
-      594,  594,  594,  596,  596,  596,  596,  596,  596,  596,
-      596,  596,  596,  596,  596,  598,  598,  598,  598,  598,
-      598,  598,  598,  598,  598,  598,  598,  600,  600,  600,
-
-      600,  600,  600,  600,  600,  600,  600,  600,  600,  602,
-      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
-      602,  604,  604,  604,  604,  604,  604,  604,  604,  604,
-      604,  604,  604,  606,  606,  606,  606,  606,  606,  606,
-      606,  606,  606,  606,  606,  608,  608,  608,  608,  608,
-      608,  608,  608,  608,  608,  608,  608,  610,  610,  610,
-      610,  610,  610,  610,  610,  610,  610,  610,  610,  612,
-      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
-      612,  614,  614,  614,  614,  614,  614,  614,  614,  614,
-      614,  614,  614,  616,  616,  616,  616,  616,  616,  616,
-
-      616,  616,  616,  616,  616,  618,  618,  618,  618,  618,
-      618,  618,  618,  618,  618,  618,  618,  620,  620,  620,
-      620,  620,  620,  620,  620,  620,  620,  620,  620,  622,
-      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
-      622,  624,  624,  624,  624,  624,  624,  624,  624,  624,
-      624,  624,  624,  626,  626,  626,  626,  626,  626,  626,
-      626,  626,  626,  626,  626,  628,  628,  628,  628,  628,
-      628,  628,  628,  628,  628,  628,  628,  630,  630,  630,
-      630,  630,  630,  630,  630,  630,  630,  630,  630,  632,
-      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
-
-      632,  634,  634,  634,  634,  634,  634,  634,  634,  634,
-      634,  634,  634,  636,  636,  636,  636,  636,  636,  636,
-      636,  636,  636,  636,  636,  638,  638,  638,  638,  638,
-      638,  638,  638,  638,  638,  638,  638,  640,  640,  640,
-      640,  640,  640,  640,  640,  640,  640,  640,  640,  642,
-      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
-      642,  644,  644,  644,  644,  644,  644,  644,  644,  644,
-      644,  644,  644,  646,  646,  646,  646,  646,  646,  646,
-      646,  646,  646,  646,  646,  648,  648,  648,  648,  648,
-      648,  648,  648,  648,  648,  648,  648,  650,  650,  650,
-
-      650,  650,  650,  650,  650,  650,  650,  650,  650,  652,
-      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
-      652,  654,  654,  654,  654,  654,  654,  654,  654,  654,
-      654,  654,  654,  656,  656,  656,  656,  656,  656,  656,
-      656,  656,  656,  656,  656,  658,  658,  658,  658,  658,
-      658,  658,  658,  658,  658,  658,  658,  660,  660,  660,
-      660,  660,  660,  660,  660,  660,  660,  660,  660,  662,
-      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
-      662,  664,  664,  664,  664,  664,  664,  664,  664,  664,
-      664,  664,  664,  666,  666,  666,  666,  666,  666,  666,
-
-      666,  666,  666,  666,  666,  668,  668,  668,  668,  668,
-      668,  668,  668,  668,  668,  668,  668,  670,  670,  670,
-      670,  670,  670,  670,  670,  670,  670,  670,  670,  672,
-      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
-      672,  674,  674,  674,  674,  674,  674,  674,  674,  674,
-      674,  674,  674,  676,  676,  676,  676,  676,  676,  676,
-      676,  676,  676,  676,  676,  678,  678,  678,  678,  678,
-      678,  678,  678,  678,  678,  678,  678,  680,  680,  680,
-      680,  680,  680,  680,  680,  680,  680,  680,  680,  682,
-      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
-
-      682,  684,  684,  684,  684,  684,  684,  684,  684,  684,
-      684,  684,  684,  686,  686,  686,  686,  686,  686,  686,
-      686,  686,  686,  686,  686,  688,  688,  688,  688,  688,
-      688,  688,  688,  688,  688,  688,  688,  690,  690,  690,
-      690,  690,  690,  690,  690,  690,  690,  690,  690,  692,
-      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
-      692,  694,  694,  694,  694,  694,  694,  694,  694,  694,
-      694,  694,  694,  696,  696,  696,  696,  696,  696,  696,
-      696,  696,  696,  696,  696,  698,  698,  698,  698,  698,
-      698,  698,  698,  698,  698,  698,  698,  700,  700,  700,
-
-      700,  700,  700,  700,  700,  700,  700,  700,  700,  702,
-      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
-      702,  704,  704,  704,  704,  704,  704,  704,  704,  704,
-      704,  704,  704,  706,  706,  706,  706,  706,  706,  706,
-      706,  706,  706,  706,  706,  708,  708,  708,  708,  708,
-      708,  708,  708,  708,  708,  708,  708,  710,  710,  710,
-      710,  710,  710,  710,  710,  710,  710,  710,  710,  712,
-      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
-      712,  714,  714,  714,  714,  714,  714,  714,  714,  714,
-      714,  714,  714,  716,  716,  716,  716,  716,  716,  716,
-
-      716,  716,  716,  716,  716,  718,  718,  718,  718,  718,
-      718,  718,  718,  718,  718,  718,  718,  720,  720,  720,
-      720,  720,  720,  720,  720,  720,  720,  720,  720,  722,
-      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
-      722,  724,  724,  724,  724,  724,  724,  724,  724,  724,
-      724,  724,  724,  726,  726,  726,  726,  726,  726,  726,
-      726,  726,  726,  726,  726,  728,  728,  728,  728,  728,
-      728,  728,  728,  728,  728,  728,  728,  730,  730,  730,
-      730,  730,  730,  730,  730,  730,  730,  730,  730,  732,
-      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
-
-      732,  734,  734,  734,  734,  734,  734,  734,  734,  734,
-      734,  734,  734,  736,  736,  736,  736,  736,  736,  736,
-      736,  736,  736,  736,  736,  738,  738,  738,  738,  738,
-      738,  738,  738,  738,  738,  738,  738,  740,  740,  740,
-      740,  740,  740,  740,  740,  740,  740,  740,  740,  742,
-      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
-      742,  744,  744,  744,  744,  744,  744,  744,  744,  744,
-      744,  744,  744,  746,  746,  746,  746,  746,  746,  746,
-      746,  746,  746,  746,  746,  748,  748,  748,  748,  748,
-      748,  748,  748,  748,  748,  748,  748,  750,  750,  750,
-
-      750,  750,  750,  750,  750,  750,  750,  750,  750,  752,
-      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
-      752,  754,  754,  754,  754,  754,  754,  754,  754,  754,
-      754,  754,  754,  756,  756,  756,  756,  756,  756,  756,
-      756,  756,  756,  756,  756,  758,  758,  758,  758,  758,
-      758,  758,  758,  758,  758,  758,  758,  760,  760,  760,
-      760,  760,  760,  760,  760,  760,  760,  760,  760,  762,
-      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
-      762,  764,  764,  764,  764,  764,  764,  764,  764,  764,
-      764,  764,  764,  766,  766,  766,  766,  766,  766,  766,
-
-      766,  766,  766,  766,  766,  768,  768,  768,  768,  768,
-      768,  768,  768,  768,  768,  768,  768,  770,  770,  770,
-      770,  770,  770,  770,  770,  770,  770,  770,  770,  772,
-      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
-      772,  774,  774,  774,  774,  774,  774,  774,  774,  774,
-      774,  774,  774,  776,  776,  776,  776,  776,  776,  776,
-      776,  776,  776,  776,  776,  778,  778,  778,  778,  778,
-      778,  778,  778,  778,  778,  778,  778,  780,  780,  780,
-      780,  780,  780,  780,  780,  780,  780,  780,  780,  782,
-      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
-
-      782,  784,  784,  784,  784,  784,  784,  784,  784,  784,
-      784,  784,  784,  786,  786,  786,  786,  786,  786,  786,
-      786,  786,  786,  786,  786,  788,  788,  788,  788,  788,
-      788,  788,  788,  788,  788,  788,  788,  790,  790,  790,
-      790,  790,  790,  790,  790,  790,  790,  790,  790,  792,
-      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
-      792,  794,  794,  794,  794,  794,  794,  794,  794,  794,
-      794,  794,  794,  796,  796,  796,  796,  796,  796,  796,
-      796,  796,  796,  796,  796,  798,  798,  798,  798,  798,
-      798,  798,  798,  798,  798,  798,  798,  800,  800,  800,
-
-      800,  800,  800,  800,  800,  800,  800,  800,  800,  802,
-      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
-      802,  804,  804,  804,  804,  804,  804,  804,  804,  804,
-      804,  804,  804,  806,  806,  806,  806,  806,  806,  806,
-      806,  806,  806,  806,  806,  808,  808,  808,  808,  808,
-      808,  808,  808,  808,  808,  808,  808,  810,  810,  810,
-      810,  810,  810,  810,  810,  810,  810,  810,  810,  812,
-      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
-      812,  814,  814,  814,  814,  814,  814,  814,  814,  814,
-      814,  814,  814,  816,  816,  816,  816,  816,  816,  816,
-
-      816,  816,  816,  816,  816,  818,  818,  818,  818,  818,
-      818,  818,  818,  818,  818,  818,  818,  820,  820,  820,
-      820,  820,  820,  820,  820,  820,  820,  820,  820,  822,
-      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
-      822,  824,  824,  824,  824,  824,  824,  824,  824,  824,
-      824,  824,  824,  826,  826,  826,  826,  826,  826,  826,
-      826,  826,  826,  826,  826,  828,  828,  828,  828,  828,
-      828,  828,  828,  828,  828,  828,  828,  830,  830,  830,
-      830,  830,  830,  830,  830,  830,  830,  830,  830,  832,
-      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
-
-      832,  834,  834,  834,  834,  834,  834,  834,  834,  834,
-      834,  834,  834,  836,  836,  836,  836,  836,  836,  836,
-      836,  836,  836,  836,  836,  838,  838,  838,  838,  838,
-      838,  838,  838,  838,  838,  838,  838,  840,  840,  840,
-      840,  840,  840,  840,  840,  840,  840,  840,  840,  842,
-      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
-      842,  844,  844,  844,  844,  844,  844,  844,  844,  844,
-      844,  844,  844,  846,  846,  846,  846,  846,  846,  846,
-      846,  846,  846,  846,  846,  848,  848,  848,  848,  848,
-      848,  848,  848,  848,  848,  848,  848,  850,  850,  850,
-
-      850,  850,  850,  850,  850,  850,  850,  850,  850,  852,
-      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
-      852,  854,  854,  854,  854,  854,  854,  854,  854,  854,
-      854,  854,  854,  856,  856,  856,  856,  856,  856,  856,
-      856,  856,  856,  856,  856,  858,  858,  858,  858,  858,
-      858,  858,  858,  858,  858,  858,  858,  860,  860,  860,
-      860,  860,  860,  860,  860,  860,  860,  860,  860,  862,
-      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
-      862,  864,  864,  864,  864,  864,  864,  864,  864,  864,
-      864,  864,  864,  866,  866,  866,  866,  866,  866,  866,
-
-      866,  866,  866,  866,  866,  868,  868,  868,  868,  868,
-      868,  868,  868,  868,  868,  868,  868,  870,  870,  870,
-      870,  870,  870,  870,  870,  870,  870,  870,  870,  872,
-      872,  872,  872,  872,  872,  872,  872,  872,  872,  872,
-      872,  874,  874,  874,  874,  874,  874,  874,  874,  874,
-      874,  874,  874,  876,  876,  876,  876,  876,  876,  876,
-      876,  876,  876,  876,  876,  878,  878,  878,  878,  878,
-      878,  878,  878,  878,  878,  878,  878,  880,  880,  880,
-      880,  880,  880,  880,  880,  880,  880,  880,  880,  882,
-      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
-
-      882,  884,  884,  884,  884,  884,  884,  884,  884,  884,
-      884,  884,  884,  886,  886,  886,  886,  886,  886,  886,
-      886,  886,  886,  886,  886,  888,  888,  888,  888,  888,
-      888,  888,  888,  888,  888,  888,  888,  890,  890,  890,
-      890,  890,  890,  890,  890,  890,  890,  890,  890,  892,
-      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
-      892,  894,  894,  894,  894,  894,  894,  894,  894,  894,
-      894,  894,  894,  896,  896,  896,  896,  896,  896,  896,
-      896,  896,  896,  896,  896,  898,  898,  898,  898,  898,
-      898,  898,  898,  898,  898,  898,  898,  900,  900,  900,
-
-      900,  900,  900,  900,  900,  900,  900,  900,  900,  902,
-      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
-      902,  904,  904,  904,  904,  904,  904,  904,  904,  904,
-      904,  904,  904,  906,  906,  906,  906,  906,  906,  906,
-      906,  906,  906,  906,  906,  908,  908,  908,  908,  908,
-      908,  908,  908,  908,  908,  908,  908,  910,  910,  910,
-      910,  910,  910,  910,  910,  910,  910,  910,  910,  912,
-      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,
-      912,  914,  914,  914,  914,  914,  914,  914,  914,  914,
-      914,  914,  914,  916,  916,  916,  916,  916,  916,  916,
-
-      916,  916,  916,  916,  916,  918,  918,  918,  918,  918,
-      918,  918,  918,  918,  918,  918,  918,  920,  920,  920,
-      920,  920,  920,  920,  920,  920,  920,  920,  920,  922,
-      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
-      922,  924,  924,  924,  924,  924,  924,  924,  924,  924,
-      924,  924,  924,  926,  926,  926,  926,  926,  926,  926,
-      926,  926,  926,  926,  926,  928,  928,  928,  928,  928,
-      928,  928,  928,  928,  928,  928,  928,  930,  930,  930,
-      930,  930,  930,  930,  930,  930,  930,  930,  930,  932,
-      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
-
-      932,  934,  934,  934,  934,  934,  934,  934,  934,  934,
-      934,  934,  934,  936,  936,  936,  936,  936,  936,  936,
-      936,  936,  936,  936,  936,  938,  938,  938,  938,  938,
-      938,  938,  938,  938,  938,  938,  938,  940,  940,  940,
-      940,  940,  940,  940,  940,  940,  940,  940,  940,  942,
-      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
-      942,  944,  944,  944,  944,  944,  944,  944,  944,  944,
-      944,  944,  944,  946,  946,  946,  946,  946,  946,  946,
-      946,  946,  946,  946,  946,  948,  948,  948,  948,  948,
-      948,  948,  948,  948,  948,  948,  948,  950,  950,  950,
-
-      950,  950,  950,  950,  950,  950,  950,  950,  950,  952,
-      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
-      952,  954,  954,  954,  954,  954,  954,  954,  954,  954,
-      954,  954,  954,  956,  956,  956,  956,  956,  956,  956,
-      956,  956,  956,  956,  956,  958,  958,  958,  958,  958,
-      958,  958,  958,  958,  958,  958,  958,  960,  960,  960,
-      960,  960,  960,  960,  960,  960,  960,  960,  960,  962,
-      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
-      962,  964,  964,  964,  964,  964,  964,  964,  964,  964,
-      964,  964,  964,  966,  966,  966,  966,  966,  966,  966,
-
-      966,  966,  966,  966,  966,  968,  968,  968,  968,  968,
-      968,  968,  968,  968,  968,  968,  968,  970,  970,  970,
-      970,  970,  970,  970,  970,  970,  970,  970,  970,  972,
-      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
-      972,  974,  974,  974,  974,  974,  974,  974,  974,  974,
-      974,  974,  974,  976,  976,  976,  976,  976,  976,  976,
-      976,  976,  976,  976,  976,  978,  978,  978,  978,  978,
-      978,  978,  978,  978,  978,  978,  978,  980,  980,  980,
-      980,  980,  980,  980,  980,  980,  980,  980,  980,  982,
-      982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
-
-      982,  984,  984,  984,  984,  984,  984,  984,  984,  984,
-      984,  984,  984,  986,  986,  986,  986,  986,  986,  986,
-      986,  986,  986,  986,  986,  988,  988,  988,  988,  988,
-      988,  988,  988,  988,  988,  988,  988,  990,  990,  990,
-      990,  990,  990,  990,  990,  990,  990,  990,  990,  992,
-      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
-      992,  994,  994,  994,  994,  994,  994,  994,  994,  994,
-      994,  994,  994,  996,  996,  996,  996,  996,  996,  996,
-      996,  996,  996,  996,  996,  998,  998,  998,  998,  998,
-      998,  998,  998,  998,  998,  998,  998, 1000, 1000, 1000,
-
-     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1002,
-     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
-     1002, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
-     1004, 1004, 1004, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
-     1006, 1006, 1006, 1006, 1006, 1008, 1008, 1008, 1008, 1008,
-     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1010, 1010, 1010,
-     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1012,
-     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,
-     1012, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
-     1014, 1014, 1014, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
-
-     1016, 1016, 1016, 1016, 1016, 1018, 1018, 1018, 1018, 1018,
-     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1020, 1020, 1020,
-     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1022,
-     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
-     1022, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
-     1024, 1024, 1024, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
-     1026, 1026, 1026, 1026, 1026, 1028, 1028, 1028, 1028, 1028,
-     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1030, 1030, 1030,
-     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1032,
-     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
-
-     1032, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
-     1034, 1034, 1034, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
-     1036, 1036, 1036, 1036, 1036, 1038, 1038, 1038, 1038, 1038,
-     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1040, 1040, 1040,
-     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1042,
-     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
-     1042, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
-     1044, 1044, 1044, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
-     1046, 1046, 1046, 1046, 1046, 1048, 1048, 1048, 1048, 1048,
-     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1050, 1050, 1050,
-
-     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1052,
-     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
-     1052, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
-     1054, 1054, 1054, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
-     1056, 1056, 1056, 1056, 1056, 1058, 1058, 1058, 1058, 1058,
-     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1060, 1060, 1060,
-     1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1062,
-     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
-     1062, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
-     1064, 1064, 1064, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
-
-     1066, 1066, 1066, 1066, 1066, 1068, 1068, 1068, 1068, 1068,
-     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1070, 1070, 1070,
-     1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1072,
-     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
-     1072, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
-     1074, 1074, 1074, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
-     1076, 1076, 1076, 1076, 1076, 1078, 1078, 1078, 1078, 1078,
-     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1080, 1080, 1080,
-     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1082,
-     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
-
-     1082, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
-     1084, 1084, 1084, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
-     1086, 1086, 1086, 1086, 1086, 1088, 1088, 1088, 1088, 1088,
-     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1090, 1090, 1090,
-     1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1092,
-     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
-     1092, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
-     1094, 1094, 1094, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
-     1096, 1096, 1096, 1096, 1096, 1098, 1098, 1098, 1098, 1098,
-     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1100, 1100, 1100,
-
-     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1102,
-     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,
-     1102, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
-     1104, 1104, 1104, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
-     1106, 1106, 1106, 1106, 1106, 1108, 1108, 1108, 1108, 1108,
-     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1110, 1110, 1110,
-     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1112,
-     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
-     1112, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
-     1114, 1114, 1114, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
-
-     1116, 1116, 1116, 1116, 1116, 1118, 1118, 1118, 1118, 1118,
-     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1120, 1120, 1120,
-     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1122,
-     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
-     1122, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
-     1124, 1124, 1124, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
-     1126, 1126, 1126, 1126, 1126, 1128, 1128, 1128, 1128, 1128,
-     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1130, 1130, 1130,
-     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1132,
-     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
-
-     1132, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
-     1134, 1134, 1134, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
-     1136, 1136, 1136, 1136, 1136, 1138, 1138, 1138, 1138, 1138,
-     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1140, 1140, 1140,
-     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1142,
-     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
-     1142, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
-     1144, 1144, 1144, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
-     1146, 1146, 1146, 1146, 1146, 1148, 1148, 1148, 1148, 1148,
-     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1150, 1150, 1150,
-
-     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1152,
-     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
-     1152, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
-     1154, 1154, 1154, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
-     1156, 1156, 1156, 1156, 1156, 1158, 1158, 1158, 1158, 1158,
-     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1160, 1160, 1160,
-     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1162,
-     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
-     1162, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
-     1164, 1164, 1164, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
-
-     1166, 1166, 1166, 1166, 1166, 1168, 1168, 1168, 1168, 1168,
-     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1170, 1170, 1170,
-     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1172,
-     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
-     1172, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
-     1174, 1174, 1174, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
-     1176, 1176, 1176, 1176, 1176, 1178, 1178, 1178, 1178, 1178,
-     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1180, 1180, 1180,
-     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1182,
-     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
-
-     1182, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
-     1184, 1184, 1184, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
-     1186, 1186, 1186, 1186, 1186, 1188, 1188, 1188, 1188, 1188,
-     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1190, 1190, 1190,
-     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1192,
-     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
-     1192, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
-     1194, 1194, 1194, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
-     1196, 1196, 1196, 1196, 1196, 1198, 1198, 1198, 1198, 1198,
-     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1200, 1200, 1200,
-
-     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1202,
-     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
-     1202, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
-     1204, 1204, 1204, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
-     1206, 1206, 1206, 1206, 1206, 1208, 1208, 1208, 1208, 1208,
-     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1210, 1210, 1210,
-     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1212,
-     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
-     1212, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
-     1214, 1214, 1214, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
-
-     1216, 1216, 1216, 1216, 1216, 1218, 1218, 1218, 1218, 1218,
-     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1220, 1220, 1220,
-     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1222,
-     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
-     1222, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
-     1224, 1224, 1224, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
-     1226, 1226, 1226, 1226, 1226, 1228, 1228, 1228, 1228, 1228,
-     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1230, 1230, 1230,
-     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1232,
-     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
-
-     1232, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
-     1234, 1234, 1234, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
-     1236, 1236, 1236, 1236, 1236, 1238, 1238, 1238, 1238, 1238,
-     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1240, 1240, 1240,
-     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1242,
-     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
-     1242, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
-     1244, 1244, 1244, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
-     1246, 1246, 1246, 1246, 1246, 1248, 1248, 1248, 1248, 1248,
-     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1250, 1250, 1250,
-
-     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1252,
-     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
-     1252, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
-     1254, 1254, 1254, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
-     1256, 1256, 1256, 1256, 1256, 1258, 1258, 1258, 1258, 1258,
-     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1260, 1260, 1260,
-     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1262,
-     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
-     1262, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
-     1264, 1264, 1264, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
-
-     1266, 1266, 1266, 1266, 1266, 1268, 1268, 1268, 1268, 1268,
-     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1270, 1270, 1270,
-     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1272,
-     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
-     1272, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
-     1274, 1274, 1274, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
-     1276, 1276, 1276, 1276, 1276, 1278, 1278, 1278, 1278, 1278,
-     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1280, 1280, 1280,
-     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1282,
-     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
-
-     1282, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
-     1284, 1284, 1284, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
-     1286, 1286, 1286, 1286, 1286, 1288, 1288, 1288, 1288, 1288,
-     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1290, 1290, 1290,
-     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1292,
-     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
-     1292, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
-     1294, 1294, 1294, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
-     1296, 1296, 1296, 1296, 1296, 1298, 1298, 1298, 1298, 1298,
-     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1300, 1300, 1300,
-
-     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1302,
-     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
-     1302, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
-     1304, 1304, 1304, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
-     1306, 1306, 1306, 1306, 1306, 1308, 1308, 1308, 1308, 1308,
-     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1310, 1310, 1310,
-     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1312,
-     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
-     1312, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
-     1314, 1314, 1314, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
-
-     1316, 1316, 1316, 1316, 1316, 1318, 1318, 1318, 1318, 1318,
-     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1320, 1320, 1320,
-     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1322,
-     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
-     1322, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
-     1324, 1324, 1324, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
-     1326, 1326, 1326, 1326, 1326, 1328, 1328, 1328, 1328, 1328,
-     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1330, 1330, 1330,
-     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1332,
-     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
-
-     1332, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
-     1334, 1334, 1334, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
-     1336, 1336, 1336, 1336, 1336, 1338, 1338, 1338, 1338, 1338,
-     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1340, 1340, 1340,
-     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1342,
-     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
-     1342, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
-     1344, 1344, 1344, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
-     1346, 1346, 1346, 1346, 1346, 1348, 1348, 1348, 1348, 1348,
-     1348, 1348, 1348, 1348, 1348, 1348, 1348,  372,  371,  370,
-
-      369,  365,  364,  363,  362,  361,  360,  359,  355,  354,
-      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,
-      343,  342,  341,  340,  339,  333,  332,  331,  330,  329,
-      326,  325,  324,  323,  322,  321,  318,  259,  316,  315,
-      314,  313,  312,  311,  310,  309,  308,  307,  306,  239,
-      305,  304,  303,  221,  217, 1350,  214,  211,  298,  297,
-      296,  295,  294,  293,  292,  289,  288,  287,  286,  285,
-      284,  283,  282,  281,  278,  277,  276,  275,  274,  273,
-      270,  269,  268,  267,  266,  265,  264,  258,  257,  254,
-      249,  248,  247,  246,  245,  244,  243,  242,  241, 1350,
-
-      237,  236,  234,  106,  233,  231,  231,  230,  228,  217,
-      214,  212,  211,  203,  197,  196,  195,  190,  189,  186,
-      185,  181,  165,  161,  159,  158,  149,  134,  112,  106,
-     1350,   98,   98,   23,   23,   21, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350
-
-    } ;
-
-static yyconst short int yy_chk[7999] =
-    {   0,
-        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
-        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
-        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
-        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
-        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
-        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
-        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
-        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
-        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
-        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
-
-        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
-        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
-        5,    5,    5,    5,    7,    8,    9,   10,   11,   23,
-       25,   25,   25,   11,   19,   19,   27,   30,   30,  113,
-       19,   20,   20,    7,    8,   32,   31,   20,   23,  952,
-        9,   10,   11,    9,   10,   11,   12,   36,   19,   19,
-       27,   12,   31,  113,   32,   20,   20,   37,   36,   38,
-       38,   38,   23,   44,   44,   38,   37,   37,   45,   45,
-       12,  954,   12,   12,   12,   12,   12,   12,   12,   12,
-       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
-
-       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
-       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
-       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
-       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
-       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
-       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
-       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
-       13,   13,   15,   15,   15,   15,   15,   15,   15,   15,
-       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
-       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
-
-       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
-       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
-       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
-       15,   15,   15,   15,   33,   39,  956,   70,   43,   40,
-       39,   40,   40,   40,   43,   43,   43,   39,   41,   50,
-       41,   41,   41,   50,   50,   55,   61,   64,   65,   40,
-       64,   55,   61,   65,  958,   52,   33,   33,   41,   33,
-       52,   33,   70,  960,   33,  109,   52,   53,   40,   52,
-       33,   53,   54,   33,   33,  115,   33,   53,  962,   58,
-      115,   54,   54,   54,   77,   77,   77,   58,  109,  118,
-
-      118,   54,   58,   54,   74,   74,   74,   74,   74,   74,
-       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
-       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
-       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
-       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
-       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
-       74,   74,   74,   74,   74,   74,   76,   76,   76,   79,
-       85,   89,   87,   87,   90,  106,   89,   91,   91,   90,
-      121,   92,   92,   79,   79,   87,  111,  111,  111,   85,
-      964,  106,  151,  151,  106,  140,  140,  140,   89,  121,
-
-      966,   90,   92,   76,  145,  145,  145,  968,  146,   87,
-      146,  146,  146,  140,   91,  148,  148,  148,  106,  147,
-       79,  147,  145,  970,  147,  147,  147,  972,  146,  148,
-      148,  148,  148,  148,  148,  158,  158,  161,  170,  178,
-      161,  170,  190,  208,  208,  190,  161,  204,  204,  204,
-      178,  205,  205,  205,  974,  219,  220,  209,  209,  209,
-      219,  220,  976,  223,  223,  205,  205,  205,  205,  205,
-      205,  209,  209,  209,  209,  209,  209,  224,  224,  233,
-      270,  270,  219,  220,  223,  250,  250,  250,  251,  251,
-      251,  252,  252,  252,  262,  233,  300,  300,  233,  253,
-
-      253,  253,  978,  250,  980,  277,  262,  277,  317,  317,
-      277,  376,  376,  253,  253,  253,  253,  253,  253,  303,
-      277,  982,  233,  310,  277,  299,  299,  299,  360,  360,
-      360,  301,  301,  301,  310,  303,  359,  984,  303,  299,
-      299,  299,  299,  299,  299,  301,  301,  301,  301,  301,
-      301,  986,  359,  363,  366,  359,  370,  411,  360,  310,
-      416,  417,  303,  423,  363,  366,  426,  370,  452,  569,
-      569,  416,  417,  411,  423,  455,  411,  426,  988,  359,
-      454,  454,  454,  459,  452,  460,  455,  452,  461,  363,
-      483,  485,  485,  485,  459,  990,  460,  486,  992,  461,
-
-      411,  487,  488,  490,  508,  994,  483,  996,  486,  483,
-      998,  452,  487,  488,  490,  492,  492,  492, 1000,  521,
-      508, 1002, 1004,  508,  511,  511,  511,  531, 1006,  539,
-      561,  561,  561,  483,  485,  521,  547,  551,  521, 1008,
-      492,  555,  559,  531, 1010,  539,  531,  508,  539,  511,
-      563, 1012,  547,  551,  561,  547,  551,  555,  559, 1014,
-      555,  559,  521,  565,  565,  565,  563,  568, 1016,  563,
-      531, 1018,  539,  566,  566,  566, 1020,  566, 1022,  547,
-      551, 1024,  566,  568,  555,  559,  568,  565,  570,  570,
-      570, 1026,  570,  563, 1028,  575,  582,  570,  585,  585,
-
-      585, 1030,  587,  590,  590,  590,  593, 1032,  595, 1034,
-      568,  575,  582,  597,  575,  582, 1036,  599,  587, 1038,
-      566,  587,  593,  585,  595,  593, 1040,  595,  590,  597,
-     1042,  601,  597,  599, 1044,  570,  599, 1046,  575,  582,
-     1048, 1050,  603,  605, 1052,  587, 1054,  601,  607,  593,
-      601,  595,  609,  611,  613, 1056,  597, 1058,  603,  605,
-      599,  603,  605,  615,  607,  617, 1060,  607,  609,  611,
-      613,  609,  611,  613,  601, 1062, 1064, 1066, 1068,  615,
-     1070,  617,  615,  619,  617,  603,  605, 1072,  621, 1074,
-     1076,  607, 1078,  623,  625,  609,  611,  613,  627,  619,
-
-      629, 1080,  619, 1082,  621,  631,  615,  621,  617,  623,
-      625,  633,  623,  625,  627, 1084,  629,  627, 1086,  629,
-     1088,  631, 1090,  635,  631, 1092,  619,  633,  637, 1094,
-      633,  621, 1096,  639,  641, 1098,  623,  625, 1100,  635,
-      643,  627,  635,  629,  637,  645,  647,  637,  631,  639,
-      641,  649,  639,  641,  633, 1102,  643, 1104, 1106,  643,
-     1108,  645,  647,  651,  645,  647,  635,  649,  653, 1110,
-      649,  637, 1112, 1114,  655, 1116,  639,  641, 1118,  651,
-      657,  659,  651,  643,  653,  661,  663,  653,  645,  647,
-      655,  665, 1120,  655,  649, 1122,  657,  659, 1124,  657,
-
-      659,  661,  663,  667,  661,  663,  651,  665, 1126, 1128,
-      665,  653, 1130, 1132,  669, 1134,  671,  655, 1136,  667,
-      673,  675,  667,  657,  659,  677,  679, 1138,  661,  663,
-      669,  681,  671,  669,  665,  671,  673,  675, 1140,  673,
-      675,  677,  679, 1142,  677,  679,  667,  681, 1144, 1146,
-      681,  683, 1148, 1150, 1152, 1154,  685,  669, 1156,  671,
-      687,  689,  691,  673,  675, 1158,  693,  683,  677,  679,
-      683,  695,  685,  697,  681,  685,  687,  689,  691,  687,
-      689,  691,  693, 1160, 1162,  693, 1164,  695, 1166,  697,
-      695,  699,  697, 1168,  683, 1170,  701, 1172, 1174,  685,
-
-     1176,  703,  705,  687,  689,  691,  707,  699,  709,  693,
-      699, 1178,  701,  711,  695,  701,  697,  703,  705,  713,
-      703,  705,  707, 1180,  709,  707, 1182,  709, 1184,  711,
-     1186,  715,  711, 1188,  699,  713,  717, 1190,  713,  701,
-     1192,  719,  721, 1194,  703,  705, 1196,  715,  723,  707,
-      715,  709,  717,  725,  727,  717,  711,  719,  721,  729,
-      719,  721,  713, 1198,  723, 1200, 1202,  723, 1204,  725,
-      727,  731,  725,  727,  715,  729,  733, 1206,  729,  717,
-     1208, 1210,  735, 1212,  719,  721, 1214,  731,  737,  739,
-      731,  723,  733,  741,  743,  733,  725,  727,  735,  745,
-
-     1216,  735,  729, 1218,  737,  739, 1220,  737,  739,  741,
-      743,  747,  741,  743,  731,  745, 1222, 1224,  745,  733,
-     1226, 1228,  749, 1230,  751,  735, 1232,  747,  753,  755,
-      747,  737,  739,  757,  759, 1234,  741,  743,  749,  761,
-      751,  749,  745,  751,  753,  755, 1236,  753,  755,  757,
-      759, 1238,  757,  759,  747,  761, 1240, 1242,  761,  763,
-     1244, 1246, 1248, 1250,  765,  749, 1252,  751,  767,  769,
-      771,  753,  755, 1254,  773,  763,  757,  759,  763,  775,
-      765,  777,  761,  765,  767,  769,  771,  767,  769,  771,
-      773, 1256, 1258,  773, 1260,  775, 1262,  777,  775,  779,
-
-      777, 1264,  763, 1266,  781, 1268, 1270,  765, 1272,  783,
-      785,  767,  769,  771,  787,  779,  789,  773,  779, 1274,
-      781,  791,  775,  781,  777,  783,  785,  793,  783,  785,
-      787, 1276,  789,  787, 1278,  789, 1280,  791, 1282,  795,
-      791, 1284,  779,  793,  797, 1286,  793,  781, 1288,  799,
-      801, 1290,  783,  785, 1292,  795,  803,  787,  795,  789,
-      797,  805,  807,  797,  791,  799,  801,  809,  799,  801,
-      793, 1294,  803, 1296, 1298,  803, 1300,  805,  807,  811,
-      805,  807,  795,  809,  813, 1302,  809,  797, 1304, 1306,
-      815, 1308,  799,  801, 1310,  811,  817,  819,  811,  803,
-
-      813,  821,  823,  813,  805,  807,  815,  825, 1312,  815,
-      809, 1314,  817,  819, 1316,  817,  819,  821,  823,  827,
-      821,  823,  811,  825, 1318, 1320,  825,  813, 1322, 1324,
-      829, 1326,  831,  815, 1328,  827,  833,  835,  827,  817,
-      819,  837,  839, 1330,  821,  823,  829,  841,  831,  829,
-      825,  831,  833,  835, 1332,  833,  835,  837,  839, 1334,
-      837,  839,  827,  841, 1336, 1338,  841,  843, 1340, 1342,
-     1344, 1346,  845,  829, 1358,  831,  847,  849,  851,  833,
-      835,  950,  853,  843,  837,  839,  843,  855,  845,  857,
-      841,  845,  847,  849,  851,  847,  849,  851,  853,  948,
-
-      946,  853,  944,  855,  942,  857,  855,  859,  857,  940,
-      843,  938,  861,  936,  934,  845,  932,  863,  865,  847,
-      849,  851,  867,  859,  869,  853,  859,  930,  861,  871,
-      855,  861,  857,  863,  865,  873,  863,  865,  867,  928,
-      869,  867,  926,  869,  924,  871,  922,  875,  871,  920,
-      859,  873,  877,  918,  873,  861,  916,  879,  881,  914,
-      863,  865,  912,  875,  883,  867,  875,  869,  877,  885,
-      887,  877,  871,  879,  881,  889,  879,  881,  873,  910,
-      883,  908,  906,  883,  904,  885,  887,  891,  885,  887,
-      875,  889,  893,  902,  889,  877,  900,  898,  895,  896,
-
-      879,  881,  894,  891,  897,  899,  891,  883,  893,  901,
-      903,  893,  885,  887,  895,  905,  892,  895,  889,  890,
-      897,  899,  888,  897,  899,  901,  903,  907,  901,  903,
-      891,  905,  886,  884,  905,  893,  882,  880,  909,  878,
-      911,  895,  876,  907,  913,  915,  907,  897,  899,  917,
-      919,  874,  901,  903,  909,  921,  911,  909,  905,  911,
-      913,  915,  872,  913,  915,  917,  919,  870,  917,  919,
-      907,  921,  868,  866,  921,  923,  864,  862,  860,  858,
-      925,  909,  856,  911,  927,  929,  931,  913,  915,  854,
-      933,  923,  917,  919,  923,  935,  925,  937,  921,  925,
-
-      927,  929,  931,  927,  929,  931,  933,  852,  850,  933,
-      848,  935,  846,  937,  935,  939,  937,  844,  923,  842,
-      941,  840,  838,  925,  836,  943,  945,  927,  929,  931,
-      947,  939,  949,  933,  939,  834,  941,  951,  935,  941,
-      937,  943,  945,  953,  943,  945,  947,  832,  949,  947,
-      830,  949,  828,  951,  826,  955,  951,  824,  939,  953,
-      957,  822,  953,  941,  820,  959,  961,  818,  943,  945,
-      816,  955,  963,  947,  955,  949,  957,  965,  967,  957,
-      951,  959,  961,  969,  959,  961,  953,  814,  963,  812,
-      810,  963,  808,  965,  967,  971,  965,  967,  955,  969,
-
-      973,  806,  969,  957,  804,  802,  975,  800,  959,  961,
-      798,  971,  977,  979,  971,  963,  973,  981,  983,  973,
-      965,  967,  975,  985,  796,  975,  969,  794,  977,  979,
-      792,  977,  979,  981,  983,  987,  981,  983,  971,  985,
-      790,  788,  985,  973,  786,  784,  989,  782,  991,  975,
-      780,  987,  993,  995,  987,  977,  979,  997,  999,  778,
-      981,  983,  989, 1001,  991,  989,  985,  991,  993,  995,
-      776,  993,  995,  997,  999,  774,  997,  999,  987, 1001,
-      772,  770, 1001, 1003,  768,  766,  764,  762, 1005,  989,
-      760,  991, 1007, 1009, 1011,  993,  995,  758, 1013, 1003,
-
-      997,  999, 1003, 1015, 1005, 1017, 1001, 1005, 1007, 1009,
-     1011, 1007, 1009, 1011, 1013,  756,  754, 1013,  752, 1015,
-      750, 1017, 1015, 1019, 1017,  748, 1003,  746, 1021,  744,
-      742, 1005,  740, 1023, 1025, 1007, 1009, 1011, 1027, 1019,
-     1029, 1013, 1019,  738, 1021, 1031, 1015, 1021, 1017, 1023,
-     1025, 1033, 1023, 1025, 1027,  736, 1029, 1027,  734, 1029,
-      732, 1031,  730, 1035, 1031,  728, 1019, 1033, 1037,  726,
-     1033, 1021,  724, 1039, 1041,  722, 1023, 1025,  720, 1035,
-     1043, 1027, 1035, 1029, 1037, 1045, 1047, 1037, 1031, 1039,
-     1041, 1049, 1039, 1041, 1033,  718, 1043,  716,  714, 1043,
-
-      712, 1045, 1047, 1051, 1045, 1047, 1035, 1049, 1053,  710,
-     1049, 1037,  708,  706, 1055,  704, 1039, 1041,  702, 1051,
-     1057, 1059, 1051, 1043, 1053, 1061, 1063, 1053, 1045, 1047,
-     1055, 1065,  700, 1055, 1049,  698, 1057, 1059,  696, 1057,
-     1059, 1061, 1063, 1067, 1061, 1063, 1051, 1065,  694,  692,
-     1065, 1053,  690,  688, 1069,  686, 1071, 1055,  684, 1067,
-     1073, 1075, 1067, 1057, 1059, 1077, 1079,  682, 1061, 1063,
-     1069, 1081, 1071, 1069, 1065, 1071, 1073, 1075,  680, 1073,
-     1075, 1077, 1079,  678, 1077, 1079, 1067, 1081,  676,  674,
-     1081, 1083,  672,  670,  668,  666, 1085, 1069,  664, 1071,
-
-     1087, 1089, 1091, 1073, 1075,  662, 1093, 1083, 1077, 1079,
-     1083, 1095, 1085, 1097, 1081, 1085, 1087, 1089, 1091, 1087,
-     1089, 1091, 1093,  660,  658, 1093,  656, 1095,  654, 1097,
-     1095, 1099, 1097,  652, 1083,  650, 1101,  648,  646, 1085,
-      644, 1103, 1105, 1087, 1089, 1091, 1107, 1099, 1109, 1093,
-     1099,  642, 1101, 1111, 1095, 1101, 1097, 1103, 1105, 1113,
-     1103, 1105, 1107,  640, 1109, 1107,  638, 1109,  636, 1111,
-      634, 1115, 1111,  632, 1099, 1113, 1117,  630, 1113, 1101,
-      628, 1119, 1121,  626, 1103, 1105,  624, 1115, 1123, 1107,
-     1115, 1109, 1117, 1125, 1127, 1117, 1111, 1119, 1121, 1129,
-
-     1119, 1121, 1113,  622, 1123,  620,  618, 1123,  616, 1125,
-     1127, 1131, 1125, 1127, 1115, 1129, 1133,  614, 1129, 1117,
-      612,  610, 1135,  608, 1119, 1121,  606, 1131, 1137, 1139,
-     1131, 1123, 1133, 1141, 1143, 1133, 1125, 1127, 1135, 1145,
-      604, 1135, 1129,  602, 1137, 1139,  600, 1137, 1139, 1141,
-     1143, 1147, 1141, 1143, 1131, 1145,  598,  596, 1145, 1133,
-      594,  592, 1149,  589, 1151, 1135,  588, 1147, 1153, 1155,
-     1147, 1137, 1139, 1157, 1159,  586, 1141, 1143, 1149, 1161,
-     1151, 1149, 1145, 1151, 1153, 1155,  584, 1153, 1155, 1157,
-     1159,  583, 1157, 1159, 1147, 1161,  581,  580, 1161, 1163,
-
-      579,  578,  577,  574, 1165, 1149,  573, 1151, 1167, 1169,
-     1171, 1153, 1155,  572, 1173, 1163, 1157, 1159, 1163, 1175,
-     1165, 1177, 1161, 1165, 1167, 1169, 1171, 1167, 1169, 1171,
-     1173,  571,  567, 1173,  564, 1175,  562, 1177, 1175, 1179,
-     1177,  560, 1163,  558, 1181,  557,  556, 1165,  554, 1183,
-     1185, 1167, 1169, 1171, 1187, 1179, 1189, 1173, 1179,  553,
-     1181, 1191, 1175, 1181, 1177, 1183, 1185, 1193, 1183, 1185,
-     1187,  552, 1189, 1187,  550, 1189,  549, 1191,  548, 1195,
-     1191,  546, 1179, 1193, 1197,  541, 1193, 1181,  540, 1199,
-     1201,  538, 1183, 1185,  537, 1195, 1203, 1187, 1195, 1189,
-
-     1197, 1205, 1207, 1197, 1191, 1199, 1201, 1209, 1199, 1201,
-     1193,  536, 1203,  535,  534, 1203,  533, 1205, 1207, 1211,
-     1205, 1207, 1195, 1209, 1213,  532, 1209, 1197,  530,  529,
-     1215,  528, 1199, 1201,  527, 1211, 1217, 1219, 1211, 1203,
-     1213, 1221, 1223, 1213, 1205, 1207, 1215, 1225,  524, 1215,
-     1209,  523, 1217, 1219,  522, 1217, 1219, 1221, 1223, 1227,
-     1221, 1223, 1211, 1225,  520,  519, 1225, 1213,  518,  517,
-     1229,  515, 1231, 1215,  514, 1227, 1233, 1235, 1227, 1217,
-     1219, 1237, 1239,  513, 1221, 1223, 1229, 1241, 1231, 1229,
-     1225, 1231, 1233, 1235,  510, 1233, 1235, 1237, 1239,  509,
-
-     1237, 1239, 1227, 1241,  507,  506, 1241, 1243,  505,  504,
-      501,  500, 1245, 1229,  499, 1231, 1247, 1249, 1251, 1233,
-     1235,  497, 1253, 1243, 1237, 1239, 1243, 1255, 1245, 1257,
-     1241, 1245, 1247, 1249, 1251, 1247, 1249, 1251, 1253,  495,
-      493, 1253,  484, 1255,  482, 1257, 1255, 1259, 1257,  481,
-     1243,  480, 1261,  479,  478, 1245,  475, 1263, 1265, 1247,
-     1249, 1251, 1267, 1259, 1269, 1253, 1259,  474, 1261, 1271,
-     1255, 1261, 1257, 1263, 1265, 1273, 1263, 1265, 1267,  473,
-     1269, 1267,  472, 1269,  469, 1271,  468, 1275, 1271,  467,
-     1259, 1273, 1277,  466, 1273, 1261,  465, 1279, 1281,  464,
-
-     1263, 1265,  463, 1275, 1283, 1267, 1275, 1269, 1277, 1285,
-     1287, 1277, 1271, 1279, 1281, 1289, 1279, 1281, 1273,  458,
-     1283,  457,  453, 1283,  451, 1285, 1287, 1291, 1285, 1287,
-     1275, 1289, 1293,  447, 1289, 1277,  446,  445, 1295,  443,
-     1279, 1281,  442, 1291, 1297, 1299, 1291, 1283, 1293, 1301,
-     1303, 1293, 1285, 1287, 1295, 1305,  441, 1295, 1289,  440,
-     1297, 1299,  439, 1297, 1299, 1301, 1303, 1307, 1301, 1303,
-     1291, 1305,  438,  437, 1305, 1293,  435,  434, 1309,  433,
-     1311, 1295,  432, 1307, 1313, 1315, 1307, 1297, 1299, 1317,
-     1319,  431, 1301, 1303, 1309, 1321, 1311, 1309, 1305, 1311,
-
-     1313, 1315,  430, 1313, 1315, 1317, 1319,  429, 1317, 1319,
-     1307, 1321,  428,  427, 1321, 1323,  425,  422,  421,  420,
-     1325, 1309,  419, 1311, 1327, 1329, 1331, 1313, 1315,  415,
-     1333, 1323, 1317, 1319, 1323, 1335, 1325, 1337, 1321, 1325,
-     1327, 1329, 1331, 1327, 1329, 1331, 1333,  414,  413, 1333,
-      410, 1335,  407, 1337, 1335, 1339, 1337,  406, 1323,  405,
-     1341,  404,  402, 1325,  400, 1343, 1345, 1327, 1329, 1331,
-     1347, 1339, 1349, 1333, 1339,  399, 1341,  398, 1335, 1341,
-     1337, 1343, 1345,  397, 1343, 1345, 1347,  396, 1349, 1347,
-      395, 1349,  394,  392,  391,  389,  388,  387, 1339,  386,
-
-      383,  380,  379, 1341,  378,  377,  375,  373, 1343, 1345,
-      372,  371,  369, 1347,  368, 1349, 1351, 1351, 1351, 1351,
-     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1352, 1352,
-     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
-     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
-     1353, 1353, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
-     1354, 1354, 1354, 1354, 1355, 1355, 1355, 1355, 1355, 1355,
-     1355, 1355, 1355, 1355, 1355, 1355, 1356, 1356, 1356, 1356,
-     1356, 1356, 1356, 1356, 1356, 1356,  365, 1356, 1357, 1357,
-     1357, 1357,  364, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
-
-     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
-     1359, 1359, 1360,  362,  361, 1360, 1361, 1361, 1361,  358,
-     1361, 1361, 1361,  355, 1361, 1361, 1362, 1362, 1362, 1362,
-     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1363,  354,
-      353, 1363, 1364, 1364, 1364, 1364, 1364, 1364,  352, 1364,
-     1364, 1364, 1364, 1364, 1365,  351,  350,  349,  348,  346,
-     1365, 1365,  345, 1365, 1366,  344,  343, 1366, 1367,  342,
-      341, 1367, 1368, 1368, 1368, 1368, 1368, 1368, 1368,  338,
-     1368, 1368, 1368, 1368, 1369, 1369,  337, 1369, 1369,  336,
-     1369, 1369, 1369, 1369, 1369, 1369, 1370, 1370, 1370, 1370,
-
-     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1371,  335,
-      334, 1371, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
-     1372, 1372, 1372, 1372, 1373,  333,  332,  330,  329,  328,
-      327,  326,  325,  323, 1373, 1374, 1374, 1374, 1374, 1374,
-     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1375,  322,  321,
-      320,  319,  318, 1375,  316,  315, 1375, 1376, 1376, 1376,
-     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1377,
-     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
-     1377, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
-     1378, 1378, 1378, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
-
-     1379, 1379, 1379, 1379, 1379, 1380, 1380, 1380, 1380, 1380,
-     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1381, 1381, 1381,
-     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1382,
-     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
-     1382, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
-     1383, 1383, 1383, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
-     1384, 1384, 1384, 1384, 1384, 1385, 1385, 1385, 1385, 1385,
-     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1386, 1386, 1386,
-     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1387,
-     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
-
-     1387, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
-     1388, 1388, 1388, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
-     1389, 1389, 1389, 1389, 1389, 1390, 1390, 1390, 1390, 1390,
-     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1391, 1391, 1391,
-     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1392,
-     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
-     1392, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
-     1393, 1393, 1393, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
-     1394, 1394, 1394, 1394, 1394, 1395, 1395, 1395, 1395, 1395,
-     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1396, 1396, 1396,
-
-     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1397,
-     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
-     1397, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
-     1398, 1398, 1398, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
-     1399, 1399, 1399, 1399, 1399, 1400, 1400, 1400, 1400, 1400,
-     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1401, 1401, 1401,
-     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1402,
-     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
-     1402, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
-     1403, 1403, 1403, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
-
-     1404, 1404, 1404, 1404, 1404, 1405, 1405, 1405, 1405, 1405,
-     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1406, 1406, 1406,
-     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1407,
-     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
-     1407, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
-     1408, 1408, 1408, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
-     1409, 1409, 1409, 1409, 1409, 1410, 1410, 1410, 1410, 1410,
-     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1411, 1411, 1411,
-     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1412,
-     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
-
-     1412, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
-     1413, 1413, 1413, 1414, 1414, 1414, 1414, 1414, 1414, 1414,
-     1414, 1414, 1414, 1414, 1414, 1415, 1415, 1415, 1415, 1415,
-     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1416, 1416, 1416,
-     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1417,
-     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
-     1417, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
-     1418, 1418, 1418, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
-     1419, 1419, 1419, 1419, 1419, 1420, 1420, 1420, 1420, 1420,
-     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1421, 1421, 1421,
-
-     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1422,
-     1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
-     1422, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423,
-     1423, 1423, 1423, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
-     1424, 1424, 1424, 1424, 1424, 1425, 1425, 1425, 1425, 1425,
-     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1426, 1426, 1426,
-     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1427,
-     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
-     1427, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
-     1428, 1428, 1428, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
-
-     1429, 1429, 1429, 1429, 1429, 1430, 1430, 1430, 1430, 1430,
-     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1431, 1431, 1431,
-     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1432,
-     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
-     1432, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433,
-     1433, 1433, 1433, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
-     1434, 1434, 1434, 1434, 1434, 1435, 1435, 1435, 1435, 1435,
-     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1436, 1436, 1436,
-     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1437,
-     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
-
-     1437, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
-     1438, 1438, 1438, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
-     1439, 1439, 1439, 1439, 1439, 1440, 1440, 1440, 1440, 1440,
-     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1441, 1441, 1441,
-     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1442,
-     1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442,
-     1442, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443,
-     1443, 1443, 1443, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
-     1444, 1444, 1444, 1444, 1444, 1445, 1445, 1445, 1445, 1445,
-     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1446, 1446, 1446,
-
-     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1447,
-     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
-     1447, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
-     1448, 1448, 1448, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
-     1449, 1449, 1449, 1449, 1449, 1450, 1450, 1450, 1450, 1450,
-     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1451, 1451, 1451,
-     1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1452,
-     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
-     1452, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
-     1453, 1453, 1453, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
-
-     1454, 1454, 1454, 1454, 1454, 1455, 1455, 1455, 1455, 1455,
-     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1456, 1456, 1456,
-     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1457,
-     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
-     1457, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
-     1458, 1458, 1458, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
-     1459, 1459, 1459, 1459, 1459, 1460, 1460, 1460, 1460, 1460,
-     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1461, 1461, 1461,
-     1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1462,
-     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
-
-     1462, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
-     1463, 1463, 1463, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
-     1464, 1464, 1464, 1464, 1464, 1465, 1465, 1465, 1465, 1465,
-     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1466, 1466, 1466,
-     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1467,
-     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
-     1467, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
-     1468, 1468, 1468, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
-     1469, 1469, 1469, 1469, 1469, 1470, 1470, 1470, 1470, 1470,
-     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1471, 1471, 1471,
-
-     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1472,
-     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
-     1472, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
-     1473, 1473, 1473, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
-     1474, 1474, 1474, 1474, 1474, 1475, 1475, 1475, 1475, 1475,
-     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1476, 1476, 1476,
-     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1477,
-     1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
-     1477, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478,
-     1478, 1478, 1478, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
-
-     1479, 1479, 1479, 1479, 1479, 1480, 1480, 1480, 1480, 1480,
-     1480, 1480, 1480, 1480, 1480, 1480, 1480, 1481, 1481, 1481,
-     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1482,
-     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
-     1482, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
-     1483, 1483, 1483, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
-     1484, 1484, 1484, 1484, 1484, 1485, 1485, 1485, 1485, 1485,
-     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1486, 1486, 1486,
-     1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1487,
-     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
-
-     1487, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
-     1488, 1488, 1488, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
-     1489, 1489, 1489, 1489, 1489, 1490, 1490, 1490, 1490, 1490,
-     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1491, 1491, 1491,
-     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1492,
-     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
-     1492, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
-     1493, 1493, 1493, 1494, 1494, 1494, 1494, 1494, 1494, 1494,
-     1494, 1494, 1494, 1494, 1494, 1495, 1495, 1495, 1495, 1495,
-     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1496, 1496, 1496,
-
-     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1497,
-     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497,
-     1497, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
-     1498, 1498, 1498, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
-     1499, 1499, 1499, 1499, 1499, 1500, 1500, 1500, 1500, 1500,
-     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1501, 1501, 1501,
-     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1502,
-     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
-     1502, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
-     1503, 1503, 1503, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
-
-     1504, 1504, 1504, 1504, 1504, 1505, 1505, 1505, 1505, 1505,
-     1505, 1505, 1505, 1505, 1505, 1505, 1505, 1506, 1506, 1506,
-     1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1507,
-     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
-     1507, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508,
-     1508, 1508, 1508, 1509, 1509, 1509, 1509, 1509, 1509, 1509,
-     1509, 1509, 1509, 1509, 1509, 1510, 1510, 1510, 1510, 1510,
-     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1511, 1511, 1511,
-     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1512,
-     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
-
-     1512, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513,
-     1513, 1513, 1513, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
-     1514, 1514, 1514, 1514, 1514, 1515, 1515, 1515, 1515, 1515,
-     1515, 1515, 1515, 1515, 1515, 1515, 1515, 1516, 1516, 1516,
-     1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1517,
-     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
-     1517, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518,
-     1518, 1518, 1518, 1519, 1519, 1519, 1519, 1519, 1519, 1519,
-     1519, 1519, 1519, 1519, 1519, 1520, 1520, 1520, 1520, 1520,
-     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1521, 1521, 1521,
-
-     1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1522,
-     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
-     1522, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
-     1523, 1523, 1523, 1524, 1524, 1524, 1524, 1524, 1524, 1524,
-     1524, 1524, 1524, 1524, 1524, 1525, 1525, 1525, 1525, 1525,
-     1525, 1525, 1525, 1525, 1525, 1525, 1525, 1526, 1526, 1526,
-     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1527,
-     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
-     1527, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
-     1528, 1528, 1528, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
-
-     1529, 1529, 1529, 1529, 1529, 1530, 1530, 1530, 1530, 1530,
-     1530, 1530, 1530, 1530, 1530, 1530, 1530, 1531, 1531, 1531,
-     1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1532,
-     1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532,
-     1532, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
-     1533, 1533, 1533, 1534, 1534, 1534, 1534, 1534, 1534, 1534,
-     1534, 1534, 1534, 1534, 1534, 1535, 1535, 1535, 1535, 1535,
-     1535, 1535, 1535, 1535, 1535, 1535, 1535, 1536, 1536, 1536,
-     1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1537,
-     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
-
-     1537, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
-     1538, 1538, 1538, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
-     1539, 1539, 1539, 1539, 1539, 1540, 1540, 1540, 1540, 1540,
-     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1541, 1541, 1541,
-     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1542,
-     1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542,
-     1542, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
-     1543, 1543, 1543, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
-     1544, 1544, 1544, 1544, 1544, 1545, 1545, 1545, 1545, 1545,
-     1545, 1545, 1545, 1545, 1545, 1545, 1545, 1546, 1546, 1546,
-
-     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1547,
-     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
-     1547, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
-     1548, 1548, 1548, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
-     1549, 1549, 1549, 1549, 1549, 1550, 1550, 1550, 1550, 1550,
-     1550, 1550, 1550, 1550, 1550, 1550, 1550, 1551, 1551, 1551,
-     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1552,
-     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
-     1552, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553,
-     1553, 1553, 1553, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
-
-     1554, 1554, 1554, 1554, 1554, 1555, 1555, 1555, 1555, 1555,
-     1555, 1555, 1555, 1555, 1555, 1555, 1555, 1556, 1556, 1556,
-     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1557,
-     1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
-     1557, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
-     1558, 1558, 1558, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
-     1559, 1559, 1559, 1559, 1559, 1560, 1560, 1560, 1560, 1560,
-     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1561, 1561, 1561,
-     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1562,
-     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
-
-     1562, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
-     1563, 1563, 1563, 1564, 1564, 1564, 1564, 1564, 1564, 1564,
-     1564, 1564, 1564, 1564, 1564, 1565, 1565, 1565, 1565, 1565,
-     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1566, 1566, 1566,
-     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1567,
-     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
-     1567, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
-     1568, 1568, 1568, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
-     1569, 1569, 1569, 1569, 1569, 1570, 1570, 1570, 1570, 1570,
-     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1571, 1571, 1571,
-
-     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1572,
-     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
-     1572, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
-     1573, 1573, 1573, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
-     1574, 1574, 1574, 1574, 1574, 1575, 1575, 1575, 1575, 1575,
-     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1576, 1576, 1576,
-     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1577,
-     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,
-     1577, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
-     1578, 1578, 1578, 1579, 1579, 1579, 1579, 1579, 1579, 1579,
-
-     1579, 1579, 1579, 1579, 1579, 1580, 1580, 1580, 1580, 1580,
-     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1581, 1581, 1581,
-     1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1582,
-     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
-     1582, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
-     1583, 1583, 1583, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
-     1584, 1584, 1584, 1584, 1584, 1585, 1585, 1585, 1585, 1585,
-     1585, 1585, 1585, 1585, 1585, 1585, 1585, 1586, 1586, 1586,
-     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1587,
-     1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587,
-
-     1587, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
-     1588, 1588, 1588, 1589, 1589, 1589, 1589, 1589, 1589, 1589,
-     1589, 1589, 1589, 1589, 1589, 1590, 1590, 1590, 1590, 1590,
-     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1591, 1591, 1591,
-     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1592,
-     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
-     1592, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
-     1593, 1593, 1593, 1594, 1594, 1594, 1594, 1594, 1594, 1594,
-     1594, 1594, 1594, 1594, 1594, 1595, 1595, 1595, 1595, 1595,
-     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1596, 1596, 1596,
-
-     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1597,
-     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
-     1597, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
-     1598, 1598, 1598, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
-     1599, 1599, 1599, 1599, 1599, 1600, 1600, 1600, 1600, 1600,
-     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1601, 1601, 1601,
-     1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1602,
-     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
-     1602, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
-     1603, 1603, 1603, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
-
-     1604, 1604, 1604, 1604, 1604, 1605, 1605, 1605, 1605, 1605,
-     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1606, 1606, 1606,
-     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1607,
-     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
-     1607, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
-     1608, 1608, 1608, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
-     1609, 1609, 1609, 1609, 1609, 1610, 1610, 1610, 1610, 1610,
-     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1611, 1611, 1611,
-     1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1612,
-     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
-
-     1612, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
-     1613, 1613, 1613, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
-     1614, 1614, 1614, 1614, 1614, 1615, 1615, 1615, 1615, 1615,
-     1615, 1615, 1615, 1615, 1615, 1615, 1615, 1616, 1616, 1616,
-     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1617,
-     1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617,
-     1617, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
-     1618, 1618, 1618, 1619, 1619, 1619, 1619, 1619, 1619, 1619,
-     1619, 1619, 1619, 1619, 1619, 1620, 1620, 1620, 1620, 1620,
-     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1621, 1621, 1621,
-
-     1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1622,
-     1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
-     1622, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
-     1623, 1623, 1623, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
-     1624, 1624, 1624, 1624, 1624, 1625, 1625, 1625, 1625, 1625,
-     1625, 1625, 1625, 1625, 1625, 1625, 1625, 1626, 1626, 1626,
-     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1627,
-     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
-     1627, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,
-     1628, 1628, 1628, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
-
-     1629, 1629, 1629, 1629, 1629, 1630, 1630, 1630, 1630, 1630,
-     1630, 1630, 1630, 1630, 1630, 1630, 1630, 1631, 1631, 1631,
-     1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1632,
-     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
-     1632, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
-     1633, 1633, 1633, 1634, 1634, 1634, 1634, 1634, 1634, 1634,
-     1634, 1634, 1634, 1634, 1634, 1635, 1635, 1635, 1635, 1635,
-     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1636, 1636, 1636,
-     1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1637,
-     1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
-
-     1637, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
-     1638, 1638, 1638, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
-     1639, 1639, 1639, 1639, 1639, 1640, 1640, 1640, 1640, 1640,
-     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1641, 1641, 1641,
-     1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1642,
-     1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642,
-     1642, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
-     1643, 1643, 1643, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
-     1644, 1644, 1644, 1644, 1644, 1645, 1645, 1645, 1645, 1645,
-     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1646, 1646, 1646,
-
-     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1647,
-     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
-     1647, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
-     1648, 1648, 1648, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
-     1649, 1649, 1649, 1649, 1649, 1650, 1650, 1650, 1650, 1650,
-     1650, 1650, 1650, 1650, 1650, 1650, 1650, 1651, 1651, 1651,
-     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1652,
-     1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652,
-     1652, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
-     1653, 1653, 1653, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
-
-     1654, 1654, 1654, 1654, 1654, 1655, 1655, 1655, 1655, 1655,
-     1655, 1655, 1655, 1655, 1655, 1655, 1655, 1656, 1656, 1656,
-     1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1657,
-     1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657,
-     1657, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658,
-     1658, 1658, 1658, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
-     1659, 1659, 1659, 1659, 1659, 1660, 1660, 1660, 1660, 1660,
-     1660, 1660, 1660, 1660, 1660, 1660, 1660, 1661, 1661, 1661,
-     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1662,
-     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
-
-     1662, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
-     1663, 1663, 1663, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
-     1664, 1664, 1664, 1664, 1664, 1665, 1665, 1665, 1665, 1665,
-     1665, 1665, 1665, 1665, 1665, 1665, 1665, 1666, 1666, 1666,
-     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1667,
-     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
-     1667, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
-     1668, 1668, 1668, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
-     1669, 1669, 1669, 1669, 1669, 1670, 1670, 1670, 1670, 1670,
-     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1671, 1671, 1671,
-
-     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1672,
-     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
-     1672, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
-     1673, 1673, 1673, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
-     1674, 1674, 1674, 1674, 1674, 1675, 1675, 1675, 1675, 1675,
-     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1676, 1676, 1676,
-     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1677,
-     1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677,
-     1677, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
-     1678, 1678, 1678, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
-
-     1679, 1679, 1679, 1679, 1679, 1680, 1680, 1680, 1680, 1680,
-     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1681, 1681, 1681,
-     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1682,
-     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
-     1682, 1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683,
-     1683, 1683, 1683, 1684, 1684, 1684, 1684, 1684, 1684, 1684,
-     1684, 1684, 1684, 1684, 1684, 1685, 1685, 1685, 1685, 1685,
-     1685, 1685, 1685, 1685, 1685, 1685, 1685, 1686, 1686, 1686,
-     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1687,
-     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
-
-     1687, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688,
-     1688, 1688, 1688, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
-     1689, 1689, 1689, 1689, 1689, 1690, 1690, 1690, 1690, 1690,
-     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1691, 1691, 1691,
-     1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1692,
-     1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692,
-     1692, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,
-     1693, 1693, 1693, 1694, 1694, 1694, 1694, 1694, 1694, 1694,
-     1694, 1694, 1694, 1694, 1694, 1695, 1695, 1695, 1695, 1695,
-     1695, 1695, 1695, 1695, 1695, 1695, 1695, 1696, 1696, 1696,
-
-     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1697,
-     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
-     1697, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
-     1698, 1698, 1698, 1699, 1699, 1699, 1699, 1699, 1699, 1699,
-     1699, 1699, 1699, 1699, 1699, 1700, 1700, 1700, 1700, 1700,
-     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1701, 1701, 1701,
-     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1702,
-     1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702,
-     1702, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703,
-     1703, 1703, 1703, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
-
-     1704, 1704, 1704, 1704, 1704, 1705, 1705, 1705, 1705, 1705,
-     1705, 1705, 1705, 1705, 1705, 1705, 1705, 1706, 1706, 1706,
-     1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1707,
-     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
-     1707, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
-     1708, 1708, 1708, 1709, 1709, 1709, 1709, 1709, 1709, 1709,
-     1709, 1709, 1709, 1709, 1709, 1710, 1710, 1710, 1710, 1710,
-     1710, 1710, 1710, 1710, 1710, 1710, 1710, 1711, 1711, 1711,
-     1711, 1711, 1711, 1711, 1711, 1711, 1711, 1711, 1711, 1712,
-     1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712,
-
-     1712, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
-     1713, 1713, 1713, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
-     1714, 1714, 1714, 1714, 1714, 1715, 1715, 1715, 1715, 1715,
-     1715, 1715, 1715, 1715, 1715, 1715, 1715, 1716, 1716, 1716,
-     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1717,
-     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
-     1717, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
-     1718, 1718, 1718, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
-     1719, 1719, 1719, 1719, 1719, 1720, 1720, 1720, 1720, 1720,
-     1720, 1720, 1720, 1720, 1720, 1720, 1720, 1721, 1721, 1721,
-
-     1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1722,
-     1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722,
-     1722, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723,
-     1723, 1723, 1723, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
-     1724, 1724, 1724, 1724, 1724, 1725, 1725, 1725, 1725, 1725,
-     1725, 1725, 1725, 1725, 1725, 1725, 1725, 1726, 1726, 1726,
-     1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1727,
-     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
-     1727, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728,
-     1728, 1728, 1728, 1729, 1729, 1729, 1729, 1729, 1729, 1729,
-
-     1729, 1729, 1729, 1729, 1729, 1730, 1730, 1730, 1730, 1730,
-     1730, 1730, 1730, 1730, 1730, 1730, 1730, 1731, 1731, 1731,
-     1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1732,
-     1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732,
-     1732, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733,
-     1733, 1733, 1733, 1734, 1734, 1734, 1734, 1734, 1734, 1734,
-     1734, 1734, 1734, 1734, 1734, 1735, 1735, 1735, 1735, 1735,
-     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1736, 1736, 1736,
-     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1737,
-     1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737,
-
-     1737, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
-     1738, 1738, 1738, 1739, 1739, 1739, 1739, 1739, 1739, 1739,
-     1739, 1739, 1739, 1739, 1739, 1740, 1740, 1740, 1740, 1740,
-     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1741, 1741, 1741,
-     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1742,
-     1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742,
-     1742, 1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743,
-     1743, 1743, 1743, 1744, 1744, 1744, 1744, 1744, 1744, 1744,
-     1744, 1744, 1744, 1744, 1744, 1745, 1745, 1745, 1745, 1745,
-     1745, 1745, 1745, 1745, 1745, 1745, 1745, 1746, 1746, 1746,
-
-     1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1747,
-     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
-     1747, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748,
-     1748, 1748, 1748, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
-     1749, 1749, 1749, 1749, 1749, 1750, 1750, 1750, 1750, 1750,
-     1750, 1750, 1750, 1750, 1750, 1750, 1750, 1751, 1751, 1751,
-     1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1752,
-     1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752,
-     1752, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
-     1753, 1753, 1753, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
-
-     1754, 1754, 1754, 1754, 1754, 1755, 1755, 1755, 1755, 1755,
-     1755, 1755, 1755, 1755, 1755, 1755, 1755, 1756, 1756, 1756,
-     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1757,
-     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
-     1757, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
-     1758, 1758, 1758, 1759, 1759, 1759, 1759, 1759, 1759, 1759,
-     1759, 1759, 1759, 1759, 1759, 1760, 1760, 1760, 1760, 1760,
-     1760, 1760, 1760, 1760, 1760, 1760, 1760, 1761, 1761, 1761,
-     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1762,
-     1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762,
-
-     1762, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
-     1763, 1763, 1763, 1764, 1764, 1764, 1764, 1764, 1764, 1764,
-     1764, 1764, 1764, 1764, 1764, 1765, 1765, 1765, 1765, 1765,
-     1765, 1765, 1765, 1765, 1765, 1765, 1765, 1766, 1766, 1766,
-     1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1767,
-     1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767,
-     1767, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768,
-     1768, 1768, 1768, 1769, 1769, 1769, 1769, 1769, 1769, 1769,
-     1769, 1769, 1769, 1769, 1769, 1770, 1770, 1770, 1770, 1770,
-     1770, 1770, 1770, 1770, 1770, 1770, 1770,  314,  313,  312,
-
-      311,  309,  308,  307,  306,  305,  304,  302,  297,  294,
-      293,  292,  291,  290,  289,  288,  286,  285,  284,  283,
-      282,  281,  280,  279,  278,  276,  275,  274,  272,  271,
-      269,  268,  267,  266,  265,  263,  261,  260,  255,  254,
-      249,  248,  247,  246,  245,  244,  243,  242,  241,  240,
-      236,  235,  232,  222,  217,  214,  213,  211,  197,  196,
-      195,  194,  193,  192,  191,  189,  187,  186,  185,  184,
-      183,  181,  180,  179,  177,  176,  175,  174,  173,  171,
-      169,  168,  167,  166,  165,  163,  162,  157,  154,  150,
-      133,  132,  131,  130,  129,  128,  127,  126,  125,  123,
-
-      112,  110,  108,  107,  105,  104,  102,  101,   98,   86,
-       83,   82,   81,   75,   68,   67,   66,   63,   62,   60,
-       59,   56,   51,   48,   47,   46,   42,   35,   26,   22,
-       21,   18,   17,    2,    1, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
-     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350
-
-    } ;
-
-static yy_state_type yy_last_accepting_state;
-static char *yy_last_accepting_cpos;
-
-/* The intent behind this definition is that it'll catch
- * any uses of REJECT which flex missed.
- */
-#define REJECT reject_used_but_not_detected
-static int yy_more_flag = 0;
-static int yy_more_len = 0;
-#define yymore() (yy_more_flag = 1)
-#define YY_MORE_ADJ yy_more_len
-#define YY_RESTORE_YY_MORE_OFFSET
-char *yytext;
-#define INITIAL 0
-
-/*
-   +----------------------------------------------------------------------+
-   | Zend Engine                                                          |
-   +----------------------------------------------------------------------+
-   | Copyright (c) 1998-2002 Zend Technologies Ltd. (http://www.zend.com) |
-   +----------------------------------------------------------------------+
-   | This source file is subject to version 2.00 of the Zend license,     |
-   | that is bundled with this package in the file LICENSE, and is        | 
-   | available at through the world-wide-web at                           |
-   | http://www.zend.com/license/2_00.txt.                                |
-   | If you did not receive a copy of the Zend license and are unable to  |
-   | obtain it through the world-wide-web, please send a note to          |
-   | license@zend.com so we can mail you a copy immediately.              |
-   +----------------------------------------------------------------------+
-   | Authors: Andi Gutmans <andi@zend.com>                                |
-   |          Zeev Suraski <zeev@zend.com>                                |
-   +----------------------------------------------------------------------+
-*/
-
-#define yyleng SCNG(yy_leng)
-#define yytext SCNG(yy_text)
-#define yytext_ptr SCNG(yy_text)
-#define yyin SCNG(yy_in)
-#define yyout SCNG(yy_out)
-#define yy_last_accepting_state SCNG(_yy_last_accepting_state)
-#define yy_last_accepting_cpos SCNG(_yy_last_accepting_cpos)
-#define yy_more_flag SCNG(_yy_more_flag)
-#define yy_more_len SCNG(_yy_more_len)
-
-#define ST_IN_SCRIPTING 1
-
-#define ST_DOUBLE_QUOTES 2
-
-#define ST_SINGLE_QUOTE 3
-
-#define ST_BACKQUOTE 4
-
-#define ST_HEREDOC 5
-
-#define ST_LOOKING_FOR_PROPERTY 6
-
-#define ST_LOOKING_FOR_VARNAME 7
-
-#define ST_COMMENT 8
-
-#define ST_ONE_LINE_COMMENT 9
-
-#define YY_STACK_USED 1
-
-#include <errno.h>
-#include "zend.h"
-#include "zend_alloc.h"
-#include <zend_language_parser.h>
-#include "zend_compile.h"
-#include "zend_language_scanner.h"
-#include "zend_highlight.h"
-#include "zend_constants.h"
-#include "zend_variables.h"
-#include "zend_operators.h"
-#include "zend_strtod.h"
-
-#ifdef HAVE_STDARG_H
-# include <stdarg.h>
-#endif
-
-#ifdef HAVE_UNISTD_H
-# include <unistd.h>
-#endif
-
-#ifdef ZEND_WIN32
-#include <io.h>
-#endif
-
-#define YY_DECL int lex_scan(zval *zendlval TSRMLS_DC)
-
-#define ECHO { ZEND_WRITE( yytext, yyleng ); }
-
-#ifdef ZTS
-#  define MY_INPUT yyinput
-#else
-#  define MY_INPUT input
-#endif
-
-
-#ifndef STDIN_FILENO
-# define STDIN_FILENO 0
-#endif
-
-
-/* Globals Macros */
-#define SCNG	LANG_SCNG
-#ifdef ZTS
-ZEND_API ts_rsrc_id language_scanner_globals_id;
-#else
-ZEND_API zend_scanner_globals language_scanner_globals;
-#endif
-
-
-#define YY_FATAL_ERROR zend_fatal_scanner_error
-
-#define HANDLE_NEWLINES(s, l)													\
-do {																			\
-	char *p = (s), *boundary = p+(l);											\
-																				\
-	while (p<boundary) {														\
-		if (*p == '\n') {														\
-			CG(zend_lineno)++;													\
-		} else if ((*p == '\r') && (p+1 < boundary) && (*(p+1) != '\n')) {		\
-			CG(zend_lineno)++;													\
-		}																		\
-		p++;																	\
-	}																			\
-} while (0)
-
-#define HANDLE_NEWLINE(c) \
-{ \
-	if (c == '\n' || c == '\r') { \
-		CG(zend_lineno)++; \
-	} \
-}
-		
-
-#define ZEND_IS_OCT(c)  ((c)>='0' && (c)<='7')
-#define ZEND_IS_HEX(c)  (((c)>='0' && (c)<='9') || ((c)>='a' && (c)<='f') || ((c)>='A' && (c)<='F'))
-
-
-void zend_fatal_scanner_error(char *message)
-{
-	zend_error(E_COMPILE_ERROR, "%s", message);
-}
-
-BEGIN_EXTERN_C()
-void startup_scanner(TSRMLS_D)
-{
-	CG(heredoc) = NULL;
-	CG(heredoc_len)=0;
-	SCNG(yy_start_stack_ptr) = 0;
-	SCNG(yy_start_stack_depth) = 0;
-	SCNG(current_buffer) = NULL;
-#ifdef ZEND_MULTIBYTE
-	SCNG(code) = NULL;
-	SCNG(code_size) = 0;
-	SCNG(current_code) = NULL;
-	SCNG(current_code_size) = 0;
-	SCNG(input_filter) = NULL;
-	SCNG(output_filter) = NULL;
-	SCNG(script_encoding) = NULL;
-	SCNG(internal_encoding) = NULL;
-#endif /* ZEND_MULTIBYTE */
-}
-
-
-void shutdown_scanner(TSRMLS_D)
-{
-	if (CG(heredoc)) {
-		efree(CG(heredoc));
-		CG(heredoc_len)=0;
-	}
-	if (SCNG(yy_start_stack)) {
-		yy_flex_free(SCNG(yy_start_stack));
-		SCNG(yy_start_stack) = NULL;
-	}
-#ifdef ZEND_MULTIBYTE
-	if (SCNG(code)) {
-		efree(SCNG(code));
-		SCNG(code) = NULL;
-	}
-	if (SCNG(current_code)) {
-		efree(SCNG(current_code));
-		SCNG(current_code) = NULL;
-	}
-	SCNG(code_size) = 0;
-	SCNG(current_code_size) = 0;
-	SCNG(input_filter) = NULL;
-	SCNG(output_filter) = NULL;
-	SCNG(script_encoding) = NULL;
-	SCNG(internal_encoding) = NULL;
-#endif /* ZEND_MULTIBYTE */
-}
-END_EXTERN_C()
-
-
-ZEND_API void zend_save_lexical_state(zend_lex_state *lex_state TSRMLS_DC)
-{
-	memcpy(&lex_state->buffer_state, &YY_CURRENT_BUFFER, sizeof(YY_BUFFER_STATE));
-	lex_state->in = SCNG(yy_in);
-	lex_state->state = YYSTATE;
-	lex_state->filename = zend_get_compiled_filename(TSRMLS_C);
-	lex_state->lineno = CG(zend_lineno);
-#ifdef ZEND_MULTIBYTE
-	lex_state->code = SCNG(code);
-	lex_state->code_size = SCNG(code_size);
-	lex_state->current_code = SCNG(current_code);
-	lex_state->current_code_size = SCNG(current_code_size);
-	lex_state->input_filter = SCNG(input_filter);
-	lex_state->output_filter = SCNG(output_filter);
-	lex_state->script_encoding = SCNG(script_encoding);
-	lex_state->internal_encoding = SCNG(internal_encoding);
-#endif /* ZEND_MULTIBYTE */
-}
-
-
-ZEND_API void zend_restore_lexical_state(zend_lex_state *lex_state TSRMLS_DC)
-{
-	YY_BUFFER_STATE original_buffer_state = YY_CURRENT_BUFFER;
-
-	if (lex_state->buffer_state) {
-		yy_switch_to_buffer(lex_state->buffer_state TSRMLS_CC);
-	} else {
-		YY_CURRENT_BUFFER = NULL;
-	}
-		
-	yy_delete_buffer(original_buffer_state TSRMLS_CC);
-	SCNG(yy_in) = lex_state->in;
-	BEGIN(lex_state->state);
-	CG(zend_lineno) = lex_state->lineno;
-	zend_restore_compiled_filename(lex_state->filename TSRMLS_CC);
-#ifdef ZEND_MULTIBYTE
-	SCNG(code) = lex_state->code;
-	SCNG(code_size) = lex_state->code_size;
-	SCNG(current_code) = lex_state->current_code;
-	SCNG(current_code_size) = lex_state->current_code_size;
-	SCNG(input_filter) = lex_state->input_filter;
-	SCNG(output_filter) = lex_state->output_filter;
-	SCNG(script_encoding) = lex_state->script_encoding;
-	SCNG(internal_encoding) = lex_state->internal_encoding;
-#endif /* ZEND_MULTIBYTE */
-}
-
-
-BEGIN_EXTERN_C()
-
-
-ZEND_API void zend_file_handle_dtor(zend_file_handle *fh)
-{
-	switch (fh->type) {
-		case ZEND_HANDLE_SOCKET_FD:
-#ifdef ZEND_WIN32
-			closesocket(fh->handle.fd);
-			break;
-#endif
-		/* fall-through */ 
-		case ZEND_HANDLE_FD:
-			close(fh->handle.fd);
-			break;
-		case ZEND_HANDLE_FP:
-			fclose(fh->handle.fp);
-			break;
-		case ZEND_HANDLE_FILENAME:
-			/* We're only supposed to get here when destructing the used_files hash,
-			 * which doesn't really contain open files, but references to their names/paths
-			 */
-			break;
-	}
-	if (fh->opened_path) {
-		efree(fh->opened_path);
-		fh->opened_path = NULL;
-	}
-	if (fh->free_filename && fh->filename) {
-		efree(fh->filename);
-		fh->filename = NULL;
-	}
-}
-
-
-int zend_compare_file_handles(zend_file_handle *fh1, zend_file_handle *fh2)
-{
-	if (fh1->type != fh2->type) {
-		return 0;
-	}
-	switch (fh1->type) {
-		case ZEND_HANDLE_FP:
-			return fh1->handle.fp==fh2->handle.fp;
-			break;
-		case ZEND_HANDLE_SOCKET_FD:
-		case ZEND_HANDLE_FD:
-			return fh1->handle.fd==fh2->handle.fd;
-			break;
-	}
-	return 0;
-}
-
-
-ZEND_API void zend_destroy_file_handle(zend_file_handle *file_handle TSRMLS_DC)
-{
-	zend_llist_del_element(&CG(open_files), file_handle, (int (*)(void *, void *)) zend_compare_file_handles);
-}
-
-
-ZEND_API int open_file_for_scanning(zend_file_handle *file_handle TSRMLS_DC)
-{
-	char *file_path=NULL;
-	int do_add = 1;
-
-	switch (file_handle->type) {
-		case ZEND_HANDLE_FILENAME:
-			if (zend_open(file_handle->filename, file_handle) != SUCCESS)
-				return FAILURE;
-			break;
-	}
-
-	if (!ZEND_IS_VALID_FILE_HANDLE(file_handle))
-			return FAILURE;
-	
-	if (file_handle->type == ZEND_HANDLE_FP && file_handle->handle.fp == stdin)
-		do_add = 0;
-	else if (file_handle->type == ZEND_HANDLE_FD && file_handle->handle.fd == STDIN_FILENO)
-		do_add = 0;
-	
-	if (do_add) {
-		zend_llist_add_element(&CG(open_files), file_handle);
-	}
-	/* Reset the scanner for scanning the new file */
-	SCNG(yy_in) = file_handle;
-#ifdef ZEND_MULTIBYTE
-	if (zend_read_file(TSRMLS_C) != 0) {
-		return FAILURE;
-	}
-	
-	/* force flex to use buffer only */
-	SCNG(yy_in) = NULL;
-	SCNG(init) = 0;
-	SCNG(start) = 1;
-
-	zend_multibyte_set_filter(NULL TSRMLS_CC);
-
-	if (!SCNG(input_filter)) {
-		SCNG(current_code) = (char*)emalloc(SCNG(code_size)+1);
-		memcpy(SCNG(current_code), SCNG(code), SCNG(code_size)+1);
-		SCNG(current_code_size) = SCNG(code_size);
-	} else {
-		SCNG(input_filter)(&SCNG(current_code), &SCNG(current_code_size), SCNG(code), SCNG(code_size) TSRMLS_CC);
-		if (!SCNG(current_code) || !SCNG(current_code_size)) {
-			return FAILURE;
-		}
-	}
-	
-	/* we need two nulls so that ralloc... */
-	SCNG(current_code) = (char*)erealloc(SCNG(current_code), SCNG(current_code_size)+2);
-	*(SCNG(current_code)+SCNG(current_code_size)) = (char)NULL;
-	*(SCNG(current_code)+SCNG(current_code_size)+1) = (char)NULL;
-	yy_scan_buffer(SCNG(current_code), SCNG(current_code_size)+2 TSRMLS_CC);
-#else /* ZEND_MULTIBYTE */
-	yy_switch_to_buffer(yy_create_buffer(SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC) TSRMLS_CC);
-#endif /* ZEND_MULTIBYTE */
-	BEGIN(INITIAL);
-
-	if (file_handle->opened_path) {
-		file_path = file_handle->opened_path; 
-	} else {
-		file_path = file_handle->filename;
-	}
-
-	zend_set_compiled_filename(file_path TSRMLS_CC);
-	
-	if (CG(zend_lineno) < 0) { /* position is (n_lines * -1), position was changed by an external app */
-		CG(zend_lineno) = CG(zend_lineno) * -1;
-	} else {
-		CG(zend_lineno) = 1;
-	}
-	
-	CG(increment_lineno) = 0;
-	return SUCCESS;
-}
-END_EXTERN_C()
-
-
-ZEND_API zend_op_array *compile_file(zend_file_handle *file_handle, int type TSRMLS_DC)
-{
-	zend_lex_state original_lex_state;
-	zend_op_array *op_array = (zend_op_array *) emalloc(sizeof(zend_op_array));
-	zend_op_array *original_active_op_array = CG(active_op_array);
-	zend_op_array *retval=NULL;
-	int compiler_result;
-	zend_bool compilation_successful=0;
-	znode retval_znode;
-	zend_bool original_in_compilation = CG(in_compilation);
-
-	retval_znode.op_type = IS_CONST;
-	retval_znode.u.constant.type = IS_LONG;
-	retval_znode.u.constant.value.lval = 1;
-	retval_znode.u.constant.is_ref = 0;
-	retval_znode.u.constant.refcount = 1;
-
-	zend_save_lexical_state(&original_lex_state TSRMLS_CC);
-
-	retval = op_array; /* success oriented */
-
-	if (open_file_for_scanning(file_handle TSRMLS_CC)==FAILURE) {
-		if (type==ZEND_REQUIRE) {
-			zend_message_dispatcher(ZMSG_FAILED_REQUIRE_FOPEN, file_handle->filename);
-			zend_bailout();		
-		} else {
-			zend_message_dispatcher(ZMSG_FAILED_INCLUDE_FOPEN, file_handle->filename);
-		}
-		compilation_successful=0;
-	} else {
-		init_op_array(op_array, ZEND_USER_FUNCTION, INITIAL_OP_ARRAY_SIZE TSRMLS_CC);
-		CG(in_compilation) = 1;
-		CG(active_op_array) = op_array;
-		compiler_result = zendparse(TSRMLS_C);
-		zend_do_return(&retval_znode, 0 TSRMLS_CC);
-		CG(in_compilation) = original_in_compilation;
-		if (compiler_result==1) { /* parser error */
-			zend_bailout();
-		}
-		compilation_successful=1;
-#ifdef ZEND_MULTIBYTE
-		if (SCNG(code)) {
-			efree(SCNG(code));
-			SCNG(code) = NULL;
-		}
-		if (SCNG(current_code)) {
-			efree(SCNG(current_code));
-			SCNG(current_code) = NULL;
-		}
-#endif /* ZEND_MULTIBYTE */
-	}
-
-	if (retval) {
-		CG(active_op_array) = original_active_op_array;
-		if (compilation_successful) {
-			pass_two(op_array TSRMLS_CC);
-		} else {
-			efree(op_array);
-			retval = NULL;
-		}
-	}
-	if (compilation_successful) {
-		zend_restore_lexical_state(&original_lex_state TSRMLS_CC);
-	}
-	return retval;
-}
-
-
-zend_op_array *compile_filename(int type, zval *filename TSRMLS_DC)
-{
-	zend_file_handle file_handle = {0};
-	zval tmp;
-	zend_op_array *retval;
-	char *opened_path = NULL;
-
-	if (filename->type != IS_STRING) {
-		tmp = *filename;
-		zval_copy_ctor(&tmp);
-		convert_to_string(&tmp);
-		filename = &tmp;
-	}
-	file_handle.filename = filename->value.str.val;
-	file_handle.free_filename = 0;
-	file_handle.type = ZEND_HANDLE_FILENAME;
-	file_handle.opened_path = NULL;
-
-	retval = zend_compile_file(&file_handle, type TSRMLS_CC);
-	if (retval && ZEND_IS_VALID_FILE_HANDLE(&file_handle)) {
-		int dummy = 1;
-	
-		if (!file_handle.opened_path) {
-			file_handle.opened_path = opened_path = estrndup(filename->value.str.val, filename->value.str.len);
-		}
-		
-		zend_hash_add(&EG(included_files), file_handle.opened_path, strlen(file_handle.opened_path)+1, (void *)&dummy, sizeof(int), NULL);
-		
-		if (opened_path) {
-			efree(opened_path);
-		}
-	}
-	zend_destroy_file_handle(&file_handle TSRMLS_CC);
-
-	if (filename==&tmp) {
-		zval_dtor(&tmp);
-	}
-	return retval;
-}
-
-ZEND_API int zend_prepare_string_for_scanning(zval *str, char *filename TSRMLS_DC)
-{
-	/* enforce two trailing NULLs for flex... */
-	STR_REALLOC(str->value.str.val, str->value.str.len+2);
-
-	str->value.str.val[str->value.str.len+1]=0;
-
-	SCNG(yy_in)=NULL;
-#ifdef ZEND_MULTIBYTE
-	/* instead of zend_readfile() */
-	SCNG(code) = estrdup(str->value.str.val);
-	SCNG(code_size) = str->value.str.len;
-
-	zend_multibyte_set_filter(CG(internal_encoding) TSRMLS_CC);
-
-	if (!SCNG(input_filter)) {
-		SCNG(current_code) = (char*)emalloc(SCNG(code_size)+1);
-		memcpy(SCNG(current_code), SCNG(code), SCNG(code_size)+1);
-		SCNG(current_code_size) = SCNG(code_size);
-	} else {
-		SCNG(input_filter)(&SCNG(current_code), &SCNG(current_code_size), SCNG(code), SCNG(code_size) TSRMLS_CC);
-		if (!SCNG(current_code) || !SCNG(current_code_size)) {
-			return FAILURE;
-		}
-	}
-
-	SCNG(current_code) = (char*)erealloc(SCNG(current_code), SCNG(current_code_size)+2);
-	*(SCNG(current_code)+SCNG(current_code_size)) = (char)NULL;
-	*(SCNG(current_code)+SCNG(current_code_size)+1) = (char)NULL;
-	yy_scan_buffer(SCNG(current_code), SCNG(current_code_size)+2 TSRMLS_CC);
-#else /* ZEND_MULTIBYTE */
-	yy_scan_buffer(str->value.str.val, str->value.str.len+2 TSRMLS_CC);
-#endif /* ZEND_MULTIBYTE */
-
-	zend_set_compiled_filename(filename TSRMLS_CC);
-	CG(zend_lineno) = 1;
-	CG(increment_lineno) = 0;
-	return SUCCESS;
-}
-
-
-zend_op_array *compile_string(zval *source_string, char *filename TSRMLS_DC)
-{
-	zend_lex_state original_lex_state;
-	zend_op_array *op_array = (zend_op_array *) emalloc(sizeof(zend_op_array));
-	zend_op_array *original_active_op_array = CG(active_op_array);
-	zend_op_array *retval;
-	zval tmp;
-	int compiler_result;
-	zend_bool original_in_compilation = CG(in_compilation);
-
-	if (source_string->value.str.len==0) {
-		efree(op_array);
-		return NULL;
-	}
-
-	CG(in_compilation) = 1;
-
-	tmp = *source_string;
-	zval_copy_ctor(&tmp);
-	convert_to_string(&tmp);
-	source_string = &tmp;
-
-	zend_save_lexical_state(&original_lex_state TSRMLS_CC);
-	if (zend_prepare_string_for_scanning(source_string, filename TSRMLS_CC)==FAILURE) {
-		efree(op_array);
-		retval = NULL;
-	} else {
-		init_op_array(op_array, ZEND_EVAL_CODE, INITIAL_OP_ARRAY_SIZE TSRMLS_CC);
-		CG(active_op_array) = op_array;
-		BEGIN(ST_IN_SCRIPTING);
-		compiler_result = zendparse(TSRMLS_C);
-#ifdef ZEND_MULTIBYTE
-		if (SCNG(code)) {
-			efree(SCNG(code));
-			SCNG(code) = NULL;
-		}
-		if (SCNG(current_code)) {
-			efree(SCNG(current_code));
-			SCNG(current_code) = NULL;
-		}
-#endif /* ZEND_MULTIBYTE */
-		
-		if (compiler_result==1) {
-			CG(active_op_array) = original_active_op_array;
-			CG(unclean_shutdown)=1;
-			retval = NULL;
-		} else {
-			zend_do_return(NULL, 0 TSRMLS_CC);
-			CG(active_op_array) = original_active_op_array;
-			pass_two(op_array TSRMLS_CC);
-			retval = op_array;
-		}
-		zend_restore_lexical_state(&original_lex_state TSRMLS_CC);
-	}
-	zval_dtor(&tmp);
-	CG(in_compilation) = original_in_compilation;
-	return retval;
-}
-
-
-BEGIN_EXTERN_C()
-int highlight_file(char *filename, zend_syntax_highlighter_ini *syntax_highlighter_ini TSRMLS_DC)
-{
-	zend_lex_state original_lex_state;
-	zend_file_handle file_handle = {0};
-
-	file_handle.type = ZEND_HANDLE_FILENAME;
-	file_handle.filename = filename;
-	file_handle.free_filename = 0;
-	file_handle.opened_path = NULL;
-	zend_save_lexical_state(&original_lex_state TSRMLS_CC);
-	if (open_file_for_scanning(&file_handle TSRMLS_CC)==FAILURE) {
-		zend_message_dispatcher(ZMSG_FAILED_HIGHLIGHT_FOPEN, filename);
-		return FAILURE;
-	}
-	zend_highlight(syntax_highlighter_ini TSRMLS_CC);
-#ifdef ZEND_MULTIBYTE
-	if (SCNG(code)) {
-		efree(SCNG(code));
-		SCNG(code) = NULL;
-	}
-	if (SCNG(current_code)) {
-		efree(SCNG(current_code));
-		SCNG(current_code) = NULL;
-	}
-#endif /* ZEND_MULTIBYTE */
-	zend_destroy_file_handle(&file_handle TSRMLS_CC);
-	zend_restore_lexical_state(&original_lex_state TSRMLS_CC);
-	return SUCCESS;
-}
-
-int highlight_string(zval *str, zend_syntax_highlighter_ini *syntax_highlighter_ini, char *str_name TSRMLS_DC)
-{
-	zend_lex_state original_lex_state;
-	zval tmp = *str;
-
-	str = &tmp;
-	zval_copy_ctor(str);
-	zend_save_lexical_state(&original_lex_state TSRMLS_CC);
-	if (zend_prepare_string_for_scanning(str, str_name TSRMLS_CC)==FAILURE) {
-		return FAILURE;
-	}
-	zend_highlight(syntax_highlighter_ini TSRMLS_CC);
-#ifdef ZEND_MULTIBYTE
-	if (SCNG(code)) {
-		efree(SCNG(code));
-		SCNG(code) = NULL;
-	}
-	if (SCNG(current_code)) {
-		efree(SCNG(current_code));
-		SCNG(current_code) = NULL;
-	}
-#endif /* ZEND_MULTIBYTE */
-	zend_restore_lexical_state(&original_lex_state TSRMLS_CC);
-	zval_dtor(str);
-	return SUCCESS;
-}
-END_EXTERN_C()
-
-#ifdef ZEND_MULTIBYTE
-BEGIN_EXTERN_C()
-ZEND_API void zend_yyinput_again(zend_multibyte_filter old_input_filter, zend_encoding *old_encoding TSRMLS_DC)
-{
-	YY_BUFFER_STATE b = YY_CURRENT_BUFFER;
-	int offset, original_offset, length, free_flag;
-	char *p;
-	zend_encoding *new_encoding;
-
-	/* calculate current position */
-	offset = original_offset = yy_c_buf_p - b->yy_ch_buf;
-	if (old_input_filter && original_offset > 0) {
-		/* we need to adjust offset ? (i've gotta improve this...) */
-		new_encoding = SCNG(script_encoding);
-		SCNG(script_encoding) = old_encoding;
-		do {
-			(old_input_filter)(&p, &length, SCNG(code), offset TSRMLS_CC);
-			if (!p) {
-				SCNG(script_encoding) = new_encoding;
-				return;
-			}
-			efree(p);
-			if (length > original_offset) {
-				offset--;
-			} else if (length < original_offset) {
-				offset++;
-			}
-		} while (original_offset != length);
-		SCNG(script_encoding) = new_encoding;
-	}
-
-	/* convert and set */
-	if (!SCNG(input_filter)) {
-		length = SCNG(code_size)-offset-1;
-		p = SCNG(code)+offset+1;
-		free_flag = 0;
-	} else {
-		SCNG(input_filter)(&p, &length, SCNG(code)+offset+1, SCNG(code_size)-offset-1 TSRMLS_CC);
-		free_flag = 1;
-	}
-	if (original_offset+length+1 > (int)b->yy_buf_size) {
-		b->yy_buf_size = original_offset+length+1;
-		b->yy_ch_buf = (char*)erealloc(b->yy_ch_buf, b->yy_buf_size+2);
-		SCNG(current_code) = b->yy_ch_buf;
-		SCNG(current_code_size) = b->yy_buf_size;
-	}
-	yy_c_buf_p = b->yy_ch_buf + original_offset;
-	strncpy(yy_c_buf_p+1, p, length);
- 	b->yy_n_chars = original_offset + length + 1;
-	SCNG(yy_n_chars) = b->yy_n_chars;
-	b->yy_ch_buf[SCNG(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
-	b->yy_ch_buf[SCNG(yy_n_chars)+1] = YY_END_OF_BUFFER_CHAR;
-
-	if (free_flag) {
-		efree(p);
-	}
-}
-
-
-ZEND_API int zend_read_file(TSRMLS_D)
-{
-	char buf[8192];
-	int n;
-
-	SCNG(code) = NULL;
-	SCNG(code_size) = 0;
-
-	for (;;) {
-		switch (SCNG(yy_in)->type) {
-			case ZEND_HANDLE_FD:
-				n = read(SCNG(yy_in)->handle.fd, buf, sizeof(buf));
-				break;
-			case ZEND_HANDLE_FP:
-				n = fread(buf, sizeof(buf[0]), sizeof(buf) / sizeof(buf[0]), SCNG(yy_in)->handle.fp);
-				break;
-			case ZEND_HANDLE_SOCKET_FD:
-				n =	recv(SCNG(yy_in)->handle.fd, buf, sizeof(buf), 0);
-		}
-
-		if (n <= 0) {
-			break;
-		}
-
-		SCNG(code_size) += n;
-		if (SCNG(code)) {
-			SCNG(code) = (char*)erealloc(SCNG(code), SCNG(code_size)+1);
-		} else {
-			SCNG(code) = (char*)emalloc(SCNG(code_size)+1);
-		}
-		memcpy(SCNG(code)+SCNG(code_size)-n, buf, n);
-	}
-
-	if (n < 0) {
-		return -1;
-	}
-
-	if (!SCNG(code)) {
-		SCNG(code) = emalloc(SCNG(code_size)+1);
-	}
-	*(SCNG(code)+SCNG(code_size)) = (char)NULL;
-
-	return 0;
-}
-
-
-/*
- *	macros for yytext -> zval
- */
-# define zend_copy_value(zendlval, yytext, yyleng) \
-	if (SCNG(output_filter)) { \
-		SCNG(output_filter)(&(zendlval->value.str.val), &(zendlval->value.str.len), yytext, yyleng TSRMLS_CC); \
-	} else { \
-		zendlval->value.str.val = (char *) estrndup(yytext, yyleng); \
-		zendlval->value.str.len = yyleng; \
-	}
-#else /* ZEND_MULTIBYTE */
-# define zend_copy_value(zendlval, yytext, yyleng) \
-	zendlval->value.str.val = (char *)estrndup(yytext, yyleng); \
-	zendlval->value.str.len = yyleng;
-#endif /* ZEND_MULTIBYTE */
-
-/* Macros after this point can all be overridden by user definitions in
- * section 1.
- */
-
-#ifndef YY_SKIP_YYWRAP
-#ifdef __cplusplus
-extern "C" int yywrap YY_PROTO(( void ));
-#else
-extern int yywrap YY_PROTO(( void ));
-#endif
-#endif
-
-#ifndef YY_NO_UNPUT
-static void yyunput YY_PROTO(( int c, char *buf_ptr TSRMLS_DC ));
-#endif
-
-#ifndef yytext_ptr
-static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
-#endif
-
-#ifdef YY_NEED_STRLEN
-static int yy_flex_strlen YY_PROTO(( yyconst char * ));
-#endif
-
-#ifndef YY_NO_INPUT
-#ifdef __cplusplus
-static int 3 YY_PROTO(( TSRMLS_D ));
-#else
-static int input YY_PROTO(( TSRMLS_D ));
-#endif
-#endif
-
-#if YY_STACK_USED
-#define yy_start_stack_ptr SCNG(yy_start_stack_ptr)
-#define yy_start_stack_depth SCNG(yy_start_stack_depth)
-#define yy_start_stack SCNG(yy_start_stack)
-/*
-static int yy_start_stack_ptr = 0;
-static int yy_start_stack_depth = 0;
-static int *yy_start_stack = 0;
-*/
-#ifndef YY_NO_PUSH_STATE
-static void yy_push_state YY_PROTO(( int new_state TSRMLS_DC ));
-#endif
-#ifndef YY_NO_POP_STATE
-static void yy_pop_state YY_PROTO(( TSRMLS_D ));
-#endif
-#ifndef YY_NO_TOP_STATE
-static int yy_top_state YY_PROTO(( TSRMLS_D ));
-#endif
-
-#else
-#define YY_NO_PUSH_STATE 1
-#define YY_NO_POP_STATE 1
-#define YY_NO_TOP_STATE 1
-#endif
-
-#ifdef YY_MALLOC_DECL
-YY_MALLOC_DECL
-#else
-#if __STDC__
-#ifndef __cplusplus
-#include <stdlib.h>
-#endif
-#else
-/* Just try to get by without declaring the routines.  This will fail
- * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
- * or sizeof(void*) != sizeof(int).
- */
-#endif
-#endif
-
-/* Amount of stuff to slurp up with each read. */
-#ifndef YY_READ_BUF_SIZE
-#define YY_READ_BUF_SIZE 8192
-#endif
-
-/* Copy whatever the last rule matched to the standard output. */
-
-#ifndef ECHO
-#define ECHO
-#endif
-
-/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
- * is returned in "result".
- */
-
-#define YY_INPUT(buf,result,max_size) do {				\
-	result = yyin->type == ZEND_HANDLE_FD ? 			\
-			read(yyin->handle.fd, buf, max_size)		\
-			: yyin->type == ZEND_HANDLE_FP ? 			\
-			fread(buf, 1, max_size, yyin->handle.fp)	\
-			: yyin->type == ZEND_HANDLE_SOCKET_FD ?		\
-			recv(yyin->handle.fd, buf, max_size, 0)		\
-			: -1;										\
-	if (result < 0)										\
-		YY_FATAL_ERROR("input in flex scanner failed");	\
-} while (0)
-
-#ifndef YY_INPUT
-#define YY_INPUT(buf,result,max_size) \
-	if ( yy_current_buffer->yy_is_interactive ) \
-		{ \
-		int c = '*', n; \
-		for ( n = 0; n < max_size && \
-			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
-			buf[n] = (char) c; \
-		if ( c == '\n' ) \
-			buf[n++] = (char) c; \
-		if ( c == EOF && ferror( yyin ) ) \
-			YY_FATAL_ERROR( "input in flex scanner failed" ); \
-		result = n; \
-		} \
-	else \
-		{ \
-		errno=0; \
-		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
-			{ \
-			if( errno != EINTR) \
-				{ \
-				YY_FATAL_ERROR( "input in flex scanner failed" ); \
-				break; \
-				} \
-			errno=0; \
-			clearerr(yyin); \
-			} \
-		}
-#endif
-
-/* No semi-colon after return; correct usage is to write "yyterminate();" -
- * we don't want an extra ';' after the "return" because that will cause
- * some compilers to complain about unreachable statements.
- */
-#ifndef yyterminate
-#define yyterminate() return YY_NULL
-#endif
-
-/* Number of entries by which start-condition stack grows. */
-#ifndef YY_START_STACK_INCR
-#define YY_START_STACK_INCR 25
-#endif
-
-/* Report a fatal error. */
-#ifndef YY_FATAL_ERROR
-#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
-#endif
-
-
-/* Default declaration of generated scanner - a define so the user can
- * easily add parameters.
- */
-#ifndef YY_DECL
-#define YY_DECL int yylex YY_PROTO(( void ))
-#endif
-
-/* Code executed at the beginning of each rule, after yytext and yyleng
- * have been set up.
- */
-#ifndef YY_USER_ACTION
-#define YY_USER_ACTION
-#endif
-
-/* Code executed at the end of each rule. */
-#ifndef YY_BREAK
-#define YY_BREAK break;
-#endif
-
-#define YY_RULE_SETUP \
-	if ( yyleng > 0 ) \
-		yy_current_buffer->yy_at_bol = \
-				(yytext[yyleng - 1] == '\n'); \
-	YY_USER_ACTION
-
-YY_DECL
-	{
-	register yy_state_type yy_current_state;
-	register char *yy_cp, *yy_bp;
-	register int yy_act;
-
-
-
-
-	if ( yy_init )
-		{
-		yy_init = 0;
-
-#ifdef YY_USER_INIT
-		YY_USER_INIT;
-#endif
-
-		if ( ! yy_start )
-			yy_start = 1;	/* first start state */
-
-#if 0
-		if ( ! SCNG(yy_in) )
-			SCNG(yy_in) = stdin;
-
-		if ( ! SCNG(yy_out) )
-			SCNG(yy_out) = stdout;
-#endif
-
-		if ( ! yy_current_buffer )
-			yy_current_buffer =
-				yy_create_buffer( SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC );
-
-		yy_load_buffer_state(TSRMLS_C);
-		}
-
-	while ( 1 )		/* loops until end-of-file is reached */
-		{
-		yy_more_len = 0;
-		if ( yy_more_flag )
-			{
-			yy_more_len = yy_c_buf_p - yytext_ptr;
-			yy_more_flag = 0;
-			}
-		yy_cp = yy_c_buf_p;
-
-		/* Support of yytext. */
-		*yy_cp = yy_hold_char;
-
-		/* yy_bp points to the position in yy_ch_buf of the start of
-		 * the current run.
-		 */
-		yy_bp = yy_cp;
-
-		yy_current_state = yy_start;
-		yy_current_state += YY_AT_BOL();
-yy_match:
-		do
-			{
-			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
-			if ( yy_accept[yy_current_state] )
-				{
-				yy_last_accepting_state = yy_current_state;
-				yy_last_accepting_cpos = yy_cp;
-				}
-			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
-				{
-				yy_current_state = (int) yy_def[yy_current_state];
-				if ( yy_current_state >= 1351 )
-					yy_c = yy_meta[(unsigned int) yy_c];
-				}
-			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
-			++yy_cp;
-			}
-		while ( yy_base[yy_current_state] != 7936 );
-
-yy_find_action:
-		yy_act = yy_accept[yy_current_state];
-		if ( yy_act == 0 )
-			{ /* have to back up */
-			yy_cp = yy_last_accepting_cpos;
-			yy_current_state = yy_last_accepting_state;
-			yy_act = yy_accept[yy_current_state];
-			}
-
-		YY_DO_BEFORE_ACTION;
-
-
-do_action:	/* This label is used only to access EOF actions. */
-
-
-		switch ( yy_act )
-	{ /* beginning of action switch */
-			case 0: /* must back up */
-			/* undo the effects of YY_DO_BEFORE_ACTION */
-			*yy_cp = yy_hold_char;
-			yy_cp = yy_last_accepting_cpos;
-			yy_current_state = yy_last_accepting_state;
-			goto yy_find_action;
-
-case 1:
-YY_RULE_SETUP
-{
-	return T_EXIT;
-}
-	YY_BREAK
-case 2:
-YY_RULE_SETUP
-{
-	return T_EXIT;
-}
-	YY_BREAK
-case 3:
-YY_RULE_SETUP
-{
-	return T_OLD_FUNCTION;
-}
-	YY_BREAK
-case 4:
-YY_RULE_SETUP
-{
-	return T_FUNCTION;
-}
-	YY_BREAK
-case 5:
-YY_RULE_SETUP
-{
-	return T_CONST;
-}
-	YY_BREAK
-case 6:
-YY_RULE_SETUP
-{
-	return T_RETURN;
-}
-	YY_BREAK
-case 7:
-YY_RULE_SETUP
-{
-	return T_IF;
-}
-	YY_BREAK
-case 8:
-YY_RULE_SETUP
-{
-	return T_ELSEIF;
-}
-	YY_BREAK
-case 9:
-YY_RULE_SETUP
-{
-	return T_ENDIF;
-}
-	YY_BREAK
-case 10:
-YY_RULE_SETUP
-{
-	return T_ELSE;
-}
-	YY_BREAK
-case 11:
-YY_RULE_SETUP
-{
-	return T_WHILE;
-}
-	YY_BREAK
-case 12:
-YY_RULE_SETUP
-{
-	return T_ENDWHILE;
-}
-	YY_BREAK
-case 13:
-YY_RULE_SETUP
-{
-	return T_DO;
-}
-	YY_BREAK
-case 14:
-YY_RULE_SETUP
-{
-	return T_FOR;
-}
-	YY_BREAK
-case 15:
-YY_RULE_SETUP
-{
-	return T_ENDFOR;
-}
-	YY_BREAK
-case 16:
-YY_RULE_SETUP
-{
-	return T_FOREACH;
-}
-	YY_BREAK
-case 17:
-YY_RULE_SETUP
-{
-	return T_ENDFOREACH;
-}
-	YY_BREAK
-case 18:
-YY_RULE_SETUP
-{
-	return T_DECLARE;
-}
-	YY_BREAK
-case 19:
-YY_RULE_SETUP
-{
-	return T_ENDDECLARE;
-}
-	YY_BREAK
-case 20:
-YY_RULE_SETUP
-{
-	return T_AS;
-}
-	YY_BREAK
-case 21:
-YY_RULE_SETUP
-{
-	return T_SWITCH;
-}
-	YY_BREAK
-case 22:
-YY_RULE_SETUP
-{
-	return T_ENDSWITCH;
-}
-	YY_BREAK
-case 23:
-YY_RULE_SETUP
-{
-	return T_CASE;
-}
-	YY_BREAK
-case 24:
-YY_RULE_SETUP
-{
-	return T_DEFAULT;
-}
-	YY_BREAK
-case 25:
-YY_RULE_SETUP
-{
-	return T_BREAK;
-}
-	YY_BREAK
-case 26:
-YY_RULE_SETUP
-{
-	return T_CONTINUE;
-}
-	YY_BREAK
-case 27:
-YY_RULE_SETUP
-{
-	return T_ECHO;
-}
-	YY_BREAK
-case 28:
-YY_RULE_SETUP
-{
-	return T_PRINT;
-}
-	YY_BREAK
-case 29:
-YY_RULE_SETUP
-{
-	return T_CLASS;
-}
-	YY_BREAK
-case 30:
-YY_RULE_SETUP
-{
-	return T_EXTENDS;
-}
-	YY_BREAK
-case 31:
-YY_RULE_SETUP
-{
-	yy_push_state(ST_LOOKING_FOR_PROPERTY TSRMLS_CC);
-	return T_OBJECT_OPERATOR;
-}
-	YY_BREAK
-case 32:
-YY_RULE_SETUP
-{
-	yy_pop_state(TSRMLS_C);
- 	zend_copy_value(zendlval, yytext, yyleng);
-	zendlval->value.str.len = yyleng;
-	zendlval->type = IS_STRING;
-	return T_STRING;
-}
-	YY_BREAK
-case 33:
-YY_RULE_SETUP
-{
-	yyless(0);
-	yy_pop_state(TSRMLS_C);
-}
-	YY_BREAK
-case 34:
-YY_RULE_SETUP
-{
-	return T_PAAMAYIM_NEKUDOTAYIM;
-}
-	YY_BREAK
-case 35:
-YY_RULE_SETUP
-{
-	return T_NEW;
-}
-	YY_BREAK
-case 36:
-YY_RULE_SETUP
-{
-	return T_VAR;
-}
-	YY_BREAK
-case 37:
-YY_RULE_SETUP
-{
-	return T_INT_CAST;
-}
-	YY_BREAK
-case 38:
-YY_RULE_SETUP
-{
-	return T_DOUBLE_CAST;
-}
-	YY_BREAK
-case 39:
-YY_RULE_SETUP
-{
-	return T_STRING_CAST;
-}
-	YY_BREAK
-case 40:
-YY_RULE_SETUP
-{
-	return T_ARRAY_CAST;
-}
-	YY_BREAK
-case 41:
-YY_RULE_SETUP
-{
-	return T_OBJECT_CAST;
-}
-	YY_BREAK
-case 42:
-YY_RULE_SETUP
-{
-	return T_BOOL_CAST;
-}
-	YY_BREAK
-case 43:
-YY_RULE_SETUP
-{
-	return T_UNSET_CAST;
-}
-	YY_BREAK
-case 44:
-YY_RULE_SETUP
-{
-	return T_EVAL;
-}
-	YY_BREAK
-case 45:
-YY_RULE_SETUP
-{
-	return T_INCLUDE;
-}
-	YY_BREAK
-case 46:
-YY_RULE_SETUP
-{
-	return T_INCLUDE_ONCE;
-}
-	YY_BREAK
-case 47:
-YY_RULE_SETUP
-{
-	return T_REQUIRE;
-}
-	YY_BREAK
-case 48:
-YY_RULE_SETUP
-{
-	return T_REQUIRE_ONCE;
-}
-	YY_BREAK
-case 49:
-YY_RULE_SETUP
-{
-	return T_USE;
-}
-	YY_BREAK
-case 50:
-YY_RULE_SETUP
-{
-	return T_GLOBAL;
-}
-	YY_BREAK
-case 51:
-YY_RULE_SETUP
-{
-	return T_ISSET;
-}
-	YY_BREAK
-case 52:
-YY_RULE_SETUP
-{
-	return T_EMPTY;
-}
-	YY_BREAK
-case 53:
-YY_RULE_SETUP
-{
-	return T_STATIC;
-}
-	YY_BREAK
-case 54:
-YY_RULE_SETUP
-{
-	return T_UNSET;
-}
-	YY_BREAK
-case 55:
-YY_RULE_SETUP
-{
-	return T_DOUBLE_ARROW;
-}
-	YY_BREAK
-case 56:
-YY_RULE_SETUP
-{
-	return T_LIST;
-}
-	YY_BREAK
-case 57:
-YY_RULE_SETUP
-{
-	return T_ARRAY;
-}
-	YY_BREAK
-case 58:
-YY_RULE_SETUP
-{
-	return T_INC;
-}
-	YY_BREAK
-case 59:
-YY_RULE_SETUP
-{
-	return T_DEC;
-}
-	YY_BREAK
-case 60:
-YY_RULE_SETUP
-{
-	return T_IS_IDENTICAL;
-}
-	YY_BREAK
-case 61:
-YY_RULE_SETUP
-{
-	return T_IS_NOT_IDENTICAL;
-}
-	YY_BREAK
-case 62:
-YY_RULE_SETUP
-{
-	return T_IS_EQUAL;
-}
-	YY_BREAK
-case 63:
-YY_RULE_SETUP
-{
-	return T_IS_NOT_EQUAL;
-}
-	YY_BREAK
-case 64:
-YY_RULE_SETUP
-{
-	return T_IS_SMALLER_OR_EQUAL;
-}
-	YY_BREAK
-case 65:
-YY_RULE_SETUP
-{
-	return T_IS_GREATER_OR_EQUAL;
-}
-	YY_BREAK
-case 66:
-YY_RULE_SETUP
-{
-	return T_PLUS_EQUAL;
-}
-	YY_BREAK
-case 67:
-YY_RULE_SETUP
-{
-	return T_MINUS_EQUAL;
-}
-	YY_BREAK
-case 68:
-YY_RULE_SETUP
-{
-	return T_MUL_EQUAL;
-}
-	YY_BREAK
-case 69:
-YY_RULE_SETUP
-{
-	return T_DIV_EQUAL;
-}
-	YY_BREAK
-case 70:
-YY_RULE_SETUP
-{
-	return T_CONCAT_EQUAL;
-}
-	YY_BREAK
-case 71:
-YY_RULE_SETUP
-{
-	return T_MOD_EQUAL;
-}
-	YY_BREAK
-case 72:
-YY_RULE_SETUP
-{
-	return T_SL_EQUAL;
-}
-	YY_BREAK
-case 73:
-YY_RULE_SETUP
-{
-	return T_SR_EQUAL;
-}
-	YY_BREAK
-case 74:
-YY_RULE_SETUP
-{
-	return T_AND_EQUAL;
-}
-	YY_BREAK
-case 75:
-YY_RULE_SETUP
-{
-	return T_OR_EQUAL;
-}
-	YY_BREAK
-case 76:
-YY_RULE_SETUP
-{
-	return T_XOR_EQUAL;
-}
-	YY_BREAK
-case 77:
-YY_RULE_SETUP
-{
-	return T_BOOLEAN_OR;
-}
-	YY_BREAK
-case 78:
-YY_RULE_SETUP
-{
-	return T_BOOLEAN_AND;
-}
-	YY_BREAK
-case 79:
-YY_RULE_SETUP
-{
-	return T_LOGICAL_OR;
-}
-	YY_BREAK
-case 80:
-YY_RULE_SETUP
-{
-	return T_LOGICAL_AND;
-}
-	YY_BREAK
-case 81:
-YY_RULE_SETUP
-{
-	return T_LOGICAL_XOR;
-}
-	YY_BREAK
-case 82:
-YY_RULE_SETUP
-{
-	return T_SL;
-}
-	YY_BREAK
-case 83:
-YY_RULE_SETUP
-{
-	return T_SR;
-}
-	YY_BREAK
-case 84:
-YY_RULE_SETUP
-{
-	return yytext[0];
-}
-	YY_BREAK
-case 85:
-YY_RULE_SETUP
-{
-	yy_push_state(ST_IN_SCRIPTING TSRMLS_CC);
-	return '{';
-}
-	YY_BREAK
-case 86:
-YY_RULE_SETUP
-{
-	yy_push_state(ST_LOOKING_FOR_VARNAME TSRMLS_CC);
-	return T_DOLLAR_OPEN_CURLY_BRACES;
-}
-	YY_BREAK
-case 87:
-YY_RULE_SETUP
-{
-	/* This is a temporary fix which is dependant on flex and it's implementation */
-	if (yy_start_stack_ptr) {
-		yy_pop_state(TSRMLS_C);
-	}
-	return '}';
-}
-	YY_BREAK
-case 88:
-YY_RULE_SETUP
-{
- 	zend_copy_value(zendlval, yytext, yyleng);
-	zendlval->type = IS_STRING;
-	yy_pop_state(TSRMLS_C);
-	yy_push_state(ST_IN_SCRIPTING TSRMLS_CC);
-	return T_STRING_VARNAME;
-}
-	YY_BREAK
-case 89:
-YY_RULE_SETUP
-{
-	yyless(0);
-	yy_pop_state(TSRMLS_C);
-	yy_push_state(ST_IN_SCRIPTING TSRMLS_CC);
-}
-	YY_BREAK
-case 90:
-YY_RULE_SETUP
-{
-	errno = 0;
-	zendlval->value.lval = strtol(yytext, NULL, 0);
-	if (errno == ERANGE) { /* overflow */
-		zendlval->value.dval = zend_strtod(yytext, NULL);
-		zendlval->type = IS_DOUBLE;
-		return T_DNUMBER;
-	} else {
-		zendlval->type = IS_LONG;
-		return T_LNUMBER;
-	}
-}
-	YY_BREAK
-case 91:
-YY_RULE_SETUP
-{
-	errno = 0;
-	zendlval->value.lval = strtoul(yytext, NULL, 16);
-	if (errno == ERANGE) { /* overflow */
-		/* not trying strtod - it returns trash on 0x-es */
-		zendlval->value.lval = LONG_MAX; /* maximal long */
-		zend_error(E_NOTICE,"Hex number is too big: %s", yytext);
-	} else {
-		if (zendlval->value.lval < 0) {
-			/* maintain consistency with the old way */
-			zendlval->value.dval = (unsigned long) zendlval->value.lval;
-			zendlval->type = IS_DOUBLE;
-			return T_DNUMBER;
-		}
-		zendlval->type = IS_LONG;
-	}
-	zendlval->type = IS_LONG;
-	return T_LNUMBER;
-}
-	YY_BREAK
-case 92:
-YY_RULE_SETUP
-{ /* treat numbers (almost) as strings inside encapsulated strings */
-	zendlval->value.str.val = (char *)estrndup(yytext, yyleng);
-	zendlval->value.str.len = yyleng;
-	zendlval->type = IS_STRING;
-	return T_NUM_STRING;
-}
-	YY_BREAK
-case 93:
-YY_RULE_SETUP
-{
-	zendlval->value.dval = zend_strtod(yytext, NULL);
-	zendlval->type = IS_DOUBLE;
-	return T_DNUMBER;
-}
-	YY_BREAK
-case 94:
-YY_RULE_SETUP
-{
-	char *class_name = NULL;
-
-	if (CG(active_class_entry)) {
-		class_name = CG(active_class_entry)->name;
-	}
-	
-	if (!class_name) {
-		class_name = "";
-	}
-	zendlval->value.str.len = strlen(class_name);
-	zendlval->value.str.val = estrndup(class_name, zendlval->value.str.len);
-	zendlval->type = IS_STRING;
-	return T_CLASS_C;
-}
-	YY_BREAK
-case 95:
-YY_RULE_SETUP
-{
-	char *func_name = NULL;
-	
-	if (CG(active_op_array)) {
-		func_name = CG(active_op_array)->function_name;
-	}
-
-	if (!func_name) {
-		func_name = "";
-	}
-	zendlval->value.str.len = strlen(func_name);
-	zendlval->value.str.val = estrndup(func_name, zendlval->value.str.len);
-	zendlval->type = IS_STRING;
-	return T_FUNC_C;
-}
-	YY_BREAK
-case 96:
-YY_RULE_SETUP
-{
-	zendlval->value.lval = CG(zend_lineno);
-	zendlval->type = IS_LONG;
-	return T_LINE;
-}
-	YY_BREAK
-case 97:
-YY_RULE_SETUP
-{
-	char *filename = zend_get_compiled_filename(TSRMLS_C);
-	
-	if (!filename) {
-		filename = "";
-	}
-	zendlval->value.str.len = strlen(filename);
-	zendlval->value.str.val = estrndup(filename, zendlval->value.str.len);
-	zendlval->type = IS_STRING;
-	return T_FILE;
-}
-	YY_BREAK
-case 98:
-YY_RULE_SETUP
-{
-#ifdef ZEND_MULTIBYTE
-	if (SCNG(output_filter)) {
-		int readsize;
-		readsize = SCNG(output_filter)(&(zendlval->value.str.val), &(zendlval->value.str.len), yytext, yyleng TSRMLS_CC);
-		if (readsize < yyleng) {
-			yyless(readsize);
-		}
-	} else {
-		zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
-		zendlval->value.str.len = yyleng;
-	}
-#else /* ZEND_MULTIBYTE */
-	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
-	zendlval->value.str.len = yyleng;
-#endif /* ZEND_MULTIBYTE */
-	zendlval->type = IS_STRING;
-	HANDLE_NEWLINES(yytext, yyleng);
-	return T_INLINE_HTML;
-}
-	YY_BREAK
-case 99:
-YY_RULE_SETUP
-{
-	HANDLE_NEWLINES(yytext, yyleng);
-	if (CG(short_tags) || yyleng>2) { /* yyleng>2 means it's not <? but <script> */
-		zendlval->value.str.val = yytext; /* no copying - intentional */
-		zendlval->value.str.len = yyleng;
-		zendlval->type = IS_STRING;
-		BEGIN(ST_IN_SCRIPTING);
-		return T_OPEN_TAG;
-	} else {
-		zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
-		zendlval->value.str.len = yyleng;
-		zendlval->type = IS_STRING;
-		return T_INLINE_HTML;
-	}
-}
-	YY_BREAK
-case 100:
-YY_RULE_SETUP
-{
-	if ((yytext[1]=='%' && CG(asp_tags)) || (yytext[1]=='?' && CG(short_tags))) {
-		zendlval->value.str.val = yytext; /* no copying - intentional */
-		zendlval->value.str.len = yyleng;
-		zendlval->type = IS_STRING;
-		BEGIN(ST_IN_SCRIPTING);
-		return T_OPEN_TAG_WITH_ECHO;
-	} else {
-		zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
-		zendlval->value.str.len = yyleng;
-		zendlval->type = IS_STRING;
-		return T_INLINE_HTML;
-	}
-}
-	YY_BREAK
-case 101:
-YY_RULE_SETUP
-{
-	if (CG(asp_tags)) {
-		zendlval->value.str.val = yytext; /* no copying - intentional */
-		zendlval->value.str.len = yyleng;
-		zendlval->type = IS_STRING;
-		BEGIN(ST_IN_SCRIPTING);
-		return T_OPEN_TAG;
-	} else {
-		zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
-		zendlval->value.str.len = yyleng;
-		zendlval->type = IS_STRING;
-		return T_INLINE_HTML;
-	}
-}
-	YY_BREAK
-case 102:
-YY_RULE_SETUP
-{
-	zendlval->value.str.val = yytext; /* no copying - intentional */
-	zendlval->value.str.len = yyleng;
-	zendlval->type = IS_STRING;
-	HANDLE_NEWLINE(yytext[yyleng-1]);
-	BEGIN(ST_IN_SCRIPTING);
-	return T_OPEN_TAG;
-}
-	YY_BREAK
-case 103:
-YY_RULE_SETUP
-{
-	zend_error(E_WARNING, "&lt;?php_track_vars?&gt; is no longer supported - please use the track_vars INI directive instead");
-	HANDLE_NEWLINE(yytext[yyleng-1]);
-	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
-	zendlval->value.str.len = yyleng;
-	zendlval->type = IS_STRING;
-	return T_INLINE_HTML;
-}
-	YY_BREAK
-case 104:
-YY_RULE_SETUP
-{
- 	zend_copy_value(zendlval, (yytext+1), (yyleng-1));
-	zendlval->type = IS_STRING;
-	return T_VARIABLE;
-}
-	YY_BREAK
-case 105:
-YY_RULE_SETUP
-{
- 	zend_copy_value(zendlval, yytext, yyleng);
-	zendlval->type = IS_STRING;
-	return T_STRING;
-}
-	YY_BREAK
-case 106:
-YY_RULE_SETUP
-{
- 	zend_copy_value(zendlval, yytext, yyleng);
-	zendlval->type = IS_STRING;
-	return T_STRING;
-}
-	YY_BREAK
-case 107:
-YY_RULE_SETUP
-{
-	zendlval->value.str.val = yytext; /* no copying - intentional */
-	zendlval->value.str.len = yyleng;
-	zendlval->type = IS_STRING;
-	HANDLE_NEWLINES(yytext, yyleng);
-	return T_WHITESPACE;
-}
-	YY_BREAK
-case 108:
-YY_RULE_SETUP
-{
-	BEGIN(ST_ONE_LINE_COMMENT);
-	yymore();
-}
-	YY_BREAK
-case 109:
-YY_RULE_SETUP
-{
-	yymore();
-}
-	YY_BREAK
-case 110:
-YY_RULE_SETUP
-{
-	yymore();
-}
-	YY_BREAK
-case 111:
-YY_RULE_SETUP
-{
-	zendlval->value.str.val = yytext; /* no copying - intentional */
-	zendlval->value.str.len = yyleng;
-	zendlval->type = IS_STRING;
-	BEGIN(ST_IN_SCRIPTING);
-	CG(zend_lineno)++;
-	return T_COMMENT;
-}
-	YY_BREAK
-case 112:
-YY_RULE_SETUP
-{
-    if (CG(asp_tags) || yytext[yyleng-2] != '%') { /* asp comment? */
-		zendlval->value.str.val = yytext; /* no copying - intentional */
-		zendlval->value.str.len = yyleng;
-		zendlval->type = IS_STRING;
-		yyless(yyleng-2);
-		BEGIN(ST_IN_SCRIPTING);
-		return T_COMMENT;
-	} else {
-		yymore();
-	}
-}
-	YY_BREAK
-case 113:
-YY_RULE_SETUP
-{
-	CG(comment_start_line) = CG(zend_lineno);
-	BEGIN(ST_COMMENT);
-	yymore();
-}
-	YY_BREAK
-case 114:
-YY_RULE_SETUP
-{
-	yymore();
-}
-	YY_BREAK
-case 115:
-YY_RULE_SETUP
-{
-	HANDLE_NEWLINES(yytext, yyleng);
-	BEGIN(ST_IN_SCRIPTING);
-	return T_COMMENT;
-}
-	YY_BREAK
-case 116:
-YY_RULE_SETUP
-{
-	yymore();
-}
-	YY_BREAK
-case 117:
-YY_RULE_SETUP
-{
-	zendlval->value.str.val = yytext; /* no copying - intentional */
-	zendlval->value.str.len = yyleng;
-	zendlval->type = IS_STRING;
-	BEGIN(INITIAL);
-	return T_CLOSE_TAG;  /* implicit ';' at php-end tag */
-}
-	YY_BREAK
-case 118:
-YY_RULE_SETUP
-{
-	if (CG(asp_tags)) {
-		BEGIN(INITIAL);
-		zendlval->value.str.len = yyleng;
-		zendlval->type = IS_STRING;
-		zendlval->value.str.val = yytext; /* no copying - intentional */
-		return T_CLOSE_TAG;  /* implicit ';' at php-end tag */
-	} else {
-		yyless(1);
-		return yytext[0];
-	}
-}
-	YY_BREAK
-case 119:
-YY_RULE_SETUP
-{
-	register char *s, *t;
-	char *end;
-	
-	zendlval->value.str.val = estrndup(yytext+1, yyleng-2);
-	zendlval->value.str.len = yyleng-2;
-	zendlval->type = IS_STRING;
-	HANDLE_NEWLINES(yytext, yyleng);
-	
-	/* convert escape sequences */
-	s = t = zendlval->value.str.val;
-	end = s+zendlval->value.str.len;
-	while (s<end) {
-		if (*s=='\\') {
-			s++;
-			if (s>=end) {
-				continue;
-			}
-			switch(*s) {
-				case 'n':
-					*t++ = '\n';
-					zendlval->value.str.len--;
-					break;
-				case 'r':
-					*t++ = '\r';
-					zendlval->value.str.len--;
-					break;
-				case 't':
-					*t++ = '\t';
-					zendlval->value.str.len--;
-					break;
-				case '\\':
-				case '$':
-				case '"':
-					*t++ = *s;
-					zendlval->value.str.len--;
-					break;
-				default:
-					/* check for an octal */
-					if (ZEND_IS_OCT(*s)) {
-						char octal_buf[4] = { 0, 0, 0, 0 };
-
-						octal_buf[0] = *s;
-						zendlval->value.str.len--;
-						if ((s+1)<end && ZEND_IS_OCT(*(s+1))) {
-							octal_buf[1] = *(++s);
-							zendlval->value.str.len--;
-							if ((s+1)<end && ZEND_IS_OCT(*(s+1))) {
-								octal_buf[2] = *(++s);
-								zendlval->value.str.len--;
-							}
-						}
-						*t++ = (char) strtol(octal_buf, NULL, 8);
-					} else if (*s=='x' && (s+1)<end && ZEND_IS_HEX(*(s+1))) {
-						char hex_buf[3] = { 0, 0, 0};
-
-						zendlval->value.str.len--; /* for the 'x' */
-
-						hex_buf[0] = *(++s);
-						zendlval->value.str.len--;
-						if ((s+1)<end && ZEND_IS_HEX(*(s+1))) {
-							hex_buf[1] = *(++s);
-							zendlval->value.str.len--;
-						}
-						*t++ = (char) strtol(hex_buf, NULL, 16);
-					} else {
-						*t++ = '\\';
-						*t++ = *s;
-					}
-					break;
-			}
-			s++;
-		} else {
-			*t++ = *s++;
-		}
-	}
-	*t = 0;
-
-#ifdef ZEND_MULTIBYTE
-	if (SCNG(output_filter)) {
-		s = zendlval->value.str.val;
-		SCNG(output_filter)(&(zendlval->value.str.val), &(zendlval->value.str.len), s, zendlval->value.str.len TSRMLS_CC);
-		efree(s);
-	}
-#endif /* ZEND_MULTIBYTE */
-
-	return T_CONSTANT_ENCAPSED_STRING;
-}
-	YY_BREAK
-case 120:
-YY_RULE_SETUP
-{
-	register char *s, *t;
-	char *end;
-	
-	zendlval->value.str.val = estrndup(yytext+1, yyleng-2);
-	zendlval->value.str.len = yyleng-2;
-	zendlval->type = IS_STRING;
-	HANDLE_NEWLINES(yytext, yyleng);
-	
-	/* convert escape sequences */
-	s = t = zendlval->value.str.val;
-	end = s+zendlval->value.str.len;
-	while (s<end) {
-		if (*s=='\\') {
-			s++;
-			if (s>=end) {
-				continue;
-			}
-			switch(*s) {
-				case '\\':
-				case '\'':
-					*t++ = *s;
-					zendlval->value.str.len--;
-					break;
-				default:
-					*t++ = '\\';
-					*t++ = *s;
-					break;
-			}
-			s++;
-		} else {
-			*t++ = *s++;
-		}
-	}
-	*t = 0;
-
-#ifdef ZEND_MULTIBYTE
-	if (SCNG(output_filter)) {
-		s = zendlval->value.str.val;
-		SCNG(output_filter)(&(zendlval->value.str.val), &(zendlval->value.str.len), s, zendlval->value.str.len TSRMLS_CC);
-		efree(s);
-	}
-#endif /* ZEND_MULTIBYTE */
-
-	return T_CONSTANT_ENCAPSED_STRING;
-}
-	YY_BREAK
-case 121:
-YY_RULE_SETUP
-{
-	BEGIN(ST_DOUBLE_QUOTES);
-	return '\"';
-}
-	YY_BREAK
-case 122:
-YY_RULE_SETUP
-{
-	char *s;
-	CG(zend_lineno)++;
-	CG(heredoc_len) = yyleng-3-1-(yytext[yyleng-2]=='\r'?1:0);
-	s = yytext+3;
-	while ((*s == ' ') || (*s == '\t')) {
-		s++;
-		CG(heredoc_len)--;
-	}
-	CG(heredoc) = estrndup(s, CG(heredoc_len));
-	BEGIN(ST_HEREDOC);
-	return T_START_HEREDOC;
-}
-	YY_BREAK
-case 123:
-YY_RULE_SETUP
-{
-	BEGIN(ST_BACKQUOTE);
-	return '`';
-}
-	YY_BREAK
-case 124:
-YY_RULE_SETUP
-{
-	BEGIN(ST_SINGLE_QUOTE);
-	return '\'';
-}
-	YY_BREAK
-case 125:
-YY_RULE_SETUP
-{
-	int label_len;
-	unsigned char unput_semicolon;
-
-	CG(zend_lineno)++;
-	if (yytext[yyleng-2]=='\r') {
-		label_len = yyleng-2;
-	} else {
-		label_len = yyleng-1;
-	}
-	
-	if (yytext[label_len-1]==';') {
-		label_len--;
-		unput_semicolon=1;
-	} else{
-		unput_semicolon=0;
-	}
-
-	if (label_len==CG(heredoc_len) && !memcmp(yytext, CG(heredoc), label_len)) {
-		zendlval->value.str.val = estrndup(yytext, label_len); /* unput destroys yytext */
-		zendlval->value.str.len = label_len;
-		if (unput_semicolon) {
-			unput(';');
-		}
-		efree(CG(heredoc));
-		CG(heredoc)=NULL;
-		CG(heredoc_len)=0;
-		BEGIN(ST_IN_SCRIPTING);
-		return T_END_HEREDOC;
-	} else {
- 		zend_copy_value(zendlval, yytext, yyleng);
-		zendlval->type = IS_STRING;
-		return T_STRING;
-	}
-}
-	YY_BREAK
-case 126:
-YY_RULE_SETUP
-{
-	HANDLE_NEWLINES(yytext, yyleng);
-	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
-	zendlval->value.str.len = yyleng;
-	zendlval->type = IS_STRING;
-	return T_ENCAPSED_AND_WHITESPACE;
-}
-	YY_BREAK
-case 127:
-YY_RULE_SETUP
-{
-	HANDLE_NEWLINES(yytext, yyleng);
- 	zend_copy_value(zendlval, yytext, yyleng);
-	zendlval->type = IS_STRING;
-	return T_ENCAPSED_AND_WHITESPACE;
-}
-	YY_BREAK
-case 128:
-YY_RULE_SETUP
-{
- 	zend_copy_value(zendlval, yytext, yyleng);
-	zendlval->type = IS_STRING;
-	return T_ENCAPSED_AND_WHITESPACE;
-}
-	YY_BREAK
-case 129:
-YY_RULE_SETUP
-{
- 	zend_copy_value(zendlval, yytext, yyleng);
-	zendlval->type = IS_STRING;
-	return T_ENCAPSED_AND_WHITESPACE;
-}
-	YY_BREAK
-case 130:
-YY_RULE_SETUP
-{
-	zendlval->value.lval = (long) yytext[0];
-	if (yyleng == 2) {
-		yyless(1);
-	}
-	return T_CHARACTER;	
-}
-	YY_BREAK
-case 131:
-YY_RULE_SETUP
-{
-	zendlval->value.lval = (long) yytext[0];
-	return yytext[0];
-}
-	YY_BREAK
-case 132:
-YY_RULE_SETUP
-{
-	zendlval->value.lval = (long) yytext[0];
-	yy_push_state(ST_IN_SCRIPTING TSRMLS_CC);
-	yyless(1);
-	return T_CURLY_OPEN;
-}
-	YY_BREAK
-case 133:
-YY_RULE_SETUP
-{
-	zendlval->value.lval = (long) '\'';
-	return T_CHARACTER;
-}
-	YY_BREAK
-case 134:
-YY_RULE_SETUP
-{
-	zendlval->value.lval = (long)'\\';
-	return T_CHARACTER;
-}
-	YY_BREAK
-case 135:
-YY_RULE_SETUP
-{
-	zendlval->value.lval = (long) '"';
-	return T_CHARACTER;
-}
-	YY_BREAK
-case 136:
-YY_RULE_SETUP
-{
-	zendlval->value.lval = (long) '`';
-	return T_CHARACTER;
-}
-	YY_BREAK
-case 137:
-YY_RULE_SETUP
-{
-	zendlval->value.lval = strtol(yytext+1, NULL, 8);
-	return T_CHARACTER;
-}
-	YY_BREAK
-case 138:
-YY_RULE_SETUP
-{
-	zendlval->value.lval = strtol (yytext+2, NULL, 16);
-	return T_CHARACTER;
-}
-	YY_BREAK
-case 139:
-YY_RULE_SETUP
-{
-	switch (yytext[1]) {
-		case 'n':
-			zendlval->value.lval = (long) '\n';
-			break;
-		case 't':
-			zendlval->value.lval = (long) '\t';
-			break;
-		case 'r':
-			zendlval->value.lval = (long) '\r';
-			break;
-		case '\\':
-			zendlval->value.lval = (long) '\\';
-			break;
-		case '$':
-			zendlval->value.lval = (long) yytext[1];
-			break;
-		case '{':
-			zendlval->value.lval = (long) yytext[1];
-			break;
-		default:
-			zendlval->value.str.val = estrndup(yytext, yyleng);
-			zendlval->value.str.len = yyleng;
-			zendlval->type = IS_STRING;
-			return T_BAD_CHARACTER;
-			break;
-	}
-	return T_CHARACTER;
-}
-	YY_BREAK
-case 140:
-YY_RULE_SETUP
-{
-	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
-	zendlval->value.str.len = yyleng;
-	zendlval->type = IS_STRING;
-	return T_ENCAPSED_AND_WHITESPACE;
-}
-	YY_BREAK
-case 141:
-YY_RULE_SETUP
-{
-	BEGIN(ST_IN_SCRIPTING);
-	return '\"';
-}
-	YY_BREAK
-case 142:
-YY_RULE_SETUP
-{
-	BEGIN(ST_IN_SCRIPTING);
-	return '`';
-}
-	YY_BREAK
-case 143:
-YY_RULE_SETUP
-{
-	BEGIN(ST_IN_SCRIPTING);
-	return '\'';
-}
-	YY_BREAK
-case YY_STATE_EOF(ST_DOUBLE_QUOTES):
-case YY_STATE_EOF(ST_BACKQUOTE):
-case YY_STATE_EOF(INITIAL):
-case YY_STATE_EOF(ST_IN_SCRIPTING):
-case YY_STATE_EOF(ST_LOOKING_FOR_PROPERTY):
-{
-	return 0;
-}
-	YY_BREAK
-case YY_STATE_EOF(ST_COMMENT):
-{
-	zend_error(E_COMPILE_WARNING,"Unterminated comment starting line %d", CG(comment_start_line));
-	return 0;
-}
-	YY_BREAK
-case 144:
-YY_RULE_SETUP
-{
-	zend_error(E_COMPILE_WARNING,"Unexpected character in input:  '%c' (ASCII=%d) state=%d", yytext[0], yytext[0], YYSTATE);
-}
-	YY_BREAK
-case 145:
-YY_RULE_SETUP
-ECHO;
-	YY_BREAK
-case YY_STATE_EOF(ST_SINGLE_QUOTE):
-case YY_STATE_EOF(ST_HEREDOC):
-case YY_STATE_EOF(ST_LOOKING_FOR_VARNAME):
-case YY_STATE_EOF(ST_ONE_LINE_COMMENT):
-	yyterminate();
-
-	case YY_END_OF_BUFFER:
-		{
-		/* Amount of text matched not including the EOB char. */
-		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;
-
-		/* Undo the effects of YY_DO_BEFORE_ACTION. */
-		*yy_cp = yy_hold_char;
-
-		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
-			{
-			/* We're scanning a new file or input source.  It's
-			 * possible that this happened because the user
-			 * just pointed yyin at a new source and called
-			 * yylex().  If so, then we have to assure
-			 * consistency between yy_current_buffer and our
-			 * globals.  Here is the right place to do so, because
-			 * this is the first action (other than possibly a
-			 * back-up) that will match for the new input source.
-			 */
-			SCNG(yy_n_chars) = yy_current_buffer->yy_n_chars;
-			yy_current_buffer->yy_input_file = SCNG(yy_in);
-			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
-			}
-
-		/* Note that here we test for yy_c_buf_p "<=" to the position
-		 * of the first EOB in the buffer, since yy_c_buf_p will
-		 * already have been incremented past the NUL character
-		 * (since all states make transitions on EOB to the
-		 * end-of-buffer state).  Contrast this with the test
-		 * in input().
-		 */
-		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars)] )
-			{ /* This was really a NUL. */
-			yy_state_type yy_next_state;
-
-			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;
-
-			yy_current_state = yy_get_previous_state(TSRMLS_C);
-
-			/* Okay, we're now positioned to make the NUL
-			 * transition.  We couldn't have
-			 * yy_get_previous_state() go ahead and do it
-			 * for us because it doesn't know how to deal
-			 * with the possibility of jamming (and we don't
-			 * want to build jamming into it because then it
-			 * will run more slowly).
-			 */
-
-			yy_next_state = yy_try_NUL_trans( yy_current_state TSRMLS_CC );
-
-			yy_bp = yytext_ptr + YY_MORE_ADJ;
-
-			if ( yy_next_state )
-				{
-				/* Consume the NUL. */
-				yy_cp = ++yy_c_buf_p;
-				yy_current_state = yy_next_state;
-				goto yy_match;
-				}
-
-			else
-				{
-				yy_cp = yy_c_buf_p;
-				goto yy_find_action;
-				}
-			}
-
-		else switch ( yy_get_next_buffer(TSRMLS_C) )
-			{
-			case EOB_ACT_END_OF_FILE:
-				{
-				yy_did_buffer_switch_on_eof = 0;
-
-				if ( yywrap() )
-					{
-					/* Note: because we've taken care in
-					 * yy_get_next_buffer() to have set up
-					 * yytext, we can now set up
-					 * yy_c_buf_p so that if some total
-					 * hoser (like flex itself) wants to
-					 * call the scanner after we return the
-					 * YY_NULL, it'll still work - another
-					 * YY_NULL will get returned.
-					 */
-					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
-
-					yy_act = YY_STATE_EOF(YY_START);
-					goto do_action;
-					}
-
-				else
-					{
-					if ( ! yy_did_buffer_switch_on_eof )
-						YY_NEW_FILE;
-					}
-				break;
-				}
-
-			case EOB_ACT_CONTINUE_SCAN:
-				yy_c_buf_p =
-					yytext_ptr + yy_amount_of_matched_text;
-
-				yy_current_state = yy_get_previous_state(TSRMLS_C);
-
-				yy_cp = yy_c_buf_p;
-				yy_bp = yytext_ptr + YY_MORE_ADJ;
-				goto yy_match;
-
-			case EOB_ACT_LAST_MATCH:
-				yy_c_buf_p =
-				&yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars)];
-
-				yy_current_state = yy_get_previous_state(TSRMLS_C);
-
-				yy_cp = yy_c_buf_p;
-				yy_bp = yytext_ptr + YY_MORE_ADJ;
-				goto yy_find_action;
-			}
-		break;
-		}
-
-	default:
-		YY_FATAL_ERROR(
-			"fatal flex scanner internal error--no action found" );
-	} /* end of action switch */
-		} /* end of scanning one token */
-	} /* end of yylex */
-
-
-/* yy_get_next_buffer - try to read in a new buffer
- *
- * Returns a code representing an action:
- *	EOB_ACT_LAST_MATCH -
- *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
- *	EOB_ACT_END_OF_FILE - end of file
- */
-
-static int yy_get_next_buffer(TSRMLS_D)
-	{
-	register char *dest = yy_current_buffer->yy_ch_buf;
-	register char *source = yytext_ptr;
-	register int number_to_move, i;
-	int ret_val;
-
-	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars) + 1] )
-		YY_FATAL_ERROR(
-		"fatal flex scanner internal error--end of buffer missed" );
-
-	if ( yy_current_buffer->yy_fill_buffer == 0 )
-		{ /* Don't try to fill the buffer, so this is an EOF. */
-		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
-			{
-			/* We matched a single character, the EOB, so
-			 * treat this as a final EOF.
-			 */
-			return EOB_ACT_END_OF_FILE;
-			}
-
-		else
-			{
-			/* We matched some text prior to the EOB, first
-			 * process it.
-			 */
-			return EOB_ACT_LAST_MATCH;
-			}
-		}
-
-	/* Try to read more data. */
-
-	/* First move last chars to start of buffer. */
-	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;
-
-	for ( i = 0; i < number_to_move; ++i )
-		*(dest++) = *(source++);
-
-	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
-		/* don't do the read, it's not guaranteed to return an EOF,
-		 * just force an EOF
-		 */
-		yy_current_buffer->yy_n_chars = SCNG(yy_n_chars) = 0;
-
-	else
-		{
-		int num_to_read =
-			yy_current_buffer->yy_buf_size - number_to_move - 1;
-
-		while ( num_to_read <= 0 )
-			{ /* Not enough room in the buffer - grow it. */
-#ifdef YY_USES_REJECT
-			YY_FATAL_ERROR(
-"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
-#else
-
-			/* just a shorter name for the current buffer */
-			YY_BUFFER_STATE b = yy_current_buffer;
-
-			int yy_c_buf_p_offset =
-				(int) (yy_c_buf_p - b->yy_ch_buf);
-
-			if ( b->yy_is_our_buffer )
-				{
-				int new_size = b->yy_buf_size * 2;
-
-				if ( new_size <= 0 )
-					b->yy_buf_size += b->yy_buf_size / 8;
-				else
-					b->yy_buf_size *= 2;
-
-				b->yy_ch_buf = (char *)
-					/* Include room in for 2 EOB chars. */
-					yy_flex_realloc( (void *) b->yy_ch_buf,
-							 b->yy_buf_size + 2 );
-				}
-			else
-				/* Can't grow it, we don't own it. */
-				b->yy_ch_buf = 0;
-
-			if ( ! b->yy_ch_buf )
-				YY_FATAL_ERROR(
-				"fatal error - scanner input buffer overflow" );
-
-			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
-
-			num_to_read = yy_current_buffer->yy_buf_size -
-						number_to_move - 1;
-#endif
-			}
-
-		if ( num_to_read > YY_READ_BUF_SIZE )
-			num_to_read = YY_READ_BUF_SIZE;
-
-		/* Read in more data. */
-		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
-			SCNG(yy_n_chars), num_to_read );
-
-		yy_current_buffer->yy_n_chars = SCNG(yy_n_chars);
-		}
-
-	if ( SCNG(yy_n_chars) == 0 )
-		{
-		if ( number_to_move == YY_MORE_ADJ )
-			{
-			ret_val = EOB_ACT_END_OF_FILE;
-			yyrestart( SCNG(yy_in) TSRMLS_CC );
-			}
-
-		else
-			{
-			ret_val = EOB_ACT_LAST_MATCH;
-			yy_current_buffer->yy_buffer_status =
-				YY_BUFFER_EOF_PENDING;
-			}
-		}
-
-	else
-		ret_val = EOB_ACT_CONTINUE_SCAN;
-
-	SCNG(yy_n_chars) += number_to_move;
-	yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
-	yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
-
-	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];
-
-	return ret_val;
-	}
-
-
-/* yy_get_previous_state - get the state just before the EOB char was reached */
-
-static yy_state_type yy_get_previous_state(TSRMLS_D)
-	{
-	register yy_state_type yy_current_state;
-	register char *yy_cp;
-
-	yy_current_state = yy_start;
-	yy_current_state += YY_AT_BOL();
-
-	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
-		{
-		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
-		if ( yy_accept[yy_current_state] )
-			{
-			yy_last_accepting_state = yy_current_state;
-			yy_last_accepting_cpos = yy_cp;
-			}
-		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
-			{
-			yy_current_state = (int) yy_def[yy_current_state];
-			if ( yy_current_state >= 1351 )
-				yy_c = yy_meta[(unsigned int) yy_c];
-			}
-		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
-		}
-
-	return yy_current_state;
-	}
-
-
-/* yy_try_NUL_trans - try to make a transition on the NUL character
- *
- * synopsis
- *	next_state = yy_try_NUL_trans( current_state );
- */
-
-#ifdef YY_USE_PROTOS
-static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state TSRMLS_DC )
-#else
-static yy_state_type yy_try_NUL_trans( yy_current_state TSRMLS_CC )
-yy_state_type yy_current_state;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	register int yy_is_jam;
-	register char *yy_cp = yy_c_buf_p;
-
-	register YY_CHAR yy_c = 1;
-	if ( yy_accept[yy_current_state] )
-		{
-		yy_last_accepting_state = yy_current_state;
-		yy_last_accepting_cpos = yy_cp;
-		}
-	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
-		{
-		yy_current_state = (int) yy_def[yy_current_state];
-		if ( yy_current_state >= 1351 )
-			yy_c = yy_meta[(unsigned int) yy_c];
-		}
-	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
-	yy_is_jam = (yy_current_state == 1350);
-
-	return yy_is_jam ? 0 : yy_current_state;
-	}
-
-
-#ifndef YY_NO_UNPUT
-#ifdef YY_USE_PROTOS
-static void yyunput( int c, register char *yy_bp TSRMLS_DC )
-#else
-static void yyunput( c, yy_bp TSRMLS_CC )
-int c;
-register char *yy_bp;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	register char *yy_cp = yy_c_buf_p;
-
-	/* undo effects of setting up yytext */
-	*yy_cp = yy_hold_char;
-
-	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
-		{ /* need to shift things up to make room */
-		/* +2 for EOB chars. */
-		register int number_to_move = SCNG(yy_n_chars) + 2;
-		register char *dest = &yy_current_buffer->yy_ch_buf[
-					yy_current_buffer->yy_buf_size + 2];
-		register char *source =
-				&yy_current_buffer->yy_ch_buf[number_to_move];
-
-		while ( source > yy_current_buffer->yy_ch_buf )
-			*--dest = *--source;
-
-		yy_cp += (int) (dest - source);
-		yy_bp += (int) (dest - source);
-		yy_current_buffer->yy_n_chars =
-			SCNG(yy_n_chars) = yy_current_buffer->yy_buf_size;
-
-		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
-			YY_FATAL_ERROR( "flex scanner push-back overflow" );
-		}
-
-	*--yy_cp = (char) c;
-
-
-	yytext_ptr = yy_bp;
-	yy_hold_char = *yy_cp;
-	yy_c_buf_p = yy_cp;
-	}
-#endif	/* ifndef YY_NO_UNPUT */
-
-
-#ifdef __cplusplus
-static int yyinput(TSRMLS_D)
-#else
-static int input(TSRMLS_C)
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	int c;
-
-	*yy_c_buf_p = yy_hold_char;
-
-	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
-		{
-		/* yy_c_buf_p now points to the character we want to return.
-		 * If this occurs *before* the EOB characters, then it's a
-		 * valid NUL; if not, then we've hit the end of the buffer.
-		 */
-		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars)] )
-			/* This was really a NUL. */
-			*yy_c_buf_p = '\0';
-
-		else
-			{ /* need more input */
-			int offset = yy_c_buf_p - yytext_ptr;
-			++yy_c_buf_p;
-
-			switch ( yy_get_next_buffer(TSRMLS_C) )
-				{
-				case EOB_ACT_LAST_MATCH:
-					/* This happens because yy_g_n_b()
-					 * sees that we've accumulated a
-					 * token and flags that we need to
-					 * try matching the token before
-					 * proceeding.  But for input(),
-					 * there's no matching to consider.
-					 * So convert the EOB_ACT_LAST_MATCH
-					 * to EOB_ACT_END_OF_FILE.
-					 */
-
-					/* Reset buffer status. */
-					yyrestart( SCNG(yy_in) TSRMLS_CC );
-
-					/* fall through */
-
-				case EOB_ACT_END_OF_FILE:
-					{
-					if ( yywrap() )
-						return EOF;
-
-					if ( ! yy_did_buffer_switch_on_eof )
-						YY_NEW_FILE;
-#ifdef __cplusplus
-					return yyinput(TSRMLS_C);
-#else
-					return input(TSRMLS_C);
-#endif
-					}
-
-				case EOB_ACT_CONTINUE_SCAN:
-					yy_c_buf_p = yytext_ptr + offset;
-					break;
-				}
-			}
-		}
-
-	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
-	*yy_c_buf_p = '\0';	/* preserve yytext */
-	yy_hold_char = *++yy_c_buf_p;
-
-	yy_current_buffer->yy_at_bol = (c == '\n');
-
-	return c;
-	}
-
-
-#ifdef YY_USE_PROTOS
-void yyrestart( struct _zend_file_handle *input_file TSRMLS_DC )
-#else
-void yyrestart( input_file TSRMLS_CC )
-struct _zend_file_handle *input_file;
-#endif
-	{
-	if ( ! yy_current_buffer )
-		yy_current_buffer = yy_create_buffer( SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC );
-
-	yy_init_buffer( yy_current_buffer, input_file TSRMLS_CC );
-	yy_load_buffer_state(TSRMLS_C);
-	}
-
-
-#ifdef YY_USE_PROTOS
-void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer TSRMLS_DC)
-#else
-void yy_switch_to_buffer( new_buffer TSRMLS_CC)
-YY_BUFFER_STATE new_buffer;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	if ( yy_current_buffer == new_buffer )
-		return;
-
-	if ( yy_current_buffer )
-		{
-		/* Flush out information for old buffer. */
-		*yy_c_buf_p = yy_hold_char;
-		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
-		yy_current_buffer->yy_n_chars = SCNG(yy_n_chars);
-		}
-
-	yy_current_buffer = new_buffer;
-	yy_load_buffer_state(TSRMLS_C);
-
-	/* We don't actually know whether we did this switch during
-	 * EOF (yywrap()) processing, but the only time this flag
-	 * is looked at is after yywrap() is called, so it's safe
-	 * to go ahead and always set it.
-	 */
-	yy_did_buffer_switch_on_eof = 1;
-	}
-
-
-#ifdef YY_USE_PROTOS
-void yy_load_buffer_state( TSRMLS_D )
-#else
-void yy_load_buffer_state(TSRMLS_C)
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	SCNG(yy_n_chars) = yy_current_buffer->yy_n_chars;
-	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
-	SCNG(yy_in) = yy_current_buffer->yy_input_file;
-	yy_hold_char = *yy_c_buf_p;
-	}
-
-
-#ifdef YY_USE_PROTOS
-YY_BUFFER_STATE yy_create_buffer( struct _zend_file_handle *file, int size TSRMLS_DC )
-#else
-YY_BUFFER_STATE yy_create_buffer( file, size TSRMLS_CC )
-struct _zend_file_handle *file;
-int size;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	YY_BUFFER_STATE b;
-
-	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
-	if ( ! b )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
-
-	b->yy_buf_size = size;
-
-	/* yy_ch_buf has to be 2 characters longer than the size given because
-	 * we need to put in 2 end-of-buffer characters.
-	 */
-	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
-	if ( ! b->yy_ch_buf )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
-
-	b->yy_is_our_buffer = 1;
-
-	yy_init_buffer( b, file TSRMLS_CC );
-
-	return b;
-	}
-
-
-#ifdef YY_USE_PROTOS
-void yy_delete_buffer( YY_BUFFER_STATE b TSRMLS_DC )
-#else
-void yy_delete_buffer( b TSRMLS_CC )
-YY_BUFFER_STATE b;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	if ( ! b )
-		return;
-
-	if ( b == yy_current_buffer )
-		yy_current_buffer = (YY_BUFFER_STATE) 0;
-
-	if ( b->yy_is_our_buffer )
-		yy_flex_free( (void *) b->yy_ch_buf );
-
-	yy_flex_free( (void *) b );
-	}
-
-
-#ifndef YY_ALWAYS_INTERACTIVE
-#ifndef YY_NEVER_INTERACTIVE
-#endif
-#endif
-
-#ifdef YY_USE_PROTOS
-void yy_init_buffer( YY_BUFFER_STATE b, struct _zend_file_handle *file TSRMLS_DC )
-#else
-void yy_init_buffer( b, file TSRMLS_CC )
-YY_BUFFER_STATE b;
-struct _zend_file_handle *file;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-
-
-	{
-	yy_flush_buffer( b TSRMLS_CC );
-
-	b->yy_input_file = file;
-	b->yy_fill_buffer = 1;
-
-	}
-
-
-#ifdef YY_USE_PROTOS
-void yy_flush_buffer( YY_BUFFER_STATE b TSRMLS_DC )
-#else
-void yy_flush_buffer( b TSRMLS_CC )
-YY_BUFFER_STATE b;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-
-	{
-	if ( ! b )
-		return;
-
-	b->yy_n_chars = 0;
-
-	/* We always need two end-of-buffer characters.  The first causes
-	 * a transition to the end-of-buffer state.  The second causes
-	 * a jam in that state.
-	 */
-	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
-	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
-
-	b->yy_buf_pos = &b->yy_ch_buf[0];
-
-	b->yy_at_bol = 1;
-	b->yy_buffer_status = YY_BUFFER_NEW;
-
-	if ( b == yy_current_buffer )
-		yy_load_buffer_state(TSRMLS_C);
-	}
-
-
-#ifndef YY_NO_SCAN_BUFFER
-#ifdef YY_USE_PROTOS
-YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size TSRMLS_DC )
-#else
-YY_BUFFER_STATE yy_scan_buffer( base, size TSRMLS_CC )
-char *base;
-yy_size_t size;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	YY_BUFFER_STATE b;
-
-	if ( size < 2 ||
-	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
-	     base[size-1] != YY_END_OF_BUFFER_CHAR )
-		/* They forgot to leave room for the EOB's. */
-		return 0;
-
-	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
-	if ( ! b )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
-
-	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
-	b->yy_buf_pos = b->yy_ch_buf = base;
-	b->yy_is_our_buffer = 0;
-	b->yy_input_file = 0;
-	b->yy_n_chars = b->yy_buf_size;
-	b->yy_at_bol = 1;
-	b->yy_fill_buffer = 0;
-	b->yy_buffer_status = YY_BUFFER_NEW;
-
-	yy_switch_to_buffer( b TSRMLS_CC );
-
-	return b;
-	}
-#endif
-
-
-#ifndef YY_NO_SCAN_STRING
-#ifdef YY_USE_PROTOS
-YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str TSRMLS_DC )
-#else
-YY_BUFFER_STATE yy_scan_string( yy_str TSRMLS_CC )
-yyconst char *yy_str;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	int len;
-	for ( len = 0; yy_str[len]; ++len )
-		;
-
-	return yy_scan_bytes( yy_str, len TSRMLS_CC );
-	}
-#endif
-
-
-#ifndef YY_NO_SCAN_BYTES
-#ifdef YY_USE_PROTOS
-YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len TSRMLS_DC )
-#else
-YY_BUFFER_STATE yy_scan_bytes( bytes, len TSRMLS_CC )
-yyconst char *bytes;
-int len;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	YY_BUFFER_STATE b;
-	char *buf;
-	yy_size_t n;
-	int i;
-
-	/* Get memory for full buffer, including space for trailing EOB's. */
-	n = len + 2;
-	buf = (char *) yy_flex_alloc( n );
-	if ( ! buf )
-		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
-
-	for ( i = 0; i < len; ++i )
-		buf[i] = bytes[i];
-
-	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;
-
-	b = yy_scan_buffer( buf, n TSRMLS_CC);
-	if ( ! b )
-		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
-
-	/* It's okay to grow etc. this buffer, and we should throw it
-	 * away when we're done.
-	 */
-	b->yy_is_our_buffer = 1;
-
-	return b;
-	}
-#endif
-
-
-#ifndef YY_NO_PUSH_STATE
-#ifdef YY_USE_PROTOS
-static void yy_push_state( int new_state TSRMLS_DC )
-#else
-static void yy_push_state( new_state TSRMLS_CC )
-int new_state;
-#ifdef ZTS
-void ***tsrm_ls;
-#endif
-#endif
-	{
-	if ( yy_start_stack_ptr >= yy_start_stack_depth )
-		{
-		yy_size_t new_size;
-
-		yy_start_stack_depth += YY_START_STACK_INCR;
-		new_size = yy_start_stack_depth * sizeof( int );
-
-		if ( ! yy_start_stack )
-			yy_start_stack = (int *) yy_flex_alloc( new_size );
-
-		else
-			yy_start_stack = (int *) yy_flex_realloc(
-					(void *) yy_start_stack, new_size );
-
-		if ( ! yy_start_stack )
-			YY_FATAL_ERROR(
-			"out of memory expanding start-condition stack" );
-		}
-
-	yy_start_stack[yy_start_stack_ptr++] = YY_START;
-
-	BEGIN(new_state);
-	}
-#endif
-
-
-#ifndef YY_NO_POP_STATE
-static void yy_pop_state(TSRMLS_D)
-	{
-	if ( --yy_start_stack_ptr < 0 )
-		YY_FATAL_ERROR( "start-condition stack underflow" );
-
-	BEGIN(yy_start_stack[yy_start_stack_ptr]);
-	}
-#endif
-
-
-#ifndef YY_NO_TOP_STATE
-static int yy_top_state(TSRMLS_D)
-	{
-	return yy_start_stack[yy_start_stack_ptr - 1];
-	}
-#endif
-
-#ifndef YY_EXIT_FAILURE
-#define YY_EXIT_FAILURE 2
-#endif
-
-#ifdef YY_USE_PROTOS
-static void yy_fatal_error( yyconst char msg[] )
-#else
-static void yy_fatal_error( msg )
-char msg[];
-#endif
-	{
-	(void) fprintf( stderr, "%s\n", msg );
-	exit( YY_EXIT_FAILURE );
-	}
-
-
-
-/* Redefine yyless() so it works in section 3 code. */
-
-#undef yyless
-#define yyless(n) \
-	do \
-		{ \
-		/* Undo effects of setting up yytext. */ \
-		yytext[yyleng] = yy_hold_char; \
-		yy_c_buf_p = yytext + n; \
-		yy_hold_char = *yy_c_buf_p; \
-		*yy_c_buf_p = '\0'; \
-		yyleng = n; \
-		} \
-	while ( 0 )
-
-
-/* Internal utility routines. */
-
-#ifndef yytext_ptr
-#ifdef YY_USE_PROTOS
-static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
-#else
-static void yy_flex_strncpy( s1, s2, n )
-char *s1;
-yyconst char *s2;
-int n;
-#endif
-	{
-	register int i;
-	for ( i = 0; i < n; ++i )
-		s1[i] = s2[i];
-	}
-#endif
-
-#ifdef YY_NEED_STRLEN
-#ifdef YY_USE_PROTOS
-static int yy_flex_strlen( yyconst char *s )
-#else
-static int yy_flex_strlen( s )
-yyconst char *s;
-#endif
-	{
-	register int n;
-	for ( n = 0; s[n]; ++n )
-		;
-
-	return n;
-	}
-#endif
-
-
-#ifdef YY_USE_PROTOS
-static void *yy_flex_alloc( yy_size_t size )
-#else
-static void *yy_flex_alloc( size )
-yy_size_t size;
-#endif
-	{
-	return (void *) malloc( size );
-	}
-
-#ifdef YY_USE_PROTOS
-static void *yy_flex_realloc( void *ptr, yy_size_t size )
-#else
-static void *yy_flex_realloc( ptr, size )
-void *ptr;
-yy_size_t size;
-#endif
-	{
-	/* The cast to (char *) in the following accommodates both
-	 * implementations that use char* generic pointers, and those
-	 * that use void* generic pointers.  It works with the latter
-	 * because both ANSI C and C++ allow castless assignment from
-	 * any pointer type to void*, and deal with argument conversions
-	 * as though doing an assignment.
-	 */
-	return (void *) realloc( (char *) ptr, size );
-	}
-
-#ifdef YY_USE_PROTOS
-static void yy_flex_free( void *ptr )
-#else
-static void yy_flex_free( ptr )
-void *ptr;
-#endif
-	{
-	free( ptr );
-	}
-
-#if YY_MAIN
-int main()
-	{
-	yylex();
-	return 0;
-	}
-#endif
+#define yy_create_buffer zend_create_buffer
+#define yy_delete_buffer zend_delete_buffer
+#define yy_scan_buffer zend_scan_buffer
+#define yy_scan_string zend_scan_string
+#define yy_scan_bytes zend_scan_bytes
+#define yy_flex_debug zend_flex_debug
+#define yy_init_buffer zend_init_buffer
+#define yy_flush_buffer zend_flush_buffer
+#define yy_load_buffer_state zend_load_buffer_state
+#define yy_switch_to_buffer zend_switch_to_buffer
+#define yyin zendin
+#define yyleng zendleng
+#define yylex zendlex
+#define yyout zendout
+#define yyrestart zendrestart
+#define yytext zendtext
+
+#line 19 "zend_language_scanner.c"
+/* A Lexical scanner generated by flex */
+
+/* Scanner skeleton version:
+ * $Header: /repository/Zend/Attic/flex.skl,v 1.27.4.4 2003/05/31 01:37:43 sniper Exp $
+ */
+
+#define FLEX_SCANNER
+#define YY_FLEX_MAJOR_VERSION 2
+#define YY_FLEX_MINOR_VERSION 5
+
+
+/* for HAVE_* */
+#include "zend.h"
+
+/* for recv */
+#ifdef HAVE_SYS_TYPES_H
+# include <sys/types.h>
+#endif
+#ifdef HAVE_SYS_SOCKET_H
+# include <sys/socket.h> 
+#endif
+
+/* for read */
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
+#include <stdio.h>
+
+
+/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
+#ifdef c_plusplus
+#ifndef __cplusplus
+#define __cplusplus
+#endif
+#endif
+
+
+#ifdef __cplusplus
+
+#include <stdlib.h>
+#if HAVE_UNISTD_H
+#include <unistd.h>
+#endif
+
+/* Use prototypes in function declarations. */
+#define YY_USE_PROTOS
+
+/* The "const" storage-class-modifier is valid. */
+#define YY_USE_CONST
+
+#else	/* ! __cplusplus */
+
+#if __STDC__
+
+#define YY_USE_PROTOS
+#define YY_USE_CONST
+
+#endif	/* __STDC__ */
+#endif	/* ! __cplusplus */
+
+#ifdef __TURBOC__
+ #pragma warn -rch
+ #pragma warn -use
+#include <io.h>
+#include <stdlib.h>
+#define YY_USE_CONST
+#define YY_USE_PROTOS
+#endif
+
+#ifdef YY_USE_CONST
+#define yyconst const
+#else
+#define yyconst
+#endif
+
+#undef YY_USE_PROTOS
+#define YY_USE_PROTOS
+
+#ifdef YY_USE_PROTOS
+#define YY_PROTO(proto) proto
+#else
+#define YY_PROTO(proto) ()
+#endif
+
+/* Returned upon end-of-file. */
+#define YY_NULL 0
+
+/* Promotes a possibly negative, possibly signed char to an unsigned
+ * integer for use as an array index.  If the signed char is negative,
+ * we want to instead treat it as an 8-bit unsigned char, hence the
+ * double cast.
+ */
+#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
+
+/* Enter a start condition.  This macro really ought to take a parameter,
+ * but we do it the disgusting crufty way forced on us by the ()-less
+ * definition of BEGIN.
+ */
+#define BEGIN yy_start = 1 + 2 *
+
+/* Translate the current start state into a value that can be later handed
+ * to BEGIN to return to the state.  The YYSTATE alias is for lex
+ * compatibility.
+ */
+#define YY_START ((yy_start - 1) / 2)
+#define YYSTATE YY_START
+
+/* Action number for EOF rule of a given start state. */
+#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
+
+/* Special action meaning "start processing a new file". */
+#define YY_NEW_FILE yyrestart( SCNG(yy_in) TSRMLS_CC )
+
+#define YY_END_OF_BUFFER_CHAR 0
+
+/* Size of default input buffer. */
+#define YY_BUF_SIZE 16384
+
+typedef struct yy_buffer_state *YY_BUFFER_STATE;
+
+extern int yyleng;
+
+
+#define EOB_ACT_CONTINUE_SCAN 0
+#define EOB_ACT_END_OF_FILE 1
+#define EOB_ACT_LAST_MATCH 2
+
+/* The funky do-while in the following #define is used to turn the definition
+ * int a single C statement (which needs a semi-colon terminator).  This
+ * avoids problems with code like:
+ *
+ * 	if ( condition_holds )
+ *		yyless( 5 );
+ *	else
+ *		do_something_else();
+ *
+ * Prior to using the do-while the compiler would get upset at the
+ * "else" because it interpreted the "if" statement as being all
+ * done when it reached the ';' after the yyless() call.
+ */
+
+/* Return all but the first 'n' matched characters back to the input stream. */
+
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up yytext. */ \
+		*yy_cp = yy_hold_char; \
+		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
+		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
+		} \
+	while ( 0 )
+
+#define unput(c) yyunput( c, yytext_ptr TSRMLS_CC )
+
+/* The following is because we cannot portably get our hands on size_t
+ * (without autoconf's help, which isn't available because we want
+ * flex-generated scanners to compile on their own).
+ */
+typedef unsigned int yy_size_t;
+
+
+struct yy_buffer_state
+	{
+	struct _zend_file_handle *yy_input_file;
+
+	char *yy_ch_buf;		/* input buffer */
+	char *yy_buf_pos;		/* current position in input buffer */
+
+	/* Size of input buffer in bytes, not including room for EOB
+	 * characters.
+	 */
+	yy_size_t yy_buf_size;
+
+	/* Number of characters read into yy_ch_buf, not including EOB
+	 * characters.
+	 */
+	int yy_n_chars;
+
+	/* Whether we "own" the buffer - i.e., we know we created it,
+	 * and can realloc() it to grow it, and should free() it to
+	 * delete it.
+	 */
+	int yy_is_our_buffer;
+
+	/* Whether we're considered to be at the beginning of a line.
+	 * If so, '^' rules will be active on the next match, otherwise
+	 * not.
+	 */
+	int yy_at_bol;
+
+	/* Whether to try to fill the input buffer when we reach the
+	 * end of it.
+	 */
+	int yy_fill_buffer;
+
+	int yy_buffer_status;
+#define YY_BUFFER_NEW 0
+#define YY_BUFFER_NORMAL 1
+	/* When an EOF's been seen but there's still some text to process
+	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
+	 * shouldn't try reading from the input source any more.  We might
+	 * still have a bunch of tokens to match, though, because of
+	 * possible backing-up.
+	 *
+	 * When we actually see the EOF, we change the status to "new"
+	 * (via yyrestart()), so that the user can continue scanning by
+	 * just pointing yyin at a new input file.
+	 */
+#define YY_BUFFER_EOF_PENDING 2
+	};
+
+#define yy_current_buffer SCNG(current_buffer)
+#define yy_hold_char SCNG(_yy_hold_char)
+
+/* We provide macros for accessing buffer states in case in the
+ * future we want to put the buffer states in a more general
+ * "scanner state".
+ */
+#define YY_CURRENT_BUFFER yy_current_buffer
+
+
+/* yy_hold_char holds the character lost when yytext is formed. */
+
+#if 0
+static char yy_hold_char;
+
+static int yy_n_chars;		/* number of characters read into yy_ch_buf */
+#endif
+
+/* Points to current character in buffer. */
+#define yy_c_buf_p SCNG(c_buf_p)
+#define yy_init SCNG(init)
+#define yy_start SCNG(start)
+
+/* Flag which is used to allow yywrap()'s to do buffer switches
+ * instead of setting up a fresh yyin.  A bit of a hack ...
+ */
+/* static int yy_did_buffer_switch_on_eof; */
+#define yy_did_buffer_switch_on_eof SCNG(_yy_did_buffer_switch_on_eof)
+
+void yyrestart YY_PROTO(( struct _zend_file_handle  *input_file TSRMLS_DC ));
+
+void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer TSRMLS_DC ));
+void yy_load_buffer_state YY_PROTO(( TSRMLS_D ));
+YY_BUFFER_STATE yy_create_buffer YY_PROTO(( struct _zend_file_handle *file, int size TSRMLS_DC ));
+void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b TSRMLS_DC ));
+void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, struct _zend_file_handle *file TSRMLS_DC ));
+void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b TSRMLS_DC ));
+#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer TSRMLS_CC )
+
+YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size TSRMLS_DC ));
+YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str TSRMLS_DC ));
+YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len TSRMLS_DC ));
+
+
+static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
+static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
+static void yy_flex_free YY_PROTO(( void * ));
+
+#define yy_new_buffer yy_create_buffer
+
+#define yy_set_interactive(is_interactive) \
+	{ \
+	if ( ! yy_current_buffer ) \
+		yy_current_buffer = yy_create_buffer( SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC ); \
+	}
+
+#define yy_set_bol(at_bol) \
+	{ \
+	if ( ! yy_current_buffer ) \
+		yy_current_buffer = yy_create_buffer( SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC ); \
+	yy_current_buffer->yy_at_bol = at_bol; \
+	}
+
+#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
+
+
+#define yywrap() 1
+#define YY_SKIP_YYWRAP
+typedef unsigned char YY_CHAR;
+FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
+typedef int yy_state_type;
+extern char *yytext;
+#define yytext_ptr yytext
+#undef yyleng
+#define yyleng SCNG(yy_leng)
+#undef yytext
+#define yytext SCNG(yy_text)
+#undef yytext_ptr
+#define yytext_ptr SCNG(yy_text)
+#undef yyin
+#define yyin SCNG(yy_in)
+#undef yyout
+#define yyout SCNG(yy_out)
+#undef yy_last_accepting_state
+#define yy_last_accepting_state SCNG(_yy_last_accepting_state)
+#undef yy_last_accepting_cpos
+#define yy_last_accepting_cpos SCNG(_yy_last_accepting_cpos)
+#undef yy_more_flag
+#define yy_more_flag SCNG(_yy_more_flag)
+#undef yy_more_len
+#define yy_more_len SCNG(_yy_more_len)
+
+
+static yy_state_type yy_get_previous_state YY_PROTO(( TSRMLS_D ));
+static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state TSRMLS_DC ));
+static int yy_get_next_buffer YY_PROTO(( TSRMLS_D ));
+static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));
+
+/* Done after the current pattern has been matched and before the
+ * corresponding action - sets up yytext.
+ */
+#define YY_DO_BEFORE_ACTION \
+	yytext_ptr = yy_bp; \
+	yytext_ptr -= yy_more_len; \
+	yyleng = (int) (yy_cp - yytext_ptr); \
+	yy_hold_char = *yy_cp; \
+	*yy_cp = '\0'; \
+	yy_c_buf_p = yy_cp;
+
+#undef yyleng
+#undef yytext
+#undef yytext_ptr
+#undef yyin
+#undef yyout
+#undef yy_last_accepting_state
+#undef yy_last_accepting_cpos
+#undef yy_more_flag
+#undef yy_more_len
+
+
+#define YY_NUM_RULES 145
+#define YY_END_OF_BUFFER 146
+static yyconst short int yy_accept[1351] =
+    {   0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
+      146,   98,   98,  144,  107,   84,  121,  108,   84,   84,
+       84,  124,   84,   84,   84,   84,   84,   84,   84,   90,
+       90,   84,   84,   84,   84,   84,   84,  105,  123,  105,
+      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
+      105,  105,  105,  105,  105,  105,  105,  105,   85,   84,
+       87,  126,  141,  131,  126,   92,   92,  131,  144,  106,
+      128,  131,  127,  143,  144,  129,  144,  142,  140,  126,
+      144,  106,   33,   32,   89,   88,  114,  116,  110,  111,
+
+      111,  109,  109,  109,   98,    0,   98,  101,   99,   98,
+      107,   63,    0,  119,    0,  104,   71,  118,   78,   74,
+        0,  120,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,   68,   58,   66,   59,   67,   31,   93,
+       70,  113,  108,   69,   93,   90,    0,    0,   34,    0,
+       82,   64,   63,   62,   55,   65,   83,  117,   76,  105,
+      105,  105,  105,   20,  105,  105,  105,  105,  105,  105,
+      105,   13,  105,  105,  105,  105,  105,  105,  105,  105,
+      105,    7,  105,  105,  105,  105,  105,   79,  105,  105,
+      105,  105,  105,  105,  105,  105,  105,   75,   77,  126,
+
+      130,   86,   31,   92,    0,  139,  135,  137,  139,  106,
+      128,  132,  127,    0,  133,  134,  129,  136,  140,  126,
+      125,  125,  106,    0,   32,   88,  114,  115,  110,  111,
+      112,   98,    0,  100,    0,    0,   61,  104,  118,  118,
+        0,    0,    0,    0,    0,    0,    0,    0,    0,   93,
+        0,   93,   91,    0,    0,   72,   60,   73,  117,  117,
+      105,  105,  105,   80,  105,  105,  105,  105,  105,  105,
+      105,  105,    2,  105,  105,  105,  105,  105,  105,  105,
+       14,  105,  105,  105,  105,  105,   35,  105,  105,  105,
+      105,  105,  105,  105,   49,   36,  105,   81,   92,  137,
+
+      138,   98,    0,    0,    0,    0,    0,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,  105,  105,  105,
+      105,  105,  105,   23,  105,  105,  105,  105,  105,  105,
+       27,   10,  105,  105,  105,  105,  105,  105,   44,    1,
+      105,  105,  105,  105,  105,  105,   56,  105,  105,  105,
+      105,  105,  105,  105,  105,  137,  138,   98,    0,    0,
+        0,    0,    0,    0,    0,    0,   37,    0,    0,    0,
+        0,    0,    0,  122,  122,    0,  105,  105,  105,  105,
+       57,   25,  105,   29,    5,  105,  105,  105,  105,   52,
+      105,  105,    9,  105,  105,  105,  105,  105,  105,  105,
+
+       51,  105,   28,  105,  105,  105,  105,   54,   11,   98,
+        0,  102,  102,    0,    0,    0,    0,   42,    0,    0,
+        0,    0,    0,   38,    0,    0,    0,  105,  105,  105,
+      105,  105,  105,  105,  105,    8,  105,   15,  105,  105,
+      105,  105,  105,   50,  105,  105,  105,    6,   53,   21,
+       98,    0,    0,    0,    0,   40,    0,    0,    0,    0,
+        0,   43,    0,  105,  105,  105,  105,  105,  105,   18,
+       24,  105,  105,  105,  105,   30,   16,  105,   45,  105,
+       47,   98,    0,    0,    0,    0,    0,    0,   41,    0,
+       39,    0,  105,   97,  105,   96,  105,   26,  105,  105,
+
+      105,   12,    4,  105,  105,  105,   98,    0,    0,    0,
+        0,   94,  105,  105,  105,   22,  105,  105,  105,   98,
+        0,    0,    0,  105,   19,   17,  105,  105,  105,   98,
+        0,    0,    0,  105,  105,  105,  105,   98,    0,    0,
+        0,   95,   46,    3,   48,   98,    0,    0,    0,   98,
+        0,    0,    0,   98,    0,    0,    0,   98,    0,    0,
+        0,   98,    0,    0,    0,    0,   98,    0,  103,    0,
+        0,    0,    0,   98,    0,  103,  103,    0,    0,    0,
+       98,    0,    0,    0,    0,   98,    0,    0,    0,    0,
+       99,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,   98,
+        0,   98,    0,   98,    0,   98,    0,   98,    0,    0
+    } ;
+
+static yyconst int yy_ec[256] =
+    {   0,
+        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
+        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    2,    5,    6,    7,    8,    9,   10,   11,   12,
+       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
+       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
+       26,   27,   28,   16,   34,   35,   36,   37,   38,   39,
+       40,   41,   42,   43,   44,   45,   46,   47,   48,   49,
+       50,   51,   52,   53,   54,   55,   56,   57,   58,   59,
+       29,   30,   29,   31,   32,   33,   34,   35,   36,   37,
+
+       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
+       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
+       58,   59,   60,   61,   62,   16,   59,   59,   59,   59,
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
+       59,   59,   59,   59,   59
+    } ;
+
+static yyconst int yy_meta[63] =
+    {   0,
+        1,    2,    3,    3,    4,    1,    4,    5,    6,    4,
+        7,    4,    4,    8,    4,    4,    4,    4,    4,    9,
+        9,    9,    4,   10,   11,    4,    6,    6,    1,    1,
+        4,   12,    1,   12,   12,   12,   12,   12,   12,   12,
+       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
+       12,   12,   12,   12,   12,   12,   12,   12,   12,    1,
+        4,    1
+    } ;
+
+static yyconst short int yy_base[1771] =
+    {   0,
+     7910, 7909,    0,    0,   62,    0,  114,  115,  121,  122,
+      123,  151,  210,    0,  272,    0, 7919, 7918,  132,  139,
+     7931, 7905,  121, 7936,  129, 7903,  131, 7936,    0,  112,
+      137,  135,  333, 7936, 7902,  143,  151,  150,  322,  322,
+      331, 7904,  320,  148,  153, 7899, 7899, 7892, 7936,  303,
+     7872,  332,  340,  347,  308, 7877,    0,  351, 7879, 7882,
+      312, 7868, 7880,  305,  312, 7883, 7875, 7867, 7936,  312,
+     7936,    0, 7936,  404, 7887,  447,  375, 7936,  464,    0,
+     7880, 7904, 7881, 7936,  460, 7904,  453, 7936,  466,  469,
+      458,  479, 7936,    0, 7936,    0,    0, 7890,    0, 7936,
+
+     7905, 7880, 7936, 7879, 7880,  467, 7879, 7877,  350, 7866,
+      485, 7875,  134, 7936,  383,    0, 7936,  397, 7936, 7936,
+      470, 7936, 7897,    0, 7848, 7850, 7849, 7851, 7848, 7859,
+     7855, 7839, 7844, 7936, 7936, 7936, 7936, 7936, 7936,  476,
+     7936, 7936, 7936, 7936,  485,  491,  505,  496, 7936, 7838,
+      468, 7936, 7936, 7863, 7936, 7936, 7862,  533, 7936,    0,
+      502, 7850, 7835,    0, 7847, 7832, 7829, 7848, 7834,  503,
+     7842,    0, 7838, 7826, 7828, 7839, 7841,  498, 7823, 7826,
+     7824,    0, 7835, 7818, 7817, 7812, 7830,    0, 7824,  493,
+     7831, 7822, 7811, 7824, 7810, 7818, 7808, 7936, 7936,    0,
+
+     7936, 7936,    0,  528,  532, 7936, 7936,  524,  538,    0,
+     7825, 7936, 7827, 7826, 7936, 7936, 7849, 7936,  550,  551,
+     7936, 7851,  561,  575,    0,    0,    0, 7936,    0, 7936,
+     7936, 7828,  571, 7936, 7811, 7800, 7936,    0, 7936, 7847,
+     7798, 7800, 7793, 7798, 7792, 7801, 7809, 7791, 7789,  566,
+      569,  572,  580, 7804, 7837, 7936, 7936, 7936, 7936, 7835,
+     7792,  553, 7794,    0, 7801, 7800, 7795, 7785, 7779,  529,
+     7785, 7795,    0, 7780, 7789, 7773,  569, 7780, 7771, 7785,
+     7784, 7785, 7785, 7774, 7780, 7764,    0, 7784, 7768, 7760,
+     7759, 7759, 7758, 7772,    0,    0, 7764,    0,  606,  577,
+
+      612, 7783,  611, 7758, 7764, 7771, 7759, 7768, 7768,  622,
+     7763, 7755, 7757, 7760, 3005, 3053,  606, 3019, 3007, 3004,
+     3003, 2991, 2990,    0, 2997, 2980, 2978, 2988, 2995, 2974,
+        0, 2985, 2968, 2973, 2962, 2951, 2931, 2939,    0,    0,
+     2924, 2936, 2914, 2932, 2909, 2907,    0, 2920, 2905, 2915,
+     2905, 2907, 2905, 2887, 2886, 7936, 7936, 2895,  628,  627,
+     2866, 2856,  652, 2848, 2834,  653, 7936, 2775, 2777,  655,
+     2765, 2758, 2766, 7936, 2804,  609, 2754, 2767, 2767, 2764,
+        0,    0, 2748,    0,    0, 2753, 2747, 2752, 2757,    0,
+     2759, 2743,    0, 2751, 2749, 2751, 2748, 2736, 2731, 2728,
+
+        0, 2709,    0, 2711, 2713, 2722, 2712,    0,    0, 2726,
+      649, 7936, 2746, 2695, 2677,  659,  660, 7936, 2689, 2682,
+     2681, 2665,  662, 7936, 2677,  665, 2665, 2661, 2676, 2650,
+     2660, 2641, 2626, 2640, 2624,    0, 2629, 2635, 2610, 2615,
+     2605, 2602, 2592,    0, 2600, 2590, 2596,    0,    0,    0,
+     2600,  660, 2572,  679,  674, 7936, 2575, 2569,  682,  684,
+      687, 7936, 2550, 2568, 2565, 2552, 2558, 2539, 2547,    0,
+        0, 2549, 2546, 2532, 2519,    0,    0, 2508, 2522, 2516,
+     2518, 2520,  682, 2509,  690,  696,  700,  701, 7936,  702,
+     7936,  714, 2509,    0, 2492,    0, 2475,    0, 2464, 2476,
+
+     2470,    0,    0, 2462, 2456, 2458, 2480,  696, 2464, 2461,
+      723,    0, 2437, 2437, 2431,    0, 2423, 2427, 2419, 2440,
+      711, 2411, 2405, 2417,    0,    0, 2399, 2384, 2394, 2404,
+      719, 2394, 2377, 2383, 2376, 2365, 2357, 2367,  721, 2334,
+     2332,    0,    0,    0,    0, 2357,  728, 2345, 2343, 2350,
+      729, 2321, 2320, 2324,  733, 2295, 2308, 2319,  734, 2314,
+      729, 2312,  742, 2308,  762,  772, 2308,  759,  667,  787,
+     2283, 2265, 2266, 2279,  787, 7936, 2300, 2261, 2260, 2249,
+     2272,  788, 2243, 2238,  797, 2251,  794, 2261, 2253,  802,
+     7936, 2237,  798, 2236,  800, 2233,  805, 2232,  809, 2222,
+
+      823, 2219,  834, 2216,  835, 2202,  840, 2199,  844, 2197,
+      845, 2196,  846, 2193,  855, 2184,  857, 2182,  875, 2181,
+      880, 2179,  885, 2162,  886, 2159,  890, 2156,  892, 2153,
+      897, 2149,  903, 2146,  915, 2144,  920, 2142,  925, 2139,
+      926, 2127,  932, 2116,  937, 2114,  938, 2113,  943, 2111,
+      955, 2109,  960, 2104,  966, 2102,  972, 2100,  973, 2099,
+      977, 2081,  978, 2074,  983, 2071,  995, 2070, 1006, 2069,
+     1008, 2068, 1012, 2065, 1013, 2064, 1017, 2059, 1018, 2054,
+     1023, 2043, 1043, 2034, 1048, 2031, 1052, 2029, 1053, 2028,
+     1054, 2025, 1058, 2024, 1063, 2014, 1065, 2011, 1083, 2008,
+
+     1088, 1994, 1093, 1991, 1094, 1989, 1098, 1988, 1100, 1985,
+     1105, 1976, 1111, 1974, 1123, 1973, 1128, 1971, 1133, 1954,
+     1134, 1951, 1140, 1948, 1145, 1945, 1146, 1941, 1151, 1938,
+     1163, 1936, 1168, 1934, 1174, 1931, 1180, 1919, 1181, 1908,
+     1185, 1906, 1186, 1905, 1191, 1903, 1203, 1901, 1214, 1896,
+     1216, 1894, 1220, 1892, 1221, 1891, 1225, 1873, 1226, 1866,
+     1231, 1863, 1251, 1862, 1256, 1861, 1260, 1860, 1261, 1857,
+     1262, 1856, 1266, 1851, 1271, 1846, 1273, 1835, 1291, 1826,
+     1296, 1823, 1301, 1821, 1302, 1820, 1306, 1817, 1308, 1816,
+     1313, 1806, 1319, 1803, 1331, 1800, 1336, 1786, 1341, 1783,
+
+     1342, 1781, 1348, 1780, 1353, 1777, 1354, 1768, 1359, 1766,
+     1371, 1765, 1376, 1763, 1382, 1746, 1388, 1743, 1389, 1740,
+     1393, 1737, 1394, 1733, 1399, 1730, 1411, 1728, 1422, 1726,
+     1424, 1723, 1428, 1711, 1429, 1700, 1433, 1698, 1434, 1697,
+     1439, 1695, 1459, 1693, 1464, 1688, 1468, 1686, 1469, 1684,
+     1470, 1683, 1474, 1665, 1479, 1658, 1481, 1655, 1499, 1654,
+     1504, 1653, 1509, 1652, 1510, 1649, 1514, 1648, 1516, 1643,
+     1521, 1638, 1527, 1627, 1539, 1618, 1544, 1615, 1549, 1613,
+     1550, 1612, 1556, 1609, 1561, 1608, 1562, 1598, 1567, 1595,
+     1579, 1592, 1584, 1578, 1590, 1575, 1596, 1573, 1597, 1572,
+
+     1601, 1569, 1602, 1560, 1607, 1558, 1619, 1557, 1630, 1555,
+     1632, 1538, 1636, 1535, 1637, 1532, 1641, 1529, 1642, 1525,
+     1647, 1522, 1667, 1520, 1672, 1518, 1676, 1515, 1677, 1503,
+     1678, 1492, 1682, 1490, 1687, 1489, 1689, 1487, 1707, 1485,
+     1712, 1480, 1717, 1478, 1718, 1476, 1722, 1475, 1724, 1457,
+     1729,  125, 1735,  157, 1747,  312, 1752,  340, 1757,  349,
+     1758,  364, 1764,  466, 1769,  476, 1770,  483, 1775,  499,
+     1787,  503, 1792,  530, 1798,  538, 1804,  578, 1805,  580,
+     1809,  597, 1810,  613, 1815,  627, 1827,  654, 1838,  671,
+     1840,  674, 1844,  681, 1845,  683, 1849,  686, 1850,  694,
+
+     1855,  697, 1875,  698, 1880,  704, 1884,  715, 1885,  720,
+     1886,  727, 1890,  735, 1895,  744, 1897,  747, 1915,  752,
+     1920,  754, 1925,  757, 1926,  767, 1930,  770, 1932,  777,
+     1937,  783, 1943,  785, 1955,  792, 1960,  795, 1965,  802,
+     1966,  806, 1972,  810, 1977,  813, 1978,  816, 1983,  817,
+     1995,  820, 2000,  822, 2006,  831, 2012,  833, 2013,  842,
+     2017,  851, 2018,  852, 2023,  853, 2035,  854, 2046,  856,
+     2048,  863, 2052,  865, 2053,  866, 2057,  868, 2058,  877,
+     2063,  879, 2083,  891, 2088,  894, 2092,  896, 2093,  898,
+     2094,  901, 2098,  905, 2103,  908, 2105,  911, 2123,  914,
+
+     2128,  931, 2133,  933, 2134,  934, 2138,  936, 2140,  945,
+     2145,  948, 2151,  949, 2163,  951, 2168,  954, 2173,  968,
+     2174,  971, 2180,  974, 2185,  984, 2186,  985, 2191,  988,
+     2203,  989, 2208,  991, 2214,  994, 2220, 1003, 2221, 1014,
+     2225, 1019, 2226, 1024, 2231, 1025, 2243, 1028, 2254, 1029,
+     2256, 1030, 2260, 1031, 2261, 1034, 2265, 1041, 2266, 1059,
+     2271, 1060, 2291, 1062, 2296, 1064, 2300, 1069, 2301, 1071,
+     2302, 1073, 2306, 1074, 2311, 1076, 2313, 1087, 2331, 1099,
+     2336, 1102, 2341, 1104, 2342, 1106, 2346, 1109, 2348, 1113,
+     2353, 1116, 2359, 1119, 2371, 1122, 2376, 1139, 2381, 1141,
+
+     2382, 1142, 2388, 1144, 2393, 1153, 2394, 1156, 2399, 1157,
+     2411, 1159, 2416, 1162, 2422, 1176, 2428, 1179, 2429, 1182,
+     2433, 1192, 2434, 1193, 2439, 1196, 2451, 1197, 2462, 1199,
+     2464, 1202, 2468, 1211, 2469, 1222, 2473, 1227, 2474, 1232,
+     2479, 1233, 2499, 1236, 2504, 1237, 2508, 1238, 2509, 1239,
+     2510, 1242, 2514, 1249, 2519, 1267, 2521, 1268, 2539, 1270,
+     2544, 1272, 2549, 1277, 2550, 1279, 2554, 1281, 2556, 1282,
+     2561, 1284, 2567, 1295, 2579, 1307, 2584, 1310, 2589, 1312,
+     2590, 1314, 2596, 1317, 2601, 1321, 2602, 1324, 2607, 1327,
+     2619, 1330, 2624, 1347, 2630, 1349, 2636, 1350, 2637, 1352,
+
+     2641, 1361, 2642, 1364, 2647, 1365, 2659, 1367, 2670, 1370,
+     2672, 1384, 2676, 1387, 2677, 1390, 2681, 1400, 2682, 1401,
+     2687, 1404, 2707, 1405, 2712, 1407, 2716, 1410, 2717, 1419,
+     2718, 1430, 2722, 1435, 2727, 1440, 2729, 1441, 2747, 1444,
+     2752, 1445, 2757, 1446, 2758, 1447, 2762, 7936, 2764, 7936,
+     2816, 2828, 2840, 2852, 2864, 2876, 2888, 1463, 2900, 2904,
+     2915, 2926, 2930, 2942, 2952, 2956, 2960, 2972, 2984, 2996,
+     3000, 3012, 3023, 3035, 3045, 3057, 3069, 3081, 3093, 3105,
+     3117, 3129, 3141, 3153, 3165, 3177, 3189, 3201, 3213, 3225,
+     3237, 3249, 3261, 3273, 3285, 3297, 3309, 3321, 3333, 3345,
+
+     3357, 3369, 3381, 3393, 3405, 3417, 3429, 3441, 3453, 3465,
+     3477, 3489, 3501, 3513, 3525, 3537, 3549, 3561, 3573, 3585,
+     3597, 3609, 3621, 3633, 3645, 3657, 3669, 3681, 3693, 3705,
+     3717, 3729, 3741, 3753, 3765, 3777, 3789, 3801, 3813, 3825,
+     3837, 3849, 3861, 3873, 3885, 3897, 3909, 3921, 3933, 3945,
+     3957, 3969, 3981, 3993, 4005, 4017, 4029, 4041, 4053, 4065,
+     4077, 4089, 4101, 4113, 4125, 4137, 4149, 4161, 4173, 4185,
+     4197, 4209, 4221, 4233, 4245, 4257, 4269, 4281, 4293, 4305,
+     4317, 4329, 4341, 4353, 4365, 4377, 4389, 4401, 4413, 4425,
+     4437, 4449, 4461, 4473, 4485, 4497, 4509, 4521, 4533, 4545,
+
+     4557, 4569, 4581, 4593, 4605, 4617, 4629, 4641, 4653, 4665,
+     4677, 4689, 4701, 4713, 4725, 4737, 4749, 4761, 4773, 4785,
+     4797, 4809, 4821, 4833, 4845, 4857, 4869, 4881, 4893, 4905,
+     4917, 4929, 4941, 4953, 4965, 4977, 4989, 5001, 5013, 5025,
+     5037, 5049, 5061, 5073, 5085, 5097, 5109, 5121, 5133, 5145,
+     5157, 5169, 5181, 5193, 5205, 5217, 5229, 5241, 5253, 5265,
+     5277, 5289, 5301, 5313, 5325, 5337, 5349, 5361, 5373, 5385,
+     5397, 5409, 5421, 5433, 5445, 5457, 5469, 5481, 5493, 5505,
+     5517, 5529, 5541, 5553, 5565, 5577, 5589, 5601, 5613, 5625,
+     5637, 5649, 5661, 5673, 5685, 5697, 5709, 5721, 5733, 5745,
+
+     5757, 5769, 5781, 5793, 5805, 5817, 5829, 5841, 5853, 5865,
+     5877, 5889, 5901, 5913, 5925, 5937, 5949, 5961, 5973, 5985,
+     5997, 6009, 6021, 6033, 6045, 6057, 6069, 6081, 6093, 6105,
+     6117, 6129, 6141, 6153, 6165, 6177, 6189, 6201, 6213, 6225,
+     6237, 6249, 6261, 6273, 6285, 6297, 6309, 6321, 6333, 6345,
+     6357, 6369, 6381, 6393, 6405, 6417, 6429, 6441, 6453, 6465,
+     6477, 6489, 6501, 6513, 6525, 6537, 6549, 6561, 6573, 6585,
+     6597, 6609, 6621, 6633, 6645, 6657, 6669, 6681, 6693, 6705,
+     6717, 6729, 6741, 6753, 6765, 6777, 6789, 6801, 6813, 6825,
+     6837, 6849, 6861, 6873, 6885, 6897, 6909, 6921, 6933, 6945,
+
+     6957, 6969, 6981, 6993, 7005, 7017, 7029, 7041, 7053, 7065,
+     7077, 7089, 7101, 7113, 7125, 7137, 7149, 7161, 7173, 7185,
+     7197, 7209, 7221, 7233, 7245, 7257, 7269, 7281, 7293, 7305,
+     7317, 7329, 7341, 7353, 7365, 7377, 7389, 7401, 7413, 7425,
+     7437, 7449, 7461, 7473, 7485, 7497, 7509, 7521, 7533, 7545,
+     7557, 7569, 7581, 7593, 7605, 7617, 7629, 7641, 7653, 7665,
+     7677, 7689, 7701, 7713, 7725, 7737, 7749, 7761, 7773, 7785
+    } ;
+
+static yyconst short int yy_def[1771] =
+    {   0,
+     1351, 1351, 1350,    3, 1350,    5, 1352, 1352,    5,    5,
+        5,    5, 1350,   13, 1350,   15, 1353, 1353, 1354, 1354,
+     1350, 1355, 1356, 1350, 1350, 1350, 1357, 1350, 1358, 1350,
+     1350, 1359, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1360, 1350, 1360,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1350, 1350,
+     1350, 1361, 1350, 1350, 1361, 1350, 1350, 1350, 1362, 1363,
+     1350, 1350, 1364, 1350, 1364, 1350, 1362, 1350, 1350, 1361,
+     1362, 1365, 1350, 1366, 1350, 1367, 1368, 1350, 1369, 1350,
+
+     1350, 1350, 1350, 1350, 1370, 1355, 1355, 1350, 1350, 1350,
+     1350, 1350, 1357, 1350, 1357, 1371, 1350, 1350, 1350, 1350,
+     1359, 1350, 1359,   33, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1360,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1350, 1350, 1361,
+
+     1350, 1350, 1361, 1350, 1350, 1350, 1350, 1350, 1350, 1363,
+     1350, 1350, 1364, 1364, 1350, 1350, 1350, 1350, 1350, 1361,
+     1350, 1350, 1365, 1350, 1366, 1367, 1368, 1350, 1369, 1350,
+     1350, 1372, 1370, 1350, 1350, 1350, 1350, 1371, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1373, 1350, 1350, 1350, 1350, 1350,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1350, 1350,
+
+     1350, 1374, 1372, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1373, 1375, 1360, 1360, 1360,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
+     1360, 1360, 1360, 1360, 1360, 1350, 1350, 1376, 1374, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1375, 1360, 1360, 1360, 1360,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
+
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1377,
+     1376, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1360, 1360, 1360,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
+     1378, 1377, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
+     1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
+     1360, 1379, 1378, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
+
+     1360, 1360, 1360, 1360, 1360, 1360, 1380, 1379, 1350, 1350,
+     1350, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1381,
+     1380, 1350, 1350, 1360, 1360, 1360, 1360, 1360, 1360, 1382,
+     1381, 1350, 1350, 1360, 1360, 1360, 1360, 1383, 1382, 1350,
+     1350, 1360, 1360, 1360, 1360, 1384, 1383, 1350, 1350, 1385,
+     1384, 1350, 1350, 1386, 1385, 1350, 1350, 1387, 1386, 1350,
+     1350, 1388, 1387, 1350, 1350, 1350, 1389, 1388, 1350, 1350,
+     1350, 1350, 1350, 1390, 1389, 1350, 1350, 1350, 1350, 1350,
+     1391, 1390, 1350, 1350, 1350, 1392, 1391, 1350, 1350, 1350,
+     1350, 1393, 1392, 1394, 1393, 1395, 1394, 1396, 1395, 1397,
+
+     1396, 1398, 1397, 1399, 1398, 1400, 1399, 1401, 1400, 1402,
+     1401, 1403, 1402, 1404, 1403, 1405, 1404, 1406, 1405, 1407,
+     1406, 1408, 1407, 1409, 1408, 1410, 1409, 1411, 1410, 1412,
+     1411, 1413, 1412, 1414, 1413, 1415, 1414, 1416, 1415, 1417,
+     1416, 1418, 1417, 1419, 1418, 1420, 1419, 1421, 1420, 1422,
+     1421, 1423, 1422, 1424, 1423, 1425, 1424, 1426, 1425, 1427,
+     1426, 1428, 1427, 1429, 1428, 1430, 1429, 1431, 1430, 1432,
+     1431, 1433, 1432, 1434, 1433, 1435, 1434, 1436, 1435, 1437,
+     1436, 1438, 1437, 1439, 1438, 1440, 1439, 1441, 1440, 1442,
+     1441, 1443, 1442, 1444, 1443, 1445, 1444, 1446, 1445, 1447,
+
+     1446, 1448, 1447, 1449, 1448, 1450, 1449, 1451, 1450, 1452,
+     1451, 1453, 1452, 1454, 1453, 1455, 1454, 1456, 1455, 1457,
+     1456, 1458, 1457, 1459, 1458, 1460, 1459, 1461, 1460, 1462,
+     1461, 1463, 1462, 1464, 1463, 1465, 1464, 1466, 1465, 1467,
+     1466, 1468, 1467, 1469, 1468, 1470, 1469, 1471, 1470, 1472,
+     1471, 1473, 1472, 1474, 1473, 1475, 1474, 1476, 1475, 1477,
+     1476, 1478, 1477, 1479, 1478, 1480, 1479, 1481, 1480, 1482,
+     1481, 1483, 1482, 1484, 1483, 1485, 1484, 1486, 1485, 1487,
+     1486, 1488, 1487, 1489, 1488, 1490, 1489, 1491, 1490, 1492,
+     1491, 1493, 1492, 1494, 1493, 1495, 1494, 1496, 1495, 1497,
+
+     1496, 1498, 1497, 1499, 1498, 1500, 1499, 1501, 1500, 1502,
+     1501, 1503, 1502, 1504, 1503, 1505, 1504, 1506, 1505, 1507,
+     1506, 1508, 1507, 1509, 1508, 1510, 1509, 1511, 1510, 1512,
+     1511, 1513, 1512, 1514, 1513, 1515, 1514, 1516, 1515, 1517,
+     1516, 1518, 1517, 1519, 1518, 1520, 1519, 1521, 1520, 1522,
+     1521, 1523, 1522, 1524, 1523, 1525, 1524, 1526, 1525, 1527,
+     1526, 1528, 1527, 1529, 1528, 1530, 1529, 1531, 1530, 1532,
+     1531, 1533, 1532, 1534, 1533, 1535, 1534, 1536, 1535, 1537,
+     1536, 1538, 1537, 1539, 1538, 1540, 1539, 1541, 1540, 1542,
+     1541, 1543, 1542, 1544, 1543, 1545, 1544, 1546, 1545, 1547,
+
+     1546, 1548, 1547, 1549, 1548, 1550, 1549, 1551, 1550, 1552,
+     1551, 1553, 1552, 1554, 1553, 1555, 1554, 1556, 1555, 1557,
+     1556, 1558, 1557, 1559, 1558, 1560, 1559, 1561, 1560, 1562,
+     1561, 1563, 1562, 1564, 1563, 1565, 1564, 1566, 1565, 1567,
+     1566, 1568, 1567, 1569, 1568, 1570, 1569, 1571, 1570, 1572,
+     1571, 1573, 1572, 1574, 1573, 1575, 1574, 1576, 1575, 1577,
+     1576, 1578, 1577, 1579, 1578, 1580, 1579, 1581, 1580, 1582,
+     1581, 1583, 1582, 1584, 1583, 1585, 1584, 1586, 1585, 1587,
+     1586, 1588, 1587, 1589, 1588, 1590, 1589, 1591, 1590, 1592,
+     1591, 1593, 1592, 1594, 1593, 1595, 1594, 1596, 1595, 1597,
+
+     1596, 1598, 1597, 1599, 1598, 1600, 1599, 1601, 1600, 1602,
+     1601, 1603, 1602, 1604, 1603, 1605, 1604, 1606, 1605, 1607,
+     1606, 1608, 1607, 1609, 1608, 1610, 1609, 1611, 1610, 1612,
+     1611, 1613, 1612, 1614, 1613, 1615, 1614, 1616, 1615, 1617,
+     1616, 1618, 1617, 1619, 1618, 1620, 1619, 1621, 1620, 1622,
+     1621, 1623, 1622, 1624, 1623, 1625, 1624, 1626, 1625, 1627,
+     1626, 1628, 1627, 1629, 1628, 1630, 1629, 1631, 1630, 1632,
+     1631, 1633, 1632, 1634, 1633, 1635, 1634, 1636, 1635, 1637,
+     1636, 1638, 1637, 1639, 1638, 1640, 1639, 1641, 1640, 1642,
+     1641, 1643, 1642, 1644, 1643, 1645, 1644, 1646, 1645, 1647,
+
+     1646, 1648, 1647, 1649, 1648, 1650, 1649, 1651, 1650, 1652,
+     1651, 1653, 1652, 1654, 1653, 1655, 1654, 1656, 1655, 1657,
+     1656, 1658, 1657, 1659, 1658, 1660, 1659, 1661, 1660, 1662,
+     1661, 1663, 1662, 1664, 1663, 1665, 1664, 1666, 1665, 1667,
+     1666, 1668, 1667, 1669, 1668, 1670, 1669, 1671, 1670, 1672,
+     1671, 1673, 1672, 1674, 1673, 1675, 1674, 1676, 1675, 1677,
+     1676, 1678, 1677, 1679, 1678, 1680, 1679, 1681, 1680, 1682,
+     1681, 1683, 1682, 1684, 1683, 1685, 1684, 1686, 1685, 1687,
+     1686, 1688, 1687, 1689, 1688, 1690, 1689, 1691, 1690, 1692,
+     1691, 1693, 1692, 1694, 1693, 1695, 1694, 1696, 1695, 1697,
+
+     1696, 1698, 1697, 1699, 1698, 1700, 1699, 1701, 1700, 1702,
+     1701, 1703, 1702, 1704, 1703, 1705, 1704, 1706, 1705, 1707,
+     1706, 1708, 1707, 1709, 1708, 1710, 1709, 1711, 1710, 1712,
+     1711, 1713, 1712, 1714, 1713, 1715, 1714, 1716, 1715, 1717,
+     1716, 1718, 1717, 1719, 1718, 1720, 1719, 1721, 1720, 1722,
+     1721, 1723, 1722, 1724, 1723, 1725, 1724, 1726, 1725, 1727,
+     1726, 1728, 1727, 1729, 1728, 1730, 1729, 1731, 1730, 1732,
+     1731, 1733, 1732, 1734, 1733, 1735, 1734, 1736, 1735, 1737,
+     1736, 1738, 1737, 1739, 1738, 1740, 1739, 1741, 1740, 1742,
+     1741, 1743, 1742, 1744, 1743, 1745, 1744, 1746, 1745, 1747,
+
+     1746, 1748, 1747, 1749, 1748, 1750, 1749, 1751, 1750, 1752,
+     1751, 1753, 1752, 1754, 1753, 1755, 1754, 1756, 1755, 1757,
+     1756, 1758, 1757, 1759, 1758, 1760, 1759, 1761, 1760, 1762,
+     1761, 1763, 1762, 1764, 1763, 1765, 1764, 1766, 1765, 1767,
+     1766, 1768, 1767, 1769, 1768, 1770, 1769, 1350, 1770,    0,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350
+    } ;
+
+static yyconst short int yy_nxt[7999] =
+    {   0,
+       24,   25,   25,   25,   26,   27,   28,   29,   30,   31,
+       32,   33,   34,   35,   36,   34,   37,   38,   39,   40,
+       41,   41,   42,   34,   43,   44,   45,   46,   34,   24,
+       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
+       57,   58,   57,   57,   59,   57,   60,   61,   62,   57,
+       63,   64,   57,   65,   66,   67,   68,   57,   57,   69,
+       70,   71,   24,   72,   72,   72,   72,   73,   72,   74,
+       72,   72,   72,   72,   72,   72,   72,   72,   75,   72,
+       72,   76,   77,   77,   72,   72,   72,   72,   72,   72,
+       78,   79,   72,   80,   81,   80,   80,   80,   80,   80,
+
+       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
+       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
+       80,   82,   72,   78,   84,   84,   86,   86,   89,  108,
+      111,  111,  111,   90,  100,  101,  114,  117,  118,  114,
+      102,  100,  101,   85,   85,  122,  119,  102,  109,  955,
+       87,   87,   91,   88,   88,   89,   89,  135,  103,  104,
+      115,   90,  120,  115,  123,  103,  104,  137,  136,  140,
+      140,  140,  110,  154,  155,  141,  138,  139,  156,  157,
+       91,  957,   92,   89,   92,   92,   92,   92,   92,   92,
+       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
+
+       92,   92,   92,   92,   92,   92,   92,   92,   92,   92,
+       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
+       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
+       93,   93,   93,   93,   93,   93,   93,   93,   93,   93,
+       93,   94,   93,   94,   94,   94,   94,   94,   94,   94,
+       94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
+       94,   94,   94,   94,   94,   94,   94,   94,   94,   93,
+       93,   93,   95,   95,   95,   95,   95,   95,   95,   95,
+       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
+       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
+
+       95,   95,   95,   96,   95,   96,   96,   96,   96,   96,
+       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
+       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
+       96,   95,   95,   95,  124,  142,  959,  198,  150,  145,
+      143,  146,  146,  146,  151,  152,  153,  144,  145,  162,
+      146,  146,  146,  163,  164,  179,  187,  191,  193,  147,
+      192,  180,  188,  194,  961,  166,  125,  126,  147,  127,
+      167,  128,  199,  963,  129,  234,  168,  170,  148,  169,
+      130,  171,  173,  131,  132, 1350,  133,  172,  965,  182,
+      113,  174,  175,  176,  204,  204,  204,  183,  235,  239,
+
+      240,  177,  184,  178,  201,  201,  201,  201,  201,  201,
+      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
+      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
+      201,  201,  201,  201,  201,  116,  201,  116,  116,  116,
+      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
+      116,  116,  116,  116,  116,  116,  116,  116,  116,  116,
+      116,  116,  116,  202,  201,  201,  204,  204,  204,  207,
+      215,  219,  208,  208,  219, 1350,  219,  208,  208,  220,
+      122,  221,  222,  208,  208,  218,  111,  111,  111,  216,
+      967, 1350,  255,  256, 1350,  140,  140,  140,  219,  123,
+
+      969,  219,  224,  205,  250,  250,  250,  971,  145,  209,
+      146,  146,  146,  147,  209,  253,  253,  253, 1350,  251,
+      209,  251,  147,  973,  252,  252,  252,  975,  147,  253,
+      253,  253,  253,  253,  253,  259,  260,  261,  271,  279,
+      262,  272,  290,  300,  300,  291,  263,  204,  204,  204,
+      280,  299,  299,  299,  977,  219,  219,  301,  301,  301,
+      219,  220,  979,  221,  222,  299,  299,  299,  299,  299,
+      299,  301,  301,  301,  301,  301,  301,  221,  222, 1350,
+      327,  328,  219,  219,  224,  250,  250,  250,  252,  252,
+      252,  252,  252,  252,  319, 1350,  356,  356, 1350,  253,
+
+      253,  253,  981,  147,  983,  334,  320,  335,  374,  375,
+      336,  374,  375,  253,  253,  253,  253,  253,  253, 1350,
+      337,  985, 1350,  366,  338,  299,  299,  299,  412,  412,
+      413,  357,  357,  357,  367, 1350, 1350,  987, 1350,  299,
+      299,  299,  299,  299,  299,  357,  357,  357,  357,  357,
+      357,  989, 1350,  417,  366, 1350,  423, 1350,  414,  368,
+      455,  417, 1350,  423,  418,  367,  461,  424, 1350,  576,
+      577,  456,  418, 1350,  424,  455, 1350,  462,  991, 1350,
+      485,  485,  485,  488, 1350,  490,  456, 1350,  461,  419,
+     1350,  485,  485,  485,  489,  993,  491,  417,  995,  462,
+
+     1350,  366,  488,  490, 1350,  997, 1350,  999,  418, 1350,
+     1001, 1350,  367,  489,  491,  511,  511,  511, 1003, 1350,
+     1350, 1005, 1007, 1350,  511,  511,  511, 1350, 1009, 1350,
+      565,  565,  565, 1350,  510, 1350, 1350, 1350, 1350, 1011,
+      158, 1350, 1350, 1350, 1013, 1350, 1350, 1350, 1350,  158,
+     1350, 1015, 1350, 1350,  566, 1350, 1350, 1350, 1350, 1017,
+     1350, 1350, 1350,  565,  565,  565, 1350, 1350, 1019, 1350,
+     1350, 1021, 1350,  570,  570,  570, 1023,  571, 1025, 1350,
+     1350, 1027,  572, 1350, 1350, 1350, 1350,  566,  570,  570,
+      570, 1029,  571, 1350, 1031, 1350, 1350,  572,  590,  590,
+
+      590, 1033, 1350,  590,  590,  590, 1350, 1035, 1350, 1037,
+     1350, 1350, 1350, 1350, 1350, 1350, 1039, 1350, 1350, 1041,
+      573, 1350, 1350,  591, 1350, 1350, 1043, 1350,  591, 1350,
+     1045, 1350, 1350, 1350, 1047,  573, 1350, 1049, 1350, 1350,
+     1051, 1053, 1350, 1350, 1055, 1350, 1057, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1059, 1350, 1061, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1063, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1065, 1067, 1069, 1071, 1350,
+     1073, 1350, 1350, 1350, 1350, 1350, 1350, 1075, 1350, 1077,
+     1079, 1350, 1081, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+
+     1350, 1083, 1350, 1085, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1087, 1350, 1350, 1089, 1350,
+     1091, 1350, 1093, 1350, 1350, 1095, 1350, 1350, 1350, 1097,
+     1350, 1350, 1099, 1350, 1350, 1101, 1350, 1350, 1103, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1105, 1350, 1107, 1109, 1350,
+     1111, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1113,
+     1350, 1350, 1115, 1117, 1350, 1119, 1350, 1350, 1121, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1123, 1350, 1350, 1125, 1350, 1350, 1127, 1350,
+
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1129, 1131,
+     1350, 1350, 1133, 1135, 1350, 1137, 1350, 1350, 1139, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1141, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1143, 1350,
+     1350, 1350, 1350, 1145, 1350, 1350, 1350, 1350, 1147, 1149,
+     1350, 1350, 1151, 1153, 1155, 1157, 1350, 1350, 1159, 1350,
+     1350, 1350, 1350, 1350, 1350, 1161, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1163, 1165, 1350, 1167, 1350, 1169, 1350,
+     1350, 1350, 1350, 1171, 1350, 1173, 1350, 1175, 1177, 1350,
+
+     1179, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1181, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1183, 1350, 1350, 1185, 1350, 1187, 1350,
+     1189, 1350, 1350, 1191, 1350, 1350, 1350, 1193, 1350, 1350,
+     1195, 1350, 1350, 1197, 1350, 1350, 1199, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1201, 1350, 1203, 1205, 1350, 1207, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1209, 1350, 1350,
+     1211, 1213, 1350, 1215, 1350, 1350, 1217, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+
+     1219, 1350, 1350, 1221, 1350, 1350, 1223, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1225, 1227, 1350, 1350,
+     1229, 1231, 1350, 1233, 1350, 1350, 1235, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1237, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1239, 1350, 1350, 1350,
+     1350, 1241, 1350, 1350, 1350, 1350, 1243, 1245, 1350, 1350,
+     1247, 1249, 1251, 1253, 1350, 1350, 1255, 1350, 1350, 1350,
+     1350, 1350, 1350, 1257, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1259, 1261, 1350, 1263, 1350, 1265, 1350, 1350, 1350,
+
+     1350, 1267, 1350, 1269, 1350, 1271, 1273, 1350, 1275, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1277,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1279, 1350, 1350, 1281, 1350, 1283, 1350, 1285, 1350,
+     1350, 1287, 1350, 1350, 1350, 1289, 1350, 1350, 1291, 1350,
+     1350, 1293, 1350, 1350, 1295, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1297, 1350, 1299, 1301, 1350, 1303, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1305, 1350, 1350, 1307, 1309,
+     1350, 1311, 1350, 1350, 1313, 1350, 1350, 1350, 1350, 1350,
+
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1315, 1350,
+     1350, 1317, 1350, 1350, 1319, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1321, 1323, 1350, 1350, 1325, 1327,
+     1350, 1329, 1350, 1350, 1331, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1333, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1335, 1350, 1350, 1350, 1350, 1337,
+     1350, 1350, 1350, 1350, 1339, 1341, 1350, 1350, 1343, 1345,
+     1347, 1349, 1350, 1350,  116, 1350, 1350, 1350, 1350, 1350,
+     1350,  953, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  951,
+
+      949, 1350,  947, 1350,  945, 1350, 1350, 1350, 1350,  943,
+     1350,  941, 1350,  939,  937, 1350,  935, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350,  933, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  931,
+     1350, 1350,  929, 1350,  927, 1350,  925, 1350, 1350,  923,
+     1350, 1350, 1350,  921, 1350, 1350,  919, 1350, 1350,  917,
+     1350, 1350,  915, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  913,
+     1350,  911,  909, 1350,  907, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350,  905, 1350, 1350,  903,  901, 1350,  899,
+
+     1350, 1350,  897, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350,  895, 1350, 1350,  893,
+     1350, 1350,  891, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350,  889,  887, 1350, 1350,  885,  883, 1350,  881,
+     1350, 1350,  879, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350,  877, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350,  875, 1350, 1350, 1350, 1350,  873, 1350, 1350,
+     1350, 1350,  871,  869, 1350, 1350,  867,  865,  863,  861,
+     1350, 1350,  859, 1350, 1350, 1350, 1350, 1350, 1350,  857,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+
+     1350, 1350, 1350, 1350, 1350, 1350, 1350,  855,  853, 1350,
+      851, 1350,  849, 1350, 1350, 1350, 1350,  847, 1350,  845,
+     1350,  843,  841, 1350,  839, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350,  837, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350,  835, 1350, 1350,
+      833, 1350,  831, 1350,  829, 1350, 1350,  827, 1350, 1350,
+     1350,  825, 1350, 1350,  823, 1350, 1350,  821, 1350, 1350,
+      819, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350,  817, 1350,  815,
+      813, 1350,  811, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+
+     1350,  809, 1350, 1350,  807,  805, 1350,  803, 1350, 1350,
+      801, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350,  799, 1350, 1350,  797, 1350, 1350,
+      795, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+      793,  791, 1350, 1350,  789,  787, 1350,  785, 1350, 1350,
+      783, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  781,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+      779, 1350, 1350, 1350, 1350,  777, 1350, 1350, 1350, 1350,
+      775,  773, 1350, 1350,  771,  769,  767,  765, 1350, 1350,
+      763, 1350, 1350, 1350, 1350, 1350, 1350,  761, 1350, 1350,
+
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350,  759,  757, 1350,  755, 1350,
+      753, 1350, 1350, 1350, 1350,  751, 1350,  749, 1350,  747,
+      745, 1350,  743, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350,  741, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350,  739, 1350, 1350,  737, 1350,
+      735, 1350,  733, 1350, 1350,  731, 1350, 1350, 1350,  729,
+     1350, 1350,  727, 1350, 1350,  725, 1350, 1350,  723, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350,  721, 1350,  719,  717, 1350,
+
+      715, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  713,
+     1350, 1350,  711,  709, 1350,  707, 1350, 1350,  705, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350,  703, 1350, 1350,  701, 1350, 1350,  699, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  697,  695,
+     1350, 1350,  693,  691, 1350,  689, 1350, 1350,  687, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350,  685, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  683, 1350,
+     1350, 1350, 1350,  681, 1350, 1350, 1350, 1350,  679,  677,
+     1350, 1350,  675,  673,  671,  669, 1350, 1350,  667, 1350,
+
+     1350, 1350, 1350, 1350, 1350,  665, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350,  663,  661, 1350,  659, 1350,  657, 1350,
+     1350, 1350, 1350,  655, 1350,  653, 1350,  651,  649, 1350,
+      647, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350,  645, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350,  643, 1350, 1350,  641, 1350,  639, 1350,
+      637, 1350, 1350,  635, 1350, 1350, 1350,  633, 1350, 1350,
+      631, 1350, 1350,  629, 1350, 1350,  627, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+
+     1350, 1350, 1350,  625, 1350,  623,  621, 1350,  619, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350,  617, 1350, 1350,
+      615,  613, 1350,  611, 1350, 1350,  609, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+      607, 1350, 1350,  605, 1350, 1350,  603, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350,  601,  599, 1350, 1350,
+      597,  595, 1350,  585, 1350, 1350,  585, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350,  593, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350,  589, 1350, 1350, 1350,
+     1350,  588, 1350, 1350, 1350, 1350,  587,  585, 1350, 1350,
+
+      584,  583,  576,  582, 1350, 1350,  580, 1350, 1350, 1350,
+     1350, 1350, 1350,  579, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350,  578,  575, 1350,  569, 1350,  568, 1350, 1350, 1350,
+     1350,  564, 1350,  563, 1350,  561,  560, 1350,  559, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  557,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350,  556, 1350, 1350,  555, 1350,  553, 1350,  552, 1350,
+     1350,  551, 1350, 1350, 1350,  549, 1350, 1350,  548, 1350,
+     1350,  547, 1350, 1350,  545, 1350, 1350, 1350, 1350, 1350,
+
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350,  544, 1350,  543,  542, 1350,  541, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350,  540, 1350, 1350,  539,  537,
+     1350,  536, 1350, 1350,  535, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  534, 1350,
+     1350,  533, 1350, 1350,  532, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350,  531,  529, 1350, 1350,  528,  527,
+     1350,  526, 1350, 1350,  525, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350,  524, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350,  523, 1350, 1350, 1350, 1350,  522,
+
+     1350, 1350, 1350, 1350,  521,  519, 1350, 1350,  518,  517,
+      516,  515, 1350, 1350,  514, 1350, 1350, 1350, 1350, 1350,
+     1350,  503, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  513,
+      512, 1350,  509, 1350,  508, 1350, 1350, 1350, 1350,  506,
+     1350,  505, 1350,  504,  503, 1350,  502, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350,  501, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  500,
+     1350, 1350,  499, 1350,  498, 1350,  497, 1350, 1350,  496,
+     1350, 1350, 1350,  495, 1350, 1350,  494, 1350, 1350,  493,
+
+     1350, 1350,  492, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,  487,
+     1350,  486,  484, 1350,  483, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350,  481, 1350, 1350,  480,  479, 1350,  478,
+     1350, 1350,  477, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350,  476, 1350, 1350,  475,
+     1350, 1350,  474, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350,  473,  472, 1350, 1350,  471,  470, 1350,  469,
+     1350, 1350,  468, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350,  467, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+
+     1350, 1350,  466, 1350, 1350, 1350, 1350,  465, 1350, 1350,
+     1350, 1350,  464,  463, 1350, 1350,  460,  459,  458,  370,
+     1350, 1350,  457, 1350, 1350, 1350, 1350, 1350, 1350,  454,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350,  453,  412, 1350,
+      452, 1350,  450, 1350, 1350, 1350, 1350,  449, 1350,  448,
+     1350,  447,  446, 1350,  445, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350,  444, 1350,  443, 1350, 1350,
+     1350, 1350, 1350,  442, 1350, 1350, 1350,  441, 1350, 1350,
+      440, 1350,  439,  438,  437,  436,  435,  434, 1350,  433,
+
+      432,  431,  430, 1350,  429,  428,  374,  427, 1350, 1350,
+      426,  425,  422, 1350,  421, 1350,   22,   22,   22,   22,
+       22,   22,   22,   22,   22,   22,   22,   22,   83,   83,
+       83,   83,   83,   83,   83,   83,   83,   83,   83,   83,
+       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
+       97,   97,   99,   99,   99,   99,   99,   99,   99,   99,
+       99,   99,   99,   99,  105,  105,  105,  105,  105,  105,
+      105,  105,  105,  105,  105,  105,  107,  107,  107,  107,
+      107,  107,  107,  107,  107,  107,  370,  107,  113,  113,
+      113,  113,  420,  113,  113,  113,  113,  113,  113,  113,
+
+      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
+      121,  121,  160,  416,  415,  160,  200,  200,  200,  411,
+      200,  200,  200,  409,  200,  200,  206,  206,  206,  206,
+      206,  206,  206,  206,  206,  206,  206,  206,  210,  408,
+      407,  210,  213,  213,  213,  213,  213,  213,  406,  213,
+      213,  213,  213,  213,  223,  405,  404,  403,  402,  401,
+      223,  223,  400,  223,  225,  399,  398,  225,  226,  397,
+      396,  226,  227,  227,  227,  227,  227,  227,  227,  395,
+      227,  227,  227,  227,  229,  229,  394,  229,  229,  393,
+      229,  229,  229,  229,  229,  229,  232,  232,  232,  232,
+
+      232,  232,  232,  232,  232,  232,  232,  232,  238,  392,
+      391,  238,  302,  302,  302,  302,  302,  302,  302,  302,
+      302,  302,  302,  302,  317,  390,  389,  388,  387,  386,
+      385,  384,  383,  382,  317,  358,  358,  358,  358,  358,
+      358,  358,  358,  358,  358,  358,  358,  376,  381,  380,
+      379,  378,  377,  376,  316,  373,  376,  410,  410,  410,
+      410,  410,  410,  410,  410,  410,  410,  410,  410,  451,
+      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
+      451,  482,  482,  482,  482,  482,  482,  482,  482,  482,
+      482,  482,  482,  507,  507,  507,  507,  507,  507,  507,
+
+      507,  507,  507,  507,  507,  520,  520,  520,  520,  520,
+      520,  520,  520,  520,  520,  520,  520,  530,  530,  530,
+      530,  530,  530,  530,  530,  530,  530,  530,  530,  538,
+      538,  538,  538,  538,  538,  538,  538,  538,  538,  538,
+      538,  546,  546,  546,  546,  546,  546,  546,  546,  546,
+      546,  546,  546,  550,  550,  550,  550,  550,  550,  550,
+      550,  550,  550,  550,  550,  554,  554,  554,  554,  554,
+      554,  554,  554,  554,  554,  554,  554,  558,  558,  558,
+      558,  558,  558,  558,  558,  558,  558,  558,  558,  562,
+      562,  562,  562,  562,  562,  562,  562,  562,  562,  562,
+
+      562,  567,  567,  567,  567,  567,  567,  567,  567,  567,
+      567,  567,  567,  574,  574,  574,  574,  574,  574,  574,
+      574,  574,  574,  574,  574,  581,  581,  581,  581,  581,
+      581,  581,  581,  581,  581,  581,  581,  586,  586,  586,
+      586,  586,  586,  586,  586,  586,  586,  586,  586,  592,
+      592,  592,  592,  592,  592,  592,  592,  592,  592,  592,
+      592,  594,  594,  594,  594,  594,  594,  594,  594,  594,
+      594,  594,  594,  596,  596,  596,  596,  596,  596,  596,
+      596,  596,  596,  596,  596,  598,  598,  598,  598,  598,
+      598,  598,  598,  598,  598,  598,  598,  600,  600,  600,
+
+      600,  600,  600,  600,  600,  600,  600,  600,  600,  602,
+      602,  602,  602,  602,  602,  602,  602,  602,  602,  602,
+      602,  604,  604,  604,  604,  604,  604,  604,  604,  604,
+      604,  604,  604,  606,  606,  606,  606,  606,  606,  606,
+      606,  606,  606,  606,  606,  608,  608,  608,  608,  608,
+      608,  608,  608,  608,  608,  608,  608,  610,  610,  610,
+      610,  610,  610,  610,  610,  610,  610,  610,  610,  612,
+      612,  612,  612,  612,  612,  612,  612,  612,  612,  612,
+      612,  614,  614,  614,  614,  614,  614,  614,  614,  614,
+      614,  614,  614,  616,  616,  616,  616,  616,  616,  616,
+
+      616,  616,  616,  616,  616,  618,  618,  618,  618,  618,
+      618,  618,  618,  618,  618,  618,  618,  620,  620,  620,
+      620,  620,  620,  620,  620,  620,  620,  620,  620,  622,
+      622,  622,  622,  622,  622,  622,  622,  622,  622,  622,
+      622,  624,  624,  624,  624,  624,  624,  624,  624,  624,
+      624,  624,  624,  626,  626,  626,  626,  626,  626,  626,
+      626,  626,  626,  626,  626,  628,  628,  628,  628,  628,
+      628,  628,  628,  628,  628,  628,  628,  630,  630,  630,
+      630,  630,  630,  630,  630,  630,  630,  630,  630,  632,
+      632,  632,  632,  632,  632,  632,  632,  632,  632,  632,
+
+      632,  634,  634,  634,  634,  634,  634,  634,  634,  634,
+      634,  634,  634,  636,  636,  636,  636,  636,  636,  636,
+      636,  636,  636,  636,  636,  638,  638,  638,  638,  638,
+      638,  638,  638,  638,  638,  638,  638,  640,  640,  640,
+      640,  640,  640,  640,  640,  640,  640,  640,  640,  642,
+      642,  642,  642,  642,  642,  642,  642,  642,  642,  642,
+      642,  644,  644,  644,  644,  644,  644,  644,  644,  644,
+      644,  644,  644,  646,  646,  646,  646,  646,  646,  646,
+      646,  646,  646,  646,  646,  648,  648,  648,  648,  648,
+      648,  648,  648,  648,  648,  648,  648,  650,  650,  650,
+
+      650,  650,  650,  650,  650,  650,  650,  650,  650,  652,
+      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
+      652,  654,  654,  654,  654,  654,  654,  654,  654,  654,
+      654,  654,  654,  656,  656,  656,  656,  656,  656,  656,
+      656,  656,  656,  656,  656,  658,  658,  658,  658,  658,
+      658,  658,  658,  658,  658,  658,  658,  660,  660,  660,
+      660,  660,  660,  660,  660,  660,  660,  660,  660,  662,
+      662,  662,  662,  662,  662,  662,  662,  662,  662,  662,
+      662,  664,  664,  664,  664,  664,  664,  664,  664,  664,
+      664,  664,  664,  666,  666,  666,  666,  666,  666,  666,
+
+      666,  666,  666,  666,  666,  668,  668,  668,  668,  668,
+      668,  668,  668,  668,  668,  668,  668,  670,  670,  670,
+      670,  670,  670,  670,  670,  670,  670,  670,  670,  672,
+      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
+      672,  674,  674,  674,  674,  674,  674,  674,  674,  674,
+      674,  674,  674,  676,  676,  676,  676,  676,  676,  676,
+      676,  676,  676,  676,  676,  678,  678,  678,  678,  678,
+      678,  678,  678,  678,  678,  678,  678,  680,  680,  680,
+      680,  680,  680,  680,  680,  680,  680,  680,  680,  682,
+      682,  682,  682,  682,  682,  682,  682,  682,  682,  682,
+
+      682,  684,  684,  684,  684,  684,  684,  684,  684,  684,
+      684,  684,  684,  686,  686,  686,  686,  686,  686,  686,
+      686,  686,  686,  686,  686,  688,  688,  688,  688,  688,
+      688,  688,  688,  688,  688,  688,  688,  690,  690,  690,
+      690,  690,  690,  690,  690,  690,  690,  690,  690,  692,
+      692,  692,  692,  692,  692,  692,  692,  692,  692,  692,
+      692,  694,  694,  694,  694,  694,  694,  694,  694,  694,
+      694,  694,  694,  696,  696,  696,  696,  696,  696,  696,
+      696,  696,  696,  696,  696,  698,  698,  698,  698,  698,
+      698,  698,  698,  698,  698,  698,  698,  700,  700,  700,
+
+      700,  700,  700,  700,  700,  700,  700,  700,  700,  702,
+      702,  702,  702,  702,  702,  702,  702,  702,  702,  702,
+      702,  704,  704,  704,  704,  704,  704,  704,  704,  704,
+      704,  704,  704,  706,  706,  706,  706,  706,  706,  706,
+      706,  706,  706,  706,  706,  708,  708,  708,  708,  708,
+      708,  708,  708,  708,  708,  708,  708,  710,  710,  710,
+      710,  710,  710,  710,  710,  710,  710,  710,  710,  712,
+      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
+      712,  714,  714,  714,  714,  714,  714,  714,  714,  714,
+      714,  714,  714,  716,  716,  716,  716,  716,  716,  716,
+
+      716,  716,  716,  716,  716,  718,  718,  718,  718,  718,
+      718,  718,  718,  718,  718,  718,  718,  720,  720,  720,
+      720,  720,  720,  720,  720,  720,  720,  720,  720,  722,
+      722,  722,  722,  722,  722,  722,  722,  722,  722,  722,
+      722,  724,  724,  724,  724,  724,  724,  724,  724,  724,
+      724,  724,  724,  726,  726,  726,  726,  726,  726,  726,
+      726,  726,  726,  726,  726,  728,  728,  728,  728,  728,
+      728,  728,  728,  728,  728,  728,  728,  730,  730,  730,
+      730,  730,  730,  730,  730,  730,  730,  730,  730,  732,
+      732,  732,  732,  732,  732,  732,  732,  732,  732,  732,
+
+      732,  734,  734,  734,  734,  734,  734,  734,  734,  734,
+      734,  734,  734,  736,  736,  736,  736,  736,  736,  736,
+      736,  736,  736,  736,  736,  738,  738,  738,  738,  738,
+      738,  738,  738,  738,  738,  738,  738,  740,  740,  740,
+      740,  740,  740,  740,  740,  740,  740,  740,  740,  742,
+      742,  742,  742,  742,  742,  742,  742,  742,  742,  742,
+      742,  744,  744,  744,  744,  744,  744,  744,  744,  744,
+      744,  744,  744,  746,  746,  746,  746,  746,  746,  746,
+      746,  746,  746,  746,  746,  748,  748,  748,  748,  748,
+      748,  748,  748,  748,  748,  748,  748,  750,  750,  750,
+
+      750,  750,  750,  750,  750,  750,  750,  750,  750,  752,
+      752,  752,  752,  752,  752,  752,  752,  752,  752,  752,
+      752,  754,  754,  754,  754,  754,  754,  754,  754,  754,
+      754,  754,  754,  756,  756,  756,  756,  756,  756,  756,
+      756,  756,  756,  756,  756,  758,  758,  758,  758,  758,
+      758,  758,  758,  758,  758,  758,  758,  760,  760,  760,
+      760,  760,  760,  760,  760,  760,  760,  760,  760,  762,
+      762,  762,  762,  762,  762,  762,  762,  762,  762,  762,
+      762,  764,  764,  764,  764,  764,  764,  764,  764,  764,
+      764,  764,  764,  766,  766,  766,  766,  766,  766,  766,
+
+      766,  766,  766,  766,  766,  768,  768,  768,  768,  768,
+      768,  768,  768,  768,  768,  768,  768,  770,  770,  770,
+      770,  770,  770,  770,  770,  770,  770,  770,  770,  772,
+      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
+      772,  774,  774,  774,  774,  774,  774,  774,  774,  774,
+      774,  774,  774,  776,  776,  776,  776,  776,  776,  776,
+      776,  776,  776,  776,  776,  778,  778,  778,  778,  778,
+      778,  778,  778,  778,  778,  778,  778,  780,  780,  780,
+      780,  780,  780,  780,  780,  780,  780,  780,  780,  782,
+      782,  782,  782,  782,  782,  782,  782,  782,  782,  782,
+
+      782,  784,  784,  784,  784,  784,  784,  784,  784,  784,
+      784,  784,  784,  786,  786,  786,  786,  786,  786,  786,
+      786,  786,  786,  786,  786,  788,  788,  788,  788,  788,
+      788,  788,  788,  788,  788,  788,  788,  790,  790,  790,
+      790,  790,  790,  790,  790,  790,  790,  790,  790,  792,
+      792,  792,  792,  792,  792,  792,  792,  792,  792,  792,
+      792,  794,  794,  794,  794,  794,  794,  794,  794,  794,
+      794,  794,  794,  796,  796,  796,  796,  796,  796,  796,
+      796,  796,  796,  796,  796,  798,  798,  798,  798,  798,
+      798,  798,  798,  798,  798,  798,  798,  800,  800,  800,
+
+      800,  800,  800,  800,  800,  800,  800,  800,  800,  802,
+      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
+      802,  804,  804,  804,  804,  804,  804,  804,  804,  804,
+      804,  804,  804,  806,  806,  806,  806,  806,  806,  806,
+      806,  806,  806,  806,  806,  808,  808,  808,  808,  808,
+      808,  808,  808,  808,  808,  808,  808,  810,  810,  810,
+      810,  810,  810,  810,  810,  810,  810,  810,  810,  812,
+      812,  812,  812,  812,  812,  812,  812,  812,  812,  812,
+      812,  814,  814,  814,  814,  814,  814,  814,  814,  814,
+      814,  814,  814,  816,  816,  816,  816,  816,  816,  816,
+
+      816,  816,  816,  816,  816,  818,  818,  818,  818,  818,
+      818,  818,  818,  818,  818,  818,  818,  820,  820,  820,
+      820,  820,  820,  820,  820,  820,  820,  820,  820,  822,
+      822,  822,  822,  822,  822,  822,  822,  822,  822,  822,
+      822,  824,  824,  824,  824,  824,  824,  824,  824,  824,
+      824,  824,  824,  826,  826,  826,  826,  826,  826,  826,
+      826,  826,  826,  826,  826,  828,  828,  828,  828,  828,
+      828,  828,  828,  828,  828,  828,  828,  830,  830,  830,
+      830,  830,  830,  830,  830,  830,  830,  830,  830,  832,
+      832,  832,  832,  832,  832,  832,  832,  832,  832,  832,
+
+      832,  834,  834,  834,  834,  834,  834,  834,  834,  834,
+      834,  834,  834,  836,  836,  836,  836,  836,  836,  836,
+      836,  836,  836,  836,  836,  838,  838,  838,  838,  838,
+      838,  838,  838,  838,  838,  838,  838,  840,  840,  840,
+      840,  840,  840,  840,  840,  840,  840,  840,  840,  842,
+      842,  842,  842,  842,  842,  842,  842,  842,  842,  842,
+      842,  844,  844,  844,  844,  844,  844,  844,  844,  844,
+      844,  844,  844,  846,  846,  846,  846,  846,  846,  846,
+      846,  846,  846,  846,  846,  848,  848,  848,  848,  848,
+      848,  848,  848,  848,  848,  848,  848,  850,  850,  850,
+
+      850,  850,  850,  850,  850,  850,  850,  850,  850,  852,
+      852,  852,  852,  852,  852,  852,  852,  852,  852,  852,
+      852,  854,  854,  854,  854,  854,  854,  854,  854,  854,
+      854,  854,  854,  856,  856,  856,  856,  856,  856,  856,
+      856,  856,  856,  856,  856,  858,  858,  858,  858,  858,
+      858,  858,  858,  858,  858,  858,  858,  860,  860,  860,
+      860,  860,  860,  860,  860,  860,  860,  860,  860,  862,
+      862,  862,  862,  862,  862,  862,  862,  862,  862,  862,
+      862,  864,  864,  864,  864,  864,  864,  864,  864,  864,
+      864,  864,  864,  866,  866,  866,  866,  866,  866,  866,
+
+      866,  866,  866,  866,  866,  868,  868,  868,  868,  868,
+      868,  868,  868,  868,  868,  868,  868,  870,  870,  870,
+      870,  870,  870,  870,  870,  870,  870,  870,  870,  872,
+      872,  872,  872,  872,  872,  872,  872,  872,  872,  872,
+      872,  874,  874,  874,  874,  874,  874,  874,  874,  874,
+      874,  874,  874,  876,  876,  876,  876,  876,  876,  876,
+      876,  876,  876,  876,  876,  878,  878,  878,  878,  878,
+      878,  878,  878,  878,  878,  878,  878,  880,  880,  880,
+      880,  880,  880,  880,  880,  880,  880,  880,  880,  882,
+      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
+
+      882,  884,  884,  884,  884,  884,  884,  884,  884,  884,
+      884,  884,  884,  886,  886,  886,  886,  886,  886,  886,
+      886,  886,  886,  886,  886,  888,  888,  888,  888,  888,
+      888,  888,  888,  888,  888,  888,  888,  890,  890,  890,
+      890,  890,  890,  890,  890,  890,  890,  890,  890,  892,
+      892,  892,  892,  892,  892,  892,  892,  892,  892,  892,
+      892,  894,  894,  894,  894,  894,  894,  894,  894,  894,
+      894,  894,  894,  896,  896,  896,  896,  896,  896,  896,
+      896,  896,  896,  896,  896,  898,  898,  898,  898,  898,
+      898,  898,  898,  898,  898,  898,  898,  900,  900,  900,
+
+      900,  900,  900,  900,  900,  900,  900,  900,  900,  902,
+      902,  902,  902,  902,  902,  902,  902,  902,  902,  902,
+      902,  904,  904,  904,  904,  904,  904,  904,  904,  904,
+      904,  904,  904,  906,  906,  906,  906,  906,  906,  906,
+      906,  906,  906,  906,  906,  908,  908,  908,  908,  908,
+      908,  908,  908,  908,  908,  908,  908,  910,  910,  910,
+      910,  910,  910,  910,  910,  910,  910,  910,  910,  912,
+      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,
+      912,  914,  914,  914,  914,  914,  914,  914,  914,  914,
+      914,  914,  914,  916,  916,  916,  916,  916,  916,  916,
+
+      916,  916,  916,  916,  916,  918,  918,  918,  918,  918,
+      918,  918,  918,  918,  918,  918,  918,  920,  920,  920,
+      920,  920,  920,  920,  920,  920,  920,  920,  920,  922,
+      922,  922,  922,  922,  922,  922,  922,  922,  922,  922,
+      922,  924,  924,  924,  924,  924,  924,  924,  924,  924,
+      924,  924,  924,  926,  926,  926,  926,  926,  926,  926,
+      926,  926,  926,  926,  926,  928,  928,  928,  928,  928,
+      928,  928,  928,  928,  928,  928,  928,  930,  930,  930,
+      930,  930,  930,  930,  930,  930,  930,  930,  930,  932,
+      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
+
+      932,  934,  934,  934,  934,  934,  934,  934,  934,  934,
+      934,  934,  934,  936,  936,  936,  936,  936,  936,  936,
+      936,  936,  936,  936,  936,  938,  938,  938,  938,  938,
+      938,  938,  938,  938,  938,  938,  938,  940,  940,  940,
+      940,  940,  940,  940,  940,  940,  940,  940,  940,  942,
+      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
+      942,  944,  944,  944,  944,  944,  944,  944,  944,  944,
+      944,  944,  944,  946,  946,  946,  946,  946,  946,  946,
+      946,  946,  946,  946,  946,  948,  948,  948,  948,  948,
+      948,  948,  948,  948,  948,  948,  948,  950,  950,  950,
+
+      950,  950,  950,  950,  950,  950,  950,  950,  950,  952,
+      952,  952,  952,  952,  952,  952,  952,  952,  952,  952,
+      952,  954,  954,  954,  954,  954,  954,  954,  954,  954,
+      954,  954,  954,  956,  956,  956,  956,  956,  956,  956,
+      956,  956,  956,  956,  956,  958,  958,  958,  958,  958,
+      958,  958,  958,  958,  958,  958,  958,  960,  960,  960,
+      960,  960,  960,  960,  960,  960,  960,  960,  960,  962,
+      962,  962,  962,  962,  962,  962,  962,  962,  962,  962,
+      962,  964,  964,  964,  964,  964,  964,  964,  964,  964,
+      964,  964,  964,  966,  966,  966,  966,  966,  966,  966,
+
+      966,  966,  966,  966,  966,  968,  968,  968,  968,  968,
+      968,  968,  968,  968,  968,  968,  968,  970,  970,  970,
+      970,  970,  970,  970,  970,  970,  970,  970,  970,  972,
+      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
+      972,  974,  974,  974,  974,  974,  974,  974,  974,  974,
+      974,  974,  974,  976,  976,  976,  976,  976,  976,  976,
+      976,  976,  976,  976,  976,  978,  978,  978,  978,  978,
+      978,  978,  978,  978,  978,  978,  978,  980,  980,  980,
+      980,  980,  980,  980,  980,  980,  980,  980,  980,  982,
+      982,  982,  982,  982,  982,  982,  982,  982,  982,  982,
+
+      982,  984,  984,  984,  984,  984,  984,  984,  984,  984,
+      984,  984,  984,  986,  986,  986,  986,  986,  986,  986,
+      986,  986,  986,  986,  986,  988,  988,  988,  988,  988,
+      988,  988,  988,  988,  988,  988,  988,  990,  990,  990,
+      990,  990,  990,  990,  990,  990,  990,  990,  990,  992,
+      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
+      992,  994,  994,  994,  994,  994,  994,  994,  994,  994,
+      994,  994,  994,  996,  996,  996,  996,  996,  996,  996,
+      996,  996,  996,  996,  996,  998,  998,  998,  998,  998,
+      998,  998,  998,  998,  998,  998,  998, 1000, 1000, 1000,
+
+     1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1002,
+     1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
+     1002, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004,
+     1004, 1004, 1004, 1006, 1006, 1006, 1006, 1006, 1006, 1006,
+     1006, 1006, 1006, 1006, 1006, 1008, 1008, 1008, 1008, 1008,
+     1008, 1008, 1008, 1008, 1008, 1008, 1008, 1010, 1010, 1010,
+     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1010, 1012,
+     1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012,
+     1012, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
+     1014, 1014, 1014, 1016, 1016, 1016, 1016, 1016, 1016, 1016,
+
+     1016, 1016, 1016, 1016, 1016, 1018, 1018, 1018, 1018, 1018,
+     1018, 1018, 1018, 1018, 1018, 1018, 1018, 1020, 1020, 1020,
+     1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1022,
+     1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022, 1022,
+     1022, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024, 1024,
+     1024, 1024, 1024, 1026, 1026, 1026, 1026, 1026, 1026, 1026,
+     1026, 1026, 1026, 1026, 1026, 1028, 1028, 1028, 1028, 1028,
+     1028, 1028, 1028, 1028, 1028, 1028, 1028, 1030, 1030, 1030,
+     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1032,
+     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032, 1032,
+
+     1032, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
+     1034, 1034, 1034, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
+     1036, 1036, 1036, 1036, 1036, 1038, 1038, 1038, 1038, 1038,
+     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1040, 1040, 1040,
+     1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1040, 1042,
+     1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
+     1042, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044,
+     1044, 1044, 1044, 1046, 1046, 1046, 1046, 1046, 1046, 1046,
+     1046, 1046, 1046, 1046, 1046, 1048, 1048, 1048, 1048, 1048,
+     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1050, 1050, 1050,
+
+     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1050, 1052,
+     1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052, 1052,
+     1052, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
+     1054, 1054, 1054, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
+     1056, 1056, 1056, 1056, 1056, 1058, 1058, 1058, 1058, 1058,
+     1058, 1058, 1058, 1058, 1058, 1058, 1058, 1060, 1060, 1060,
+     1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1060, 1062,
+     1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062,
+     1062, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064, 1064,
+     1064, 1064, 1064, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
+
+     1066, 1066, 1066, 1066, 1066, 1068, 1068, 1068, 1068, 1068,
+     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1070, 1070, 1070,
+     1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1070, 1072,
+     1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
+     1072, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
+     1074, 1074, 1074, 1076, 1076, 1076, 1076, 1076, 1076, 1076,
+     1076, 1076, 1076, 1076, 1076, 1078, 1078, 1078, 1078, 1078,
+     1078, 1078, 1078, 1078, 1078, 1078, 1078, 1080, 1080, 1080,
+     1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1080, 1082,
+     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
+
+     1082, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
+     1084, 1084, 1084, 1086, 1086, 1086, 1086, 1086, 1086, 1086,
+     1086, 1086, 1086, 1086, 1086, 1088, 1088, 1088, 1088, 1088,
+     1088, 1088, 1088, 1088, 1088, 1088, 1088, 1090, 1090, 1090,
+     1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1090, 1092,
+     1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092, 1092,
+     1092, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094, 1094,
+     1094, 1094, 1094, 1096, 1096, 1096, 1096, 1096, 1096, 1096,
+     1096, 1096, 1096, 1096, 1096, 1098, 1098, 1098, 1098, 1098,
+     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1100, 1100, 1100,
+
+     1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1100, 1102,
+     1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102, 1102,
+     1102, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
+     1104, 1104, 1104, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
+     1106, 1106, 1106, 1106, 1106, 1108, 1108, 1108, 1108, 1108,
+     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1110, 1110, 1110,
+     1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1110, 1112,
+     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112, 1112,
+     1112, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
+     1114, 1114, 1114, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
+
+     1116, 1116, 1116, 1116, 1116, 1118, 1118, 1118, 1118, 1118,
+     1118, 1118, 1118, 1118, 1118, 1118, 1118, 1120, 1120, 1120,
+     1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1122,
+     1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122,
+     1122, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
+     1124, 1124, 1124, 1126, 1126, 1126, 1126, 1126, 1126, 1126,
+     1126, 1126, 1126, 1126, 1126, 1128, 1128, 1128, 1128, 1128,
+     1128, 1128, 1128, 1128, 1128, 1128, 1128, 1130, 1130, 1130,
+     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1132,
+     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,
+
+     1132, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134, 1134,
+     1134, 1134, 1134, 1136, 1136, 1136, 1136, 1136, 1136, 1136,
+     1136, 1136, 1136, 1136, 1136, 1138, 1138, 1138, 1138, 1138,
+     1138, 1138, 1138, 1138, 1138, 1138, 1138, 1140, 1140, 1140,
+     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1142,
+     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142, 1142,
+     1142, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144, 1144,
+     1144, 1144, 1144, 1146, 1146, 1146, 1146, 1146, 1146, 1146,
+     1146, 1146, 1146, 1146, 1146, 1148, 1148, 1148, 1148, 1148,
+     1148, 1148, 1148, 1148, 1148, 1148, 1148, 1150, 1150, 1150,
+
+     1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1150, 1152,
+     1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
+     1152, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154, 1154,
+     1154, 1154, 1154, 1156, 1156, 1156, 1156, 1156, 1156, 1156,
+     1156, 1156, 1156, 1156, 1156, 1158, 1158, 1158, 1158, 1158,
+     1158, 1158, 1158, 1158, 1158, 1158, 1158, 1160, 1160, 1160,
+     1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1160, 1162,
+     1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
+     1162, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164,
+     1164, 1164, 1164, 1166, 1166, 1166, 1166, 1166, 1166, 1166,
+
+     1166, 1166, 1166, 1166, 1166, 1168, 1168, 1168, 1168, 1168,
+     1168, 1168, 1168, 1168, 1168, 1168, 1168, 1170, 1170, 1170,
+     1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1170, 1172,
+     1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
+     1172, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174,
+     1174, 1174, 1174, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
+     1176, 1176, 1176, 1176, 1176, 1178, 1178, 1178, 1178, 1178,
+     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1180, 1180, 1180,
+     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1182,
+     1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182, 1182,
+
+     1182, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
+     1184, 1184, 1184, 1186, 1186, 1186, 1186, 1186, 1186, 1186,
+     1186, 1186, 1186, 1186, 1186, 1188, 1188, 1188, 1188, 1188,
+     1188, 1188, 1188, 1188, 1188, 1188, 1188, 1190, 1190, 1190,
+     1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1190, 1192,
+     1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192, 1192,
+     1192, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194, 1194,
+     1194, 1194, 1194, 1196, 1196, 1196, 1196, 1196, 1196, 1196,
+     1196, 1196, 1196, 1196, 1196, 1198, 1198, 1198, 1198, 1198,
+     1198, 1198, 1198, 1198, 1198, 1198, 1198, 1200, 1200, 1200,
+
+     1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1200, 1202,
+     1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202, 1202,
+     1202, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204, 1204,
+     1204, 1204, 1204, 1206, 1206, 1206, 1206, 1206, 1206, 1206,
+     1206, 1206, 1206, 1206, 1206, 1208, 1208, 1208, 1208, 1208,
+     1208, 1208, 1208, 1208, 1208, 1208, 1208, 1210, 1210, 1210,
+     1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1210, 1212,
+     1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212, 1212,
+     1212, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214, 1214,
+     1214, 1214, 1214, 1216, 1216, 1216, 1216, 1216, 1216, 1216,
+
+     1216, 1216, 1216, 1216, 1216, 1218, 1218, 1218, 1218, 1218,
+     1218, 1218, 1218, 1218, 1218, 1218, 1218, 1220, 1220, 1220,
+     1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1220, 1222,
+     1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222, 1222,
+     1222, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224, 1224,
+     1224, 1224, 1224, 1226, 1226, 1226, 1226, 1226, 1226, 1226,
+     1226, 1226, 1226, 1226, 1226, 1228, 1228, 1228, 1228, 1228,
+     1228, 1228, 1228, 1228, 1228, 1228, 1228, 1230, 1230, 1230,
+     1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1230, 1232,
+     1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232, 1232,
+
+     1232, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234, 1234,
+     1234, 1234, 1234, 1236, 1236, 1236, 1236, 1236, 1236, 1236,
+     1236, 1236, 1236, 1236, 1236, 1238, 1238, 1238, 1238, 1238,
+     1238, 1238, 1238, 1238, 1238, 1238, 1238, 1240, 1240, 1240,
+     1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1240, 1242,
+     1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242, 1242,
+     1242, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244, 1244,
+     1244, 1244, 1244, 1246, 1246, 1246, 1246, 1246, 1246, 1246,
+     1246, 1246, 1246, 1246, 1246, 1248, 1248, 1248, 1248, 1248,
+     1248, 1248, 1248, 1248, 1248, 1248, 1248, 1250, 1250, 1250,
+
+     1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1250, 1252,
+     1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252, 1252,
+     1252, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
+     1254, 1254, 1254, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
+     1256, 1256, 1256, 1256, 1256, 1258, 1258, 1258, 1258, 1258,
+     1258, 1258, 1258, 1258, 1258, 1258, 1258, 1260, 1260, 1260,
+     1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1260, 1262,
+     1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262, 1262,
+     1262, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264, 1264,
+     1264, 1264, 1264, 1266, 1266, 1266, 1266, 1266, 1266, 1266,
+
+     1266, 1266, 1266, 1266, 1266, 1268, 1268, 1268, 1268, 1268,
+     1268, 1268, 1268, 1268, 1268, 1268, 1268, 1270, 1270, 1270,
+     1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1270, 1272,
+     1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272, 1272,
+     1272, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274, 1274,
+     1274, 1274, 1274, 1276, 1276, 1276, 1276, 1276, 1276, 1276,
+     1276, 1276, 1276, 1276, 1276, 1278, 1278, 1278, 1278, 1278,
+     1278, 1278, 1278, 1278, 1278, 1278, 1278, 1280, 1280, 1280,
+     1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1280, 1282,
+     1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282, 1282,
+
+     1282, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284, 1284,
+     1284, 1284, 1284, 1286, 1286, 1286, 1286, 1286, 1286, 1286,
+     1286, 1286, 1286, 1286, 1286, 1288, 1288, 1288, 1288, 1288,
+     1288, 1288, 1288, 1288, 1288, 1288, 1288, 1290, 1290, 1290,
+     1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1290, 1292,
+     1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292, 1292,
+     1292, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294, 1294,
+     1294, 1294, 1294, 1296, 1296, 1296, 1296, 1296, 1296, 1296,
+     1296, 1296, 1296, 1296, 1296, 1298, 1298, 1298, 1298, 1298,
+     1298, 1298, 1298, 1298, 1298, 1298, 1298, 1300, 1300, 1300,
+
+     1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1300, 1302,
+     1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302, 1302,
+     1302, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304, 1304,
+     1304, 1304, 1304, 1306, 1306, 1306, 1306, 1306, 1306, 1306,
+     1306, 1306, 1306, 1306, 1306, 1308, 1308, 1308, 1308, 1308,
+     1308, 1308, 1308, 1308, 1308, 1308, 1308, 1310, 1310, 1310,
+     1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1310, 1312,
+     1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312, 1312,
+     1312, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
+     1314, 1314, 1314, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
+
+     1316, 1316, 1316, 1316, 1316, 1318, 1318, 1318, 1318, 1318,
+     1318, 1318, 1318, 1318, 1318, 1318, 1318, 1320, 1320, 1320,
+     1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1320, 1322,
+     1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322,
+     1322, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324, 1324,
+     1324, 1324, 1324, 1326, 1326, 1326, 1326, 1326, 1326, 1326,
+     1326, 1326, 1326, 1326, 1326, 1328, 1328, 1328, 1328, 1328,
+     1328, 1328, 1328, 1328, 1328, 1328, 1328, 1330, 1330, 1330,
+     1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1330, 1332,
+     1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332, 1332,
+
+     1332, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334, 1334,
+     1334, 1334, 1334, 1336, 1336, 1336, 1336, 1336, 1336, 1336,
+     1336, 1336, 1336, 1336, 1336, 1338, 1338, 1338, 1338, 1338,
+     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1340, 1340, 1340,
+     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1342,
+     1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342,
+     1342, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344, 1344,
+     1344, 1344, 1344, 1346, 1346, 1346, 1346, 1346, 1346, 1346,
+     1346, 1346, 1346, 1346, 1346, 1348, 1348, 1348, 1348, 1348,
+     1348, 1348, 1348, 1348, 1348, 1348, 1348,  372,  371,  370,
+
+      369,  365,  364,  363,  362,  361,  360,  359,  355,  354,
+      353,  352,  351,  350,  349,  348,  347,  346,  345,  344,
+      343,  342,  341,  340,  339,  333,  332,  331,  330,  329,
+      326,  325,  324,  323,  322,  321,  318,  259,  316,  315,
+      314,  313,  312,  311,  310,  309,  308,  307,  306,  239,
+      305,  304,  303,  221,  217, 1350,  214,  211,  298,  297,
+      296,  295,  294,  293,  292,  289,  288,  287,  286,  285,
+      284,  283,  282,  281,  278,  277,  276,  275,  274,  273,
+      270,  269,  268,  267,  266,  265,  264,  258,  257,  254,
+      249,  248,  247,  246,  245,  244,  243,  242,  241, 1350,
+
+      237,  236,  234,  106,  233,  231,  231,  230,  228,  217,
+      214,  212,  211,  203,  197,  196,  195,  190,  189,  186,
+      185,  181,  165,  161,  159,  158,  149,  134,  112,  106,
+     1350,   98,   98,   23,   23,   21, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350
+
+    } ;
+
+static yyconst short int yy_chk[7999] =
+    {   0,
+        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
+        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
+        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
+        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
+        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
+        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
+        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
+        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
+        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
+        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
+
+        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
+        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
+        5,    5,    5,    5,    7,    8,    9,   10,   11,   23,
+       25,   25,   25,   11,   19,   19,   27,   30,   30,  113,
+       19,   20,   20,    7,    8,   32,   31,   20,   23,  952,
+        9,   10,   11,    9,   10,   11,   12,   36,   19,   19,
+       27,   12,   31,  113,   32,   20,   20,   37,   36,   38,
+       38,   38,   23,   44,   44,   38,   37,   37,   45,   45,
+       12,  954,   12,   12,   12,   12,   12,   12,   12,   12,
+       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
+
+       12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
+       13,   13,   15,   15,   15,   15,   15,   15,   15,   15,
+       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
+       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
+
+       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
+       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
+       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
+       15,   15,   15,   15,   33,   39,  956,   70,   43,   40,
+       39,   40,   40,   40,   43,   43,   43,   39,   41,   50,
+       41,   41,   41,   50,   50,   55,   61,   64,   65,   40,
+       64,   55,   61,   65,  958,   52,   33,   33,   41,   33,
+       52,   33,   70,  960,   33,  109,   52,   53,   40,   52,
+       33,   53,   54,   33,   33,  115,   33,   53,  962,   58,
+      115,   54,   54,   54,   77,   77,   77,   58,  109,  118,
+
+      118,   54,   58,   54,   74,   74,   74,   74,   74,   74,
+       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
+       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
+       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
+       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
+       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
+       74,   74,   74,   74,   74,   74,   76,   76,   76,   79,
+       85,   89,   87,   87,   90,  106,   89,   91,   91,   90,
+      121,   92,   92,   79,   79,   87,  111,  111,  111,   85,
+      964,  106,  151,  151,  106,  140,  140,  140,   89,  121,
+
+      966,   90,   92,   76,  145,  145,  145,  968,  146,   87,
+      146,  146,  146,  140,   91,  148,  148,  148,  106,  147,
+       79,  147,  145,  970,  147,  147,  147,  972,  146,  148,
+      148,  148,  148,  148,  148,  158,  158,  161,  170,  178,
+      161,  170,  190,  208,  208,  190,  161,  204,  204,  204,
+      178,  205,  205,  205,  974,  219,  220,  209,  209,  209,
+      219,  220,  976,  223,  223,  205,  205,  205,  205,  205,
+      205,  209,  209,  209,  209,  209,  209,  224,  224,  233,
+      270,  270,  219,  220,  223,  250,  250,  250,  251,  251,
+      251,  252,  252,  252,  262,  233,  300,  300,  233,  253,
+
+      253,  253,  978,  250,  980,  277,  262,  277,  317,  317,
+      277,  376,  376,  253,  253,  253,  253,  253,  253,  303,
+      277,  982,  233,  310,  277,  299,  299,  299,  360,  360,
+      360,  301,  301,  301,  310,  303,  359,  984,  303,  299,
+      299,  299,  299,  299,  299,  301,  301,  301,  301,  301,
+      301,  986,  359,  363,  366,  359,  370,  411,  360,  310,
+      416,  417,  303,  423,  363,  366,  426,  370,  452,  569,
+      569,  416,  417,  411,  423,  455,  411,  426,  988,  359,
+      454,  454,  454,  459,  452,  460,  455,  452,  461,  363,
+      483,  485,  485,  485,  459,  990,  460,  486,  992,  461,
+
+      411,  487,  488,  490,  508,  994,  483,  996,  486,  483,
+      998,  452,  487,  488,  490,  492,  492,  492, 1000,  521,
+      508, 1002, 1004,  508,  511,  511,  511,  531, 1006,  539,
+      561,  561,  561,  483,  485,  521,  547,  551,  521, 1008,
+      492,  555,  559,  531, 1010,  539,  531,  508,  539,  511,
+      563, 1012,  547,  551,  561,  547,  551,  555,  559, 1014,
+      555,  559,  521,  565,  565,  565,  563,  568, 1016,  563,
+      531, 1018,  539,  566,  566,  566, 1020,  566, 1022,  547,
+      551, 1024,  566,  568,  555,  559,  568,  565,  570,  570,
+      570, 1026,  570,  563, 1028,  575,  582,  570,  585,  585,
+
+      585, 1030,  587,  590,  590,  590,  593, 1032,  595, 1034,
+      568,  575,  582,  597,  575,  582, 1036,  599,  587, 1038,
+      566,  587,  593,  585,  595,  593, 1040,  595,  590,  597,
+     1042,  601,  597,  599, 1044,  570,  599, 1046,  575,  582,
+     1048, 1050,  603,  605, 1052,  587, 1054,  601,  607,  593,
+      601,  595,  609,  611,  613, 1056,  597, 1058,  603,  605,
+      599,  603,  605,  615,  607,  617, 1060,  607,  609,  611,
+      613,  609,  611,  613,  601, 1062, 1064, 1066, 1068,  615,
+     1070,  617,  615,  619,  617,  603,  605, 1072,  621, 1074,
+     1076,  607, 1078,  623,  625,  609,  611,  613,  627,  619,
+
+      629, 1080,  619, 1082,  621,  631,  615,  621,  617,  623,
+      625,  633,  623,  625,  627, 1084,  629,  627, 1086,  629,
+     1088,  631, 1090,  635,  631, 1092,  619,  633,  637, 1094,
+      633,  621, 1096,  639,  641, 1098,  623,  625, 1100,  635,
+      643,  627,  635,  629,  637,  645,  647,  637,  631,  639,
+      641,  649,  639,  641,  633, 1102,  643, 1104, 1106,  643,
+     1108,  645,  647,  651,  645,  647,  635,  649,  653, 1110,
+      649,  637, 1112, 1114,  655, 1116,  639,  641, 1118,  651,
+      657,  659,  651,  643,  653,  661,  663,  653,  645,  647,
+      655,  665, 1120,  655,  649, 1122,  657,  659, 1124,  657,
+
+      659,  661,  663,  667,  661,  663,  651,  665, 1126, 1128,
+      665,  653, 1130, 1132,  669, 1134,  671,  655, 1136,  667,
+      673,  675,  667,  657,  659,  677,  679, 1138,  661,  663,
+      669,  681,  671,  669,  665,  671,  673,  675, 1140,  673,
+      675,  677,  679, 1142,  677,  679,  667,  681, 1144, 1146,
+      681,  683, 1148, 1150, 1152, 1154,  685,  669, 1156,  671,
+      687,  689,  691,  673,  675, 1158,  693,  683,  677,  679,
+      683,  695,  685,  697,  681,  685,  687,  689,  691,  687,
+      689,  691,  693, 1160, 1162,  693, 1164,  695, 1166,  697,
+      695,  699,  697, 1168,  683, 1170,  701, 1172, 1174,  685,
+
+     1176,  703,  705,  687,  689,  691,  707,  699,  709,  693,
+      699, 1178,  701,  711,  695,  701,  697,  703,  705,  713,
+      703,  705,  707, 1180,  709,  707, 1182,  709, 1184,  711,
+     1186,  715,  711, 1188,  699,  713,  717, 1190,  713,  701,
+     1192,  719,  721, 1194,  703,  705, 1196,  715,  723,  707,
+      715,  709,  717,  725,  727,  717,  711,  719,  721,  729,
+      719,  721,  713, 1198,  723, 1200, 1202,  723, 1204,  725,
+      727,  731,  725,  727,  715,  729,  733, 1206,  729,  717,
+     1208, 1210,  735, 1212,  719,  721, 1214,  731,  737,  739,
+      731,  723,  733,  741,  743,  733,  725,  727,  735,  745,
+
+     1216,  735,  729, 1218,  737,  739, 1220,  737,  739,  741,
+      743,  747,  741,  743,  731,  745, 1222, 1224,  745,  733,
+     1226, 1228,  749, 1230,  751,  735, 1232,  747,  753,  755,
+      747,  737,  739,  757,  759, 1234,  741,  743,  749,  761,
+      751,  749,  745,  751,  753,  755, 1236,  753,  755,  757,
+      759, 1238,  757,  759,  747,  761, 1240, 1242,  761,  763,
+     1244, 1246, 1248, 1250,  765,  749, 1252,  751,  767,  769,
+      771,  753,  755, 1254,  773,  763,  757,  759,  763,  775,
+      765,  777,  761,  765,  767,  769,  771,  767,  769,  771,
+      773, 1256, 1258,  773, 1260,  775, 1262,  777,  775,  779,
+
+      777, 1264,  763, 1266,  781, 1268, 1270,  765, 1272,  783,
+      785,  767,  769,  771,  787,  779,  789,  773,  779, 1274,
+      781,  791,  775,  781,  777,  783,  785,  793,  783,  785,
+      787, 1276,  789,  787, 1278,  789, 1280,  791, 1282,  795,
+      791, 1284,  779,  793,  797, 1286,  793,  781, 1288,  799,
+      801, 1290,  783,  785, 1292,  795,  803,  787,  795,  789,
+      797,  805,  807,  797,  791,  799,  801,  809,  799,  801,
+      793, 1294,  803, 1296, 1298,  803, 1300,  805,  807,  811,
+      805,  807,  795,  809,  813, 1302,  809,  797, 1304, 1306,
+      815, 1308,  799,  801, 1310,  811,  817,  819,  811,  803,
+
+      813,  821,  823,  813,  805,  807,  815,  825, 1312,  815,
+      809, 1314,  817,  819, 1316,  817,  819,  821,  823,  827,
+      821,  823,  811,  825, 1318, 1320,  825,  813, 1322, 1324,
+      829, 1326,  831,  815, 1328,  827,  833,  835,  827,  817,
+      819,  837,  839, 1330,  821,  823,  829,  841,  831,  829,
+      825,  831,  833,  835, 1332,  833,  835,  837,  839, 1334,
+      837,  839,  827,  841, 1336, 1338,  841,  843, 1340, 1342,
+     1344, 1346,  845,  829, 1358,  831,  847,  849,  851,  833,
+      835,  950,  853,  843,  837,  839,  843,  855,  845,  857,
+      841,  845,  847,  849,  851,  847,  849,  851,  853,  948,
+
+      946,  853,  944,  855,  942,  857,  855,  859,  857,  940,
+      843,  938,  861,  936,  934,  845,  932,  863,  865,  847,
+      849,  851,  867,  859,  869,  853,  859,  930,  861,  871,
+      855,  861,  857,  863,  865,  873,  863,  865,  867,  928,
+      869,  867,  926,  869,  924,  871,  922,  875,  871,  920,
+      859,  873,  877,  918,  873,  861,  916,  879,  881,  914,
+      863,  865,  912,  875,  883,  867,  875,  869,  877,  885,
+      887,  877,  871,  879,  881,  889,  879,  881,  873,  910,
+      883,  908,  906,  883,  904,  885,  887,  891,  885,  887,
+      875,  889,  893,  902,  889,  877,  900,  898,  895,  896,
+
+      879,  881,  894,  891,  897,  899,  891,  883,  893,  901,
+      903,  893,  885,  887,  895,  905,  892,  895,  889,  890,
+      897,  899,  888,  897,  899,  901,  903,  907,  901,  903,
+      891,  905,  886,  884,  905,  893,  882,  880,  909,  878,
+      911,  895,  876,  907,  913,  915,  907,  897,  899,  917,
+      919,  874,  901,  903,  909,  921,  911,  909,  905,  911,
+      913,  915,  872,  913,  915,  917,  919,  870,  917,  919,
+      907,  921,  868,  866,  921,  923,  864,  862,  860,  858,
+      925,  909,  856,  911,  927,  929,  931,  913,  915,  854,
+      933,  923,  917,  919,  923,  935,  925,  937,  921,  925,
+
+      927,  929,  931,  927,  929,  931,  933,  852,  850,  933,
+      848,  935,  846,  937,  935,  939,  937,  844,  923,  842,
+      941,  840,  838,  925,  836,  943,  945,  927,  929,  931,
+      947,  939,  949,  933,  939,  834,  941,  951,  935,  941,
+      937,  943,  945,  953,  943,  945,  947,  832,  949,  947,
+      830,  949,  828,  951,  826,  955,  951,  824,  939,  953,
+      957,  822,  953,  941,  820,  959,  961,  818,  943,  945,
+      816,  955,  963,  947,  955,  949,  957,  965,  967,  957,
+      951,  959,  961,  969,  959,  961,  953,  814,  963,  812,
+      810,  963,  808,  965,  967,  971,  965,  967,  955,  969,
+
+      973,  806,  969,  957,  804,  802,  975,  800,  959,  961,
+      798,  971,  977,  979,  971,  963,  973,  981,  983,  973,
+      965,  967,  975,  985,  796,  975,  969,  794,  977,  979,
+      792,  977,  979,  981,  983,  987,  981,  983,  971,  985,
+      790,  788,  985,  973,  786,  784,  989,  782,  991,  975,
+      780,  987,  993,  995,  987,  977,  979,  997,  999,  778,
+      981,  983,  989, 1001,  991,  989,  985,  991,  993,  995,
+      776,  993,  995,  997,  999,  774,  997,  999,  987, 1001,
+      772,  770, 1001, 1003,  768,  766,  764,  762, 1005,  989,
+      760,  991, 1007, 1009, 1011,  993,  995,  758, 1013, 1003,
+
+      997,  999, 1003, 1015, 1005, 1017, 1001, 1005, 1007, 1009,
+     1011, 1007, 1009, 1011, 1013,  756,  754, 1013,  752, 1015,
+      750, 1017, 1015, 1019, 1017,  748, 1003,  746, 1021,  744,
+      742, 1005,  740, 1023, 1025, 1007, 1009, 1011, 1027, 1019,
+     1029, 1013, 1019,  738, 1021, 1031, 1015, 1021, 1017, 1023,
+     1025, 1033, 1023, 1025, 1027,  736, 1029, 1027,  734, 1029,
+      732, 1031,  730, 1035, 1031,  728, 1019, 1033, 1037,  726,
+     1033, 1021,  724, 1039, 1041,  722, 1023, 1025,  720, 1035,
+     1043, 1027, 1035, 1029, 1037, 1045, 1047, 1037, 1031, 1039,
+     1041, 1049, 1039, 1041, 1033,  718, 1043,  716,  714, 1043,
+
+      712, 1045, 1047, 1051, 1045, 1047, 1035, 1049, 1053,  710,
+     1049, 1037,  708,  706, 1055,  704, 1039, 1041,  702, 1051,
+     1057, 1059, 1051, 1043, 1053, 1061, 1063, 1053, 1045, 1047,
+     1055, 1065,  700, 1055, 1049,  698, 1057, 1059,  696, 1057,
+     1059, 1061, 1063, 1067, 1061, 1063, 1051, 1065,  694,  692,
+     1065, 1053,  690,  688, 1069,  686, 1071, 1055,  684, 1067,
+     1073, 1075, 1067, 1057, 1059, 1077, 1079,  682, 1061, 1063,
+     1069, 1081, 1071, 1069, 1065, 1071, 1073, 1075,  680, 1073,
+     1075, 1077, 1079,  678, 1077, 1079, 1067, 1081,  676,  674,
+     1081, 1083,  672,  670,  668,  666, 1085, 1069,  664, 1071,
+
+     1087, 1089, 1091, 1073, 1075,  662, 1093, 1083, 1077, 1079,
+     1083, 1095, 1085, 1097, 1081, 1085, 1087, 1089, 1091, 1087,
+     1089, 1091, 1093,  660,  658, 1093,  656, 1095,  654, 1097,
+     1095, 1099, 1097,  652, 1083,  650, 1101,  648,  646, 1085,
+      644, 1103, 1105, 1087, 1089, 1091, 1107, 1099, 1109, 1093,
+     1099,  642, 1101, 1111, 1095, 1101, 1097, 1103, 1105, 1113,
+     1103, 1105, 1107,  640, 1109, 1107,  638, 1109,  636, 1111,
+      634, 1115, 1111,  632, 1099, 1113, 1117,  630, 1113, 1101,
+      628, 1119, 1121,  626, 1103, 1105,  624, 1115, 1123, 1107,
+     1115, 1109, 1117, 1125, 1127, 1117, 1111, 1119, 1121, 1129,
+
+     1119, 1121, 1113,  622, 1123,  620,  618, 1123,  616, 1125,
+     1127, 1131, 1125, 1127, 1115, 1129, 1133,  614, 1129, 1117,
+      612,  610, 1135,  608, 1119, 1121,  606, 1131, 1137, 1139,
+     1131, 1123, 1133, 1141, 1143, 1133, 1125, 1127, 1135, 1145,
+      604, 1135, 1129,  602, 1137, 1139,  600, 1137, 1139, 1141,
+     1143, 1147, 1141, 1143, 1131, 1145,  598,  596, 1145, 1133,
+      594,  592, 1149,  589, 1151, 1135,  588, 1147, 1153, 1155,
+     1147, 1137, 1139, 1157, 1159,  586, 1141, 1143, 1149, 1161,
+     1151, 1149, 1145, 1151, 1153, 1155,  584, 1153, 1155, 1157,
+     1159,  583, 1157, 1159, 1147, 1161,  581,  580, 1161, 1163,
+
+      579,  578,  577,  574, 1165, 1149,  573, 1151, 1167, 1169,
+     1171, 1153, 1155,  572, 1173, 1163, 1157, 1159, 1163, 1175,
+     1165, 1177, 1161, 1165, 1167, 1169, 1171, 1167, 1169, 1171,
+     1173,  571,  567, 1173,  564, 1175,  562, 1177, 1175, 1179,
+     1177,  560, 1163,  558, 1181,  557,  556, 1165,  554, 1183,
+     1185, 1167, 1169, 1171, 1187, 1179, 1189, 1173, 1179,  553,
+     1181, 1191, 1175, 1181, 1177, 1183, 1185, 1193, 1183, 1185,
+     1187,  552, 1189, 1187,  550, 1189,  549, 1191,  548, 1195,
+     1191,  546, 1179, 1193, 1197,  541, 1193, 1181,  540, 1199,
+     1201,  538, 1183, 1185,  537, 1195, 1203, 1187, 1195, 1189,
+
+     1197, 1205, 1207, 1197, 1191, 1199, 1201, 1209, 1199, 1201,
+     1193,  536, 1203,  535,  534, 1203,  533, 1205, 1207, 1211,
+     1205, 1207, 1195, 1209, 1213,  532, 1209, 1197,  530,  529,
+     1215,  528, 1199, 1201,  527, 1211, 1217, 1219, 1211, 1203,
+     1213, 1221, 1223, 1213, 1205, 1207, 1215, 1225,  524, 1215,
+     1209,  523, 1217, 1219,  522, 1217, 1219, 1221, 1223, 1227,
+     1221, 1223, 1211, 1225,  520,  519, 1225, 1213,  518,  517,
+     1229,  515, 1231, 1215,  514, 1227, 1233, 1235, 1227, 1217,
+     1219, 1237, 1239,  513, 1221, 1223, 1229, 1241, 1231, 1229,
+     1225, 1231, 1233, 1235,  510, 1233, 1235, 1237, 1239,  509,
+
+     1237, 1239, 1227, 1241,  507,  506, 1241, 1243,  505,  504,
+      501,  500, 1245, 1229,  499, 1231, 1247, 1249, 1251, 1233,
+     1235,  497, 1253, 1243, 1237, 1239, 1243, 1255, 1245, 1257,
+     1241, 1245, 1247, 1249, 1251, 1247, 1249, 1251, 1253,  495,
+      493, 1253,  484, 1255,  482, 1257, 1255, 1259, 1257,  481,
+     1243,  480, 1261,  479,  478, 1245,  475, 1263, 1265, 1247,
+     1249, 1251, 1267, 1259, 1269, 1253, 1259,  474, 1261, 1271,
+     1255, 1261, 1257, 1263, 1265, 1273, 1263, 1265, 1267,  473,
+     1269, 1267,  472, 1269,  469, 1271,  468, 1275, 1271,  467,
+     1259, 1273, 1277,  466, 1273, 1261,  465, 1279, 1281,  464,
+
+     1263, 1265,  463, 1275, 1283, 1267, 1275, 1269, 1277, 1285,
+     1287, 1277, 1271, 1279, 1281, 1289, 1279, 1281, 1273,  458,
+     1283,  457,  453, 1283,  451, 1285, 1287, 1291, 1285, 1287,
+     1275, 1289, 1293,  447, 1289, 1277,  446,  445, 1295,  443,
+     1279, 1281,  442, 1291, 1297, 1299, 1291, 1283, 1293, 1301,
+     1303, 1293, 1285, 1287, 1295, 1305,  441, 1295, 1289,  440,
+     1297, 1299,  439, 1297, 1299, 1301, 1303, 1307, 1301, 1303,
+     1291, 1305,  438,  437, 1305, 1293,  435,  434, 1309,  433,
+     1311, 1295,  432, 1307, 1313, 1315, 1307, 1297, 1299, 1317,
+     1319,  431, 1301, 1303, 1309, 1321, 1311, 1309, 1305, 1311,
+
+     1313, 1315,  430, 1313, 1315, 1317, 1319,  429, 1317, 1319,
+     1307, 1321,  428,  427, 1321, 1323,  425,  422,  421,  420,
+     1325, 1309,  419, 1311, 1327, 1329, 1331, 1313, 1315,  415,
+     1333, 1323, 1317, 1319, 1323, 1335, 1325, 1337, 1321, 1325,
+     1327, 1329, 1331, 1327, 1329, 1331, 1333,  414,  413, 1333,
+      410, 1335,  407, 1337, 1335, 1339, 1337,  406, 1323,  405,
+     1341,  404,  402, 1325,  400, 1343, 1345, 1327, 1329, 1331,
+     1347, 1339, 1349, 1333, 1339,  399, 1341,  398, 1335, 1341,
+     1337, 1343, 1345,  397, 1343, 1345, 1347,  396, 1349, 1347,
+      395, 1349,  394,  392,  391,  389,  388,  387, 1339,  386,
+
+      383,  380,  379, 1341,  378,  377,  375,  373, 1343, 1345,
+      372,  371,  369, 1347,  368, 1349, 1351, 1351, 1351, 1351,
+     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1352, 1352,
+     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
+     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
+     1353, 1353, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354,
+     1354, 1354, 1354, 1354, 1355, 1355, 1355, 1355, 1355, 1355,
+     1355, 1355, 1355, 1355, 1355, 1355, 1356, 1356, 1356, 1356,
+     1356, 1356, 1356, 1356, 1356, 1356,  365, 1356, 1357, 1357,
+     1357, 1357,  364, 1357, 1357, 1357, 1357, 1357, 1357, 1357,
+
+     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
+     1359, 1359, 1360,  362,  361, 1360, 1361, 1361, 1361,  358,
+     1361, 1361, 1361,  355, 1361, 1361, 1362, 1362, 1362, 1362,
+     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1362, 1363,  354,
+      353, 1363, 1364, 1364, 1364, 1364, 1364, 1364,  352, 1364,
+     1364, 1364, 1364, 1364, 1365,  351,  350,  349,  348,  346,
+     1365, 1365,  345, 1365, 1366,  344,  343, 1366, 1367,  342,
+      341, 1367, 1368, 1368, 1368, 1368, 1368, 1368, 1368,  338,
+     1368, 1368, 1368, 1368, 1369, 1369,  337, 1369, 1369,  336,
+     1369, 1369, 1369, 1369, 1369, 1369, 1370, 1370, 1370, 1370,
+
+     1370, 1370, 1370, 1370, 1370, 1370, 1370, 1370, 1371,  335,
+      334, 1371, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
+     1372, 1372, 1372, 1372, 1373,  333,  332,  330,  329,  328,
+      327,  326,  325,  323, 1373, 1374, 1374, 1374, 1374, 1374,
+     1374, 1374, 1374, 1374, 1374, 1374, 1374, 1375,  322,  321,
+      320,  319,  318, 1375,  316,  315, 1375, 1376, 1376, 1376,
+     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1376, 1377,
+     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377,
+     1377, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1378,
+     1378, 1378, 1378, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
+
+     1379, 1379, 1379, 1379, 1379, 1380, 1380, 1380, 1380, 1380,
+     1380, 1380, 1380, 1380, 1380, 1380, 1380, 1381, 1381, 1381,
+     1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1382,
+     1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
+     1382, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
+     1383, 1383, 1383, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
+     1384, 1384, 1384, 1384, 1384, 1385, 1385, 1385, 1385, 1385,
+     1385, 1385, 1385, 1385, 1385, 1385, 1385, 1386, 1386, 1386,
+     1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1386, 1387,
+     1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387, 1387,
+
+     1387, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388, 1388,
+     1388, 1388, 1388, 1389, 1389, 1389, 1389, 1389, 1389, 1389,
+     1389, 1389, 1389, 1389, 1389, 1390, 1390, 1390, 1390, 1390,
+     1390, 1390, 1390, 1390, 1390, 1390, 1390, 1391, 1391, 1391,
+     1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1392,
+     1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392, 1392,
+     1392, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
+     1393, 1393, 1393, 1394, 1394, 1394, 1394, 1394, 1394, 1394,
+     1394, 1394, 1394, 1394, 1394, 1395, 1395, 1395, 1395, 1395,
+     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1396, 1396, 1396,
+
+     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1397,
+     1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397, 1397,
+     1397, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398, 1398,
+     1398, 1398, 1398, 1399, 1399, 1399, 1399, 1399, 1399, 1399,
+     1399, 1399, 1399, 1399, 1399, 1400, 1400, 1400, 1400, 1400,
+     1400, 1400, 1400, 1400, 1400, 1400, 1400, 1401, 1401, 1401,
+     1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1402,
+     1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
+     1402, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403, 1403,
+     1403, 1403, 1403, 1404, 1404, 1404, 1404, 1404, 1404, 1404,
+
+     1404, 1404, 1404, 1404, 1404, 1405, 1405, 1405, 1405, 1405,
+     1405, 1405, 1405, 1405, 1405, 1405, 1405, 1406, 1406, 1406,
+     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1407,
+     1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
+     1407, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408, 1408,
+     1408, 1408, 1408, 1409, 1409, 1409, 1409, 1409, 1409, 1409,
+     1409, 1409, 1409, 1409, 1409, 1410, 1410, 1410, 1410, 1410,
+     1410, 1410, 1410, 1410, 1410, 1410, 1410, 1411, 1411, 1411,
+     1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1411, 1412,
+     1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412, 1412,
+
+     1412, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413, 1413,
+     1413, 1413, 1413, 1414, 1414, 1414, 1414, 1414, 1414, 1414,
+     1414, 1414, 1414, 1414, 1414, 1415, 1415, 1415, 1415, 1415,
+     1415, 1415, 1415, 1415, 1415, 1415, 1415, 1416, 1416, 1416,
+     1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1417,
+     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
+     1417, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418,
+     1418, 1418, 1418, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
+     1419, 1419, 1419, 1419, 1419, 1420, 1420, 1420, 1420, 1420,
+     1420, 1420, 1420, 1420, 1420, 1420, 1420, 1421, 1421, 1421,
+
+     1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1421, 1422,
+     1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422, 1422,
+     1422, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423, 1423,
+     1423, 1423, 1423, 1424, 1424, 1424, 1424, 1424, 1424, 1424,
+     1424, 1424, 1424, 1424, 1424, 1425, 1425, 1425, 1425, 1425,
+     1425, 1425, 1425, 1425, 1425, 1425, 1425, 1426, 1426, 1426,
+     1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1426, 1427,
+     1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427, 1427,
+     1427, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
+     1428, 1428, 1428, 1429, 1429, 1429, 1429, 1429, 1429, 1429,
+
+     1429, 1429, 1429, 1429, 1429, 1430, 1430, 1430, 1430, 1430,
+     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1431, 1431, 1431,
+     1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1431, 1432,
+     1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432, 1432,
+     1432, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433, 1433,
+     1433, 1433, 1433, 1434, 1434, 1434, 1434, 1434, 1434, 1434,
+     1434, 1434, 1434, 1434, 1434, 1435, 1435, 1435, 1435, 1435,
+     1435, 1435, 1435, 1435, 1435, 1435, 1435, 1436, 1436, 1436,
+     1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1436, 1437,
+     1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437, 1437,
+
+     1437, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438, 1438,
+     1438, 1438, 1438, 1439, 1439, 1439, 1439, 1439, 1439, 1439,
+     1439, 1439, 1439, 1439, 1439, 1440, 1440, 1440, 1440, 1440,
+     1440, 1440, 1440, 1440, 1440, 1440, 1440, 1441, 1441, 1441,
+     1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1441, 1442,
+     1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442, 1442,
+     1442, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443, 1443,
+     1443, 1443, 1443, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
+     1444, 1444, 1444, 1444, 1444, 1445, 1445, 1445, 1445, 1445,
+     1445, 1445, 1445, 1445, 1445, 1445, 1445, 1446, 1446, 1446,
+
+     1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1446, 1447,
+     1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447, 1447,
+     1447, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448, 1448,
+     1448, 1448, 1448, 1449, 1449, 1449, 1449, 1449, 1449, 1449,
+     1449, 1449, 1449, 1449, 1449, 1450, 1450, 1450, 1450, 1450,
+     1450, 1450, 1450, 1450, 1450, 1450, 1450, 1451, 1451, 1451,
+     1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1451, 1452,
+     1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452, 1452,
+     1452, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453, 1453,
+     1453, 1453, 1453, 1454, 1454, 1454, 1454, 1454, 1454, 1454,
+
+     1454, 1454, 1454, 1454, 1454, 1455, 1455, 1455, 1455, 1455,
+     1455, 1455, 1455, 1455, 1455, 1455, 1455, 1456, 1456, 1456,
+     1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1456, 1457,
+     1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457, 1457,
+     1457, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458, 1458,
+     1458, 1458, 1458, 1459, 1459, 1459, 1459, 1459, 1459, 1459,
+     1459, 1459, 1459, 1459, 1459, 1460, 1460, 1460, 1460, 1460,
+     1460, 1460, 1460, 1460, 1460, 1460, 1460, 1461, 1461, 1461,
+     1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1461, 1462,
+     1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462, 1462,
+
+     1462, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463, 1463,
+     1463, 1463, 1463, 1464, 1464, 1464, 1464, 1464, 1464, 1464,
+     1464, 1464, 1464, 1464, 1464, 1465, 1465, 1465, 1465, 1465,
+     1465, 1465, 1465, 1465, 1465, 1465, 1465, 1466, 1466, 1466,
+     1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1466, 1467,
+     1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467, 1467,
+     1467, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468, 1468,
+     1468, 1468, 1468, 1469, 1469, 1469, 1469, 1469, 1469, 1469,
+     1469, 1469, 1469, 1469, 1469, 1470, 1470, 1470, 1470, 1470,
+     1470, 1470, 1470, 1470, 1470, 1470, 1470, 1471, 1471, 1471,
+
+     1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1471, 1472,
+     1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472, 1472,
+     1472, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473, 1473,
+     1473, 1473, 1473, 1474, 1474, 1474, 1474, 1474, 1474, 1474,
+     1474, 1474, 1474, 1474, 1474, 1475, 1475, 1475, 1475, 1475,
+     1475, 1475, 1475, 1475, 1475, 1475, 1475, 1476, 1476, 1476,
+     1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1476, 1477,
+     1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477, 1477,
+     1477, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478, 1478,
+     1478, 1478, 1478, 1479, 1479, 1479, 1479, 1479, 1479, 1479,
+
+     1479, 1479, 1479, 1479, 1479, 1480, 1480, 1480, 1480, 1480,
+     1480, 1480, 1480, 1480, 1480, 1480, 1480, 1481, 1481, 1481,
+     1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1481, 1482,
+     1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482, 1482,
+     1482, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483, 1483,
+     1483, 1483, 1483, 1484, 1484, 1484, 1484, 1484, 1484, 1484,
+     1484, 1484, 1484, 1484, 1484, 1485, 1485, 1485, 1485, 1485,
+     1485, 1485, 1485, 1485, 1485, 1485, 1485, 1486, 1486, 1486,
+     1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1486, 1487,
+     1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487, 1487,
+
+     1487, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488, 1488,
+     1488, 1488, 1488, 1489, 1489, 1489, 1489, 1489, 1489, 1489,
+     1489, 1489, 1489, 1489, 1489, 1490, 1490, 1490, 1490, 1490,
+     1490, 1490, 1490, 1490, 1490, 1490, 1490, 1491, 1491, 1491,
+     1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1491, 1492,
+     1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492, 1492,
+     1492, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493, 1493,
+     1493, 1493, 1493, 1494, 1494, 1494, 1494, 1494, 1494, 1494,
+     1494, 1494, 1494, 1494, 1494, 1495, 1495, 1495, 1495, 1495,
+     1495, 1495, 1495, 1495, 1495, 1495, 1495, 1496, 1496, 1496,
+
+     1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1496, 1497,
+     1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497, 1497,
+     1497, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498, 1498,
+     1498, 1498, 1498, 1499, 1499, 1499, 1499, 1499, 1499, 1499,
+     1499, 1499, 1499, 1499, 1499, 1500, 1500, 1500, 1500, 1500,
+     1500, 1500, 1500, 1500, 1500, 1500, 1500, 1501, 1501, 1501,
+     1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1501, 1502,
+     1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502, 1502,
+     1502, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503, 1503,
+     1503, 1503, 1503, 1504, 1504, 1504, 1504, 1504, 1504, 1504,
+
+     1504, 1504, 1504, 1504, 1504, 1505, 1505, 1505, 1505, 1505,
+     1505, 1505, 1505, 1505, 1505, 1505, 1505, 1506, 1506, 1506,
+     1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1506, 1507,
+     1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507, 1507,
+     1507, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508, 1508,
+     1508, 1508, 1508, 1509, 1509, 1509, 1509, 1509, 1509, 1509,
+     1509, 1509, 1509, 1509, 1509, 1510, 1510, 1510, 1510, 1510,
+     1510, 1510, 1510, 1510, 1510, 1510, 1510, 1511, 1511, 1511,
+     1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1511, 1512,
+     1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512, 1512,
+
+     1512, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513, 1513,
+     1513, 1513, 1513, 1514, 1514, 1514, 1514, 1514, 1514, 1514,
+     1514, 1514, 1514, 1514, 1514, 1515, 1515, 1515, 1515, 1515,
+     1515, 1515, 1515, 1515, 1515, 1515, 1515, 1516, 1516, 1516,
+     1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1516, 1517,
+     1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517, 1517,
+     1517, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518, 1518,
+     1518, 1518, 1518, 1519, 1519, 1519, 1519, 1519, 1519, 1519,
+     1519, 1519, 1519, 1519, 1519, 1520, 1520, 1520, 1520, 1520,
+     1520, 1520, 1520, 1520, 1520, 1520, 1520, 1521, 1521, 1521,
+
+     1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1521, 1522,
+     1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522, 1522,
+     1522, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523, 1523,
+     1523, 1523, 1523, 1524, 1524, 1524, 1524, 1524, 1524, 1524,
+     1524, 1524, 1524, 1524, 1524, 1525, 1525, 1525, 1525, 1525,
+     1525, 1525, 1525, 1525, 1525, 1525, 1525, 1526, 1526, 1526,
+     1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1526, 1527,
+     1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527, 1527,
+     1527, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528, 1528,
+     1528, 1528, 1528, 1529, 1529, 1529, 1529, 1529, 1529, 1529,
+
+     1529, 1529, 1529, 1529, 1529, 1530, 1530, 1530, 1530, 1530,
+     1530, 1530, 1530, 1530, 1530, 1530, 1530, 1531, 1531, 1531,
+     1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1531, 1532,
+     1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532, 1532,
+     1532, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533, 1533,
+     1533, 1533, 1533, 1534, 1534, 1534, 1534, 1534, 1534, 1534,
+     1534, 1534, 1534, 1534, 1534, 1535, 1535, 1535, 1535, 1535,
+     1535, 1535, 1535, 1535, 1535, 1535, 1535, 1536, 1536, 1536,
+     1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1536, 1537,
+     1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537, 1537,
+
+     1537, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538, 1538,
+     1538, 1538, 1538, 1539, 1539, 1539, 1539, 1539, 1539, 1539,
+     1539, 1539, 1539, 1539, 1539, 1540, 1540, 1540, 1540, 1540,
+     1540, 1540, 1540, 1540, 1540, 1540, 1540, 1541, 1541, 1541,
+     1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1541, 1542,
+     1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542, 1542,
+     1542, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543, 1543,
+     1543, 1543, 1543, 1544, 1544, 1544, 1544, 1544, 1544, 1544,
+     1544, 1544, 1544, 1544, 1544, 1545, 1545, 1545, 1545, 1545,
+     1545, 1545, 1545, 1545, 1545, 1545, 1545, 1546, 1546, 1546,
+
+     1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1546, 1547,
+     1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547, 1547,
+     1547, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548, 1548,
+     1548, 1548, 1548, 1549, 1549, 1549, 1549, 1549, 1549, 1549,
+     1549, 1549, 1549, 1549, 1549, 1550, 1550, 1550, 1550, 1550,
+     1550, 1550, 1550, 1550, 1550, 1550, 1550, 1551, 1551, 1551,
+     1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1551, 1552,
+     1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552, 1552,
+     1552, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553, 1553,
+     1553, 1553, 1553, 1554, 1554, 1554, 1554, 1554, 1554, 1554,
+
+     1554, 1554, 1554, 1554, 1554, 1555, 1555, 1555, 1555, 1555,
+     1555, 1555, 1555, 1555, 1555, 1555, 1555, 1556, 1556, 1556,
+     1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1556, 1557,
+     1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557, 1557,
+     1557, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558, 1558,
+     1558, 1558, 1558, 1559, 1559, 1559, 1559, 1559, 1559, 1559,
+     1559, 1559, 1559, 1559, 1559, 1560, 1560, 1560, 1560, 1560,
+     1560, 1560, 1560, 1560, 1560, 1560, 1560, 1561, 1561, 1561,
+     1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1561, 1562,
+     1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562, 1562,
+
+     1562, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563, 1563,
+     1563, 1563, 1563, 1564, 1564, 1564, 1564, 1564, 1564, 1564,
+     1564, 1564, 1564, 1564, 1564, 1565, 1565, 1565, 1565, 1565,
+     1565, 1565, 1565, 1565, 1565, 1565, 1565, 1566, 1566, 1566,
+     1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1566, 1567,
+     1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567, 1567,
+     1567, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568, 1568,
+     1568, 1568, 1568, 1569, 1569, 1569, 1569, 1569, 1569, 1569,
+     1569, 1569, 1569, 1569, 1569, 1570, 1570, 1570, 1570, 1570,
+     1570, 1570, 1570, 1570, 1570, 1570, 1570, 1571, 1571, 1571,
+
+     1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1571, 1572,
+     1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572, 1572,
+     1572, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573, 1573,
+     1573, 1573, 1573, 1574, 1574, 1574, 1574, 1574, 1574, 1574,
+     1574, 1574, 1574, 1574, 1574, 1575, 1575, 1575, 1575, 1575,
+     1575, 1575, 1575, 1575, 1575, 1575, 1575, 1576, 1576, 1576,
+     1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1576, 1577,
+     1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577, 1577,
+     1577, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578, 1578,
+     1578, 1578, 1578, 1579, 1579, 1579, 1579, 1579, 1579, 1579,
+
+     1579, 1579, 1579, 1579, 1579, 1580, 1580, 1580, 1580, 1580,
+     1580, 1580, 1580, 1580, 1580, 1580, 1580, 1581, 1581, 1581,
+     1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1581, 1582,
+     1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582, 1582,
+     1582, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583, 1583,
+     1583, 1583, 1583, 1584, 1584, 1584, 1584, 1584, 1584, 1584,
+     1584, 1584, 1584, 1584, 1584, 1585, 1585, 1585, 1585, 1585,
+     1585, 1585, 1585, 1585, 1585, 1585, 1585, 1586, 1586, 1586,
+     1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1587,
+     1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587, 1587,
+
+     1587, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
+     1588, 1588, 1588, 1589, 1589, 1589, 1589, 1589, 1589, 1589,
+     1589, 1589, 1589, 1589, 1589, 1590, 1590, 1590, 1590, 1590,
+     1590, 1590, 1590, 1590, 1590, 1590, 1590, 1591, 1591, 1591,
+     1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1591, 1592,
+     1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592, 1592,
+     1592, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593, 1593,
+     1593, 1593, 1593, 1594, 1594, 1594, 1594, 1594, 1594, 1594,
+     1594, 1594, 1594, 1594, 1594, 1595, 1595, 1595, 1595, 1595,
+     1595, 1595, 1595, 1595, 1595, 1595, 1595, 1596, 1596, 1596,
+
+     1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1596, 1597,
+     1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597, 1597,
+     1597, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598, 1598,
+     1598, 1598, 1598, 1599, 1599, 1599, 1599, 1599, 1599, 1599,
+     1599, 1599, 1599, 1599, 1599, 1600, 1600, 1600, 1600, 1600,
+     1600, 1600, 1600, 1600, 1600, 1600, 1600, 1601, 1601, 1601,
+     1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1601, 1602,
+     1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602, 1602,
+     1602, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603, 1603,
+     1603, 1603, 1603, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
+
+     1604, 1604, 1604, 1604, 1604, 1605, 1605, 1605, 1605, 1605,
+     1605, 1605, 1605, 1605, 1605, 1605, 1605, 1606, 1606, 1606,
+     1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1607,
+     1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607, 1607,
+     1607, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
+     1608, 1608, 1608, 1609, 1609, 1609, 1609, 1609, 1609, 1609,
+     1609, 1609, 1609, 1609, 1609, 1610, 1610, 1610, 1610, 1610,
+     1610, 1610, 1610, 1610, 1610, 1610, 1610, 1611, 1611, 1611,
+     1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1611, 1612,
+     1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612, 1612,
+
+     1612, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613, 1613,
+     1613, 1613, 1613, 1614, 1614, 1614, 1614, 1614, 1614, 1614,
+     1614, 1614, 1614, 1614, 1614, 1615, 1615, 1615, 1615, 1615,
+     1615, 1615, 1615, 1615, 1615, 1615, 1615, 1616, 1616, 1616,
+     1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1616, 1617,
+     1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617, 1617,
+     1617, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618, 1618,
+     1618, 1618, 1618, 1619, 1619, 1619, 1619, 1619, 1619, 1619,
+     1619, 1619, 1619, 1619, 1619, 1620, 1620, 1620, 1620, 1620,
+     1620, 1620, 1620, 1620, 1620, 1620, 1620, 1621, 1621, 1621,
+
+     1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1621, 1622,
+     1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622, 1622,
+     1622, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623, 1623,
+     1623, 1623, 1623, 1624, 1624, 1624, 1624, 1624, 1624, 1624,
+     1624, 1624, 1624, 1624, 1624, 1625, 1625, 1625, 1625, 1625,
+     1625, 1625, 1625, 1625, 1625, 1625, 1625, 1626, 1626, 1626,
+     1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1626, 1627,
+     1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627, 1627,
+     1627, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628, 1628,
+     1628, 1628, 1628, 1629, 1629, 1629, 1629, 1629, 1629, 1629,
+
+     1629, 1629, 1629, 1629, 1629, 1630, 1630, 1630, 1630, 1630,
+     1630, 1630, 1630, 1630, 1630, 1630, 1630, 1631, 1631, 1631,
+     1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1631, 1632,
+     1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632, 1632,
+     1632, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633, 1633,
+     1633, 1633, 1633, 1634, 1634, 1634, 1634, 1634, 1634, 1634,
+     1634, 1634, 1634, 1634, 1634, 1635, 1635, 1635, 1635, 1635,
+     1635, 1635, 1635, 1635, 1635, 1635, 1635, 1636, 1636, 1636,
+     1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1636, 1637,
+     1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637, 1637,
+
+     1637, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638, 1638,
+     1638, 1638, 1638, 1639, 1639, 1639, 1639, 1639, 1639, 1639,
+     1639, 1639, 1639, 1639, 1639, 1640, 1640, 1640, 1640, 1640,
+     1640, 1640, 1640, 1640, 1640, 1640, 1640, 1641, 1641, 1641,
+     1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1641, 1642,
+     1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642, 1642,
+     1642, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643, 1643,
+     1643, 1643, 1643, 1644, 1644, 1644, 1644, 1644, 1644, 1644,
+     1644, 1644, 1644, 1644, 1644, 1645, 1645, 1645, 1645, 1645,
+     1645, 1645, 1645, 1645, 1645, 1645, 1645, 1646, 1646, 1646,
+
+     1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1646, 1647,
+     1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647, 1647,
+     1647, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648, 1648,
+     1648, 1648, 1648, 1649, 1649, 1649, 1649, 1649, 1649, 1649,
+     1649, 1649, 1649, 1649, 1649, 1650, 1650, 1650, 1650, 1650,
+     1650, 1650, 1650, 1650, 1650, 1650, 1650, 1651, 1651, 1651,
+     1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1651, 1652,
+     1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652, 1652,
+     1652, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653, 1653,
+     1653, 1653, 1653, 1654, 1654, 1654, 1654, 1654, 1654, 1654,
+
+     1654, 1654, 1654, 1654, 1654, 1655, 1655, 1655, 1655, 1655,
+     1655, 1655, 1655, 1655, 1655, 1655, 1655, 1656, 1656, 1656,
+     1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1657,
+     1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657, 1657,
+     1657, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658, 1658,
+     1658, 1658, 1658, 1659, 1659, 1659, 1659, 1659, 1659, 1659,
+     1659, 1659, 1659, 1659, 1659, 1660, 1660, 1660, 1660, 1660,
+     1660, 1660, 1660, 1660, 1660, 1660, 1660, 1661, 1661, 1661,
+     1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1661, 1662,
+     1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662, 1662,
+
+     1662, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663, 1663,
+     1663, 1663, 1663, 1664, 1664, 1664, 1664, 1664, 1664, 1664,
+     1664, 1664, 1664, 1664, 1664, 1665, 1665, 1665, 1665, 1665,
+     1665, 1665, 1665, 1665, 1665, 1665, 1665, 1666, 1666, 1666,
+     1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1666, 1667,
+     1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667, 1667,
+     1667, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668, 1668,
+     1668, 1668, 1668, 1669, 1669, 1669, 1669, 1669, 1669, 1669,
+     1669, 1669, 1669, 1669, 1669, 1670, 1670, 1670, 1670, 1670,
+     1670, 1670, 1670, 1670, 1670, 1670, 1670, 1671, 1671, 1671,
+
+     1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1671, 1672,
+     1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672, 1672,
+     1672, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673, 1673,
+     1673, 1673, 1673, 1674, 1674, 1674, 1674, 1674, 1674, 1674,
+     1674, 1674, 1674, 1674, 1674, 1675, 1675, 1675, 1675, 1675,
+     1675, 1675, 1675, 1675, 1675, 1675, 1675, 1676, 1676, 1676,
+     1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1676, 1677,
+     1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677, 1677,
+     1677, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678, 1678,
+     1678, 1678, 1678, 1679, 1679, 1679, 1679, 1679, 1679, 1679,
+
+     1679, 1679, 1679, 1679, 1679, 1680, 1680, 1680, 1680, 1680,
+     1680, 1680, 1680, 1680, 1680, 1680, 1680, 1681, 1681, 1681,
+     1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1681, 1682,
+     1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682, 1682,
+     1682, 1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683, 1683,
+     1683, 1683, 1683, 1684, 1684, 1684, 1684, 1684, 1684, 1684,
+     1684, 1684, 1684, 1684, 1684, 1685, 1685, 1685, 1685, 1685,
+     1685, 1685, 1685, 1685, 1685, 1685, 1685, 1686, 1686, 1686,
+     1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1686, 1687,
+     1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687, 1687,
+
+     1687, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688, 1688,
+     1688, 1688, 1688, 1689, 1689, 1689, 1689, 1689, 1689, 1689,
+     1689, 1689, 1689, 1689, 1689, 1690, 1690, 1690, 1690, 1690,
+     1690, 1690, 1690, 1690, 1690, 1690, 1690, 1691, 1691, 1691,
+     1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1691, 1692,
+     1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692, 1692,
+     1692, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693, 1693,
+     1693, 1693, 1693, 1694, 1694, 1694, 1694, 1694, 1694, 1694,
+     1694, 1694, 1694, 1694, 1694, 1695, 1695, 1695, 1695, 1695,
+     1695, 1695, 1695, 1695, 1695, 1695, 1695, 1696, 1696, 1696,
+
+     1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1696, 1697,
+     1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697, 1697,
+     1697, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698, 1698,
+     1698, 1698, 1698, 1699, 1699, 1699, 1699, 1699, 1699, 1699,
+     1699, 1699, 1699, 1699, 1699, 1700, 1700, 1700, 1700, 1700,
+     1700, 1700, 1700, 1700, 1700, 1700, 1700, 1701, 1701, 1701,
+     1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1701, 1702,
+     1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702, 1702,
+     1702, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703, 1703,
+     1703, 1703, 1703, 1704, 1704, 1704, 1704, 1704, 1704, 1704,
+
+     1704, 1704, 1704, 1704, 1704, 1705, 1705, 1705, 1705, 1705,
+     1705, 1705, 1705, 1705, 1705, 1705, 1705, 1706, 1706, 1706,
+     1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1706, 1707,
+     1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707, 1707,
+     1707, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708, 1708,
+     1708, 1708, 1708, 1709, 1709, 1709, 1709, 1709, 1709, 1709,
+     1709, 1709, 1709, 1709, 1709, 1710, 1710, 1710, 1710, 1710,
+     1710, 1710, 1710, 1710, 1710, 1710, 1710, 1711, 1711, 1711,
+     1711, 1711, 1711, 1711, 1711, 1711, 1711, 1711, 1711, 1712,
+     1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712, 1712,
+
+     1712, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713, 1713,
+     1713, 1713, 1713, 1714, 1714, 1714, 1714, 1714, 1714, 1714,
+     1714, 1714, 1714, 1714, 1714, 1715, 1715, 1715, 1715, 1715,
+     1715, 1715, 1715, 1715, 1715, 1715, 1715, 1716, 1716, 1716,
+     1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1716, 1717,
+     1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717, 1717,
+     1717, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718, 1718,
+     1718, 1718, 1718, 1719, 1719, 1719, 1719, 1719, 1719, 1719,
+     1719, 1719, 1719, 1719, 1719, 1720, 1720, 1720, 1720, 1720,
+     1720, 1720, 1720, 1720, 1720, 1720, 1720, 1721, 1721, 1721,
+
+     1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1721, 1722,
+     1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722, 1722,
+     1722, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723, 1723,
+     1723, 1723, 1723, 1724, 1724, 1724, 1724, 1724, 1724, 1724,
+     1724, 1724, 1724, 1724, 1724, 1725, 1725, 1725, 1725, 1725,
+     1725, 1725, 1725, 1725, 1725, 1725, 1725, 1726, 1726, 1726,
+     1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1726, 1727,
+     1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727, 1727,
+     1727, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728, 1728,
+     1728, 1728, 1728, 1729, 1729, 1729, 1729, 1729, 1729, 1729,
+
+     1729, 1729, 1729, 1729, 1729, 1730, 1730, 1730, 1730, 1730,
+     1730, 1730, 1730, 1730, 1730, 1730, 1730, 1731, 1731, 1731,
+     1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1731, 1732,
+     1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732, 1732,
+     1732, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733, 1733,
+     1733, 1733, 1733, 1734, 1734, 1734, 1734, 1734, 1734, 1734,
+     1734, 1734, 1734, 1734, 1734, 1735, 1735, 1735, 1735, 1735,
+     1735, 1735, 1735, 1735, 1735, 1735, 1735, 1736, 1736, 1736,
+     1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1736, 1737,
+     1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737, 1737,
+
+     1737, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738, 1738,
+     1738, 1738, 1738, 1739, 1739, 1739, 1739, 1739, 1739, 1739,
+     1739, 1739, 1739, 1739, 1739, 1740, 1740, 1740, 1740, 1740,
+     1740, 1740, 1740, 1740, 1740, 1740, 1740, 1741, 1741, 1741,
+     1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1741, 1742,
+     1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742, 1742,
+     1742, 1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743, 1743,
+     1743, 1743, 1743, 1744, 1744, 1744, 1744, 1744, 1744, 1744,
+     1744, 1744, 1744, 1744, 1744, 1745, 1745, 1745, 1745, 1745,
+     1745, 1745, 1745, 1745, 1745, 1745, 1745, 1746, 1746, 1746,
+
+     1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1746, 1747,
+     1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747, 1747,
+     1747, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748, 1748,
+     1748, 1748, 1748, 1749, 1749, 1749, 1749, 1749, 1749, 1749,
+     1749, 1749, 1749, 1749, 1749, 1750, 1750, 1750, 1750, 1750,
+     1750, 1750, 1750, 1750, 1750, 1750, 1750, 1751, 1751, 1751,
+     1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1751, 1752,
+     1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752, 1752,
+     1752, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753, 1753,
+     1753, 1753, 1753, 1754, 1754, 1754, 1754, 1754, 1754, 1754,
+
+     1754, 1754, 1754, 1754, 1754, 1755, 1755, 1755, 1755, 1755,
+     1755, 1755, 1755, 1755, 1755, 1755, 1755, 1756, 1756, 1756,
+     1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1756, 1757,
+     1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757, 1757,
+     1757, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758, 1758,
+     1758, 1758, 1758, 1759, 1759, 1759, 1759, 1759, 1759, 1759,
+     1759, 1759, 1759, 1759, 1759, 1760, 1760, 1760, 1760, 1760,
+     1760, 1760, 1760, 1760, 1760, 1760, 1760, 1761, 1761, 1761,
+     1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1761, 1762,
+     1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762, 1762,
+
+     1762, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763, 1763,
+     1763, 1763, 1763, 1764, 1764, 1764, 1764, 1764, 1764, 1764,
+     1764, 1764, 1764, 1764, 1764, 1765, 1765, 1765, 1765, 1765,
+     1765, 1765, 1765, 1765, 1765, 1765, 1765, 1766, 1766, 1766,
+     1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1766, 1767,
+     1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767, 1767,
+     1767, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768, 1768,
+     1768, 1768, 1768, 1769, 1769, 1769, 1769, 1769, 1769, 1769,
+     1769, 1769, 1769, 1769, 1769, 1770, 1770, 1770, 1770, 1770,
+     1770, 1770, 1770, 1770, 1770, 1770, 1770,  314,  313,  312,
+
+      311,  309,  308,  307,  306,  305,  304,  302,  297,  294,
+      293,  292,  291,  290,  289,  288,  286,  285,  284,  283,
+      282,  281,  280,  279,  278,  276,  275,  274,  272,  271,
+      269,  268,  267,  266,  265,  263,  261,  260,  255,  254,
+      249,  248,  247,  246,  245,  244,  243,  242,  241,  240,
+      236,  235,  232,  222,  217,  214,  213,  211,  197,  196,
+      195,  194,  193,  192,  191,  189,  187,  186,  185,  184,
+      183,  181,  180,  179,  177,  176,  175,  174,  173,  171,
+      169,  168,  167,  166,  165,  163,  162,  157,  154,  150,
+      133,  132,  131,  130,  129,  128,  127,  126,  125,  123,
+
+      112,  110,  108,  107,  105,  104,  102,  101,   98,   86,
+       83,   82,   81,   75,   68,   67,   66,   63,   62,   60,
+       59,   56,   51,   48,   47,   46,   42,   35,   26,   22,
+       21,   18,   17,    2,    1, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
+     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350
+
+    } ;
+
+static yy_state_type yy_last_accepting_state;
+static char *yy_last_accepting_cpos;
+
+/* The intent behind this definition is that it'll catch
+ * any uses of REJECT which flex missed.
+ */
+#define REJECT reject_used_but_not_detected
+static int yy_more_flag = 0;
+static int yy_more_len = 0;
+#define yymore() (yy_more_flag = 1)
+#define YY_MORE_ADJ yy_more_len
+#define YY_RESTORE_YY_MORE_OFFSET
+char *yytext;
+#line 1 "zend_language_scanner.l"
+#define INITIAL 0
+#line 2 "zend_language_scanner.l"
+
+/*
+   +----------------------------------------------------------------------+
+   | Zend Engine                                                          |
+   +----------------------------------------------------------------------+
+   | Copyright (c) 1998-2002 Zend Technologies Ltd. (http://www.zend.com) |
+   +----------------------------------------------------------------------+
+   | This source file is subject to version 2.00 of the Zend license,     |
+   | that is bundled with this package in the file LICENSE, and is        | 
+   | available at through the world-wide-web at                           |
+   | http://www.zend.com/license/2_00.txt.                                |
+   | If you did not receive a copy of the Zend license and are unable to  |
+   | obtain it through the world-wide-web, please send a note to          |
+   | license@zend.com so we can mail you a copy immediately.              |
+   +----------------------------------------------------------------------+
+   | Authors: Andi Gutmans <andi@zend.com>                                |
+   |          Zeev Suraski <zeev@zend.com>                                |
+   +----------------------------------------------------------------------+
+*/
+
+#define yyleng SCNG(yy_leng)
+#define yytext SCNG(yy_text)
+#define yytext_ptr SCNG(yy_text)
+#define yyin SCNG(yy_in)
+#define yyout SCNG(yy_out)
+#define yy_last_accepting_state SCNG(_yy_last_accepting_state)
+#define yy_last_accepting_cpos SCNG(_yy_last_accepting_cpos)
+#define yy_more_flag SCNG(_yy_more_flag)
+#define yy_more_len SCNG(_yy_more_len)
+
+#define ST_IN_SCRIPTING 1
+
+#define ST_DOUBLE_QUOTES 2
+
+#define ST_SINGLE_QUOTE 3
+
+#define ST_BACKQUOTE 4
+
+#define ST_HEREDOC 5
+
+#define ST_LOOKING_FOR_PROPERTY 6
+
+#define ST_LOOKING_FOR_VARNAME 7
+
+#define ST_COMMENT 8
+
+#define ST_ONE_LINE_COMMENT 9
+
+#define YY_STACK_USED 1
+#line 46 "zend_language_scanner.l"
+
+#include <errno.h>
+#include "zend.h"
+#include "zend_alloc.h"
+#include <zend_language_parser.h>
+#include "zend_compile.h"
+#include "zend_language_scanner.h"
+#include "zend_highlight.h"
+#include "zend_constants.h"
+#include "zend_variables.h"
+#include "zend_operators.h"
+#include "zend_strtod.h"
+
+#ifdef HAVE_STDARG_H
+# include <stdarg.h>
+#endif
+
+#ifdef HAVE_UNISTD_H
+# include <unistd.h>
+#endif
+
+#ifdef ZEND_WIN32
+#include <io.h>
+#endif
+
+#define YY_DECL int lex_scan(zval *zendlval TSRMLS_DC)
+
+#define ECHO { ZEND_WRITE( yytext, yyleng ); }
+
+#ifdef ZTS
+#  define MY_INPUT yyinput
+#else
+#  define MY_INPUT input
+#endif
+
+
+#ifndef STDIN_FILENO
+# define STDIN_FILENO 0
+#endif
+
+
+/* Globals Macros */
+#define SCNG	LANG_SCNG
+#ifdef ZTS
+ZEND_API ts_rsrc_id language_scanner_globals_id;
+#else
+ZEND_API zend_scanner_globals language_scanner_globals;
+#endif
+
+
+#define YY_FATAL_ERROR zend_fatal_scanner_error
+
+#define HANDLE_NEWLINES(s, l)													\
+do {																			\
+	char *p = (s), *boundary = p+(l);											\
+																				\
+	while (p<boundary) {														\
+		if (*p == '\n') {														\
+			CG(zend_lineno)++;													\
+		} else if ((*p == '\r') && (p+1 < boundary) && (*(p+1) != '\n')) {		\
+			CG(zend_lineno)++;													\
+		}																		\
+		p++;																	\
+	}																			\
+} while (0)
+
+#define HANDLE_NEWLINE(c) \
+{ \
+	if (c == '\n' || c == '\r') { \
+		CG(zend_lineno)++; \
+	} \
+}
+		
+
+#define ZEND_IS_OCT(c)  ((c)>='0' && (c)<='7')
+#define ZEND_IS_HEX(c)  (((c)>='0' && (c)<='9') || ((c)>='a' && (c)<='f') || ((c)>='A' && (c)<='F'))
+
+
+void zend_fatal_scanner_error(char *message)
+{
+	zend_error(E_COMPILE_ERROR, "%s", message);
+}
+
+BEGIN_EXTERN_C()
+void startup_scanner(TSRMLS_D)
+{
+	CG(heredoc) = NULL;
+	CG(heredoc_len)=0;
+	SCNG(yy_start_stack_ptr) = 0;
+	SCNG(yy_start_stack_depth) = 0;
+	SCNG(current_buffer) = NULL;
+#ifdef ZEND_MULTIBYTE
+	SCNG(code) = NULL;
+	SCNG(code_size) = 0;
+	SCNG(current_code) = NULL;
+	SCNG(current_code_size) = 0;
+	SCNG(input_filter) = NULL;
+	SCNG(output_filter) = NULL;
+	SCNG(script_encoding) = NULL;
+	SCNG(internal_encoding) = NULL;
+#endif /* ZEND_MULTIBYTE */
+}
+
+
+void shutdown_scanner(TSRMLS_D)
+{
+	if (CG(heredoc)) {
+		efree(CG(heredoc));
+		CG(heredoc_len)=0;
+	}
+	if (SCNG(yy_start_stack)) {
+		yy_flex_free(SCNG(yy_start_stack));
+		SCNG(yy_start_stack) = NULL;
+	}
+#ifdef ZEND_MULTIBYTE
+	if (SCNG(code)) {
+		efree(SCNG(code));
+		SCNG(code) = NULL;
+	}
+	if (SCNG(current_code)) {
+		efree(SCNG(current_code));
+		SCNG(current_code) = NULL;
+	}
+	SCNG(code_size) = 0;
+	SCNG(current_code_size) = 0;
+	SCNG(input_filter) = NULL;
+	SCNG(output_filter) = NULL;
+	SCNG(script_encoding) = NULL;
+	SCNG(internal_encoding) = NULL;
+#endif /* ZEND_MULTIBYTE */
+}
+END_EXTERN_C()
+
+
+ZEND_API void zend_save_lexical_state(zend_lex_state *lex_state TSRMLS_DC)
+{
+	memcpy(&lex_state->buffer_state, &YY_CURRENT_BUFFER, sizeof(YY_BUFFER_STATE));
+	lex_state->in = SCNG(yy_in);
+	lex_state->state = YYSTATE;
+	lex_state->filename = zend_get_compiled_filename(TSRMLS_C);
+	lex_state->lineno = CG(zend_lineno);
+#ifdef ZEND_MULTIBYTE
+	lex_state->code = SCNG(code);
+	lex_state->code_size = SCNG(code_size);
+	lex_state->current_code = SCNG(current_code);
+	lex_state->current_code_size = SCNG(current_code_size);
+	lex_state->input_filter = SCNG(input_filter);
+	lex_state->output_filter = SCNG(output_filter);
+	lex_state->script_encoding = SCNG(script_encoding);
+	lex_state->internal_encoding = SCNG(internal_encoding);
+#endif /* ZEND_MULTIBYTE */
+}
+
+
+ZEND_API void zend_restore_lexical_state(zend_lex_state *lex_state TSRMLS_DC)
+{
+	YY_BUFFER_STATE original_buffer_state = YY_CURRENT_BUFFER;
+
+	if (lex_state->buffer_state) {
+		yy_switch_to_buffer(lex_state->buffer_state TSRMLS_CC);
+	} else {
+		YY_CURRENT_BUFFER = NULL;
+	}
+		
+	yy_delete_buffer(original_buffer_state TSRMLS_CC);
+	SCNG(yy_in) = lex_state->in;
+	BEGIN(lex_state->state);
+	CG(zend_lineno) = lex_state->lineno;
+	zend_restore_compiled_filename(lex_state->filename TSRMLS_CC);
+#ifdef ZEND_MULTIBYTE
+	SCNG(code) = lex_state->code;
+	SCNG(code_size) = lex_state->code_size;
+	SCNG(current_code) = lex_state->current_code;
+	SCNG(current_code_size) = lex_state->current_code_size;
+	SCNG(input_filter) = lex_state->input_filter;
+	SCNG(output_filter) = lex_state->output_filter;
+	SCNG(script_encoding) = lex_state->script_encoding;
+	SCNG(internal_encoding) = lex_state->internal_encoding;
+#endif /* ZEND_MULTIBYTE */
+}
+
+
+BEGIN_EXTERN_C()
+
+
+ZEND_API void zend_file_handle_dtor(zend_file_handle *fh)
+{
+	switch (fh->type) {
+		case ZEND_HANDLE_SOCKET_FD:
+#ifdef ZEND_WIN32
+			closesocket(fh->handle.fd);
+			break;
+#endif
+		/* fall-through */ 
+		case ZEND_HANDLE_FD:
+			close(fh->handle.fd);
+			break;
+		case ZEND_HANDLE_FP:
+			fclose(fh->handle.fp);
+			break;
+		case ZEND_HANDLE_FILENAME:
+			/* We're only supposed to get here when destructing the used_files hash,
+			 * which doesn't really contain open files, but references to their names/paths
+			 */
+			break;
+	}
+	if (fh->opened_path) {
+		efree(fh->opened_path);
+		fh->opened_path = NULL;
+	}
+	if (fh->free_filename && fh->filename) {
+		efree(fh->filename);
+		fh->filename = NULL;
+	}
+}
+
+
+int zend_compare_file_handles(zend_file_handle *fh1, zend_file_handle *fh2)
+{
+	if (fh1->type != fh2->type) {
+		return 0;
+	}
+	switch (fh1->type) {
+		case ZEND_HANDLE_FP:
+			return fh1->handle.fp==fh2->handle.fp;
+			break;
+		case ZEND_HANDLE_SOCKET_FD:
+		case ZEND_HANDLE_FD:
+			return fh1->handle.fd==fh2->handle.fd;
+			break;
+	}
+	return 0;
+}
+
+
+ZEND_API void zend_destroy_file_handle(zend_file_handle *file_handle TSRMLS_DC)
+{
+	zend_llist_del_element(&CG(open_files), file_handle, (int (*)(void *, void *)) zend_compare_file_handles);
+}
+
+
+ZEND_API int open_file_for_scanning(zend_file_handle *file_handle TSRMLS_DC)
+{
+	char *file_path=NULL;
+	int do_add = 1;
+
+	switch (file_handle->type) {
+		case ZEND_HANDLE_FILENAME:
+			if (zend_open(file_handle->filename, file_handle) != SUCCESS)
+				return FAILURE;
+			break;
+	}
+
+	if (!ZEND_IS_VALID_FILE_HANDLE(file_handle))
+			return FAILURE;
+	
+	if (file_handle->type == ZEND_HANDLE_FP && file_handle->handle.fp == stdin)
+		do_add = 0;
+	else if (file_handle->type == ZEND_HANDLE_FD && file_handle->handle.fd == STDIN_FILENO)
+		do_add = 0;
+	
+	if (do_add) {
+		zend_llist_add_element(&CG(open_files), file_handle);
+	}
+	/* Reset the scanner for scanning the new file */
+	SCNG(yy_in) = file_handle;
+#ifdef ZEND_MULTIBYTE
+	if (zend_read_file(TSRMLS_C) != 0) {
+		return FAILURE;
+	}
+	
+	/* force flex to use buffer only */
+	SCNG(yy_in) = NULL;
+	SCNG(init) = 0;
+	SCNG(start) = 1;
+
+	zend_multibyte_set_filter(NULL TSRMLS_CC);
+
+	if (!SCNG(input_filter)) {
+		SCNG(current_code) = (char*)emalloc(SCNG(code_size)+1);
+		memcpy(SCNG(current_code), SCNG(code), SCNG(code_size)+1);
+		SCNG(current_code_size) = SCNG(code_size);
+	} else {
+		SCNG(input_filter)(&SCNG(current_code), &SCNG(current_code_size), SCNG(code), SCNG(code_size) TSRMLS_CC);
+		if (!SCNG(current_code) || !SCNG(current_code_size)) {
+			return FAILURE;
+		}
+	}
+	
+	/* we need two nulls so that ralloc... */
+	SCNG(current_code) = (char*)erealloc(SCNG(current_code), SCNG(current_code_size)+2);
+	*(SCNG(current_code)+SCNG(current_code_size)) = (char)NULL;
+	*(SCNG(current_code)+SCNG(current_code_size)+1) = (char)NULL;
+	yy_scan_buffer(SCNG(current_code), SCNG(current_code_size)+2 TSRMLS_CC);
+#else /* ZEND_MULTIBYTE */
+	yy_switch_to_buffer(yy_create_buffer(SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC) TSRMLS_CC);
+#endif /* ZEND_MULTIBYTE */
+	BEGIN(INITIAL);
+
+	if (file_handle->opened_path) {
+		file_path = file_handle->opened_path; 
+	} else {
+		file_path = file_handle->filename;
+	}
+
+	zend_set_compiled_filename(file_path TSRMLS_CC);
+	
+	if (CG(zend_lineno) < 0) { /* position is (n_lines * -1), position was changed by an external app */
+		CG(zend_lineno) = CG(zend_lineno) * -1;
+	} else {
+		CG(zend_lineno) = 1;
+	}
+	
+	CG(increment_lineno) = 0;
+	return SUCCESS;
+}
+END_EXTERN_C()
+
+
+ZEND_API zend_op_array *compile_file(zend_file_handle *file_handle, int type TSRMLS_DC)
+{
+	zend_lex_state original_lex_state;
+	zend_op_array *op_array = (zend_op_array *) emalloc(sizeof(zend_op_array));
+	zend_op_array *original_active_op_array = CG(active_op_array);
+	zend_op_array *retval=NULL;
+	int compiler_result;
+	zend_bool compilation_successful=0;
+	znode retval_znode;
+	zend_bool original_in_compilation = CG(in_compilation);
+
+	retval_znode.op_type = IS_CONST;
+	retval_znode.u.constant.type = IS_LONG;
+	retval_znode.u.constant.value.lval = 1;
+	retval_znode.u.constant.is_ref = 0;
+	retval_znode.u.constant.refcount = 1;
+
+	zend_save_lexical_state(&original_lex_state TSRMLS_CC);
+
+	retval = op_array; /* success oriented */
+
+	if (open_file_for_scanning(file_handle TSRMLS_CC)==FAILURE) {
+		if (type==ZEND_REQUIRE) {
+			zend_message_dispatcher(ZMSG_FAILED_REQUIRE_FOPEN, file_handle->filename);
+			zend_bailout();		
+		} else {
+			zend_message_dispatcher(ZMSG_FAILED_INCLUDE_FOPEN, file_handle->filename);
+		}
+		compilation_successful=0;
+	} else {
+		init_op_array(op_array, ZEND_USER_FUNCTION, INITIAL_OP_ARRAY_SIZE TSRMLS_CC);
+		CG(in_compilation) = 1;
+		CG(active_op_array) = op_array;
+		compiler_result = zendparse(TSRMLS_C);
+		zend_do_return(&retval_znode, 0 TSRMLS_CC);
+		CG(in_compilation) = original_in_compilation;
+		if (compiler_result==1) { /* parser error */
+			zend_bailout();
+		}
+		compilation_successful=1;
+#ifdef ZEND_MULTIBYTE
+		if (SCNG(code)) {
+			efree(SCNG(code));
+			SCNG(code) = NULL;
+		}
+		if (SCNG(current_code)) {
+			efree(SCNG(current_code));
+			SCNG(current_code) = NULL;
+		}
+#endif /* ZEND_MULTIBYTE */
+	}
+
+	if (retval) {
+		CG(active_op_array) = original_active_op_array;
+		if (compilation_successful) {
+			pass_two(op_array TSRMLS_CC);
+		} else {
+			efree(op_array);
+			retval = NULL;
+		}
+	}
+	if (compilation_successful) {
+		zend_restore_lexical_state(&original_lex_state TSRMLS_CC);
+	}
+	return retval;
+}
+
+
+zend_op_array *compile_filename(int type, zval *filename TSRMLS_DC)
+{
+	zend_file_handle file_handle = {0};
+	zval tmp;
+	zend_op_array *retval;
+	char *opened_path = NULL;
+
+	if (filename->type != IS_STRING) {
+		tmp = *filename;
+		zval_copy_ctor(&tmp);
+		convert_to_string(&tmp);
+		filename = &tmp;
+	}
+	file_handle.filename = filename->value.str.val;
+	file_handle.free_filename = 0;
+	file_handle.type = ZEND_HANDLE_FILENAME;
+	file_handle.opened_path = NULL;
+
+	retval = zend_compile_file(&file_handle, type TSRMLS_CC);
+	if (retval && ZEND_IS_VALID_FILE_HANDLE(&file_handle)) {
+		int dummy = 1;
+	
+		if (!file_handle.opened_path) {
+			file_handle.opened_path = opened_path = estrndup(filename->value.str.val, filename->value.str.len);
+		}
+		
+		zend_hash_add(&EG(included_files), file_handle.opened_path, strlen(file_handle.opened_path)+1, (void *)&dummy, sizeof(int), NULL);
+		
+		if (opened_path) {
+			efree(opened_path);
+		}
+	}
+	zend_destroy_file_handle(&file_handle TSRMLS_CC);
+
+	if (filename==&tmp) {
+		zval_dtor(&tmp);
+	}
+	return retval;
+}
+
+ZEND_API int zend_prepare_string_for_scanning(zval *str, char *filename TSRMLS_DC)
+{
+	/* enforce two trailing NULLs for flex... */
+	STR_REALLOC(str->value.str.val, str->value.str.len+2);
+
+	str->value.str.val[str->value.str.len+1]=0;
+
+	SCNG(yy_in)=NULL;
+#ifdef ZEND_MULTIBYTE
+	/* instead of zend_readfile() */
+	SCNG(code) = estrdup(str->value.str.val);
+	SCNG(code_size) = str->value.str.len;
+
+	zend_multibyte_set_filter(CG(internal_encoding) TSRMLS_CC);
+
+	if (!SCNG(input_filter)) {
+		SCNG(current_code) = (char*)emalloc(SCNG(code_size)+1);
+		memcpy(SCNG(current_code), SCNG(code), SCNG(code_size)+1);
+		SCNG(current_code_size) = SCNG(code_size);
+	} else {
+		SCNG(input_filter)(&SCNG(current_code), &SCNG(current_code_size), SCNG(code), SCNG(code_size) TSRMLS_CC);
+		if (!SCNG(current_code) || !SCNG(current_code_size)) {
+			return FAILURE;
+		}
+	}
+
+	SCNG(current_code) = (char*)erealloc(SCNG(current_code), SCNG(current_code_size)+2);
+	*(SCNG(current_code)+SCNG(current_code_size)) = (char)NULL;
+	*(SCNG(current_code)+SCNG(current_code_size)+1) = (char)NULL;
+	yy_scan_buffer(SCNG(current_code), SCNG(current_code_size)+2 TSRMLS_CC);
+#else /* ZEND_MULTIBYTE */
+	yy_scan_buffer(str->value.str.val, str->value.str.len+2 TSRMLS_CC);
+#endif /* ZEND_MULTIBYTE */
+
+	zend_set_compiled_filename(filename TSRMLS_CC);
+	CG(zend_lineno) = 1;
+	CG(increment_lineno) = 0;
+	return SUCCESS;
+}
+
+
+zend_op_array *compile_string(zval *source_string, char *filename TSRMLS_DC)
+{
+	zend_lex_state original_lex_state;
+	zend_op_array *op_array = (zend_op_array *) emalloc(sizeof(zend_op_array));
+	zend_op_array *original_active_op_array = CG(active_op_array);
+	zend_op_array *retval;
+	zval tmp;
+	int compiler_result;
+	zend_bool original_in_compilation = CG(in_compilation);
+
+	if (source_string->value.str.len==0) {
+		efree(op_array);
+		return NULL;
+	}
+
+	CG(in_compilation) = 1;
+
+	tmp = *source_string;
+	zval_copy_ctor(&tmp);
+	convert_to_string(&tmp);
+	source_string = &tmp;
+
+	zend_save_lexical_state(&original_lex_state TSRMLS_CC);
+	if (zend_prepare_string_for_scanning(source_string, filename TSRMLS_CC)==FAILURE) {
+		efree(op_array);
+		retval = NULL;
+	} else {
+		init_op_array(op_array, ZEND_EVAL_CODE, INITIAL_OP_ARRAY_SIZE TSRMLS_CC);
+		CG(active_op_array) = op_array;
+		BEGIN(ST_IN_SCRIPTING);
+		compiler_result = zendparse(TSRMLS_C);
+#ifdef ZEND_MULTIBYTE
+		if (SCNG(code)) {
+			efree(SCNG(code));
+			SCNG(code) = NULL;
+		}
+		if (SCNG(current_code)) {
+			efree(SCNG(current_code));
+			SCNG(current_code) = NULL;
+		}
+#endif /* ZEND_MULTIBYTE */
+		
+		if (compiler_result==1) {
+			CG(active_op_array) = original_active_op_array;
+			CG(unclean_shutdown)=1;
+			retval = NULL;
+		} else {
+			zend_do_return(NULL, 0 TSRMLS_CC);
+			CG(active_op_array) = original_active_op_array;
+			pass_two(op_array TSRMLS_CC);
+			retval = op_array;
+		}
+		zend_restore_lexical_state(&original_lex_state TSRMLS_CC);
+	}
+	zval_dtor(&tmp);
+	CG(in_compilation) = original_in_compilation;
+	return retval;
+}
+
+
+BEGIN_EXTERN_C()
+int highlight_file(char *filename, zend_syntax_highlighter_ini *syntax_highlighter_ini TSRMLS_DC)
+{
+	zend_lex_state original_lex_state;
+	zend_file_handle file_handle = {0};
+
+	file_handle.type = ZEND_HANDLE_FILENAME;
+	file_handle.filename = filename;
+	file_handle.free_filename = 0;
+	file_handle.opened_path = NULL;
+	zend_save_lexical_state(&original_lex_state TSRMLS_CC);
+	if (open_file_for_scanning(&file_handle TSRMLS_CC)==FAILURE) {
+		zend_message_dispatcher(ZMSG_FAILED_HIGHLIGHT_FOPEN, filename);
+		return FAILURE;
+	}
+	zend_highlight(syntax_highlighter_ini TSRMLS_CC);
+#ifdef ZEND_MULTIBYTE
+	if (SCNG(code)) {
+		efree(SCNG(code));
+		SCNG(code) = NULL;
+	}
+	if (SCNG(current_code)) {
+		efree(SCNG(current_code));
+		SCNG(current_code) = NULL;
+	}
+#endif /* ZEND_MULTIBYTE */
+	zend_destroy_file_handle(&file_handle TSRMLS_CC);
+	zend_restore_lexical_state(&original_lex_state TSRMLS_CC);
+	return SUCCESS;
+}
+
+int highlight_string(zval *str, zend_syntax_highlighter_ini *syntax_highlighter_ini, char *str_name TSRMLS_DC)
+{
+	zend_lex_state original_lex_state;
+	zval tmp = *str;
+
+	str = &tmp;
+	zval_copy_ctor(str);
+	zend_save_lexical_state(&original_lex_state TSRMLS_CC);
+	if (zend_prepare_string_for_scanning(str, str_name TSRMLS_CC)==FAILURE) {
+		return FAILURE;
+	}
+	zend_highlight(syntax_highlighter_ini TSRMLS_CC);
+#ifdef ZEND_MULTIBYTE
+	if (SCNG(code)) {
+		efree(SCNG(code));
+		SCNG(code) = NULL;
+	}
+	if (SCNG(current_code)) {
+		efree(SCNG(current_code));
+		SCNG(current_code) = NULL;
+	}
+#endif /* ZEND_MULTIBYTE */
+	zend_restore_lexical_state(&original_lex_state TSRMLS_CC);
+	zval_dtor(str);
+	return SUCCESS;
+}
+END_EXTERN_C()
+
+#ifdef ZEND_MULTIBYTE
+BEGIN_EXTERN_C()
+ZEND_API void zend_yyinput_again(zend_multibyte_filter old_input_filter, zend_encoding *old_encoding TSRMLS_DC)
+{
+	YY_BUFFER_STATE b = YY_CURRENT_BUFFER;
+	int offset, original_offset, length, free_flag;
+	char *p;
+	zend_encoding *new_encoding;
+
+	/* calculate current position */
+	offset = original_offset = yy_c_buf_p - b->yy_ch_buf;
+	if (old_input_filter && original_offset > 0) {
+		/* we need to adjust offset ? (i've gotta improve this...) */
+		new_encoding = SCNG(script_encoding);
+		SCNG(script_encoding) = old_encoding;
+		do {
+			(old_input_filter)(&p, &length, SCNG(code), offset TSRMLS_CC);
+			if (!p) {
+				SCNG(script_encoding) = new_encoding;
+				return;
+			}
+			efree(p);
+			if (length > original_offset) {
+				offset--;
+			} else if (length < original_offset) {
+				offset++;
+			}
+		} while (original_offset != length);
+		SCNG(script_encoding) = new_encoding;
+	}
+
+	/* convert and set */
+	if (!SCNG(input_filter)) {
+		length = SCNG(code_size)-offset-1;
+		p = SCNG(code)+offset+1;
+		free_flag = 0;
+	} else {
+		SCNG(input_filter)(&p, &length, SCNG(code)+offset+1, SCNG(code_size)-offset-1 TSRMLS_CC);
+		free_flag = 1;
+	}
+	if (original_offset+length+1 > (int)b->yy_buf_size) {
+		b->yy_buf_size = original_offset+length+1;
+		b->yy_ch_buf = (char*)erealloc(b->yy_ch_buf, b->yy_buf_size+2);
+		SCNG(current_code) = b->yy_ch_buf;
+		SCNG(current_code_size) = b->yy_buf_size;
+	}
+	yy_c_buf_p = b->yy_ch_buf + original_offset;
+	strncpy(yy_c_buf_p+1, p, length);
+ 	b->yy_n_chars = original_offset + length + 1;
+	SCNG(yy_n_chars) = b->yy_n_chars;
+	b->yy_ch_buf[SCNG(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
+	b->yy_ch_buf[SCNG(yy_n_chars)+1] = YY_END_OF_BUFFER_CHAR;
+
+	if (free_flag) {
+		efree(p);
+	}
+}
+
+
+ZEND_API int zend_read_file(TSRMLS_D)
+{
+	char buf[8192];
+	int n;
+
+	SCNG(code) = NULL;
+	SCNG(code_size) = 0;
+
+	for (;;) {
+		switch (SCNG(yy_in)->type) {
+			case ZEND_HANDLE_FD:
+				n = read(SCNG(yy_in)->handle.fd, buf, sizeof(buf));
+				break;
+			case ZEND_HANDLE_FP:
+				n = fread(buf, sizeof(buf[0]), sizeof(buf) / sizeof(buf[0]), SCNG(yy_in)->handle.fp);
+				break;
+			case ZEND_HANDLE_SOCKET_FD:
+				n =	recv(SCNG(yy_in)->handle.fd, buf, sizeof(buf), 0);
+		}
+
+		if (n <= 0) {
+			break;
+		}
+
+		SCNG(code_size) += n;
+		if (SCNG(code)) {
+			SCNG(code) = (char*)erealloc(SCNG(code), SCNG(code_size)+1);
+		} else {
+			SCNG(code) = (char*)emalloc(SCNG(code_size)+1);
+		}
+		memcpy(SCNG(code)+SCNG(code_size)-n, buf, n);
+	}
+
+	if (n < 0) {
+		return -1;
+	}
+
+	if (!SCNG(code)) {
+		SCNG(code) = emalloc(SCNG(code_size)+1);
+	}
+	*(SCNG(code)+SCNG(code_size)) = (char)NULL;
+
+	return 0;
+}
+
+
+/*
+ *	macros for yytext -> zval
+ */
+# define zend_copy_value(zendlval, yytext, yyleng) \
+	if (SCNG(output_filter)) { \
+		SCNG(output_filter)(&(zendlval->value.str.val), &(zendlval->value.str.len), yytext, yyleng TSRMLS_CC); \
+	} else { \
+		zendlval->value.str.val = (char *) estrndup(yytext, yyleng); \
+		zendlval->value.str.len = yyleng; \
+	}
+#else /* ZEND_MULTIBYTE */
+# define zend_copy_value(zendlval, yytext, yyleng) \
+	zendlval->value.str.val = (char *)estrndup(yytext, yyleng); \
+	zendlval->value.str.len = yyleng;
+#endif /* ZEND_MULTIBYTE */
+#line 3486 "zend_language_scanner.c"
+
+/* Macros after this point can all be overridden by user definitions in
+ * section 1.
+ */
+
+#ifndef YY_SKIP_YYWRAP
+#ifdef __cplusplus
+extern "C" int yywrap YY_PROTO(( void ));
+#else
+extern int yywrap YY_PROTO(( void ));
+#endif
+#endif
+
+#ifndef YY_NO_UNPUT
+static void yyunput YY_PROTO(( int c, char *buf_ptr TSRMLS_DC ));
+#endif
+
+#ifndef yytext_ptr
+static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
+#endif
+
+#ifdef YY_NEED_STRLEN
+static int yy_flex_strlen YY_PROTO(( yyconst char * ));
+#endif
+
+#ifndef YY_NO_INPUT
+#ifdef __cplusplus
+static int 3 YY_PROTO(( TSRMLS_D ));
+#else
+static int input YY_PROTO(( TSRMLS_D ));
+#endif
+#endif
+
+#if YY_STACK_USED
+#define yy_start_stack_ptr SCNG(yy_start_stack_ptr)
+#define yy_start_stack_depth SCNG(yy_start_stack_depth)
+#define yy_start_stack SCNG(yy_start_stack)
+/*
+static int yy_start_stack_ptr = 0;
+static int yy_start_stack_depth = 0;
+static int *yy_start_stack = 0;
+*/
+#ifndef YY_NO_PUSH_STATE
+static void yy_push_state YY_PROTO(( int new_state TSRMLS_DC ));
+#endif
+#ifndef YY_NO_POP_STATE
+static void yy_pop_state YY_PROTO(( TSRMLS_D ));
+#endif
+#ifndef YY_NO_TOP_STATE
+static int yy_top_state YY_PROTO(( TSRMLS_D ));
+#endif
+
+#else
+#define YY_NO_PUSH_STATE 1
+#define YY_NO_POP_STATE 1
+#define YY_NO_TOP_STATE 1
+#endif
+
+#ifdef YY_MALLOC_DECL
+YY_MALLOC_DECL
+#else
+#if __STDC__
+#ifndef __cplusplus
+#include <stdlib.h>
+#endif
+#else
+/* Just try to get by without declaring the routines.  This will fail
+ * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
+ * or sizeof(void*) != sizeof(int).
+ */
+#endif
+#endif
+
+/* Amount of stuff to slurp up with each read. */
+#ifndef YY_READ_BUF_SIZE
+#define YY_READ_BUF_SIZE 8192
+#endif
+
+/* Copy whatever the last rule matched to the standard output. */
+
+#ifndef ECHO
+#define ECHO
+#endif
+
+/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
+ * is returned in "result".
+ */
+
+#define YY_INPUT(buf,result,max_size) do {				\
+	result = yyin->type == ZEND_HANDLE_FD ? 			\
+			read(yyin->handle.fd, buf, max_size)		\
+			: yyin->type == ZEND_HANDLE_FP ? 			\
+			fread(buf, 1, max_size, yyin->handle.fp)	\
+			: yyin->type == ZEND_HANDLE_SOCKET_FD ?		\
+			recv(yyin->handle.fd, buf, max_size, 0)		\
+			: -1;										\
+	if (result < 0)										\
+		YY_FATAL_ERROR("input in flex scanner failed");	\
+} while (0)
+
+#ifndef YY_INPUT
+#define YY_INPUT(buf,result,max_size) \
+	if ( yy_current_buffer->yy_is_interactive ) \
+		{ \
+		int c = '*', n; \
+		for ( n = 0; n < max_size && \
+			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
+			buf[n] = (char) c; \
+		if ( c == '\n' ) \
+			buf[n++] = (char) c; \
+		if ( c == EOF && ferror( yyin ) ) \
+			YY_FATAL_ERROR( "input in flex scanner failed" ); \
+		result = n; \
+		} \
+	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
+		  && ferror( yyin ) ) \
+		YY_FATAL_ERROR( "input in flex scanner failed" );
+#endif
+
+/* No semi-colon after return; correct usage is to write "yyterminate();" -
+ * we don't want an extra ';' after the "return" because that will cause
+ * some compilers to complain about unreachable statements.
+ */
+#ifndef yyterminate
+#define yyterminate() return YY_NULL
+#endif
+
+/* Number of entries by which start-condition stack grows. */
+#ifndef YY_START_STACK_INCR
+#define YY_START_STACK_INCR 25
+#endif
+
+/* Report a fatal error. */
+#ifndef YY_FATAL_ERROR
+#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
+#endif
+
+
+/* Default declaration of generated scanner - a define so the user can
+ * easily add parameters.
+ */
+#ifndef YY_DECL
+#define YY_DECL int yylex YY_PROTO(( void ))
+#endif
+
+/* Code executed at the beginning of each rule, after yytext and yyleng
+ * have been set up.
+ */
+#ifndef YY_USER_ACTION
+#define YY_USER_ACTION
+#endif
+
+/* Code executed at the end of each rule. */
+#ifndef YY_BREAK
+#define YY_BREAK break;
+#endif
+
+#define YY_RULE_SETUP \
+	if ( yyleng > 0 ) \
+		yy_current_buffer->yy_at_bol = \
+				(yytext[yyleng - 1] == '\n'); \
+	YY_USER_ACTION
+
+YY_DECL
+	{
+	register yy_state_type yy_current_state;
+	register char *yy_cp, *yy_bp;
+	register int yy_act;
+
+#line 770 "zend_language_scanner.l"
+
+
+#line 3659 "zend_language_scanner.c"
+
+	if ( yy_init )
+		{
+		yy_init = 0;
+
+#ifdef YY_USER_INIT
+		YY_USER_INIT;
+#endif
+
+		if ( ! yy_start )
+			yy_start = 1;	/* first start state */
+
+#if 0
+		if ( ! SCNG(yy_in) )
+			SCNG(yy_in) = stdin;
+
+		if ( ! SCNG(yy_out) )
+			SCNG(yy_out) = stdout;
+#endif
+
+		if ( ! yy_current_buffer )
+			yy_current_buffer =
+				yy_create_buffer( SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC );
+
+		yy_load_buffer_state(TSRMLS_C);
+		}
+
+	while ( 1 )		/* loops until end-of-file is reached */
+		{
+		yy_more_len = 0;
+		if ( yy_more_flag )
+			{
+			yy_more_len = yy_c_buf_p - yytext_ptr;
+			yy_more_flag = 0;
+			}
+		yy_cp = yy_c_buf_p;
+
+		/* Support of yytext. */
+		*yy_cp = yy_hold_char;
+
+		/* yy_bp points to the position in yy_ch_buf of the start of
+		 * the current run.
+		 */
+		yy_bp = yy_cp;
+
+		yy_current_state = yy_start;
+		yy_current_state += YY_AT_BOL();
+yy_match:
+		do
+			{
+			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
+			if ( yy_accept[yy_current_state] )
+				{
+				yy_last_accepting_state = yy_current_state;
+				yy_last_accepting_cpos = yy_cp;
+				}
+			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+				{
+				yy_current_state = (int) yy_def[yy_current_state];
+				if ( yy_current_state >= 1351 )
+					yy_c = yy_meta[(unsigned int) yy_c];
+				}
+			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+			++yy_cp;
+			}
+		while ( yy_current_state != 1350 );
+		yy_cp = yy_last_accepting_cpos;
+		yy_current_state = yy_last_accepting_state;
+
+yy_find_action:
+		yy_act = yy_accept[yy_current_state];
+
+		YY_DO_BEFORE_ACTION;
+
+
+do_action:	/* This label is used only to access EOF actions. */
+
+
+		switch ( yy_act )
+	{ /* beginning of action switch */
+			case 0: /* must back up */
+			/* undo the effects of YY_DO_BEFORE_ACTION */
+			*yy_cp = yy_hold_char;
+			yy_cp = yy_last_accepting_cpos;
+			yy_current_state = yy_last_accepting_state;
+			goto yy_find_action;
+
+case 1:
+YY_RULE_SETUP
+#line 772 "zend_language_scanner.l"
+{
+	return T_EXIT;
+}
+	YY_BREAK
+case 2:
+YY_RULE_SETUP
+#line 776 "zend_language_scanner.l"
+{
+	return T_EXIT;
+}
+	YY_BREAK
+case 3:
+YY_RULE_SETUP
+#line 780 "zend_language_scanner.l"
+{
+	return T_OLD_FUNCTION;
+}
+	YY_BREAK
+case 4:
+YY_RULE_SETUP
+#line 784 "zend_language_scanner.l"
+{
+	return T_FUNCTION;
+}
+	YY_BREAK
+case 5:
+YY_RULE_SETUP
+#line 788 "zend_language_scanner.l"
+{
+	return T_CONST;
+}
+	YY_BREAK
+case 6:
+YY_RULE_SETUP
+#line 792 "zend_language_scanner.l"
+{
+	return T_RETURN;
+}
+	YY_BREAK
+case 7:
+YY_RULE_SETUP
+#line 796 "zend_language_scanner.l"
+{
+	return T_IF;
+}
+	YY_BREAK
+case 8:
+YY_RULE_SETUP
+#line 800 "zend_language_scanner.l"
+{
+	return T_ELSEIF;
+}
+	YY_BREAK
+case 9:
+YY_RULE_SETUP
+#line 804 "zend_language_scanner.l"
+{
+	return T_ENDIF;
+}
+	YY_BREAK
+case 10:
+YY_RULE_SETUP
+#line 808 "zend_language_scanner.l"
+{
+	return T_ELSE;
+}
+	YY_BREAK
+case 11:
+YY_RULE_SETUP
+#line 812 "zend_language_scanner.l"
+{
+	return T_WHILE;
+}
+	YY_BREAK
+case 12:
+YY_RULE_SETUP
+#line 816 "zend_language_scanner.l"
+{
+	return T_ENDWHILE;
+}
+	YY_BREAK
+case 13:
+YY_RULE_SETUP
+#line 820 "zend_language_scanner.l"
+{
+	return T_DO;
+}
+	YY_BREAK
+case 14:
+YY_RULE_SETUP
+#line 824 "zend_language_scanner.l"
+{
+	return T_FOR;
+}
+	YY_BREAK
+case 15:
+YY_RULE_SETUP
+#line 828 "zend_language_scanner.l"
+{
+	return T_ENDFOR;
+}
+	YY_BREAK
+case 16:
+YY_RULE_SETUP
+#line 832 "zend_language_scanner.l"
+{
+	return T_FOREACH;
+}
+	YY_BREAK
+case 17:
+YY_RULE_SETUP
+#line 836 "zend_language_scanner.l"
+{
+	return T_ENDFOREACH;
+}
+	YY_BREAK
+case 18:
+YY_RULE_SETUP
+#line 840 "zend_language_scanner.l"
+{
+	return T_DECLARE;
+}
+	YY_BREAK
+case 19:
+YY_RULE_SETUP
+#line 844 "zend_language_scanner.l"
+{
+	return T_ENDDECLARE;
+}
+	YY_BREAK
+case 20:
+YY_RULE_SETUP
+#line 848 "zend_language_scanner.l"
+{
+	return T_AS;
+}
+	YY_BREAK
+case 21:
+YY_RULE_SETUP
+#line 852 "zend_language_scanner.l"
+{
+	return T_SWITCH;
+}
+	YY_BREAK
+case 22:
+YY_RULE_SETUP
+#line 856 "zend_language_scanner.l"
+{
+	return T_ENDSWITCH;
+}
+	YY_BREAK
+case 23:
+YY_RULE_SETUP
+#line 860 "zend_language_scanner.l"
+{
+	return T_CASE;
+}
+	YY_BREAK
+case 24:
+YY_RULE_SETUP
+#line 864 "zend_language_scanner.l"
+{
+	return T_DEFAULT;
+}
+	YY_BREAK
+case 25:
+YY_RULE_SETUP
+#line 868 "zend_language_scanner.l"
+{
+	return T_BREAK;
+}
+	YY_BREAK
+case 26:
+YY_RULE_SETUP
+#line 872 "zend_language_scanner.l"
+{
+	return T_CONTINUE;
+}
+	YY_BREAK
+case 27:
+YY_RULE_SETUP
+#line 876 "zend_language_scanner.l"
+{
+	return T_ECHO;
+}
+	YY_BREAK
+case 28:
+YY_RULE_SETUP
+#line 880 "zend_language_scanner.l"
+{
+	return T_PRINT;
+}
+	YY_BREAK
+case 29:
+YY_RULE_SETUP
+#line 884 "zend_language_scanner.l"
+{
+	return T_CLASS;
+}
+	YY_BREAK
+case 30:
+YY_RULE_SETUP
+#line 888 "zend_language_scanner.l"
+{
+	return T_EXTENDS;
+}
+	YY_BREAK
+case 31:
+YY_RULE_SETUP
+#line 892 "zend_language_scanner.l"
+{
+	yy_push_state(ST_LOOKING_FOR_PROPERTY TSRMLS_CC);
+	return T_OBJECT_OPERATOR;
+}
+	YY_BREAK
+case 32:
+YY_RULE_SETUP
+#line 897 "zend_language_scanner.l"
+{
+	yy_pop_state(TSRMLS_C);
+ 	zend_copy_value(zendlval, yytext, yyleng);
+	zendlval->value.str.len = yyleng;
+	zendlval->type = IS_STRING;
+	return T_STRING;
+}
+	YY_BREAK
+case 33:
+YY_RULE_SETUP
+#line 905 "zend_language_scanner.l"
+{
+	yyless(0);
+	yy_pop_state(TSRMLS_C);
+}
+	YY_BREAK
+case 34:
+YY_RULE_SETUP
+#line 910 "zend_language_scanner.l"
+{
+	return T_PAAMAYIM_NEKUDOTAYIM;
+}
+	YY_BREAK
+case 35:
+YY_RULE_SETUP
+#line 914 "zend_language_scanner.l"
+{
+	return T_NEW;
+}
+	YY_BREAK
+case 36:
+YY_RULE_SETUP
+#line 918 "zend_language_scanner.l"
+{
+	return T_VAR;
+}
+	YY_BREAK
+case 37:
+YY_RULE_SETUP
+#line 922 "zend_language_scanner.l"
+{
+	return T_INT_CAST;
+}
+	YY_BREAK
+case 38:
+YY_RULE_SETUP
+#line 926 "zend_language_scanner.l"
+{
+	return T_DOUBLE_CAST;
+}
+	YY_BREAK
+case 39:
+YY_RULE_SETUP
+#line 930 "zend_language_scanner.l"
+{
+	return T_STRING_CAST;
+}
+	YY_BREAK
+case 40:
+YY_RULE_SETUP
+#line 934 "zend_language_scanner.l"
+{
+	return T_ARRAY_CAST;
+}
+	YY_BREAK
+case 41:
+YY_RULE_SETUP
+#line 938 "zend_language_scanner.l"
+{
+	return T_OBJECT_CAST;
+}
+	YY_BREAK
+case 42:
+YY_RULE_SETUP
+#line 942 "zend_language_scanner.l"
+{
+	return T_BOOL_CAST;
+}
+	YY_BREAK
+case 43:
+YY_RULE_SETUP
+#line 946 "zend_language_scanner.l"
+{
+	return T_UNSET_CAST;
+}
+	YY_BREAK
+case 44:
+YY_RULE_SETUP
+#line 950 "zend_language_scanner.l"
+{
+	return T_EVAL;
+}
+	YY_BREAK
+case 45:
+YY_RULE_SETUP
+#line 954 "zend_language_scanner.l"
+{
+	return T_INCLUDE;
+}
+	YY_BREAK
+case 46:
+YY_RULE_SETUP
+#line 958 "zend_language_scanner.l"
+{
+	return T_INCLUDE_ONCE;
+}
+	YY_BREAK
+case 47:
+YY_RULE_SETUP
+#line 962 "zend_language_scanner.l"
+{
+	return T_REQUIRE;
+}
+	YY_BREAK
+case 48:
+YY_RULE_SETUP
+#line 966 "zend_language_scanner.l"
+{
+	return T_REQUIRE_ONCE;
+}
+	YY_BREAK
+case 49:
+YY_RULE_SETUP
+#line 970 "zend_language_scanner.l"
+{
+	return T_USE;
+}
+	YY_BREAK
+case 50:
+YY_RULE_SETUP
+#line 974 "zend_language_scanner.l"
+{
+	return T_GLOBAL;
+}
+	YY_BREAK
+case 51:
+YY_RULE_SETUP
+#line 978 "zend_language_scanner.l"
+{
+	return T_ISSET;
+}
+	YY_BREAK
+case 52:
+YY_RULE_SETUP
+#line 982 "zend_language_scanner.l"
+{
+	return T_EMPTY;
+}
+	YY_BREAK
+case 53:
+YY_RULE_SETUP
+#line 986 "zend_language_scanner.l"
+{
+	return T_STATIC;
+}
+	YY_BREAK
+case 54:
+YY_RULE_SETUP
+#line 990 "zend_language_scanner.l"
+{
+	return T_UNSET;
+}
+	YY_BREAK
+case 55:
+YY_RULE_SETUP
+#line 994 "zend_language_scanner.l"
+{
+	return T_DOUBLE_ARROW;
+}
+	YY_BREAK
+case 56:
+YY_RULE_SETUP
+#line 998 "zend_language_scanner.l"
+{
+	return T_LIST;
+}
+	YY_BREAK
+case 57:
+YY_RULE_SETUP
+#line 1002 "zend_language_scanner.l"
+{
+	return T_ARRAY;
+}
+	YY_BREAK
+case 58:
+YY_RULE_SETUP
+#line 1006 "zend_language_scanner.l"
+{
+	return T_INC;
+}
+	YY_BREAK
+case 59:
+YY_RULE_SETUP
+#line 1010 "zend_language_scanner.l"
+{
+	return T_DEC;
+}
+	YY_BREAK
+case 60:
+YY_RULE_SETUP
+#line 1014 "zend_language_scanner.l"
+{
+	return T_IS_IDENTICAL;
+}
+	YY_BREAK
+case 61:
+YY_RULE_SETUP
+#line 1018 "zend_language_scanner.l"
+{
+	return T_IS_NOT_IDENTICAL;
+}
+	YY_BREAK
+case 62:
+YY_RULE_SETUP
+#line 1022 "zend_language_scanner.l"
+{
+	return T_IS_EQUAL;
+}
+	YY_BREAK
+case 63:
+YY_RULE_SETUP
+#line 1026 "zend_language_scanner.l"
+{
+	return T_IS_NOT_EQUAL;
+}
+	YY_BREAK
+case 64:
+YY_RULE_SETUP
+#line 1030 "zend_language_scanner.l"
+{
+	return T_IS_SMALLER_OR_EQUAL;
+}
+	YY_BREAK
+case 65:
+YY_RULE_SETUP
+#line 1034 "zend_language_scanner.l"
+{
+	return T_IS_GREATER_OR_EQUAL;
+}
+	YY_BREAK
+case 66:
+YY_RULE_SETUP
+#line 1038 "zend_language_scanner.l"
+{
+	return T_PLUS_EQUAL;
+}
+	YY_BREAK
+case 67:
+YY_RULE_SETUP
+#line 1042 "zend_language_scanner.l"
+{
+	return T_MINUS_EQUAL;
+}
+	YY_BREAK
+case 68:
+YY_RULE_SETUP
+#line 1046 "zend_language_scanner.l"
+{
+	return T_MUL_EQUAL;
+}
+	YY_BREAK
+case 69:
+YY_RULE_SETUP
+#line 1050 "zend_language_scanner.l"
+{
+	return T_DIV_EQUAL;
+}
+	YY_BREAK
+case 70:
+YY_RULE_SETUP
+#line 1054 "zend_language_scanner.l"
+{
+	return T_CONCAT_EQUAL;
+}
+	YY_BREAK
+case 71:
+YY_RULE_SETUP
+#line 1058 "zend_language_scanner.l"
+{
+	return T_MOD_EQUAL;
+}
+	YY_BREAK
+case 72:
+YY_RULE_SETUP
+#line 1062 "zend_language_scanner.l"
+{
+	return T_SL_EQUAL;
+}
+	YY_BREAK
+case 73:
+YY_RULE_SETUP
+#line 1066 "zend_language_scanner.l"
+{
+	return T_SR_EQUAL;
+}
+	YY_BREAK
+case 74:
+YY_RULE_SETUP
+#line 1070 "zend_language_scanner.l"
+{
+	return T_AND_EQUAL;
+}
+	YY_BREAK
+case 75:
+YY_RULE_SETUP
+#line 1074 "zend_language_scanner.l"
+{
+	return T_OR_EQUAL;
+}
+	YY_BREAK
+case 76:
+YY_RULE_SETUP
+#line 1078 "zend_language_scanner.l"
+{
+	return T_XOR_EQUAL;
+}
+	YY_BREAK
+case 77:
+YY_RULE_SETUP
+#line 1082 "zend_language_scanner.l"
+{
+	return T_BOOLEAN_OR;
+}
+	YY_BREAK
+case 78:
+YY_RULE_SETUP
+#line 1086 "zend_language_scanner.l"
+{
+	return T_BOOLEAN_AND;
+}
+	YY_BREAK
+case 79:
+YY_RULE_SETUP
+#line 1090 "zend_language_scanner.l"
+{
+	return T_LOGICAL_OR;
+}
+	YY_BREAK
+case 80:
+YY_RULE_SETUP
+#line 1094 "zend_language_scanner.l"
+{
+	return T_LOGICAL_AND;
+}
+	YY_BREAK
+case 81:
+YY_RULE_SETUP
+#line 1098 "zend_language_scanner.l"
+{
+	return T_LOGICAL_XOR;
+}
+	YY_BREAK
+case 82:
+YY_RULE_SETUP
+#line 1102 "zend_language_scanner.l"
+{
+	return T_SL;
+}
+	YY_BREAK
+case 83:
+YY_RULE_SETUP
+#line 1106 "zend_language_scanner.l"
+{
+	return T_SR;
+}
+	YY_BREAK
+case 84:
+YY_RULE_SETUP
+#line 1110 "zend_language_scanner.l"
+{
+	return yytext[0];
+}
+	YY_BREAK
+case 85:
+YY_RULE_SETUP
+#line 1115 "zend_language_scanner.l"
+{
+	yy_push_state(ST_IN_SCRIPTING TSRMLS_CC);
+	return '{';
+}
+	YY_BREAK
+case 86:
+YY_RULE_SETUP
+#line 1121 "zend_language_scanner.l"
+{
+	yy_push_state(ST_LOOKING_FOR_VARNAME TSRMLS_CC);
+	return T_DOLLAR_OPEN_CURLY_BRACES;
+}
+	YY_BREAK
+case 87:
+YY_RULE_SETUP
+#line 1127 "zend_language_scanner.l"
+{
+	/* This is a temporary fix which is dependant on flex and it's implementation */
+	if (yy_start_stack_ptr) {
+		yy_pop_state(TSRMLS_C);
+	}
+	return '}';
+}
+	YY_BREAK
+case 88:
+YY_RULE_SETUP
+#line 1136 "zend_language_scanner.l"
+{
+ 	zend_copy_value(zendlval, yytext, yyleng);
+	zendlval->type = IS_STRING;
+	yy_pop_state(TSRMLS_C);
+	yy_push_state(ST_IN_SCRIPTING TSRMLS_CC);
+	return T_STRING_VARNAME;
+}
+	YY_BREAK
+case 89:
+YY_RULE_SETUP
+#line 1145 "zend_language_scanner.l"
+{
+	yyless(0);
+	yy_pop_state(TSRMLS_C);
+	yy_push_state(ST_IN_SCRIPTING TSRMLS_CC);
+}
+	YY_BREAK
+case 90:
+YY_RULE_SETUP
+#line 1152 "zend_language_scanner.l"
+{
+	errno = 0;
+	zendlval->value.lval = strtol(yytext, NULL, 0);
+	if (errno == ERANGE) { /* overflow */
+		zendlval->value.dval = zend_strtod(yytext, NULL);
+		zendlval->type = IS_DOUBLE;
+		return T_DNUMBER;
+	} else {
+		zendlval->type = IS_LONG;
+		return T_LNUMBER;
+	}
+}
+	YY_BREAK
+case 91:
+YY_RULE_SETUP
+#line 1165 "zend_language_scanner.l"
+{
+	errno = 0;
+	zendlval->value.lval = strtoul(yytext, NULL, 16);
+	if (errno == ERANGE) { /* overflow */
+		/* not trying strtod - it returns trash on 0x-es */
+		zendlval->value.lval = LONG_MAX; /* maximal long */
+		zend_error(E_NOTICE,"Hex number is too big: %s", yytext);
+	} else {
+		if (zendlval->value.lval < 0) {
+			/* maintain consistency with the old way */
+			zendlval->value.dval = (unsigned long) zendlval->value.lval;
+			zendlval->type = IS_DOUBLE;
+			return T_DNUMBER;
+		}
+		zendlval->type = IS_LONG;
+	}
+	zendlval->type = IS_LONG;
+	return T_LNUMBER;
+}
+	YY_BREAK
+case 92:
+YY_RULE_SETUP
+#line 1185 "zend_language_scanner.l"
+{ /* treat numbers (almost) as strings inside encapsulated strings */
+	zendlval->value.str.val = (char *)estrndup(yytext, yyleng);
+	zendlval->value.str.len = yyleng;
+	zendlval->type = IS_STRING;
+	return T_NUM_STRING;
+}
+	YY_BREAK
+case 93:
+YY_RULE_SETUP
+#line 1192 "zend_language_scanner.l"
+{
+	zendlval->value.dval = zend_strtod(yytext, NULL);
+	zendlval->type = IS_DOUBLE;
+	return T_DNUMBER;
+}
+	YY_BREAK
+case 94:
+YY_RULE_SETUP
+#line 1198 "zend_language_scanner.l"
+{
+	char *class_name = NULL;
+
+	if (CG(active_class_entry)) {
+		class_name = CG(active_class_entry)->name;
+	}
+	
+	if (!class_name) {
+		class_name = "";
+	}
+	zendlval->value.str.len = strlen(class_name);
+	zendlval->value.str.val = estrndup(class_name, zendlval->value.str.len);
+	zendlval->type = IS_STRING;
+	return T_CLASS_C;
+}
+	YY_BREAK
+case 95:
+YY_RULE_SETUP
+#line 1214 "zend_language_scanner.l"
+{
+	char *func_name = NULL;
+	
+	if (CG(active_op_array)) {
+		func_name = CG(active_op_array)->function_name;
+	}
+
+	if (!func_name) {
+		func_name = "";
+	}
+	zendlval->value.str.len = strlen(func_name);
+	zendlval->value.str.val = estrndup(func_name, zendlval->value.str.len);
+	zendlval->type = IS_STRING;
+	return T_FUNC_C;
+}
+	YY_BREAK
+case 96:
+YY_RULE_SETUP
+#line 1230 "zend_language_scanner.l"
+{
+	zendlval->value.lval = CG(zend_lineno);
+	zendlval->type = IS_LONG;
+	return T_LINE;
+}
+	YY_BREAK
+case 97:
+YY_RULE_SETUP
+#line 1236 "zend_language_scanner.l"
+{
+	char *filename = zend_get_compiled_filename(TSRMLS_C);
+	
+	if (!filename) {
+		filename = "";
+	}
+	zendlval->value.str.len = strlen(filename);
+	zendlval->value.str.val = estrndup(filename, zendlval->value.str.len);
+	zendlval->type = IS_STRING;
+	return T_FILE;
+}
+	YY_BREAK
+case 98:
+YY_RULE_SETUP
+#line 1249 "zend_language_scanner.l"
+{
+#ifdef ZEND_MULTIBYTE
+	if (SCNG(output_filter)) {
+		int readsize;
+		readsize = SCNG(output_filter)(&(zendlval->value.str.val), &(zendlval->value.str.len), yytext, yyleng TSRMLS_CC);
+		if (readsize < yyleng) {
+			yyless(readsize);
+		}
+	} else {
+		zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
+		zendlval->value.str.len = yyleng;
+	}
+#else /* ZEND_MULTIBYTE */
+	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
+	zendlval->value.str.len = yyleng;
+#endif /* ZEND_MULTIBYTE */
+	zendlval->type = IS_STRING;
+	HANDLE_NEWLINES(yytext, yyleng);
+	return T_INLINE_HTML;
+}
+	YY_BREAK
+case 99:
+YY_RULE_SETUP
+#line 1270 "zend_language_scanner.l"
+{
+	HANDLE_NEWLINES(yytext, yyleng);
+	if (CG(short_tags) || yyleng>2) { /* yyleng>2 means it's not <? but <script> */
+		zendlval->value.str.val = yytext; /* no copying - intentional */
+		zendlval->value.str.len = yyleng;
+		zendlval->type = IS_STRING;
+		BEGIN(ST_IN_SCRIPTING);
+		return T_OPEN_TAG;
+	} else {
+		zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
+		zendlval->value.str.len = yyleng;
+		zendlval->type = IS_STRING;
+		return T_INLINE_HTML;
+	}
+}
+	YY_BREAK
+case 100:
+YY_RULE_SETUP
+#line 1287 "zend_language_scanner.l"
+{
+	if ((yytext[1]=='%' && CG(asp_tags)) || (yytext[1]=='?' && CG(short_tags))) {
+		zendlval->value.str.val = yytext; /* no copying - intentional */
+		zendlval->value.str.len = yyleng;
+		zendlval->type = IS_STRING;
+		BEGIN(ST_IN_SCRIPTING);
+		return T_OPEN_TAG_WITH_ECHO;
+	} else {
+		zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
+		zendlval->value.str.len = yyleng;
+		zendlval->type = IS_STRING;
+		return T_INLINE_HTML;
+	}
+}
+	YY_BREAK
+case 101:
+YY_RULE_SETUP
+#line 1303 "zend_language_scanner.l"
+{
+	if (CG(asp_tags)) {
+		zendlval->value.str.val = yytext; /* no copying - intentional */
+		zendlval->value.str.len = yyleng;
+		zendlval->type = IS_STRING;
+		BEGIN(ST_IN_SCRIPTING);
+		return T_OPEN_TAG;
+	} else {
+		zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
+		zendlval->value.str.len = yyleng;
+		zendlval->type = IS_STRING;
+		return T_INLINE_HTML;
+	}
+}
+	YY_BREAK
+case 102:
+YY_RULE_SETUP
+#line 1319 "zend_language_scanner.l"
+{
+	zendlval->value.str.val = yytext; /* no copying - intentional */
+	zendlval->value.str.len = yyleng;
+	zendlval->type = IS_STRING;
+	HANDLE_NEWLINE(yytext[yyleng-1]);
+	BEGIN(ST_IN_SCRIPTING);
+	return T_OPEN_TAG;
+}
+	YY_BREAK
+case 103:
+YY_RULE_SETUP
+#line 1329 "zend_language_scanner.l"
+{
+	zend_error(E_WARNING, "&lt;?php_track_vars?&gt; is no longer supported - please use the track_vars INI directive instead");
+	HANDLE_NEWLINE(yytext[yyleng-1]);
+	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
+	zendlval->value.str.len = yyleng;
+	zendlval->type = IS_STRING;
+	return T_INLINE_HTML;
+}
+	YY_BREAK
+case 104:
+YY_RULE_SETUP
+#line 1338 "zend_language_scanner.l"
+{
+ 	zend_copy_value(zendlval, (yytext+1), (yyleng-1));
+	zendlval->type = IS_STRING;
+	return T_VARIABLE;
+}
+	YY_BREAK
+case 105:
+YY_RULE_SETUP
+#line 1345 "zend_language_scanner.l"
+{
+ 	zend_copy_value(zendlval, yytext, yyleng);
+	zendlval->type = IS_STRING;
+	return T_STRING;
+}
+	YY_BREAK
+case 106:
+YY_RULE_SETUP
+#line 1352 "zend_language_scanner.l"
+{
+ 	zend_copy_value(zendlval, yytext, yyleng);
+	zendlval->type = IS_STRING;
+	return T_STRING;
+}
+	YY_BREAK
+case 107:
+YY_RULE_SETUP
+#line 1359 "zend_language_scanner.l"
+{
+	zendlval->value.str.val = yytext; /* no copying - intentional */
+	zendlval->value.str.len = yyleng;
+	zendlval->type = IS_STRING;
+	HANDLE_NEWLINES(yytext, yyleng);
+	return T_WHITESPACE;
+}
+	YY_BREAK
+case 108:
+YY_RULE_SETUP
+#line 1368 "zend_language_scanner.l"
+{
+	BEGIN(ST_ONE_LINE_COMMENT);
+	yymore();
+}
+	YY_BREAK
+case 109:
+YY_RULE_SETUP
+#line 1373 "zend_language_scanner.l"
+{
+	yymore();
+}
+	YY_BREAK
+case 110:
+YY_RULE_SETUP
+#line 1377 "zend_language_scanner.l"
+{
+	yymore();
+}
+	YY_BREAK
+case 111:
+YY_RULE_SETUP
+#line 1381 "zend_language_scanner.l"
+{
+	zendlval->value.str.val = yytext; /* no copying - intentional */
+	zendlval->value.str.len = yyleng;
+	zendlval->type = IS_STRING;
+	BEGIN(ST_IN_SCRIPTING);
+	CG(zend_lineno)++;
+	return T_COMMENT;
+}
+	YY_BREAK
+case 112:
+YY_RULE_SETUP
+#line 1390 "zend_language_scanner.l"
+{
+    if (CG(asp_tags) || yytext[yyleng-2] != '%') { /* asp comment? */
+		zendlval->value.str.val = yytext; /* no copying - intentional */
+		zendlval->value.str.len = yyleng;
+		zendlval->type = IS_STRING;
+		yyless(yyleng-2);
+		BEGIN(ST_IN_SCRIPTING);
+		return T_COMMENT;
+	} else {
+		yymore();
+	}
+}
+	YY_BREAK
+case 113:
+YY_RULE_SETUP
+#line 1403 "zend_language_scanner.l"
+{
+	CG(comment_start_line) = CG(zend_lineno);
+	BEGIN(ST_COMMENT);
+	yymore();
+}
+	YY_BREAK
+case 114:
+YY_RULE_SETUP
+#line 1410 "zend_language_scanner.l"
+{
+	yymore();
+}
+	YY_BREAK
+case 115:
+YY_RULE_SETUP
+#line 1414 "zend_language_scanner.l"
+{
+	HANDLE_NEWLINES(yytext, yyleng);
+	BEGIN(ST_IN_SCRIPTING);
+	return T_COMMENT;
+}
+	YY_BREAK
+case 116:
+YY_RULE_SETUP
+#line 1420 "zend_language_scanner.l"
+{
+	yymore();
+}
+	YY_BREAK
+case 117:
+YY_RULE_SETUP
+#line 1424 "zend_language_scanner.l"
+{
+	zendlval->value.str.val = yytext; /* no copying - intentional */
+	zendlval->value.str.len = yyleng;
+	zendlval->type = IS_STRING;
+	BEGIN(INITIAL);
+	return T_CLOSE_TAG;  /* implicit ';' at php-end tag */
+}
+	YY_BREAK
+case 118:
+YY_RULE_SETUP
+#line 1433 "zend_language_scanner.l"
+{
+	if (CG(asp_tags)) {
+		BEGIN(INITIAL);
+		zendlval->value.str.len = yyleng;
+		zendlval->type = IS_STRING;
+		zendlval->value.str.val = yytext; /* no copying - intentional */
+		return T_CLOSE_TAG;  /* implicit ';' at php-end tag */
+	} else {
+		yyless(1);
+		return yytext[0];
+	}
+}
+	YY_BREAK
+case 119:
+YY_RULE_SETUP
+#line 1447 "zend_language_scanner.l"
+{
+	register char *s, *t;
+	char *end;
+	
+	zendlval->value.str.val = estrndup(yytext+1, yyleng-2);
+	zendlval->value.str.len = yyleng-2;
+	zendlval->type = IS_STRING;
+	HANDLE_NEWLINES(yytext, yyleng);
+	
+	/* convert escape sequences */
+	s = t = zendlval->value.str.val;
+	end = s+zendlval->value.str.len;
+	while (s<end) {
+		if (*s=='\\') {
+			s++;
+			if (s>=end) {
+				continue;
+			}
+			switch(*s) {
+				case 'n':
+					*t++ = '\n';
+					zendlval->value.str.len--;
+					break;
+				case 'r':
+					*t++ = '\r';
+					zendlval->value.str.len--;
+					break;
+				case 't':
+					*t++ = '\t';
+					zendlval->value.str.len--;
+					break;
+				case '\\':
+				case '$':
+				case '"':
+					*t++ = *s;
+					zendlval->value.str.len--;
+					break;
+				default:
+					/* check for an octal */
+					if (ZEND_IS_OCT(*s)) {
+						char octal_buf[4] = { 0, 0, 0, 0 };
+
+						octal_buf[0] = *s;
+						zendlval->value.str.len--;
+						if ((s+1)<end && ZEND_IS_OCT(*(s+1))) {
+							octal_buf[1] = *(++s);
+							zendlval->value.str.len--;
+							if ((s+1)<end && ZEND_IS_OCT(*(s+1))) {
+								octal_buf[2] = *(++s);
+								zendlval->value.str.len--;
+							}
+						}
+						*t++ = (char) strtol(octal_buf, NULL, 8);
+					} else if (*s=='x' && (s+1)<end && ZEND_IS_HEX(*(s+1))) {
+						char hex_buf[3] = { 0, 0, 0};
+
+						zendlval->value.str.len--; /* for the 'x' */
+
+						hex_buf[0] = *(++s);
+						zendlval->value.str.len--;
+						if ((s+1)<end && ZEND_IS_HEX(*(s+1))) {
+							hex_buf[1] = *(++s);
+							zendlval->value.str.len--;
+						}
+						*t++ = (char) strtol(hex_buf, NULL, 16);
+					} else {
+						*t++ = '\\';
+						*t++ = *s;
+					}
+					break;
+			}
+			s++;
+		} else {
+			*t++ = *s++;
+		}
+	}
+	*t = 0;
+
+#ifdef ZEND_MULTIBYTE
+	if (SCNG(output_filter)) {
+		s = zendlval->value.str.val;
+		SCNG(output_filter)(&(zendlval->value.str.val), &(zendlval->value.str.len), s, zendlval->value.str.len TSRMLS_CC);
+		efree(s);
+	}
+#endif /* ZEND_MULTIBYTE */
+
+	return T_CONSTANT_ENCAPSED_STRING;
+}
+	YY_BREAK
+case 120:
+YY_RULE_SETUP
+#line 1537 "zend_language_scanner.l"
+{
+	register char *s, *t;
+	char *end;
+	
+	zendlval->value.str.val = estrndup(yytext+1, yyleng-2);
+	zendlval->value.str.len = yyleng-2;
+	zendlval->type = IS_STRING;
+	HANDLE_NEWLINES(yytext, yyleng);
+	
+	/* convert escape sequences */
+	s = t = zendlval->value.str.val;
+	end = s+zendlval->value.str.len;
+	while (s<end) {
+		if (*s=='\\') {
+			s++;
+			if (s>=end) {
+				continue;
+			}
+			switch(*s) {
+				case '\\':
+				case '\'':
+					*t++ = *s;
+					zendlval->value.str.len--;
+					break;
+				default:
+					*t++ = '\\';
+					*t++ = *s;
+					break;
+			}
+			s++;
+		} else {
+			*t++ = *s++;
+		}
+	}
+	*t = 0;
+
+#ifdef ZEND_MULTIBYTE
+	if (SCNG(output_filter)) {
+		s = zendlval->value.str.val;
+		SCNG(output_filter)(&(zendlval->value.str.val), &(zendlval->value.str.len), s, zendlval->value.str.len TSRMLS_CC);
+		efree(s);
+	}
+#endif /* ZEND_MULTIBYTE */
+
+	return T_CONSTANT_ENCAPSED_STRING;
+}
+	YY_BREAK
+case 121:
+YY_RULE_SETUP
+#line 1585 "zend_language_scanner.l"
+{
+	BEGIN(ST_DOUBLE_QUOTES);
+	return '\"';
+}
+	YY_BREAK
+case 122:
+YY_RULE_SETUP
+#line 1591 "zend_language_scanner.l"
+{
+	char *s;
+	CG(zend_lineno)++;
+	CG(heredoc_len) = yyleng-3-1-(yytext[yyleng-2]=='\r'?1:0);
+	s = yytext+3;
+	while ((*s == ' ') || (*s == '\t')) {
+		s++;
+		CG(heredoc_len)--;
+	}
+	CG(heredoc) = estrndup(s, CG(heredoc_len));
+	BEGIN(ST_HEREDOC);
+	return T_START_HEREDOC;
+}
+	YY_BREAK
+case 123:
+YY_RULE_SETUP
+#line 1606 "zend_language_scanner.l"
+{
+	BEGIN(ST_BACKQUOTE);
+	return '`';
+}
+	YY_BREAK
+case 124:
+YY_RULE_SETUP
+#line 1612 "zend_language_scanner.l"
+{
+	BEGIN(ST_SINGLE_QUOTE);
+	return '\'';
+}
+	YY_BREAK
+case 125:
+YY_RULE_SETUP
+#line 1618 "zend_language_scanner.l"
+{
+	int label_len;
+	unsigned char unput_semicolon;
+
+	CG(zend_lineno)++;
+	if (yytext[yyleng-2]=='\r') {
+		label_len = yyleng-2;
+	} else {
+		label_len = yyleng-1;
+	}
+	
+	if (yytext[label_len-1]==';') {
+		label_len--;
+		unput_semicolon=1;
+	} else{
+		unput_semicolon=0;
+	}
+
+	if (label_len==CG(heredoc_len) && !memcmp(yytext, CG(heredoc), label_len)) {
+		zendlval->value.str.val = estrndup(yytext, label_len); /* unput destroys yytext */
+		zendlval->value.str.len = label_len;
+		if (unput_semicolon) {
+			unput(';');
+		}
+		efree(CG(heredoc));
+		CG(heredoc)=NULL;
+		CG(heredoc_len)=0;
+		BEGIN(ST_IN_SCRIPTING);
+		return T_END_HEREDOC;
+	} else {
+ 		zend_copy_value(zendlval, yytext, yyleng);
+		zendlval->type = IS_STRING;
+		return T_STRING;
+	}
+}
+	YY_BREAK
+case 126:
+YY_RULE_SETUP
+#line 1655 "zend_language_scanner.l"
+{
+	HANDLE_NEWLINES(yytext, yyleng);
+	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
+	zendlval->value.str.len = yyleng;
+	zendlval->type = IS_STRING;
+	return T_ENCAPSED_AND_WHITESPACE;
+}
+	YY_BREAK
+case 127:
+YY_RULE_SETUP
+#line 1663 "zend_language_scanner.l"
+{
+	HANDLE_NEWLINES(yytext, yyleng);
+ 	zend_copy_value(zendlval, yytext, yyleng);
+	zendlval->type = IS_STRING;
+	return T_ENCAPSED_AND_WHITESPACE;
+}
+	YY_BREAK
+case 128:
+YY_RULE_SETUP
+#line 1671 "zend_language_scanner.l"
+{
+ 	zend_copy_value(zendlval, yytext, yyleng);
+	zendlval->type = IS_STRING;
+	return T_ENCAPSED_AND_WHITESPACE;
+}
+	YY_BREAK
+case 129:
+YY_RULE_SETUP
+#line 1678 "zend_language_scanner.l"
+{
+ 	zend_copy_value(zendlval, yytext, yyleng);
+	zendlval->type = IS_STRING;
+	return T_ENCAPSED_AND_WHITESPACE;
+}
+	YY_BREAK
+case 130:
+YY_RULE_SETUP
+#line 1685 "zend_language_scanner.l"
+{
+	zendlval->value.lval = (long) yytext[0];
+	if (yyleng == 2) {
+		yyless(1);
+	}
+	return T_CHARACTER;	
+}
+	YY_BREAK
+case 131:
+YY_RULE_SETUP
+#line 1694 "zend_language_scanner.l"
+{
+	zendlval->value.lval = (long) yytext[0];
+	return yytext[0];
+}
+	YY_BREAK
+case 132:
+YY_RULE_SETUP
+#line 1699 "zend_language_scanner.l"
+{
+	zendlval->value.lval = (long) yytext[0];
+	yy_push_state(ST_IN_SCRIPTING TSRMLS_CC);
+	yyless(1);
+	return T_CURLY_OPEN;
+}
+	YY_BREAK
+case 133:
+YY_RULE_SETUP
+#line 1707 "zend_language_scanner.l"
+{
+	zendlval->value.lval = (long) '\'';
+	return T_CHARACTER;
+}
+	YY_BREAK
+case 134:
+YY_RULE_SETUP
+#line 1712 "zend_language_scanner.l"
+{
+	zendlval->value.lval = (long)'\\';
+	return T_CHARACTER;
+}
+	YY_BREAK
+case 135:
+YY_RULE_SETUP
+#line 1717 "zend_language_scanner.l"
+{
+	zendlval->value.lval = (long) '"';
+	return T_CHARACTER;
+}
+	YY_BREAK
+case 136:
+YY_RULE_SETUP
+#line 1722 "zend_language_scanner.l"
+{
+	zendlval->value.lval = (long) '`';
+	return T_CHARACTER;
+}
+	YY_BREAK
+case 137:
+YY_RULE_SETUP
+#line 1727 "zend_language_scanner.l"
+{
+	zendlval->value.lval = strtol(yytext+1, NULL, 8);
+	return T_CHARACTER;
+}
+	YY_BREAK
+case 138:
+YY_RULE_SETUP
+#line 1732 "zend_language_scanner.l"
+{
+	zendlval->value.lval = strtol (yytext+2, NULL, 16);
+	return T_CHARACTER;
+}
+	YY_BREAK
+case 139:
+YY_RULE_SETUP
+#line 1737 "zend_language_scanner.l"
+{
+	switch (yytext[1]) {
+		case 'n':
+			zendlval->value.lval = (long) '\n';
+			break;
+		case 't':
+			zendlval->value.lval = (long) '\t';
+			break;
+		case 'r':
+			zendlval->value.lval = (long) '\r';
+			break;
+		case '\\':
+			zendlval->value.lval = (long) '\\';
+			break;
+		case '$':
+			zendlval->value.lval = (long) yytext[1];
+			break;
+		case '{':
+			zendlval->value.lval = (long) yytext[1];
+			break;
+		default:
+			zendlval->value.str.val = estrndup(yytext, yyleng);
+			zendlval->value.str.len = yyleng;
+			zendlval->type = IS_STRING;
+			return T_BAD_CHARACTER;
+			break;
+	}
+	return T_CHARACTER;
+}
+	YY_BREAK
+case 140:
+YY_RULE_SETUP
+#line 1768 "zend_language_scanner.l"
+{
+	zendlval->value.str.val = (char *) estrndup(yytext, yyleng);
+	zendlval->value.str.len = yyleng;
+	zendlval->type = IS_STRING;
+	return T_ENCAPSED_AND_WHITESPACE;
+}
+	YY_BREAK
+case 141:
+YY_RULE_SETUP
+#line 1776 "zend_language_scanner.l"
+{
+	BEGIN(ST_IN_SCRIPTING);
+	return '\"';
+}
+	YY_BREAK
+case 142:
+YY_RULE_SETUP
+#line 1782 "zend_language_scanner.l"
+{
+	BEGIN(ST_IN_SCRIPTING);
+	return '`';
+}
+	YY_BREAK
+case 143:
+YY_RULE_SETUP
+#line 1788 "zend_language_scanner.l"
+{
+	BEGIN(ST_IN_SCRIPTING);
+	return '\'';
+}
+	YY_BREAK
+case YY_STATE_EOF(ST_DOUBLE_QUOTES):
+case YY_STATE_EOF(ST_BACKQUOTE):
+case YY_STATE_EOF(INITIAL):
+case YY_STATE_EOF(ST_IN_SCRIPTING):
+case YY_STATE_EOF(ST_LOOKING_FOR_PROPERTY):
+#line 1794 "zend_language_scanner.l"
+{
+	return 0;
+}
+	YY_BREAK
+case YY_STATE_EOF(ST_COMMENT):
+#line 1798 "zend_language_scanner.l"
+{
+	zend_error(E_COMPILE_WARNING,"Unterminated comment starting line %d", CG(comment_start_line));
+	return 0;
+}
+	YY_BREAK
+case 144:
+YY_RULE_SETUP
+#line 1805 "zend_language_scanner.l"
+{
+	zend_error(E_COMPILE_WARNING,"Unexpected character in input:  '%c' (ASCII=%d) state=%d", yytext[0], yytext[0], YYSTATE);
+}
+	YY_BREAK
+case 145:
+YY_RULE_SETUP
+#line 1808 "zend_language_scanner.l"
+ECHO;
+	YY_BREAK
+#line 5192 "zend_language_scanner.c"
+case YY_STATE_EOF(ST_SINGLE_QUOTE):
+case YY_STATE_EOF(ST_HEREDOC):
+case YY_STATE_EOF(ST_LOOKING_FOR_VARNAME):
+case YY_STATE_EOF(ST_ONE_LINE_COMMENT):
+	yyterminate();
+
+	case YY_END_OF_BUFFER:
+		{
+		/* Amount of text matched not including the EOB char. */
+		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;
+
+		/* Undo the effects of YY_DO_BEFORE_ACTION. */
+		*yy_cp = yy_hold_char;
+
+		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
+			{
+			/* We're scanning a new file or input source.  It's
+			 * possible that this happened because the user
+			 * just pointed yyin at a new source and called
+			 * yylex().  If so, then we have to assure
+			 * consistency between yy_current_buffer and our
+			 * globals.  Here is the right place to do so, because
+			 * this is the first action (other than possibly a
+			 * back-up) that will match for the new input source.
+			 */
+			SCNG(yy_n_chars) = yy_current_buffer->yy_n_chars;
+			yy_current_buffer->yy_input_file = SCNG(yy_in);
+			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
+			}
+
+		/* Note that here we test for yy_c_buf_p "<=" to the position
+		 * of the first EOB in the buffer, since yy_c_buf_p will
+		 * already have been incremented past the NUL character
+		 * (since all states make transitions on EOB to the
+		 * end-of-buffer state).  Contrast this with the test
+		 * in input().
+		 */
+		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars)] )
+			{ /* This was really a NUL. */
+			yy_state_type yy_next_state;
+
+			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;
+
+			yy_current_state = yy_get_previous_state(TSRMLS_C);
+
+			/* Okay, we're now positioned to make the NUL
+			 * transition.  We couldn't have
+			 * yy_get_previous_state() go ahead and do it
+			 * for us because it doesn't know how to deal
+			 * with the possibility of jamming (and we don't
+			 * want to build jamming into it because then it
+			 * will run more slowly).
+			 */
+
+			yy_next_state = yy_try_NUL_trans( yy_current_state TSRMLS_CC );
+
+			yy_bp = yytext_ptr + YY_MORE_ADJ;
+
+			if ( yy_next_state )
+				{
+				/* Consume the NUL. */
+				yy_cp = ++yy_c_buf_p;
+				yy_current_state = yy_next_state;
+				goto yy_match;
+				}
+
+			else
+				{
+				yy_cp = yy_last_accepting_cpos;
+				yy_current_state = yy_last_accepting_state;
+				goto yy_find_action;
+				}
+			}
+
+		else switch ( yy_get_next_buffer(TSRMLS_C) )
+			{
+			case EOB_ACT_END_OF_FILE:
+				{
+				yy_did_buffer_switch_on_eof = 0;
+
+				if ( yywrap() )
+					{
+					/* Note: because we've taken care in
+					 * yy_get_next_buffer() to have set up
+					 * yytext, we can now set up
+					 * yy_c_buf_p so that if some total
+					 * hoser (like flex itself) wants to
+					 * call the scanner after we return the
+					 * YY_NULL, it'll still work - another
+					 * YY_NULL will get returned.
+					 */
+					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
+
+					yy_act = YY_STATE_EOF(YY_START);
+					goto do_action;
+					}
+
+				else
+					{
+					if ( ! yy_did_buffer_switch_on_eof )
+						YY_NEW_FILE;
+					}
+				break;
+				}
+
+			case EOB_ACT_CONTINUE_SCAN:
+				yy_c_buf_p =
+					yytext_ptr + yy_amount_of_matched_text;
+
+				yy_current_state = yy_get_previous_state(TSRMLS_C);
+
+				yy_cp = yy_c_buf_p;
+				yy_bp = yytext_ptr + YY_MORE_ADJ;
+				goto yy_match;
+
+			case EOB_ACT_LAST_MATCH:
+				yy_c_buf_p =
+				&yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars)];
+
+				yy_current_state = yy_get_previous_state(TSRMLS_C);
+
+				yy_cp = yy_c_buf_p;
+				yy_bp = yytext_ptr + YY_MORE_ADJ;
+				goto yy_find_action;
+			}
+		break;
+		}
+
+	default:
+		YY_FATAL_ERROR(
+			"fatal flex scanner internal error--no action found" );
+	} /* end of action switch */
+		} /* end of scanning one token */
+	} /* end of yylex */
+
+
+/* yy_get_next_buffer - try to read in a new buffer
+ *
+ * Returns a code representing an action:
+ *	EOB_ACT_LAST_MATCH -
+ *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
+ *	EOB_ACT_END_OF_FILE - end of file
+ */
+
+static int yy_get_next_buffer(TSRMLS_D)
+	{
+	register char *dest = yy_current_buffer->yy_ch_buf;
+	register char *source = yytext_ptr;
+	register int number_to_move, i;
+	int ret_val;
+
+	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars) + 1] )
+		YY_FATAL_ERROR(
+		"fatal flex scanner internal error--end of buffer missed" );
+
+	if ( yy_current_buffer->yy_fill_buffer == 0 )
+		{ /* Don't try to fill the buffer, so this is an EOF. */
+		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
+			{
+			/* We matched a single character, the EOB, so
+			 * treat this as a final EOF.
+			 */
+			return EOB_ACT_END_OF_FILE;
+			}
+
+		else
+			{
+			/* We matched some text prior to the EOB, first
+			 * process it.
+			 */
+			return EOB_ACT_LAST_MATCH;
+			}
+		}
+
+	/* Try to read more data. */
+
+	/* First move last chars to start of buffer. */
+	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;
+
+	for ( i = 0; i < number_to_move; ++i )
+		*(dest++) = *(source++);
+
+	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
+		/* don't do the read, it's not guaranteed to return an EOF,
+		 * just force an EOF
+		 */
+		yy_current_buffer->yy_n_chars = SCNG(yy_n_chars) = 0;
+
+	else
+		{
+		int num_to_read =
+			yy_current_buffer->yy_buf_size - number_to_move - 1;
+
+		while ( num_to_read <= 0 )
+			{ /* Not enough room in the buffer - grow it. */
+#ifdef YY_USES_REJECT
+			YY_FATAL_ERROR(
+"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
+#else
+
+			/* just a shorter name for the current buffer */
+			YY_BUFFER_STATE b = yy_current_buffer;
+
+			int yy_c_buf_p_offset =
+				(int) (yy_c_buf_p - b->yy_ch_buf);
+
+			if ( b->yy_is_our_buffer )
+				{
+				int new_size = b->yy_buf_size * 2;
+
+				if ( new_size <= 0 )
+					b->yy_buf_size += b->yy_buf_size / 8;
+				else
+					b->yy_buf_size *= 2;
+
+				b->yy_ch_buf = (char *)
+					/* Include room in for 2 EOB chars. */
+					yy_flex_realloc( (void *) b->yy_ch_buf,
+							 b->yy_buf_size + 2 );
+				}
+			else
+				/* Can't grow it, we don't own it. */
+				b->yy_ch_buf = 0;
+
+			if ( ! b->yy_ch_buf )
+				YY_FATAL_ERROR(
+				"fatal error - scanner input buffer overflow" );
+
+			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
+
+			num_to_read = yy_current_buffer->yy_buf_size -
+						number_to_move - 1;
+#endif
+			}
+
+		if ( num_to_read > YY_READ_BUF_SIZE )
+			num_to_read = YY_READ_BUF_SIZE;
+
+		/* Read in more data. */
+		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
+			SCNG(yy_n_chars), num_to_read );
+
+		yy_current_buffer->yy_n_chars = SCNG(yy_n_chars);
+		}
+
+	if ( SCNG(yy_n_chars) == 0 )
+		{
+		if ( number_to_move == YY_MORE_ADJ )
+			{
+			ret_val = EOB_ACT_END_OF_FILE;
+			yyrestart( SCNG(yy_in) TSRMLS_CC );
+			}
+
+		else
+			{
+			ret_val = EOB_ACT_LAST_MATCH;
+			yy_current_buffer->yy_buffer_status =
+				YY_BUFFER_EOF_PENDING;
+			}
+		}
+
+	else
+		ret_val = EOB_ACT_CONTINUE_SCAN;
+
+	SCNG(yy_n_chars) += number_to_move;
+	yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
+	yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;
+
+	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];
+
+	return ret_val;
+	}
+
+
+/* yy_get_previous_state - get the state just before the EOB char was reached */
+
+static yy_state_type yy_get_previous_state(TSRMLS_D)
+	{
+	register yy_state_type yy_current_state;
+	register char *yy_cp;
+
+	yy_current_state = yy_start;
+	yy_current_state += YY_AT_BOL();
+
+	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
+		{
+		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
+		if ( yy_accept[yy_current_state] )
+			{
+			yy_last_accepting_state = yy_current_state;
+			yy_last_accepting_cpos = yy_cp;
+			}
+		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+			{
+			yy_current_state = (int) yy_def[yy_current_state];
+			if ( yy_current_state >= 1351 )
+				yy_c = yy_meta[(unsigned int) yy_c];
+			}
+		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+		}
+
+	return yy_current_state;
+	}
+
+
+/* yy_try_NUL_trans - try to make a transition on the NUL character
+ *
+ * synopsis
+ *	next_state = yy_try_NUL_trans( current_state );
+ */
+
+#ifdef YY_USE_PROTOS
+static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state TSRMLS_DC )
+#else
+static yy_state_type yy_try_NUL_trans( yy_current_state TSRMLS_CC )
+yy_state_type yy_current_state;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	register int yy_is_jam;
+	register char *yy_cp = yy_c_buf_p;
+
+	register YY_CHAR yy_c = 1;
+	if ( yy_accept[yy_current_state] )
+		{
+		yy_last_accepting_state = yy_current_state;
+		yy_last_accepting_cpos = yy_cp;
+		}
+	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+		{
+		yy_current_state = (int) yy_def[yy_current_state];
+		if ( yy_current_state >= 1351 )
+			yy_c = yy_meta[(unsigned int) yy_c];
+		}
+	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+	yy_is_jam = (yy_current_state == 1350);
+
+	return yy_is_jam ? 0 : yy_current_state;
+	}
+
+
+#ifndef YY_NO_UNPUT
+#ifdef YY_USE_PROTOS
+static void yyunput( int c, register char *yy_bp TSRMLS_DC )
+#else
+static void yyunput( c, yy_bp TSRMLS_CC )
+int c;
+register char *yy_bp;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	register char *yy_cp = yy_c_buf_p;
+
+	/* undo effects of setting up yytext */
+	*yy_cp = yy_hold_char;
+
+	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
+		{ /* need to shift things up to make room */
+		/* +2 for EOB chars. */
+		register int number_to_move = SCNG(yy_n_chars) + 2;
+		register char *dest = &yy_current_buffer->yy_ch_buf[
+					yy_current_buffer->yy_buf_size + 2];
+		register char *source =
+				&yy_current_buffer->yy_ch_buf[number_to_move];
+
+		while ( source > yy_current_buffer->yy_ch_buf )
+			*--dest = *--source;
+
+		yy_cp += (int) (dest - source);
+		yy_bp += (int) (dest - source);
+		yy_current_buffer->yy_n_chars =
+			SCNG(yy_n_chars) = yy_current_buffer->yy_buf_size;
+
+		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
+			YY_FATAL_ERROR( "flex scanner push-back overflow" );
+		}
+
+	*--yy_cp = (char) c;
+
+
+	yytext_ptr = yy_bp;
+	yy_hold_char = *yy_cp;
+	yy_c_buf_p = yy_cp;
+	}
+#endif	/* ifndef YY_NO_UNPUT */
+
+
+#ifdef __cplusplus
+static int yyinput(TSRMLS_D)
+#else
+static int input(TSRMLS_C)
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	int c;
+
+	*yy_c_buf_p = yy_hold_char;
+
+	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
+		{
+		/* yy_c_buf_p now points to the character we want to return.
+		 * If this occurs *before* the EOB characters, then it's a
+		 * valid NUL; if not, then we've hit the end of the buffer.
+		 */
+		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[SCNG(yy_n_chars)] )
+			/* This was really a NUL. */
+			*yy_c_buf_p = '\0';
+
+		else
+			{ /* need more input */
+			int offset = yy_c_buf_p - yytext_ptr;
+			++yy_c_buf_p;
+
+			switch ( yy_get_next_buffer(TSRMLS_C) )
+				{
+				case EOB_ACT_LAST_MATCH:
+					/* This happens because yy_g_n_b()
+					 * sees that we've accumulated a
+					 * token and flags that we need to
+					 * try matching the token before
+					 * proceeding.  But for input(),
+					 * there's no matching to consider.
+					 * So convert the EOB_ACT_LAST_MATCH
+					 * to EOB_ACT_END_OF_FILE.
+					 */
+
+					/* Reset buffer status. */
+					yyrestart( SCNG(yy_in) TSRMLS_CC );
+
+					/* fall through */
+
+				case EOB_ACT_END_OF_FILE:
+					{
+					if ( yywrap() )
+						return EOF;
+
+					if ( ! yy_did_buffer_switch_on_eof )
+						YY_NEW_FILE;
+#ifdef __cplusplus
+					return yyinput(TSRMLS_C);
+#else
+					return input(TSRMLS_C);
+#endif
+					}
+
+				case EOB_ACT_CONTINUE_SCAN:
+					yy_c_buf_p = yytext_ptr + offset;
+					break;
+				}
+			}
+		}
+
+	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
+	*yy_c_buf_p = '\0';	/* preserve yytext */
+	yy_hold_char = *++yy_c_buf_p;
+
+	yy_current_buffer->yy_at_bol = (c == '\n');
+
+	return c;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yyrestart( struct _zend_file_handle *input_file TSRMLS_DC )
+#else
+void yyrestart( input_file TSRMLS_CC )
+struct _zend_file_handle *input_file;
+#endif
+	{
+	if ( ! yy_current_buffer )
+		yy_current_buffer = yy_create_buffer( SCNG(yy_in), YY_BUF_SIZE TSRMLS_CC );
+
+	yy_init_buffer( yy_current_buffer, input_file TSRMLS_CC );
+	yy_load_buffer_state(TSRMLS_C);
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer TSRMLS_DC)
+#else
+void yy_switch_to_buffer( new_buffer TSRMLS_CC)
+YY_BUFFER_STATE new_buffer;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	if ( yy_current_buffer == new_buffer )
+		return;
+
+	if ( yy_current_buffer )
+		{
+		/* Flush out information for old buffer. */
+		*yy_c_buf_p = yy_hold_char;
+		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
+		yy_current_buffer->yy_n_chars = SCNG(yy_n_chars);
+		}
+
+	yy_current_buffer = new_buffer;
+	yy_load_buffer_state(TSRMLS_C);
+
+	/* We don't actually know whether we did this switch during
+	 * EOF (yywrap()) processing, but the only time this flag
+	 * is looked at is after yywrap() is called, so it's safe
+	 * to go ahead and always set it.
+	 */
+	yy_did_buffer_switch_on_eof = 1;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_load_buffer_state( TSRMLS_D )
+#else
+void yy_load_buffer_state(TSRMLS_C)
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	SCNG(yy_n_chars) = yy_current_buffer->yy_n_chars;
+	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
+	SCNG(yy_in) = yy_current_buffer->yy_input_file;
+	yy_hold_char = *yy_c_buf_p;
+	}
+
+
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_create_buffer( struct _zend_file_handle *file, int size TSRMLS_DC )
+#else
+YY_BUFFER_STATE yy_create_buffer( file, size TSRMLS_CC )
+struct _zend_file_handle *file;
+int size;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	YY_BUFFER_STATE b;
+
+	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+
+	b->yy_buf_size = size;
+
+	/* yy_ch_buf has to be 2 characters longer than the size given because
+	 * we need to put in 2 end-of-buffer characters.
+	 */
+	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
+	if ( ! b->yy_ch_buf )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+
+	b->yy_is_our_buffer = 1;
+
+	yy_init_buffer( b, file TSRMLS_CC );
+
+	return b;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_delete_buffer( YY_BUFFER_STATE b TSRMLS_DC )
+#else
+void yy_delete_buffer( b TSRMLS_CC )
+YY_BUFFER_STATE b;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	if ( ! b )
+		return;
+
+	if ( b == yy_current_buffer )
+		yy_current_buffer = (YY_BUFFER_STATE) 0;
+
+	if ( b->yy_is_our_buffer )
+		yy_flex_free( (void *) b->yy_ch_buf );
+
+	yy_flex_free( (void *) b );
+	}
+
+
+#ifndef YY_ALWAYS_INTERACTIVE
+#ifndef YY_NEVER_INTERACTIVE
+#endif
+#endif
+
+#ifdef YY_USE_PROTOS
+void yy_init_buffer( YY_BUFFER_STATE b, struct _zend_file_handle *file TSRMLS_DC )
+#else
+void yy_init_buffer( b, file TSRMLS_CC )
+YY_BUFFER_STATE b;
+struct _zend_file_handle *file;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+
+
+	{
+	yy_flush_buffer( b TSRMLS_CC );
+
+	b->yy_input_file = file;
+	b->yy_fill_buffer = 1;
+
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_flush_buffer( YY_BUFFER_STATE b TSRMLS_DC )
+#else
+void yy_flush_buffer( b TSRMLS_CC )
+YY_BUFFER_STATE b;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+
+	{
+	if ( ! b )
+		return;
+
+	b->yy_n_chars = 0;
+
+	/* We always need two end-of-buffer characters.  The first causes
+	 * a transition to the end-of-buffer state.  The second causes
+	 * a jam in that state.
+	 */
+	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
+	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
+
+	b->yy_buf_pos = &b->yy_ch_buf[0];
+
+	b->yy_at_bol = 1;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	if ( b == yy_current_buffer )
+		yy_load_buffer_state(TSRMLS_C);
+	}
+
+
+#ifndef YY_NO_SCAN_BUFFER
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size TSRMLS_DC )
+#else
+YY_BUFFER_STATE yy_scan_buffer( base, size TSRMLS_CC )
+char *base;
+yy_size_t size;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	YY_BUFFER_STATE b;
+
+	if ( size < 2 ||
+	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
+	     base[size-1] != YY_END_OF_BUFFER_CHAR )
+		/* They forgot to leave room for the EOB's. */
+		return 0;
+
+	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
+
+	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
+	b->yy_buf_pos = b->yy_ch_buf = base;
+	b->yy_is_our_buffer = 0;
+	b->yy_input_file = 0;
+	b->yy_n_chars = b->yy_buf_size;
+	b->yy_at_bol = 1;
+	b->yy_fill_buffer = 0;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	yy_switch_to_buffer( b TSRMLS_CC );
+
+	return b;
+	}
+#endif
+
+
+#ifndef YY_NO_SCAN_STRING
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str TSRMLS_DC )
+#else
+YY_BUFFER_STATE yy_scan_string( yy_str TSRMLS_CC )
+yyconst char *yy_str;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	int len;
+	for ( len = 0; yy_str[len]; ++len )
+		;
+
+	return yy_scan_bytes( yy_str, len TSRMLS_CC );
+	}
+#endif
+
+
+#ifndef YY_NO_SCAN_BYTES
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len TSRMLS_DC )
+#else
+YY_BUFFER_STATE yy_scan_bytes( bytes, len TSRMLS_CC )
+yyconst char *bytes;
+int len;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	YY_BUFFER_STATE b;
+	char *buf;
+	yy_size_t n;
+	int i;
+
+	/* Get memory for full buffer, including space for trailing EOB's. */
+	n = len + 2;
+	buf = (char *) yy_flex_alloc( n );
+	if ( ! buf )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
+
+	for ( i = 0; i < len; ++i )
+		buf[i] = bytes[i];
+
+	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;
+
+	b = yy_scan_buffer( buf, n TSRMLS_CC);
+	if ( ! b )
+		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
+
+	/* It's okay to grow etc. this buffer, and we should throw it
+	 * away when we're done.
+	 */
+	b->yy_is_our_buffer = 1;
+
+	return b;
+	}
+#endif
+
+
+#ifndef YY_NO_PUSH_STATE
+#ifdef YY_USE_PROTOS
+static void yy_push_state( int new_state TSRMLS_DC )
+#else
+static void yy_push_state( new_state TSRMLS_CC )
+int new_state;
+#ifdef ZTS
+void ***tsrm_ls;
+#endif
+#endif
+	{
+	if ( yy_start_stack_ptr >= yy_start_stack_depth )
+		{
+		yy_size_t new_size;
+
+		yy_start_stack_depth += YY_START_STACK_INCR;
+		new_size = yy_start_stack_depth * sizeof( int );
+
+		if ( ! yy_start_stack )
+			yy_start_stack = (int *) yy_flex_alloc( new_size );
+
+		else
+			yy_start_stack = (int *) yy_flex_realloc(
+					(void *) yy_start_stack, new_size );
+
+		if ( ! yy_start_stack )
+			YY_FATAL_ERROR(
+			"out of memory expanding start-condition stack" );
+		}
+
+	yy_start_stack[yy_start_stack_ptr++] = YY_START;
+
+	BEGIN(new_state);
+	}
+#endif
+
+
+#ifndef YY_NO_POP_STATE
+static void yy_pop_state(TSRMLS_D)
+	{
+	if ( --yy_start_stack_ptr < 0 )
+		YY_FATAL_ERROR( "start-condition stack underflow" );
+
+	BEGIN(yy_start_stack[yy_start_stack_ptr]);
+	}
+#endif
+
+
+#ifndef YY_NO_TOP_STATE
+static int yy_top_state(TSRMLS_D)
+	{
+	return yy_start_stack[yy_start_stack_ptr - 1];
+	}
+#endif
+
+#ifndef YY_EXIT_FAILURE
+#define YY_EXIT_FAILURE 2
+#endif
+
+#ifdef YY_USE_PROTOS
+static void yy_fatal_error( yyconst char msg[] )
+#else
+static void yy_fatal_error( msg )
+char msg[];
+#endif
+	{
+	(void) fprintf( stderr, "%s\n", msg );
+	exit( YY_EXIT_FAILURE );
+	}
+
+
+
+/* Redefine yyless() so it works in section 3 code. */
+
+#undef yyless
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up yytext. */ \
+		yytext[yyleng] = yy_hold_char; \
+		yy_c_buf_p = yytext + n; \
+		yy_hold_char = *yy_c_buf_p; \
+		*yy_c_buf_p = '\0'; \
+		yyleng = n; \
+		} \
+	while ( 0 )
+
+
+/* Internal utility routines. */
+
+#ifndef yytext_ptr
+#ifdef YY_USE_PROTOS
+static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
+#else
+static void yy_flex_strncpy( s1, s2, n )
+char *s1;
+yyconst char *s2;
+int n;
+#endif
+	{
+	register int i;
+	for ( i = 0; i < n; ++i )
+		s1[i] = s2[i];
+	}
+#endif
+
+#ifdef YY_NEED_STRLEN
+#ifdef YY_USE_PROTOS
+static int yy_flex_strlen( yyconst char *s )
+#else
+static int yy_flex_strlen( s )
+yyconst char *s;
+#endif
+	{
+	register int n;
+	for ( n = 0; s[n]; ++n )
+		;
+
+	return n;
+	}
+#endif
+
+
+#ifdef YY_USE_PROTOS
+static void *yy_flex_alloc( yy_size_t size )
+#else
+static void *yy_flex_alloc( size )
+yy_size_t size;
+#endif
+	{
+	return (void *) malloc( size );
+	}
+
+#ifdef YY_USE_PROTOS
+static void *yy_flex_realloc( void *ptr, yy_size_t size )
+#else
+static void *yy_flex_realloc( ptr, size )
+void *ptr;
+yy_size_t size;
+#endif
+	{
+	/* The cast to (char *) in the following accommodates both
+	 * implementations that use char* generic pointers, and those
+	 * that use void* generic pointers.  It works with the latter
+	 * because both ANSI C and C++ allow castless assignment from
+	 * any pointer type to void*, and deal with argument conversions
+	 * as though doing an assignment.
+	 */
+	return (void *) realloc( (char *) ptr, size );
+	}
+
+#ifdef YY_USE_PROTOS
+static void yy_flex_free( void *ptr )
+#else
+static void yy_flex_free( ptr )
+void *ptr;
+#endif
+	{
+	free( ptr );
+	}
+
+#if YY_MAIN
+int main()
+	{
+	yylex();
+	return 0;
+	}
+#endif
+#line 1808 "zend_language_scanner.l"
diff -Nur php-4.3.11/ext/standard/parsedate.c php/ext/standard/parsedate.c
--- php-4.3.11/ext/standard/parsedate.c	2005-03-30 22:35:48.000000000 +0800
+++ php/ext/standard/parsedate.c	2007-07-23 21:45:13.000000000 +0800
@@ -1,2300 +1,2161 @@
-/* A Bison parser, made from ext/standard/parsedate.y
-   by GNU bison 1.35.  */
-
-#define YYBISON 1  /* Identify Bison output.  */
-
-# define	tAGO	257
-# define	tDAY	258
-# define	tDAY_UNIT	259
-# define	tDAYZONE	260
-# define	tDST	261
-# define	tHOUR_UNIT	262
-# define	tID	263
-# define	tMERIDIAN	264
-# define	tMINUTE_UNIT	265
-# define	tMONTH	266
-# define	tMONTH_UNIT	267
-# define	tSEC_UNIT	268
-# define	tSNUMBER	269
-# define	tUNUMBER	270
-# define	tYEAR_UNIT	271
-# define	tZONE	272
-
-
-/*
-**  Originally written by Steven M. Bellovin <smb@research.att.com> while
-**  at the University of North Carolina at Chapel Hill.  Later tweaked by
-**  a couple of people on Usenet.  Completely overhauled by Rich $alz
-**  <rsalz@bbn.com> and Jim Berets <jberets@bbn.com> in August, 1990.
-**
-**  This code is in the public domain and has no copyright.
-*/
-
-/* $Id: parsedate.y,v 1.34.2.7 2004/04/08 19:21:46 derick Exp $ */
-
-#include "php.h"
-
-#ifdef PHP_WIN32
-#include <malloc.h>
-#endif
-
-#include <stdio.h>
-#include <sys/types.h>
-#include <time.h>
-#include <ctype.h>
-
-#ifdef HAVE_SYS_TIME_H
-# include <sys/time.h>
-#endif
-#ifdef PHP_WIN32
-# include "win32/time.h"
-#endif
-
-#include "php_parsedate.h"
-
-#if HAVE_STDLIB_H
-# include <stdlib.h> /* for `free'; used by Bison 1.27 */
-#endif
-
-#if defined(_HPUX_SOURCE)
-#include <alloca.h>
-#endif
-
-#if defined (STDC_HEADERS) || (!defined (isascii) && !defined (HAVE_ISASCII))
-# define IN_CTYPE_DOMAIN(c) 1
-#else
-# define IN_CTYPE_DOMAIN(c) isascii(c)
-#endif
-
-#define ISSPACE(c) (IN_CTYPE_DOMAIN (c) && isspace (c))
-#define ISALPHA(c) (IN_CTYPE_DOMAIN (c) && isalpha (c))
-#define ISUPPER(c) (IN_CTYPE_DOMAIN (c) && isupper (c))
-#define ISDIGIT_LOCALE(c) (IN_CTYPE_DOMAIN (c) && isdigit (c))
-
-/* ISDIGIT differs from ISDIGIT_LOCALE, as follows:
-   - Its arg may be any int or unsigned int; it need not be an unsigned char.
-   - It's guaranteed to evaluate its argument exactly once.
-   - It's typically faster.
-   Posix 1003.2-1992 section 2.5.2.1 page 50 lines 1556-1558 says that
-   only '0' through '9' are digits.  Prefer ISDIGIT to ISDIGIT_LOCALE unless
-   it's important to use the locale's definition of `digit' even when the
-   host does not conform to Posix.  */
-#define ISDIGIT(c) ((unsigned) (c) - '0' <= 9)
-
-#if defined (STDC_HEADERS) || defined (USG)
-# include <string.h>
-#endif
-
-#if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 7)
-# define __attribute__(x)
-#endif
-
-#ifndef ATTRIBUTE_UNUSED
-# define ATTRIBUTE_UNUSED __attribute__ ((__unused__))
-#endif
-
-/* Some old versions of bison generate parsers that use bcopy.
-   That loses on systems that don't provide the function, so we have
-   to redefine it here.  */
-#if !defined (HAVE_BCOPY) && defined (HAVE_MEMCPY) && !defined (bcopy)
-# define bcopy(from, to, len) memcpy ((to), (from), (len))
-#endif
-
-/* Remap normal yacc parser interface names (yyparse, yylex, yyerror, etc),
-   as well as gratuitiously global symbol names, so we can have multiple
-   yacc generated parsers in the same program.  Note that these are only
-   the variables produced by yacc.  If other parser generators (bison,
-   byacc, etc) produce additional global names that conflict at link time,
-   then those parser generators need to be fixed instead of adding those
-   names to this list. */
-
-#define yyparse php_gd_parse
-#define yylex   php_gd_lex
-
-static int yyerror ();
-
-#define EPOCH		1970
-#define HOUR(x)		((x) * 60)
-
-#define MAX_BUFF_LEN    128   /* size of buffer to read the date into */
-
-/*
-**  An entry in the lexical lookup table.
-*/
-typedef struct _TABLE {
-    const char	*name;
-    int		type;
-    int		value;
-} TABLE;
-
-
-/*
-**  Meridian:  am, pm, or 24-hour style.
-*/
-typedef enum _MERIDIAN {
-    MERam, MERpm, MER24
-} MERIDIAN;
-
-struct date_yy {
-	const char	*yyInput;
-	int	yyDayOrdinal;
-	int	yyDayNumber;
-	int	yyHaveDate;
-	int	yyHaveDay;
-	int	yyHaveRel;
-	int	yyHaveTime;
-	int	yyHaveZone;
-	int	yyTimezone;
-	int	yyDay;
-	int	yyHour;
-	int	yyMinutes;
-	int	yyMonth;
-	int	yySeconds;
-	int	yyYear;
-	MERIDIAN	yyMeridian;
-	int	yyRelDay;
-	int	yyRelHour;
-	int	yyRelMinutes;
-	int	yyRelMonth;
-	int	yyRelSeconds;
-	int	yyRelYear;
-};
-
-typedef union _date_ll {
-    int			Number;
-    enum _MERIDIAN	Meridian;
-} date_ll;
-
-#define YYPARSE_PARAM parm
-#define YYLEX_PARAM parm
-#define YYSTYPE date_ll
-#define YYLTYPE void
-
-#ifndef YYSTYPE
-# define YYSTYPE int
-# define YYSTYPE_IS_TRIVIAL 1
-#endif
-#ifndef YYDEBUG
-# define YYDEBUG 0
-#endif
-
-
-
-#define	YYFINAL		70
-#define	YYFLAG		-32768
-#define	YYNTBASE	22
-
-/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
-#define YYTRANSLATE(x) ((unsigned)(x) <= 272 ? yytranslate[x] : 32)
-
-/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
-static const char yytranslate[] =
-{
-       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,    20,     2,     2,    21,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,    19,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
-       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
-       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
-      16,    17,    18
-};
-
-#if YYDEBUG
-static const short yyprhs[] =
-{
-       0,     0,     1,     4,     6,     8,    10,    12,    14,    16,
-      19,    24,    29,    34,    41,    48,    55,    57,    59,    62,
-      64,    67,    70,    74,    83,    89,    93,    97,   101,   104,
-     109,   112,   116,   119,   121,   124,   127,   129,   132,   135,
-     137,   140,   143,   145,   148,   151,   153,   156,   159,   161,
-     164,   167,   169,   171,   172
-};
-static const short yyrhs[] =
-{
-      -1,    22,    23,     0,    24,     0,    25,     0,    27,     0,
-      26,     0,    28,     0,    30,     0,    16,    10,     0,    16,
-      19,    16,    31,     0,    16,    19,    16,    28,     0,    16,
-      19,    16,    15,     0,    16,    19,    16,    19,    16,    31,
-       0,    16,    19,    16,    19,    16,    28,     0,    16,    19,
-      16,    19,    16,    15,     0,    18,     0,     6,     0,    18,
-       7,     0,     4,     0,     4,    20,     0,    16,     4,     0,
-      16,    21,    16,     0,    12,    16,    16,    19,    16,    19,
-      16,    16,     0,    16,    21,    16,    21,    16,     0,    16,
-      15,    15,     0,    16,    12,    15,     0,    12,    16,    16,
-       0,    12,    16,     0,    12,    16,    20,    16,     0,    16,
-      12,     0,    16,    12,    16,     0,    29,     3,     0,    29,
-       0,    16,    17,     0,    15,    17,     0,    17,     0,    16,
-      13,     0,    15,    13,     0,    13,     0,    16,     5,     0,
-      15,     5,     0,     5,     0,    16,     8,     0,    15,     8,
-       0,     8,     0,    16,    11,     0,    15,    11,     0,    11,
-       0,    16,    14,     0,    15,    14,     0,    14,     0,    16,
-       0,     0,    10,     0
-};
-
-#endif
-
-#if YYDEBUG
-/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
-static const short yyrline[] =
-{
-       0,   168,   169,   172,   175,   178,   181,   184,   187,   190,
-     199,   208,   216,   228,   237,   246,   265,   268,   271,   277,
-     281,   285,   291,   295,   306,   324,   330,   336,   341,   349,
-     354,   362,   369,   383,   386,   389,   392,   395,   398,   401,
-     404,   407,   410,   413,   416,   419,   422,   425,   428,   431,
-     434,   437,   442,   477,   481
-};
-#endif
-
-
-#if (YYDEBUG) || defined YYERROR_VERBOSE
-
-/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
-static const char *const yytname[] =
-{
-  "$", "error", "$undefined.", "tAGO", "tDAY", "tDAY_UNIT", "tDAYZONE", 
-  "tDST", "tHOUR_UNIT", "tID", "tMERIDIAN", "tMINUTE_UNIT", "tMONTH", 
-  "tMONTH_UNIT", "tSEC_UNIT", "tSNUMBER", "tUNUMBER", "tYEAR_UNIT", 
-  "tZONE", "':'", "','", "'/'", "spec", "item", "time", "zone", "day", 
-  "date", "rel", "relunit", "number", "o_merid", 0
-};
-#endif
-
-/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
-static const short yyr1[] =
-{
-       0,    22,    22,    23,    23,    23,    23,    23,    23,    24,
-      24,    24,    24,    24,    24,    24,    25,    25,    25,    26,
-      26,    26,    27,    27,    27,    27,    27,    27,    27,    27,
-      27,    27,    28,    28,    29,    29,    29,    29,    29,    29,
-      29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
-      29,    29,    30,    31,    31
-};
-
-/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
-static const short yyr2[] =
-{
-       0,     0,     2,     1,     1,     1,     1,     1,     1,     2,
-       4,     4,     4,     6,     6,     6,     1,     1,     2,     1,
-       2,     2,     3,     8,     5,     3,     3,     3,     2,     4,
-       2,     3,     2,     1,     2,     2,     1,     2,     2,     1,
-       2,     2,     1,     2,     2,     1,     2,     2,     1,     2,
-       2,     1,     1,     0,     1
-};
-
-/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
-   doesn't specify something else to do.  Zero means the default is an
-   error. */
-static const short yydefact[] =
-{
-       1,     0,    19,    42,    17,    45,    48,     0,    39,    51,
-       0,    52,    36,    16,     2,     3,     4,     6,     5,     7,
-      33,     8,    20,    28,    41,    44,    47,    38,    50,    35,
-      21,    40,    43,     9,    46,    30,    37,    49,     0,    34,
-       0,     0,    18,    32,    27,     0,    26,    31,    25,    53,
-      22,     0,    29,    54,    12,     0,     0,    11,    10,     0,
-       0,    53,    24,     0,    15,    14,    13,     0,    23,     0,
-       0
-};
-
-static const short yydefgoto[] =
-{
-       1,    14,    15,    16,    17,    18,    19,    20,    21,    58
-};
-
-static const short yypact[] =
-{
-  -32768,     0,   -10,-32768,-32768,-32768,-32768,     6,-32768,-32768,
-      56,    15,-32768,    17,-32768,-32768,-32768,-32768,-32768,-32768,
-      28,-32768,-32768,   -13,-32768,-32768,-32768,-32768,-32768,-32768,
-  -32768,-32768,-32768,-32768,-32768,   -14,-32768,-32768,    18,-32768,
-      21,    23,-32768,-32768,    31,    26,-32768,-32768,-32768,    30,
-      34,    36,-32768,-32768,    56,    63,    46,-32768,-32768,    47,
-      53,    43,-32768,    49,    56,-32768,-32768,    50,-32768,    75,
-  -32768
-};
-
-static const short yypgoto[] =
-{
-  -32768,-32768,-32768,-32768,-32768,-32768,   -40,-32768,-32768,    20
-};
-
-
-#define	YYLAST		81
-
-
-static const short yytable[] =
-{
-      69,    46,    47,    44,     2,     3,     4,    45,     5,    57,
-      22,     6,     7,     8,     9,    10,    11,    12,    13,    30,
-      31,    65,    23,    32,    42,    33,    34,    35,    36,    37,
-      38,    43,    39,    48,    40,     3,    41,    49,     5,    50,
-      53,     6,    52,     8,     9,    54,    55,    12,     3,    56,
-      51,     5,    60,    53,     6,    59,     8,     9,    64,    55,
-      12,    24,    61,    62,    25,    67,    68,    26,    31,    27,
-      28,    32,    63,    29,    34,    70,    36,    37,     0,     0,
-      39,    66
-};
-
-static const short yycheck[] =
-{
-       0,    15,    16,    16,     4,     5,     6,    20,     8,    49,
-      20,    11,    12,    13,    14,    15,    16,    17,    18,     4,
-       5,    61,    16,     8,     7,    10,    11,    12,    13,    14,
-      15,     3,    17,    15,    19,     5,    21,    16,     8,    16,
-      10,    11,    16,    13,    14,    15,    16,    17,     5,    19,
-      19,     8,    16,    10,    11,    21,    13,    14,    15,    16,
-      17,     5,    16,    16,     8,    16,    16,    11,     5,    13,
-      14,     8,    19,    17,    11,     0,    13,    14,    -1,    -1,
-      17,    61
-};
-#define YYPURE 1
-
-/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
-
-/* Skeleton output parser for bison,
-
-   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002 Free Software
-   Foundation, Inc.
-
-   This program is free software; you can redistribute it and/or modify
-   it under the terms of the GNU General Public License as published by
-   the Free Software Foundation; either version 2, or (at your option)
-   any later version.
-
-   This program is distributed in the hope that it will be useful,
-   but WITHOUT ANY WARRANTY; without even the implied warranty of
-   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-   GNU General Public License for more details.
-
-   You should have received a copy of the GNU General Public License
-   along with this program; if not, write to the Free Software
-   Foundation, Inc., 59 Temple Place - Suite 330,
-   Boston, MA 02111-1307, USA.  */
-
-/* As a special exception, when this file is copied by Bison into a
-   Bison output file, you may use that output file without restriction.
-   This special exception was added by the Free Software Foundation
-   in version 1.24 of Bison.  */
-
-/* This is the parser code that is written into each bison parser when
-   the %semantic_parser declaration is not specified in the grammar.
-   It was written by Richard Stallman by simplifying the hairy parser
-   used when %semantic_parser is specified.  */
-
-/* All symbols defined below should begin with yy or YY, to avoid
-   infringing on user name space.  This should be done even for local
-   variables, as they might otherwise be expanded by user macros.
-   There are some unavoidable exceptions within include files to
-   define necessary library symbols; they are noted "INFRINGES ON
-   USER NAME SPACE" below.  */
-
-#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)
-
-/* The parser invokes alloca or malloc; define the necessary symbols.  */
-
-# if YYSTACK_USE_ALLOCA
-#  define YYSTACK_ALLOC alloca
-# else
-#  ifndef YYSTACK_USE_ALLOCA
-#   if defined (alloca) || defined (_ALLOCA_H)
-#    define YYSTACK_ALLOC alloca
-#   else
-#    ifdef __GNUC__
-#     define YYSTACK_ALLOC __builtin_alloca
-#    endif
-#   endif
-#  endif
-# endif
-
-# ifdef YYSTACK_ALLOC
-   /* Pacify GCC's `empty if-body' warning. */
-#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
-# else
-#  if defined (__STDC__) || defined (__cplusplus)
-#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
-#   define YYSIZE_T size_t
-#  endif
-#  define YYSTACK_ALLOC malloc
-#  define YYSTACK_FREE free
-# endif
-#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */
-
-
-#if (! defined (yyoverflow) \
-     && (! defined (__cplusplus) \
-	 || (YYLTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
-
-/* A type that is properly aligned for any stack member.  */
-union yyalloc
-{
-  short yyss;
-  YYSTYPE yyvs;
-# if YYLSP_NEEDED
-  YYLTYPE yyls;
-# endif
-};
-
-/* The size of the maximum gap between one aligned stack and the next.  */
-# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)
-
-/* The size of an array large to enough to hold all stacks, each with
-   N elements.  */
-# if YYLSP_NEEDED
-#  define YYSTACK_BYTES(N) \
-     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
-      + 2 * YYSTACK_GAP_MAX)
-# else
-#  define YYSTACK_BYTES(N) \
-     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
-      + YYSTACK_GAP_MAX)
-# endif
-
-/* Copy COUNT objects from FROM to TO.  The source and destination do
-   not overlap.  */
-# ifndef YYCOPY
-#  if 1 < __GNUC__
-#   define YYCOPY(To, From, Count) \
-      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
-#  else
-#   define YYCOPY(To, From, Count)		\
-      do					\
-	{					\
-	  register YYSIZE_T yyi;		\
-	  for (yyi = 0; yyi < (Count); yyi++)	\
-	    (To)[yyi] = (From)[yyi];		\
-	}					\
-      while (0)
-#  endif
-# endif
-
-/* Relocate STACK from its old location to the new one.  The
-   local variables YYSIZE and YYSTACKSIZE give the old and new number of
-   elements in the stack, and YYPTR gives the new location of the
-   stack.  Advance YYPTR to a properly aligned location for the next
-   stack.  */
-# define YYSTACK_RELOCATE(Stack)					\
-    do									\
-      {									\
-	YYSIZE_T yynewbytes;						\
-	YYCOPY (&yyptr->Stack, Stack, yysize);				\
-	Stack = &yyptr->Stack;						\
-	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAX;	\
-	yyptr += yynewbytes / sizeof (*yyptr);				\
-      }									\
-    while (0)
-
-#endif
-
-
-#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
-# define YYSIZE_T __SIZE_TYPE__
-#endif
-#if ! defined (YYSIZE_T) && defined (size_t)
-# define YYSIZE_T size_t
-#endif
-#if ! defined (YYSIZE_T)
-# if defined (__STDC__) || defined (__cplusplus)
-#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
-#  define YYSIZE_T size_t
-# endif
-#endif
-#if ! defined (YYSIZE_T)
-# define YYSIZE_T unsigned int
-#endif
-
-#define yyerrok		(yyerrstatus = 0)
-#define yyclearin	(yychar = YYEMPTY)
-#define YYEMPTY		-2
-#define YYEOF		0
-#define YYACCEPT	goto yyacceptlab
-#define YYABORT 	goto yyabortlab
-#define YYERROR		goto yyerrlab1
-/* Like YYERROR except do call yyerror.  This remains here temporarily
-   to ease the transition to the new meaning of YYERROR, for GCC.
-   Once GCC version 2 has supplanted version 1, this can go.  */
-#define YYFAIL		goto yyerrlab
-#define YYRECOVERING()  (!!yyerrstatus)
-#define YYBACKUP(Token, Value)					\
-do								\
-  if (yychar == YYEMPTY && yylen == 1)				\
-    {								\
-      yychar = (Token);						\
-      yylval = (Value);						\
-      yychar1 = YYTRANSLATE (yychar);				\
-      YYPOPSTACK;						\
-      goto yybackup;						\
-    }								\
-  else								\
-    { 								\
-      yyerror ("syntax error: cannot back up");			\
-      YYERROR;							\
-    }								\
-while (0)
-
-#define YYTERROR	1
-#define YYERRCODE	256
-
-
-/* YYLLOC_DEFAULT -- Compute the default location (before the actions
-   are run).
-
-   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
-   first token.  By default, to implement support for ranges, extend
-   its range to the last symbol.  */
-
-#ifndef YYLLOC_DEFAULT
-# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
-   Current.last_line   = Rhs[N].last_line;	\
-   Current.last_column = Rhs[N].last_column;
-#endif
-
-
-/* YYLEX -- calling `yylex' with the right arguments.  */
-
-#if YYPURE
-# if YYLSP_NEEDED
-#  ifdef YYLEX_PARAM
-#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
-#  else
-#   define YYLEX		yylex (&yylval, &yylloc)
-#  endif
-# else /* !YYLSP_NEEDED */
-#  ifdef YYLEX_PARAM
-#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
-#  else
-#   define YYLEX		yylex (&yylval)
-#  endif
-# endif /* !YYLSP_NEEDED */
-#else /* !YYPURE */
-# define YYLEX			yylex ()
-#endif /* !YYPURE */
-
-
-/* Enable debugging if requested.  */
-#if YYDEBUG
-
-# ifndef YYFPRINTF
-#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
-#  define YYFPRINTF fprintf
-# endif
-
-# define YYDPRINTF(Args)			\
-do {						\
-  if (yydebug)					\
-    YYFPRINTF Args;				\
-} while (0)
-/* Nonzero means print parse trace.  It is left uninitialized so that
-   multiple parsers can coexist.  */
-int yydebug;
-#else /* !YYDEBUG */
-# define YYDPRINTF(Args)
-#endif /* !YYDEBUG */
-
-/* YYINITDEPTH -- initial size of the parser's stacks.  */
-#ifndef	YYINITDEPTH
-# define YYINITDEPTH 200
-#endif
-
-/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
-   if the built-in stack extension method is used).
-
-   Do not make this value too large; the results are undefined if
-   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
-   evaluated with infinite-precision integer arithmetic.  */
-
-#if YYMAXDEPTH == 0
-# undef YYMAXDEPTH
-#endif
-
-#ifndef YYMAXDEPTH
-# define YYMAXDEPTH 10000
-#endif
-
-#ifdef YYERROR_VERBOSE
-
-# ifndef yystrlen
-#  if defined (__GLIBC__) && defined (_STRING_H)
-#   define yystrlen strlen
-#  else
-/* Return the length of YYSTR.  */
-static YYSIZE_T
-#   if defined (__STDC__) || defined (__cplusplus)
-yystrlen (const char *yystr)
-#   else
-yystrlen (yystr)
-     const char *yystr;
-#   endif
-{
-  register const char *yys = yystr;
-
-  while (*yys++ != '\0')
-    continue;
-
-  return yys - yystr - 1;
-}
-#  endif
-# endif
-
-# ifndef yystpcpy
-#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
-#   define yystpcpy stpcpy
-#  else
-/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
-   YYDEST.  */
-static char *
-#   if defined (__STDC__) || defined (__cplusplus)
-yystpcpy (char *yydest, const char *yysrc)
-#   else
-yystpcpy (yydest, yysrc)
-     char *yydest;
-     const char *yysrc;
-#   endif
-{
-  register char *yyd = yydest;
-  register const char *yys = yysrc;
-
-  while ((*yyd++ = *yys++) != '\0')
-    continue;
-
-  return yyd - 1;
-}
-#  endif
-# endif
-#endif
-
-
-
-/* The user can define YYPARSE_PARAM as the name of an argument to be passed
-   into yyparse.  The argument should have type void *.
-   It should actually point to an object.
-   Grammar actions can access the variable by casting it
-   to the proper pointer type.  */
-
-#ifdef YYPARSE_PARAM
-# if defined (__STDC__) || defined (__cplusplus)
-#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
-#  define YYPARSE_PARAM_DECL
-# else
-#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
-#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
-# endif
-#else /* !YYPARSE_PARAM */
-# define YYPARSE_PARAM_ARG
-# define YYPARSE_PARAM_DECL
-#endif /* !YYPARSE_PARAM */
-
-/* Prevent warning if -Wstrict-prototypes.  */
-#ifdef __GNUC__
-# ifdef YYPARSE_PARAM
-int yyparse (void *);
-# else
-int yyparse (void);
-# endif
-#endif
-
-/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
-   variables are global, or local to YYPARSE.  */
-
-#define YY_DECL_NON_LSP_VARIABLES			\
-/* The lookahead symbol.  */				\
-int yychar;						\
-							\
-/* The semantic value of the lookahead symbol. */	\
-YYSTYPE yylval;						\
-							\
-/* Number of parse errors so far.  */			\
-int yynerrs;
-
-#if YYLSP_NEEDED
-# define YY_DECL_VARIABLES			\
-YY_DECL_NON_LSP_VARIABLES			\
-						\
-/* Location data for the lookahead symbol.  */	\
-YYLTYPE yylloc;
-#else
-# define YY_DECL_VARIABLES			\
-YY_DECL_NON_LSP_VARIABLES
-#endif
-
-
-/* If nonreentrant, generate the variables here. */
-
-#if !YYPURE
-YY_DECL_VARIABLES
-#endif  /* !YYPURE */
-
-int
-yyparse (YYPARSE_PARAM_ARG)
-     YYPARSE_PARAM_DECL
-{
-  /* If reentrant, generate the variables here. */
-#if YYPURE
-  YY_DECL_VARIABLES
-#endif  /* !YYPURE */
-
-  register int yystate;
-  register int yyn;
-  int yyresult;
-  /* Number of tokens to shift before error messages enabled.  */
-  int yyerrstatus;
-  /* Lookahead token as an internal (translated) token number.  */
-  int yychar1 = 0;
-
-  /* Three stacks and their tools:
-     `yyss': related to states,
-     `yyvs': related to semantic values,
-     `yyls': related to locations.
-
-     Refer to the stacks thru separate pointers, to allow yyoverflow
-     to reallocate them elsewhere.  */
-
-  /* The state stack. */
-  short	yyssa[YYINITDEPTH];
-  short *yyss = yyssa;
-  register short *yyssp;
-
-  /* The semantic value stack.  */
-  YYSTYPE yyvsa[YYINITDEPTH];
-  YYSTYPE *yyvs = yyvsa;
-  register YYSTYPE *yyvsp;
-
-#if YYLSP_NEEDED
-  /* The location stack.  */
-  YYLTYPE yylsa[YYINITDEPTH];
-  YYLTYPE *yyls = yylsa;
-  YYLTYPE *yylsp;
-#endif
-
-#if YYLSP_NEEDED
-# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
-#else
-# define YYPOPSTACK   (yyvsp--, yyssp--)
-#endif
-
-  YYSIZE_T yystacksize = YYINITDEPTH;
-
-
-  /* The variables used to return semantic value and location from the
-     action routines.  */
-  YYSTYPE yyval;
-#if YYLSP_NEEDED
-  YYLTYPE yyloc;
-#endif
-
-  /* When reducing, the number of symbols on the RHS of the reduced
-     rule. */
-  int yylen;
-
-  YYDPRINTF ((stderr, "Starting parse\n"));
-
-  yystate = 0;
-  yyerrstatus = 0;
-  yynerrs = 0;
-  yychar = YYEMPTY;		/* Cause a token to be read.  */
-
-  /* Initialize stack pointers.
-     Waste one element of value and location stack
-     so that they stay on the same level as the state stack.
-     The wasted elements are never initialized.  */
-
-  yyssp = yyss;
-  yyvsp = yyvs;
-#if YYLSP_NEEDED
-  yylsp = yyls;
-#endif
-  goto yysetstate;
-
-/*------------------------------------------------------------.
-| yynewstate -- Push a new state, which is found in yystate.  |
-`------------------------------------------------------------*/
- yynewstate:
-  /* In all cases, when you get here, the value and location stacks
-     have just been pushed. so pushing a state here evens the stacks.
-     */
-  yyssp++;
-
- yysetstate:
-  *yyssp = yystate;
-
-  if (yyssp >= yyss + yystacksize - 1)
-    {
-      /* Get the current used size of the three stacks, in elements.  */
-      YYSIZE_T yysize = yyssp - yyss + 1;
-
-#ifdef yyoverflow
-      {
-	/* Give user a chance to reallocate the stack. Use copies of
-	   these so that the &'s don't force the real ones into
-	   memory.  */
-	YYSTYPE *yyvs1 = yyvs;
-	short *yyss1 = yyss;
-
-	/* Each stack pointer address is followed by the size of the
-	   data in use in that stack, in bytes.  */
-# if YYLSP_NEEDED
-	YYLTYPE *yyls1 = yyls;
-	/* This used to be a conditional around just the two extra args,
-	   but that might be undefined if yyoverflow is a macro.  */
-	yyoverflow ("parser stack overflow",
-		    &yyss1, yysize * sizeof (*yyssp),
-		    &yyvs1, yysize * sizeof (*yyvsp),
-		    &yyls1, yysize * sizeof (*yylsp),
-		    &yystacksize);
-	yyls = yyls1;
-# else
-	yyoverflow ("parser stack overflow",
-		    &yyss1, yysize * sizeof (*yyssp),
-		    &yyvs1, yysize * sizeof (*yyvsp),
-		    &yystacksize);
-# endif
-	yyss = yyss1;
-	yyvs = yyvs1;
-      }
-#else /* no yyoverflow */
-# ifndef YYSTACK_RELOCATE
-      goto yyoverflowlab;
-# else
-      /* Extend the stack our own way.  */
-      if (yystacksize >= YYMAXDEPTH)
-	goto yyoverflowlab;
-      yystacksize *= 2;
-      if (yystacksize > YYMAXDEPTH)
-	yystacksize = YYMAXDEPTH;
-
-      {
-	short *yyss1 = yyss;
-	union yyalloc *yyptr =
-	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
-	if (! yyptr)
-	  goto yyoverflowlab;
-	YYSTACK_RELOCATE (yyss);
-	YYSTACK_RELOCATE (yyvs);
-# if YYLSP_NEEDED
-	YYSTACK_RELOCATE (yyls);
-# endif
-# undef YYSTACK_RELOCATE
-	if (yyss1 != yyssa)
-	  YYSTACK_FREE (yyss1);
-      }
-# endif
-#endif /* no yyoverflow */
-
-      yyssp = yyss + yysize - 1;
-      yyvsp = yyvs + yysize - 1;
-#if YYLSP_NEEDED
-      yylsp = yyls + yysize - 1;
-#endif
-
-      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
-		  (unsigned long int) yystacksize));
-
-      if (yyssp >= yyss + yystacksize - 1)
-	YYABORT;
-    }
-
-  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
-
-  goto yybackup;
-
-
-/*-----------.
-| yybackup.  |
-`-----------*/
-yybackup:
-
-/* Do appropriate processing given the current state.  */
-/* Read a lookahead token if we need one and don't already have one.  */
-/* yyresume: */
-
-  /* First try to decide what to do without reference to lookahead token.  */
-
-  yyn = yypact[yystate];
-  if (yyn == YYFLAG)
-    goto yydefault;
-
-  /* Not known => get a lookahead token if don't already have one.  */
-
-  /* yychar is either YYEMPTY or YYEOF
-     or a valid token in external form.  */
-
-  if (yychar == YYEMPTY)
-    {
-      YYDPRINTF ((stderr, "Reading a token: "));
-      yychar = YYLEX;
-    }
-
-  /* Convert token to internal form (in yychar1) for indexing tables with */
-
-  if (yychar <= 0)		/* This means end of input. */
-    {
-      yychar1 = 0;
-      yychar = YYEOF;		/* Don't call YYLEX any more */
-
-      YYDPRINTF ((stderr, "Now at end of input.\n"));
-    }
-  else
-    {
-      yychar1 = YYTRANSLATE (yychar);
-
-#if YYDEBUG
-     /* We have to keep this `#if YYDEBUG', since we use variables
-	which are defined only if `YYDEBUG' is set.  */
-      if (yydebug)
-	{
-	  YYFPRINTF (stderr, "Next token is %d (%s",
-		     yychar, yytname[yychar1]);
-	  /* Give the individual parser a way to print the precise
-	     meaning of a token, for further debugging info.  */
-# ifdef YYPRINT
-	  YYPRINT (stderr, yychar, yylval);
-# endif
-	  YYFPRINTF (stderr, ")\n");
-	}
-#endif
-    }
-
-  yyn += yychar1;
-  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
-    goto yydefault;
-
-  yyn = yytable[yyn];
-
-  /* yyn is what to do for this token type in this state.
-     Negative => reduce, -yyn is rule number.
-     Positive => shift, yyn is new state.
-       New state is final state => don't bother to shift,
-       just return success.
-     0, or most negative number => error.  */
-
-  if (yyn < 0)
-    {
-      if (yyn == YYFLAG)
-	goto yyerrlab;
-      yyn = -yyn;
-      goto yyreduce;
-    }
-  else if (yyn == 0)
-    goto yyerrlab;
-
-  if (yyn == YYFINAL)
-    YYACCEPT;
-
-  /* Shift the lookahead token.  */
-  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
-	      yychar, yytname[yychar1]));
-
-  /* Discard the token being shifted unless it is eof.  */
-  if (yychar != YYEOF)
-    yychar = YYEMPTY;
-
-  *++yyvsp = yylval;
-#if YYLSP_NEEDED
-  *++yylsp = yylloc;
-#endif
-
-  /* Count tokens shifted since error; after three, turn off error
-     status.  */
-  if (yyerrstatus)
-    yyerrstatus--;
-
-  yystate = yyn;
-  goto yynewstate;
-
-
-/*-----------------------------------------------------------.
-| yydefault -- do the default action for the current state.  |
-`-----------------------------------------------------------*/
-yydefault:
-  yyn = yydefact[yystate];
-  if (yyn == 0)
-    goto yyerrlab;
-  goto yyreduce;
-
-
-/*-----------------------------.
-| yyreduce -- Do a reduction.  |
-`-----------------------------*/
-yyreduce:
-  /* yyn is the number of a rule to reduce with.  */
-  yylen = yyr2[yyn];
-
-  /* If YYLEN is nonzero, implement the default value of the action:
-     `$$ = $1'.
-
-     Otherwise, the following line sets YYVAL to the semantic value of
-     the lookahead token.  This behavior is undocumented and Bison
-     users should not rely upon it.  Assigning to YYVAL
-     unconditionally makes the parser a bit smaller, and it avoids a
-     GCC warning that YYVAL may be used uninitialized.  */
-  yyval = yyvsp[1-yylen];
-
-#if YYLSP_NEEDED
-  /* Similarly for the default location.  Let the user run additional
-     commands if for instance locations are ranges.  */
-  yyloc = yylsp[1-yylen];
-  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
-#endif
-
-#if YYDEBUG
-  /* We have to keep this `#if YYDEBUG', since we use variables which
-     are defined only if `YYDEBUG' is set.  */
-  if (yydebug)
-    {
-      int yyi;
-
-      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
-		 yyn, yyrline[yyn]);
-
-      /* Print the symbols being reduced, and their result.  */
-      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
-	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
-      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
-    }
-#endif
-
-  switch (yyn) {
-
-case 3:
-{
-	    ((struct date_yy *)parm)->yyHaveTime++;
-	}
-    break;
-case 4:
-{
-	    ((struct date_yy *)parm)->yyHaveZone++;
-	}
-    break;
-case 5:
-{
-	    ((struct date_yy *)parm)->yyHaveDate++;
-	}
-    break;
-case 6:
-{
-	    ((struct date_yy *)parm)->yyHaveDay++;
-	}
-    break;
-case 7:
-{
-	    ((struct date_yy *)parm)->yyHaveRel++;
-	}
-    break;
-case 9:
-{
-	    ((struct date_yy *)parm)->yyHour = yyvsp[-1].Number;
-	    ((struct date_yy *)parm)->yyMinutes = 0;
-	    ((struct date_yy *)parm)->yySeconds = 0;
-	    ((struct date_yy *)parm)->yyMeridian = yyvsp[0].Meridian;
-#ifdef PHP_DEBUG_PARSE_DATE_PARSER
-		printf("[U M]\n");
-#endif
-	}
-    break;
-case 10:
-{
-	    ((struct date_yy *)parm)->yyHour = yyvsp[-3].Number;
-	    ((struct date_yy *)parm)->yyMinutes = yyvsp[-1].Number;
-	    ((struct date_yy *)parm)->yySeconds = 0;
-	    ((struct date_yy *)parm)->yyMeridian = yyvsp[0].Meridian;
-#ifdef PHP_DEBUG_PARSE_DATE_PARSER
-		printf("[U:U M]\n");
-#endif
-	}
-    break;
-case 11:
-{
-	    ((struct date_yy *)parm)->yyHour = yyvsp[-3].Number;
-	    ((struct date_yy *)parm)->yyMinutes = yyvsp[-1].Number;
-	    ((struct date_yy *)parm)->yyMeridian = MER24;
-#ifdef PHP_DEBUG_PARSE_DATE_PARSER
-		printf("[U:U rel]\n");
-#endif
-	}
-    break;
-case 12:
-{
-	    ((struct date_yy *)parm)->yyHour = yyvsp[-3].Number;
-	    ((struct date_yy *)parm)->yyMinutes = yyvsp[-1].Number;
-	    ((struct date_yy *)parm)->yyMeridian = MER24;
-	    ((struct date_yy *)parm)->yyHaveZone++;
-	    ((struct date_yy *)parm)->yyTimezone = (yyvsp[0].Number < 0
-			  ? -yyvsp[0].Number % 100 + (-yyvsp[0].Number / 100) * 60
-			  : - (yyvsp[0].Number % 100 + (yyvsp[0].Number / 100) * 60));
-#ifdef PHP_DEBUG_PARSE_DATE_PARSER
-		printf("[U:U S]\n");
-#endif
-	}
-    break;
-case 13:
-{
-	    ((struct date_yy *)parm)->yyHour = yyvsp[-5].Number;
-	    ((struct date_yy *)parm)->yyMinutes = yyvsp[-3].Number;
-	    ((struct date_yy *)parm)->yySeconds = yyvsp[-1].Number;
-	    ((struct date_yy *)parm)->yyMeridian = yyvsp[0].Meridian;
-#ifdef PHP_DEBUG_PARSE_DATE_PARSER
-		printf("[U:U:U M]\n");
-#endif
-	}
-    break;
-case 14:
-{
-	    /* ISO 8601 format.  hh:mm:ss[+-][0-9]{2}([0-9]{2})?.  */
-	    ((struct date_yy *)parm)->yyHour = yyvsp[-5].Number;
-	    ((struct date_yy *)parm)->yyMinutes = yyvsp[-3].Number;
-	    ((struct date_yy *)parm)->yySeconds = yyvsp[-1].Number;
-#ifdef PHP_DEBUG_PARSE_DATE_PARSER
-		printf("[U:U:U rel]\n");
-#endif
-	}
-    break;
-case 15:
-{
-	    /* ISO 8601 format.  hh:mm:ss[+-][0-9]{2}([0-9]{2})?.  */
-	    ((struct date_yy *)parm)->yyHour = yyvsp[-5].Number;
-	    ((struct date_yy *)parm)->yyMinutes = yyvsp[-3].Number;
-	    ((struct date_yy *)parm)->yySeconds = yyvsp[-1].Number;
-	    ((struct date_yy *)parm)->yyMeridian = MER24;
-	    ((struct date_yy *)parm)->yyHaveZone++;
-		if (yyvsp[0].Number <= -100 || yyvsp[0].Number >= 100) {
-			((struct date_yy *)parm)->yyTimezone =  
-				-yyvsp[0].Number % 100 + (-yyvsp[0].Number / 100) * 60;
-		} else {
-			((struct date_yy *)parm)->yyTimezone =  -yyvsp[0].Number * 60;
-		}
-#ifdef PHP_DEBUG_PARSE_DATE_PARSER
-		printf("[U:U:U S]\n");
-#endif
-	}
-    break;
-case 16:
-{
-	    ((struct date_yy *)parm)->yyTimezone = yyvsp[0].Number;
-	}
-    break;
-case 17:
-{
-	    ((struct date_yy *)parm)->yyTimezone = yyvsp[0].Number - 60;
-	}
-    break;
-case 18:
-{
-	    ((struct date_yy *)parm)->yyTimezone = yyvsp[-1].Number - 60;
-	}
-    break;
-case 19:
-{
-	    ((struct date_yy *)parm)->yyDayOrdinal = 1;
-	    ((struct date_yy *)parm)->yyDayNumber = yyvsp[0].Number;
-	}
-    break;
-case 20:
-{
-	    ((struct date_yy *)parm)->yyDayOrdinal = 1;
-	    ((struct date_yy *)parm)->yyDayNumber = yyvsp[-1].Number;
-	}
-    break;
-case 21:
-{
-	    ((struct date_yy *)parm)->yyDayOrdinal = yyvsp[-1].Number;
-	    ((struct date_yy *)parm)->yyDayNumber = yyvsp[0].Number;
-	}
-    break;
-case 22:
-{
-	    ((struct date_yy *)parm)->yyMonth = yyvsp[-2].Number;
-	    ((struct date_yy *)parm)->yyDay = yyvsp[0].Number;
-	}
-    break;
-case 23:
-{
-		((struct date_yy *)parm)->yyYear = yyvsp[0].Number;
-		((struct date_yy *)parm)->yyMonth = yyvsp[-7].Number;
-		((struct date_yy *)parm)->yyDay = yyvsp[-6].Number;
-
-		((struct date_yy *)parm)->yyHour = yyvsp[-5].Number;
-		((struct date_yy *)parm)->yyMinutes = yyvsp[-3].Number;
-		((struct date_yy *)parm)->yySeconds = yyvsp[-1].Number;
-
-		((struct date_yy *)parm)->yyHaveTime = 1;
-	}
-    break;
-case 24:
-{
-	  /* Interpret as YYYY/MM/DD if $1 >= 1000, otherwise as MM/DD/YY.
-	     The goal in recognizing YYYY/MM/DD is solely to support legacy
-	     machine-generated dates like those in an RCS log listing.  If
-	     you want portability, use the ISO 8601 format.  */
-	  if (yyvsp[-4].Number >= 1000)
-	    {
-	      ((struct date_yy *)parm)->yyYear = yyvsp[-4].Number;
-	      ((struct date_yy *)parm)->yyMonth = yyvsp[-2].Number;
-	      ((struct date_yy *)parm)->yyDay = yyvsp[0].Number;
-	    }
-	  else
-	    {
-	      ((struct date_yy *)parm)->yyMonth = yyvsp[-4].Number;
-	      ((struct date_yy *)parm)->yyDay = yyvsp[-2].Number;
-	      ((struct date_yy *)parm)->yyYear = yyvsp[0].Number;
-	    }
-	}
-    break;
-case 25:
-{
-	    /* ISO 8601 format.  yyyy-mm-dd.  */
-	    ((struct date_yy *)parm)->yyYear = yyvsp[-2].Number;
-	    ((struct date_yy *)parm)->yyMonth = -yyvsp[-1].Number;
-	    ((struct date_yy *)parm)->yyDay = -yyvsp[0].Number;
-	}
-    break;
-case 26:
-{
-	    /* e.g. 17-JUN-1992.  */
-	    ((struct date_yy *)parm)->yyDay = yyvsp[-2].Number;
-	    ((struct date_yy *)parm)->yyMonth = yyvsp[-1].Number;
-	    ((struct date_yy *)parm)->yyYear = -yyvsp[0].Number;
-	}
-    break;
-case 27:
-{
-	    ((struct date_yy *)parm)->yyMonth = yyvsp[-2].Number;
-	    ((struct date_yy *)parm)->yyDay = yyvsp[-1].Number;
-		((struct date_yy *)parm)->yyYear = yyvsp[0].Number;
-	}
-    break;
-case 28:
-{
-	    ((struct date_yy *)parm)->yyMonth = yyvsp[-1].Number;
-	    if (yyvsp[0].Number > 1000) {
-		((struct date_yy *)parm)->yyYear = yyvsp[0].Number;
-	    } else {
-		((struct date_yy *)parm)->yyDay = yyvsp[0].Number;
-	    }
-	}
-    break;
-case 29:
-{
-	    ((struct date_yy *)parm)->yyMonth = yyvsp[-3].Number;
-	    ((struct date_yy *)parm)->yyDay = yyvsp[-2].Number;
-	    ((struct date_yy *)parm)->yyYear = yyvsp[0].Number;
-	}
-    break;
-case 30:
-{
-	    ((struct date_yy *)parm)->yyMonth = yyvsp[0].Number;
-	    if (yyvsp[-1].Number > 1000) {
-		((struct date_yy *)parm)->yyYear = yyvsp[-1].Number;
-	    } else {
-		((struct date_yy *)parm)->yyDay = yyvsp[-1].Number;
-	    }
-	}
-    break;
-case 31:
-{
-	    ((struct date_yy *)parm)->yyMonth = yyvsp[-1].Number;
-	    ((struct date_yy *)parm)->yyDay = yyvsp[-2].Number;
-	    ((struct date_yy *)parm)->yyYear = yyvsp[0].Number;
-	}
-    break;
-case 32:
-{
-	    ((struct date_yy *)parm)->yyRelSeconds =
-			-((struct date_yy *)parm)->yyRelSeconds;
-	    ((struct date_yy *)parm)->yyRelMinutes =
-			-((struct date_yy *)parm)->yyRelMinutes;
-	    ((struct date_yy *)parm)->yyRelHour =
-			-((struct date_yy *)parm)->yyRelHour;
-	    ((struct date_yy *)parm)->yyRelDay =
-			-((struct date_yy *)parm)->yyRelDay;
-	    ((struct date_yy *)parm)->yyRelMonth =
-			-((struct date_yy *)parm)->yyRelMonth;
-	    ((struct date_yy *)parm)->yyRelYear =
-			-((struct date_yy *)parm)->yyRelYear;
-	}
-    break;
-case 34:
-{
-	    ((struct date_yy *)parm)->yyRelYear += yyvsp[-1].Number * yyvsp[0].Number;
-	}
-    break;
-case 35:
-{
-	    ((struct date_yy *)parm)->yyRelYear += yyvsp[-1].Number * yyvsp[0].Number;
-	}
-    break;
-case 36:
-{
-	    ((struct date_yy *)parm)->yyRelYear += yyvsp[0].Number;
-	}
-    break;
-case 37:
-{
-	    ((struct date_yy *)parm)->yyRelMonth += yyvsp[-1].Number * yyvsp[0].Number;
-	}
-    break;
-case 38:
-{
-	    ((struct date_yy *)parm)->yyRelMonth += yyvsp[-1].Number * yyvsp[0].Number;
-	}
-    break;
-case 39:
-{
-	    ((struct date_yy *)parm)->yyRelMonth += yyvsp[0].Number;
-	}
-    break;
-case 40:
-{
-	    ((struct date_yy *)parm)->yyRelDay += yyvsp[-1].Number * yyvsp[0].Number;
-	}
-    break;
-case 41:
-{
-	    ((struct date_yy *)parm)->yyRelDay += yyvsp[-1].Number * yyvsp[0].Number;
-	}
-    break;
-case 42:
-{
-	    ((struct date_yy *)parm)->yyRelDay += yyvsp[0].Number;
-	}
-    break;
-case 43:
-{
-	    ((struct date_yy *)parm)->yyRelHour += yyvsp[-1].Number * yyvsp[0].Number;
-	}
-    break;
-case 44:
-{
-	    ((struct date_yy *)parm)->yyRelHour += yyvsp[-1].Number * yyvsp[0].Number;
-	}
-    break;
-case 45:
-{
-	    ((struct date_yy *)parm)->yyRelHour += yyvsp[0].Number;
-	}
-    break;
-case 46:
-{
-	    ((struct date_yy *)parm)->yyRelMinutes += yyvsp[-1].Number * yyvsp[0].Number;
-	}
-    break;
-case 47:
-{
-	    ((struct date_yy *)parm)->yyRelMinutes += yyvsp[-1].Number * yyvsp[0].Number;
-	}
-    break;
-case 48:
-{
-	    ((struct date_yy *)parm)->yyRelMinutes += yyvsp[0].Number;
-	}
-    break;
-case 49:
-{
-	    ((struct date_yy *)parm)->yyRelSeconds += yyvsp[-1].Number * yyvsp[0].Number;
-	}
-    break;
-case 50:
-{
-	    ((struct date_yy *)parm)->yyRelSeconds += yyvsp[-1].Number * yyvsp[0].Number;
-	}
-    break;
-case 51:
-{
-	    ((struct date_yy *)parm)->yyRelSeconds += yyvsp[0].Number;
-	}
-    break;
-case 52:
-{
-	    if (((struct date_yy *)parm)->yyHaveTime && 
-			((struct date_yy *)parm)->yyHaveDate && 
-			!((struct date_yy *)parm)->yyHaveRel)
-	      ((struct date_yy *)parm)->yyYear = yyvsp[0].Number;
-	    else
-	      {
-		if (yyvsp[0].Number>10000)
-		  {
-		    ((struct date_yy *)parm)->yyHaveDate++;
-		    ((struct date_yy *)parm)->yyDay= (yyvsp[0].Number)%100;
-		    ((struct date_yy *)parm)->yyMonth= (yyvsp[0].Number/100)%100;
-		    ((struct date_yy *)parm)->yyYear = yyvsp[0].Number/10000;
-		  }
-		else
-		  {
-		    ((struct date_yy *)parm)->yyHaveTime++;
-		    if (yyvsp[0].Number < 100)
-		      {
-			((struct date_yy *)parm)->yyHour = yyvsp[0].Number;
-			((struct date_yy *)parm)->yyMinutes = 0;
-		      }
-		    else
-		      {
-		    	((struct date_yy *)parm)->yyHour = yyvsp[0].Number / 100;
-		    	((struct date_yy *)parm)->yyMinutes = yyvsp[0].Number % 100;
-		      }
-		    ((struct date_yy *)parm)->yySeconds = 0;
-		    ((struct date_yy *)parm)->yyMeridian = MER24;
-		  }
-	      }
-	  }
-    break;
-case 53:
-{
-	    yyval.Meridian = MER24;
-	  }
-    break;
-case 54:
-{
-	    yyval.Meridian = yyvsp[0].Meridian;
-	  }
-    break;
-}
-
-
-
-  yyvsp -= yylen;
-  yyssp -= yylen;
-#if YYLSP_NEEDED
-  yylsp -= yylen;
-#endif
-
-#if YYDEBUG
-  if (yydebug)
-    {
-      short *yyssp1 = yyss - 1;
-      YYFPRINTF (stderr, "state stack now");
-      while (yyssp1 != yyssp)
-	YYFPRINTF (stderr, " %d", *++yyssp1);
-      YYFPRINTF (stderr, "\n");
-    }
-#endif
-
-  *++yyvsp = yyval;
-#if YYLSP_NEEDED
-  *++yylsp = yyloc;
-#endif
-
-  /* Now `shift' the result of the reduction.  Determine what state
-     that goes to, based on the state we popped back to and the rule
-     number reduced by.  */
-
-  yyn = yyr1[yyn];
-
-  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
-  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
-    yystate = yytable[yystate];
-  else
-    yystate = yydefgoto[yyn - YYNTBASE];
-
-  goto yynewstate;
-
-
-/*------------------------------------.
-| yyerrlab -- here on detecting error |
-`------------------------------------*/
-yyerrlab:
-  /* If not already recovering from an error, report this error.  */
-  if (!yyerrstatus)
-    {
-      ++yynerrs;
-
-#ifdef YYERROR_VERBOSE
-      yyn = yypact[yystate];
-
-      if (yyn > YYFLAG && yyn < YYLAST)
-	{
-	  YYSIZE_T yysize = 0;
-	  char *yymsg;
-	  int yyx, yycount;
-
-	  yycount = 0;
-	  /* Start YYX at -YYN if negative to avoid negative indexes in
-	     YYCHECK.  */
-	  for (yyx = yyn < 0 ? -yyn : 0;
-	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
-	    if (yycheck[yyx + yyn] == yyx)
-	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
-	  yysize += yystrlen ("parse error, unexpected ") + 1;
-	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
-	  yymsg = (char *) YYSTACK_ALLOC (yysize);
-	  if (yymsg != 0)
-	    {
-	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
-	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);
-
-	      if (yycount < 5)
-		{
-		  yycount = 0;
-		  for (yyx = yyn < 0 ? -yyn : 0;
-		       yyx < (int) (sizeof (yytname) / sizeof (char *));
-		       yyx++)
-		    if (yycheck[yyx + yyn] == yyx)
-		      {
-			const char *yyq = ! yycount ? ", expecting " : " or ";
-			yyp = yystpcpy (yyp, yyq);
-			yyp = yystpcpy (yyp, yytname[yyx]);
-			yycount++;
-		      }
-		}
-	      yyerror (yymsg);
-	      YYSTACK_FREE (yymsg);
-	    }
-	  else
-	    yyerror ("parse error; also virtual memory exhausted");
-	}
-      else
-#endif /* defined (YYERROR_VERBOSE) */
-	yyerror ("parse error");
-    }
-  goto yyerrlab1;
-
-
-/*--------------------------------------------------.
-| yyerrlab1 -- error raised explicitly by an action |
-`--------------------------------------------------*/
-yyerrlab1:
-  if (yyerrstatus == 3)
-    {
-      /* If just tried and failed to reuse lookahead token after an
-	 error, discard it.  */
-
-      /* return failure if at end of input */
-      if (yychar == YYEOF)
-	YYABORT;
-      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
-		  yychar, yytname[yychar1]));
-      yychar = YYEMPTY;
-    }
-
-  /* Else will try to reuse lookahead token after shifting the error
-     token.  */
-
-  yyerrstatus = 3;		/* Each real token shifted decrements this */
-
-  goto yyerrhandle;
-
-
-/*-------------------------------------------------------------------.
-| yyerrdefault -- current state does not do anything special for the |
-| error token.                                                       |
-`-------------------------------------------------------------------*/
-yyerrdefault:
-#if 0
-  /* This is wrong; only states that explicitly want error tokens
-     should shift them.  */
-
-  /* If its default is to accept any token, ok.  Otherwise pop it.  */
-  yyn = yydefact[yystate];
-  if (yyn)
-    goto yydefault;
-#endif
-
-
-/*---------------------------------------------------------------.
-| yyerrpop -- pop the current state because it cannot handle the |
-| error token                                                    |
-`---------------------------------------------------------------*/
-yyerrpop:
-  if (yyssp == yyss)
-    YYABORT;
-  yyvsp--;
-  yystate = *--yyssp;
-#if YYLSP_NEEDED
-  yylsp--;
-#endif
-
-#if YYDEBUG
-  if (yydebug)
-    {
-      short *yyssp1 = yyss - 1;
-      YYFPRINTF (stderr, "Error: state stack now");
-      while (yyssp1 != yyssp)
-	YYFPRINTF (stderr, " %d", *++yyssp1);
-      YYFPRINTF (stderr, "\n");
-    }
-#endif
-
-/*--------------.
-| yyerrhandle.  |
-`--------------*/
-yyerrhandle:
-  yyn = yypact[yystate];
-  if (yyn == YYFLAG)
-    goto yyerrdefault;
-
-  yyn += YYTERROR;
-  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
-    goto yyerrdefault;
-
-  yyn = yytable[yyn];
-  if (yyn < 0)
-    {
-      if (yyn == YYFLAG)
-	goto yyerrpop;
-      yyn = -yyn;
-      goto yyreduce;
-    }
-  else if (yyn == 0)
-    goto yyerrpop;
-
-  if (yyn == YYFINAL)
-    YYACCEPT;
-
-  YYDPRINTF ((stderr, "Shifting error token, "));
-
-  *++yyvsp = yylval;
-#if YYLSP_NEEDED
-  *++yylsp = yylloc;
-#endif
-
-  yystate = yyn;
-  goto yynewstate;
-
-
-/*-------------------------------------.
-| yyacceptlab -- YYACCEPT comes here.  |
-`-------------------------------------*/
-yyacceptlab:
-  yyresult = 0;
-  goto yyreturn;
-
-/*-----------------------------------.
-| yyabortlab -- YYABORT comes here.  |
-`-----------------------------------*/
-yyabortlab:
-  yyresult = 1;
-  goto yyreturn;
-
-/*---------------------------------------------.
-| yyoverflowab -- parser overflow comes here.  |
-`---------------------------------------------*/
-yyoverflowlab:
-  yyerror ("parser stack overflow");
-  yyresult = 2;
-  /* Fall through.  */
-
-yyreturn:
-#ifndef yyoverflow
-  if (yyss != yyssa)
-    YYSTACK_FREE (yyss);
-#endif
-  return yyresult;
-}
-
-
-time_t get_date (char *p, time_t *now);
-
-#ifndef PHP_WIN32
-extern struct tm	*gmtime();
-extern struct tm	*localtime();
-extern time_t		mktime();
-#endif
-
-/* Month and day table. */
-static TABLE const MonthDayTable[] = {
-    { "january",	tMONTH,  1 },
-    { "february",	tMONTH,  2 },
-    { "march",		tMONTH,  3 },
-    { "april",		tMONTH,  4 },
-    { "may",		tMONTH,  5 },
-    { "june",		tMONTH,  6 },
-    { "july",		tMONTH,  7 },
-    { "august",		tMONTH,  8 },
-    { "september",	tMONTH,  9 },
-    { "sept",		tMONTH,  9 },
-    { "october",	tMONTH, 10 },
-    { "november",	tMONTH, 11 },
-    { "december",	tMONTH, 12 },
-    { "sunday",		tDAY, 0 },
-    { "monday",		tDAY, 1 },
-    { "tuesday",	tDAY, 2 },
-    { "tues",		tDAY, 2 },
-    { "wednesday",	tDAY, 3 },
-    { "wednes",		tDAY, 3 },
-    { "thursday",	tDAY, 4 },
-    { "thur",		tDAY, 4 },
-    { "thurs",		tDAY, 4 },
-    { "friday",		tDAY, 5 },
-    { "saturday",	tDAY, 6 },
-    { NULL, 0, 0 }
-};
-
-/* Time units table. */
-static TABLE const UnitsTable[] = {
-    { "year",		tYEAR_UNIT,	1 },
-    { "month",		tMONTH_UNIT,	1 },
-    { "fortnight",	tDAY_UNIT,	14 },
-    { "week",		tDAY_UNIT,	7 },
-    { "day",		tDAY_UNIT,	1 },
-    { "hour",		tHOUR_UNIT,	1 },
-    { "minute",		tMINUTE_UNIT,	1 },
-    { "min",		tMINUTE_UNIT,	1 },
-    { "second",		tSEC_UNIT,	1 },
-    { "sec",		tSEC_UNIT,	1 },
-    { NULL, 0, 0 }
-};
-
-/* Assorted relative-time words. */
-static TABLE const OtherTable[] = {
-    { "tomorrow",	tDAY_UNIT,	1 },
-    { "yesterday",	tDAY_UNIT,	-1 },
-    { "today",		tDAY_UNIT,	0 },
-    { "now",		tDAY_UNIT,	0 },
-    { "last",		tUNUMBER,	-1 },
-    { "this",		tUNUMBER,	0 },
-    { "next",		tUNUMBER,	2 },
-    { "first",		tUNUMBER,	1 },
-/*  { "second",		tUNUMBER,	2 }, */
-    { "third",		tUNUMBER,	3 },
-    { "fourth",		tUNUMBER,	4 },
-    { "fifth",		tUNUMBER,	5 },
-    { "sixth",		tUNUMBER,	6 },
-    { "seventh",	tUNUMBER,	7 },
-    { "eighth",		tUNUMBER,	8 },
-    { "ninth",		tUNUMBER,	9 },
-    { "tenth",		tUNUMBER,	10 },
-    { "eleventh",	tUNUMBER,	11 },
-    { "twelfth",	tUNUMBER,	12 },
-    { "ago",		tAGO,	1 },
-    { NULL, 0, 0 }
-};
-
-/* The timezone table. */
-static TABLE const TimezoneTable[] = {
-    { "gmt",	tZONE,     HOUR ( 0) },	/* Greenwich Mean */
-    { "ut",	tZONE,     HOUR ( 0) },	/* Universal (Coordinated) */
-    { "utc",	tZONE,     HOUR ( 0) },
-    { "wet",	tZONE,     HOUR ( 0) },	/* Western European */
-    { "bst",	tDAYZONE,  HOUR ( 0) },	/* British Summer */
-    { "wat",	tZONE,     HOUR ( 1) },	/* West Africa */
-    { "at",	tZONE,     HOUR ( 2) },	/* Azores */
-#if	0
-    /* For completeness.  BST is also British Summer, and GST is
-     * also Guam Standard. */
-    { "bst",	tZONE,     HOUR ( 3) },	/* Brazil Standard */
-    { "gst",	tZONE,     HOUR ( 3) },	/* Greenland Standard */
-#endif
-#if 0
-    { "nft",	tZONE,     HOUR (3.5) },	/* Newfoundland */
-    { "nst",	tZONE,     HOUR (3.5) },	/* Newfoundland Standard */
-    { "ndt",	tDAYZONE,  HOUR (3.5) },	/* Newfoundland Daylight */
-#endif
-    { "ast",	tZONE,     HOUR ( 4) },	/* Atlantic Standard */
-    { "adt",	tDAYZONE,  HOUR ( 4) },	/* Atlantic Daylight */
-    { "est",	tZONE,     HOUR ( 5) },	/* Eastern Standard */
-    { "edt",	tDAYZONE,  HOUR ( 5) },	/* Eastern Daylight */
-    { "cst",	tZONE,     HOUR ( 6) },	/* Central Standard */
-    { "cdt",	tDAYZONE,  HOUR ( 6) },	/* Central Daylight */
-    { "mst",	tZONE,     HOUR ( 7) },	/* Mountain Standard */
-    { "mdt",	tDAYZONE,  HOUR ( 7) },	/* Mountain Daylight */
-    { "pst",	tZONE,     HOUR ( 8) },	/* Pacific Standard */
-    { "pdt",	tDAYZONE,  HOUR ( 8) },	/* Pacific Daylight */
-    { "yst",	tZONE,     HOUR ( 9) },	/* Yukon Standard */
-    { "ydt",	tDAYZONE,  HOUR ( 9) },	/* Yukon Daylight */
-    { "hst",	tZONE,     HOUR (10) },	/* Hawaii Standard */
-    { "hdt",	tDAYZONE,  HOUR (10) },	/* Hawaii Daylight */
-    { "cat",	tZONE,     HOUR (10) },	/* Central Alaska */
-    { "akst",	tZONE,     HOUR (10) }, /* Alaska Standard */
-    { "akdt",	tZONE,     HOUR (10) }, /* Alaska Daylight */
-    { "ahst",	tZONE,     HOUR (10) },	/* Alaska-Hawaii Standard */
-    { "nt",	tZONE,     HOUR (11) },	/* Nome */
-    { "idlw",	tZONE,     HOUR (12) },	/* International Date Line West */
-    { "cet",	tZONE,     -HOUR (1) },	/* Central European */
-    { "cest",	tDAYZONE,  -HOUR (1) },	/* Central European Summer */
-    { "met",	tZONE,     -HOUR (1) },	/* Middle European */
-    { "mewt",	tZONE,     -HOUR (1) },	/* Middle European Winter */
-    { "mest",	tDAYZONE,  -HOUR (1) },	/* Middle European Summer */
-    { "mesz",	tDAYZONE,  -HOUR (1) },	/* Middle European Summer */
-    { "swt",	tZONE,     -HOUR (1) },	/* Swedish Winter */
-    { "sst",	tDAYZONE,  -HOUR (1) },	/* Swedish Summer */
-    { "fwt",	tZONE,     -HOUR (1) },	/* French Winter */
-    { "fst",	tDAYZONE,  -HOUR (1) },	/* French Summer */
-    { "eet",	tZONE,     -HOUR (2) },	/* Eastern Europe, USSR Zone 1 */
-    { "bt",	tZONE,     -HOUR (3) },	/* Baghdad, USSR Zone 2 */
-#if 0
-    { "it",	tZONE,     -HOUR (3.5) },/* Iran */
-#endif
-    { "zp4",	tZONE,     -HOUR (4) },	/* USSR Zone 3 */
-    { "zp5",	tZONE,     -HOUR (5) },	/* USSR Zone 4 */
-#if 0
-    { "ist",	tZONE,     -HOUR (5.5) },/* Indian Standard */
-#endif
-    { "zp6",	tZONE,     -HOUR (6) },	/* USSR Zone 5 */
-#if	0
-    /* For completeness.  NST is also Newfoundland Standard, and SST is
-     * also Swedish Summer. */
-    { "nst",	tZONE,     -HOUR (6.5) },/* North Sumatra */
-    { "sst",	tZONE,     -HOUR (7) },	/* South Sumatra, USSR Zone 6 */
-#endif	/* 0 */
-    { "wast",	tZONE,     -HOUR (7) },	/* West Australian Standard */
-    { "wadt",	tDAYZONE,  -HOUR (7) },	/* West Australian Daylight */
-#if 0
-    { "jt",	tZONE,     -HOUR (7.5) },/* Java (3pm in Cronusland!) */
-#endif
-    { "cct",	tZONE,     -HOUR (8) },	/* China Coast, USSR Zone 7 */
-    { "jst",	tZONE,     -HOUR (9) },	/* Japan Standard, USSR Zone 8 */
-#if 0
-    { "cast",	tZONE,     -HOUR (9.5) },/* Central Australian Standard */
-    { "cadt",	tDAYZONE,  -HOUR (9.5) },/* Central Australian Daylight */
-#endif
-    { "east",	tZONE,     -HOUR (10) },	/* Eastern Australian Standard */
-    { "eadt",	tDAYZONE,  -HOUR (10) },	/* Eastern Australian Daylight */
-    { "gst",	tZONE,     -HOUR (10) },	/* Guam Standard, USSR Zone 9 */
-    { "nzt",	tZONE,     -HOUR (12) },	/* New Zealand */
-    { "nzst",	tZONE,     -HOUR (12) },	/* New Zealand Standard */
-    { "nzdt",	tDAYZONE,  -HOUR (12) },	/* New Zealand Daylight */
-    { "idle",	tZONE,     -HOUR (12) },	/* International Date Line East */
-    {  NULL, 0, 0  }
-};
-
-/* Military timezone table. */
-static TABLE const MilitaryTable[] = {
-    { "a",	tZONE,	HOUR (- 1) },
-    { "b",	tZONE,	HOUR (- 2) },
-    { "c",	tZONE,	HOUR (- 3) },
-    { "d",	tZONE,	HOUR (- 4) },
-    { "e",	tZONE,	HOUR (- 5) },
-    { "f",	tZONE,	HOUR (- 6) },
-    { "g",	tZONE,	HOUR (- 7) },
-    { "h",	tZONE,	HOUR (- 8) },
-    { "i",	tZONE,	HOUR (- 9) },
-    { "k",	tZONE,	HOUR (-10) },
-    { "l",	tZONE,	HOUR (-11) },
-    { "m",	tZONE,	HOUR (-12) },
-    { "n",	tZONE,	HOUR (  1) },
-    { "o",	tZONE,	HOUR (  2) },
-    { "p",	tZONE,	HOUR (  3) },
-    { "q",	tZONE,	HOUR (  4) },
-    { "r",	tZONE,	HOUR (  5) },
-    { "s",	tZONE,	HOUR (  6) },
-    { "t",	tZONE,	HOUR (  7) },
-    { "u",	tZONE,	HOUR (  8) },
-    { "v",	tZONE,	HOUR (  9) },
-    { "w",	tZONE,	HOUR ( 10) },
-    { "x",	tZONE,	HOUR ( 11) },
-    { "y",	tZONE,	HOUR ( 12) },
-    { "z",	tZONE,	HOUR (  0) },
-    { NULL, 0, 0 }
-};
-
-
-
-
-/* ARGSUSED */
-static int
-yyerror (s)
-     char *s ATTRIBUTE_UNUSED;
-{
-  return 0;
-}
-
-static int
-ToHour (Hours, Meridian)
-     int Hours;
-     MERIDIAN Meridian;
-{
-  switch (Meridian)
-    {
-    case MER24:
-      if (Hours < 0 || Hours > 23)
-	return -1;
-      return Hours;
-    case MERam:
-      if (Hours < 1 || Hours > 12)
-	return -1;
-      if (Hours == 12)
-	Hours = 0;
-      return Hours;
-    case MERpm:
-      if (Hours < 1 || Hours > 12)
-	return -1;
-      if (Hours == 12)
-	Hours = 0;
-      return Hours + 12;
-    default:
-      abort ();
-    }
-  /* NOTREACHED */
-}
-
-static int
-ToYear (Year)
-     int Year;
-{
-  if (Year < 0)
-    Year = -Year;
-
-  /* XPG4 suggests that years 00-68 map to 2000-2068, and
-     years 69-99 map to 1969-1999.  */
-  if (Year < 69)
-    Year += 2000;
-  else if (Year < 100)
-    Year += 1900;
-
-  return Year;
-}
-
-static int
-LookupWord (lvalp,buff)
-	YYSTYPE *lvalp;
-     char *buff;
-{
-  register char *p;
-  register char *q;
-  register const TABLE *tp;
-  int i;
-  int abbrev;
-
-  /* Make it lowercase. */
-  for (p = buff; *p; p++)
-    if (ISUPPER ((unsigned char) *p))
-      *p = tolower (*p);
-
-  if (strcmp (buff, "am") == 0 || strcmp (buff, "a.m.") == 0)
-    {
-      lvalp->Meridian = MERam;
-      return tMERIDIAN;
-    }
-  if (strcmp (buff, "pm") == 0 || strcmp (buff, "p.m.") == 0)
-    {
-      lvalp->Meridian = MERpm;
-      return tMERIDIAN;
-    }
-
-  /* See if we have an abbreviation for a month. */
-  if (strlen (buff) == 3)
-    abbrev = 1;
-  else if (strlen (buff) == 4 && buff[3] == '.')
-    {
-      abbrev = 1;
-      buff[3] = '\0';
-    }
-  else
-    abbrev = 0;
-
-  for (tp = MonthDayTable; tp->name; tp++)
-    {
-      if (abbrev)
-	{
-	  if (strncmp (buff, tp->name, 3) == 0)
-	    {
-	      lvalp->Number = tp->value;
-	      return tp->type;
-	    }
-	}
-      else if (strcmp (buff, tp->name) == 0)
-	{
-	  lvalp->Number = tp->value;
-	  return tp->type;
-	}
-    }
-
-  for (tp = TimezoneTable; tp->name; tp++)
-    if (strcmp (buff, tp->name) == 0)
-      {
-	lvalp->Number = tp->value;
-	return tp->type;
-      }
-
-  if (strcmp (buff, "dst") == 0)
-    return tDST;
-
-  for (tp = UnitsTable; tp->name; tp++)
-    if (strcmp (buff, tp->name) == 0)
-      {
-	lvalp->Number = tp->value;
-	return tp->type;
-      }
-
-  /* Strip off any plural and try the units table again. */
-  i = strlen (buff) - 1;
-  if (buff[i] == 's')
-    {
-      buff[i] = '\0';
-      for (tp = UnitsTable; tp->name; tp++)
-	if (strcmp (buff, tp->name) == 0)
-	  {
-	    lvalp->Number = tp->value;
-	    return tp->type;
-	  }
-      buff[i] = 's';		/* Put back for "this" in OtherTable. */
-    }
-
-  for (tp = OtherTable; tp->name; tp++)
-    if (strcmp (buff, tp->name) == 0)
-      {
-	lvalp->Number = tp->value;
-	return tp->type;
-      }
-
-  /* Military timezones. */
-  if (buff[1] == '\0' && ISALPHA ((unsigned char) *buff))
-    {
-      for (tp = MilitaryTable; tp->name; tp++)
-	if (strcmp (buff, tp->name) == 0)
-	  {
-	    lvalp->Number = tp->value;
-	    return tp->type;
-	  }
-    }
-
-  /* Drop out any periods and try the timezone table again. */
-  for (i = 0, p = q = buff; *q; q++)
-    if (*q != '.')
-      *p++ = *q;
-    else
-      i++;
-  *p = '\0';
-  if (i)
-    for (tp = TimezoneTable; tp->name; tp++)
-      if (strcmp (buff, tp->name) == 0)
-	{
-	  lvalp->Number = tp->value;
-	  return tp->type;
-	}
-
-  return tID;
-}
-
-yylex (YYSTYPE *lvalp, void *parm)
-{
-  register unsigned char c;
-  register char *p;
-  char buff[20];
-  int Count;
-  int sign;
-  struct date_yy * date = (struct date_yy *)parm;
-
-  for (;;)
-    {
-      while (ISSPACE ((unsigned char) *date->yyInput))
-	date->yyInput++;
-
-      if (ISDIGIT (c = *date->yyInput) || c == '-' || c == '+')
-	{
-	  if (c == '-' || c == '+')
-	    {
-	      sign = c == '-' ? -1 : 1;
-	      if (!ISDIGIT (*++date->yyInput))
-		/* skip the '-' sign */
-		continue;
-	    }
-	  else
-	    sign = 0;
-	  for (lvalp->Number = 0; ISDIGIT (c = *date->yyInput++);)
-	    lvalp->Number = 10 * lvalp->Number + c - '0';
-	  date->yyInput--;
-	  if (sign < 0)
-	    lvalp->Number = -lvalp->Number;
-	  /* Ignore ordinal suffixes on numbers */
-	  c = *date->yyInput;
-	  if (c == 's' || c == 'n' || c == 'r' || c == 't') {
-	    c = *++date->yyInput;
-	    if (c == 't' || c == 'd' || c == 'h') {
-	      date->yyInput++;
-	    } else {
-	      date->yyInput--;
-	    }
-	  }
-#ifdef PHP_DEBUG_PARSE_DATE_PARSER
-	  printf ("T: %s\n", sign ? "tS" : "tU");
-#endif
-	  return sign ? tSNUMBER : tUNUMBER;
-	}
-      if (ISALPHA (c))
-	{
-	  for (p = buff; (c = *date->yyInput++, ISALPHA (c)) || c == '.';)
-	    if (p < &buff[sizeof buff - 1])
-	      *p++ = c;
-	  *p = '\0';
-	  date->yyInput--;
-#ifdef PHP_DEBUG_PARSE_DATE_PARSER
-	  printf ("T: LW\n");
-#endif
-	  return LookupWord (lvalp, buff);
-	}
-      if (c != '(') {
-#ifdef PHP_DEBUG_PARSE_DATE_PARSER
-	printf ("T: %c\n", *date->yyInput);
-#endif
-	return *date->yyInput++;
-	  }
-      Count = 0;
-      do
-	{
-	  c = *date->yyInput++;
-	  if (c == '\0') {
-#ifdef PHP_DEBUG_PARSE_DATE_PARSER
-	printf ("T: %c\n", c);
-#endif
-	    return c;
-	  }
-	  if (c == '(')
-	    Count++;
-	  else if (c == ')')
-	    Count--;
-	}
-      while (Count > 0);
-    }
-}
-
-#define TM_YEAR_ORIGIN 1900
-
-/* Yield A - B, measured in seconds.  */
-static long
-difftm (struct tm *a, struct tm *b)
-{
-  int ay = a->tm_year + (TM_YEAR_ORIGIN - 1);
-  int by = b->tm_year + (TM_YEAR_ORIGIN - 1);
-  long days = (
-  /* difference in day of year */
-		a->tm_yday - b->tm_yday
-  /* + intervening leap days */
-		+ ((ay >> 2) - (by >> 2))
-		- (ay / 100 - by / 100)
-		+ ((ay / 100 >> 2) - (by / 100 >> 2))
-  /* + difference in years * 365 */
-		+ (long) (ay - by) * 365
-  );
-  return (60 * (60 * (24 * days + (a->tm_hour - b->tm_hour))
-		+ (a->tm_min - b->tm_min))
-	  + (a->tm_sec - b->tm_sec));
-}
-
-time_t php_parse_date(char *p, time_t *now)
-{
-  struct tm tm, tm0, *tmp;
-  time_t Start;
-  struct date_yy date;
-
-  date.yyInput = p;
-  Start = now ? *now : time ((time_t *) NULL);
-  tmp = localtime (&Start);
-  if (!tmp)
-    return -1;
-  date.yyYear = tmp->tm_year + TM_YEAR_ORIGIN;
-  date.yyMonth = tmp->tm_mon + 1;
-  date.yyDay = tmp->tm_mday;
-  date.yyHour = tmp->tm_hour;
-  date.yyMinutes = tmp->tm_min;
-  date.yySeconds = tmp->tm_sec;
-  tm.tm_isdst = tmp->tm_isdst;
-  date.yyMeridian = MER24;
-  date.yyRelSeconds = 0;
-  date.yyRelMinutes = 0;
-  date.yyRelHour = 0;
-  date.yyRelDay = 0;
-  date.yyRelMonth = 0;
-  date.yyRelYear = 0;
-  date.yyHaveDate = 0;
-  date.yyHaveDay = 0;
-  date.yyHaveRel = 0;
-  date.yyHaveTime = 0;
-  date.yyHaveZone = 0;
-
-  if (yyparse ((void *)&date)
-      || date.yyHaveTime > 1 || date.yyHaveZone > 1 
-	  || date.yyHaveDate > 1 || date.yyHaveDay > 1)
-    return -1;
-
-  tm.tm_year = ToYear (date.yyYear) - TM_YEAR_ORIGIN + date.yyRelYear;
-  tm.tm_mon = date.yyMonth - 1 + date.yyRelMonth;
-  tm.tm_mday = date.yyDay + date.yyRelDay;
-  if (date.yyHaveTime || (date.yyHaveRel && !date.yyHaveDate && !date.yyHaveDay))
-    {
-      tm.tm_hour = ToHour (date.yyHour, date.yyMeridian);
-      if (tm.tm_hour < 0)
-	return -1;
-      tm.tm_min = date.yyMinutes;
-      tm.tm_sec = date.yySeconds;
-    }
-  else
-    {
-      tm.tm_hour = tm.tm_min = tm.tm_sec = 0;
-    }
-  tm.tm_hour += date.yyRelHour;
-  tm.tm_min += date.yyRelMinutes;
-  tm.tm_sec += date.yyRelSeconds;
-
-  /* Let mktime deduce tm_isdst if we have an absolute timestamp,
-     or if the relative timestamp mentions days, months, or years.  */
-  if (date.yyHaveDate | date.yyHaveDay | date.yyHaveTime | date.yyRelDay | date.yyRelMonth | date.yyRelYear)
-    tm.tm_isdst = -1;
-
-  tm0 = tm;
-
-  Start = mktime (&tm);
-
-  if (Start == (time_t) -1)
-    {
-
-      /* Guard against falsely reporting errors near the time_t boundaries
-         when parsing times in other time zones.  For example, if the min
-         time_t value is 1970-01-01 00:00:00 UTC and we are 8 hours ahead
-         of UTC, then the min localtime value is 1970-01-01 08:00:00; if
-         we apply mktime to 1970-01-01 00:00:00 we will get an error, so
-         we apply mktime to 1970-01-02 08:00:00 instead and adjust the time
-         zone by 24 hours to compensate.  This algorithm assumes that
-         there is no DST transition within a day of the time_t boundaries.  */
-      if (date.yyHaveZone)
-	{
-	  tm = tm0;
-	  if (tm.tm_year <= EPOCH - TM_YEAR_ORIGIN)
-	    {
-	      tm.tm_mday++;
-	      date.yyTimezone -= 24 * 60;
-	    }
-	  else
-	    {
-	      tm.tm_mday--;
-	      date.yyTimezone += 24 * 60;
-	    }
-	  Start = mktime (&tm);
-	}
-
-      if (Start == (time_t) -1)
-	return Start;
-    }
-
-  if (date.yyHaveDay && !date.yyHaveDate)
-    {
-      tm.tm_mday += ((date.yyDayNumber - tm.tm_wday + 7) % 7
-		     + 7 * (date.yyDayOrdinal - (0 < date.yyDayOrdinal)));
-      Start = mktime (&tm);
-      if (Start == (time_t) -1)
-	return Start;
-    }
-
-  if (date.yyHaveZone)
-    {
-      long delta;
-      struct tm *gmt = gmtime (&Start);
-      if (!gmt)
-	return -1;
-      delta = date.yyTimezone * 60L + difftm (&tm, gmt);
-      if ((Start + delta < Start) != (delta < 0))
-	return -1;		/* time_t overflow */
-      Start += delta;
-    }
-
-  return Start;
-}
+
+/*  A Bison parser, made from parsedate.y
+ by  GNU Bison version 1.27
+  */
+
+#define YYBISON 1  /* Identify Bison output.  */
+
+#define	tAGO	257
+#define	tDAY	258
+#define	tDAY_UNIT	259
+#define	tDAYZONE	260
+#define	tDST	261
+#define	tHOUR_UNIT	262
+#define	tID	263
+#define	tMERIDIAN	264
+#define	tMINUTE_UNIT	265
+#define	tMONTH	266
+#define	tMONTH_UNIT	267
+#define	tSEC_UNIT	268
+#define	tSNUMBER	269
+#define	tUNUMBER	270
+#define	tYEAR_UNIT	271
+#define	tZONE	272
+
+#line 1 "parsedate.y"
+
+/*
+**  Originally written by Steven M. Bellovin <smb@research.att.com> while
+**  at the University of North Carolina at Chapel Hill.  Later tweaked by
+**  a couple of people on Usenet.  Completely overhauled by Rich $alz
+**  <rsalz@bbn.com> and Jim Berets <jberets@bbn.com> in August, 1990.
+**
+**  This code is in the public domain and has no copyright.
+*/
+
+/* $Id: parsedate.y,v 1.34.2.7 2004/04/08 19:21:46 derick Exp $ */
+
+#include "php.h"
+
+#ifdef PHP_WIN32
+#include <malloc.h>
+#endif
+
+#include <stdio.h>
+#include <sys/types.h>
+#include <time.h>
+#include <ctype.h>
+
+#ifdef HAVE_SYS_TIME_H
+# include <sys/time.h>
+#endif
+#ifdef PHP_WIN32
+# include "win32/time.h"
+#endif
+
+#include "php_parsedate.h"
+
+#if HAVE_STDLIB_H
+# include <stdlib.h> /* for `free'; used by Bison 1.27 */
+#endif
+
+#if defined(_HPUX_SOURCE)
+#include <alloca.h>
+#endif
+
+#if defined (STDC_HEADERS) || (!defined (isascii) && !defined (HAVE_ISASCII))
+# define IN_CTYPE_DOMAIN(c) 1
+#else
+# define IN_CTYPE_DOMAIN(c) isascii(c)
+#endif
+
+#define ISSPACE(c) (IN_CTYPE_DOMAIN (c) && isspace (c))
+#define ISALPHA(c) (IN_CTYPE_DOMAIN (c) && isalpha (c))
+#define ISUPPER(c) (IN_CTYPE_DOMAIN (c) && isupper (c))
+#define ISDIGIT_LOCALE(c) (IN_CTYPE_DOMAIN (c) && isdigit (c))
+
+/* ISDIGIT differs from ISDIGIT_LOCALE, as follows:
+   - Its arg may be any int or unsigned int; it need not be an unsigned char.
+   - It's guaranteed to evaluate its argument exactly once.
+   - It's typically faster.
+   Posix 1003.2-1992 section 2.5.2.1 page 50 lines 1556-1558 says that
+   only '0' through '9' are digits.  Prefer ISDIGIT to ISDIGIT_LOCALE unless
+   it's important to use the locale's definition of `digit' even when the
+   host does not conform to Posix.  */
+#define ISDIGIT(c) ((unsigned) (c) - '0' <= 9)
+
+#if defined (STDC_HEADERS) || defined (USG)
+# include <string.h>
+#endif
+
+#if __GNUC__ < 2 || (__GNUC__ == 2 && __GNUC_MINOR__ < 7)
+# define __attribute__(x)
+#endif
+
+#ifndef ATTRIBUTE_UNUSED
+# define ATTRIBUTE_UNUSED __attribute__ ((__unused__))
+#endif
+
+/* Some old versions of bison generate parsers that use bcopy.
+   That loses on systems that don't provide the function, so we have
+   to redefine it here.  */
+#if !defined (HAVE_BCOPY) && defined (HAVE_MEMCPY) && !defined (bcopy)
+# define bcopy(from, to, len) memcpy ((to), (from), (len))
+#endif
+
+/* Remap normal yacc parser interface names (yyparse, yylex, yyerror, etc),
+   as well as gratuitiously global symbol names, so we can have multiple
+   yacc generated parsers in the same program.  Note that these are only
+   the variables produced by yacc.  If other parser generators (bison,
+   byacc, etc) produce additional global names that conflict at link time,
+   then those parser generators need to be fixed instead of adding those
+   names to this list. */
+
+#define yyparse php_gd_parse
+#define yylex   php_gd_lex
+
+static int yyerror ();
+
+#define EPOCH		1970
+#define HOUR(x)		((x) * 60)
+
+#define MAX_BUFF_LEN    128   /* size of buffer to read the date into */
+
+/*
+**  An entry in the lexical lookup table.
+*/
+typedef struct _TABLE {
+    const char	*name;
+    int		type;
+    int		value;
+} TABLE;
+
+
+/*
+**  Meridian:  am, pm, or 24-hour style.
+*/
+typedef enum _MERIDIAN {
+    MERam, MERpm, MER24
+} MERIDIAN;
+
+struct date_yy {
+	const char	*yyInput;
+	int	yyDayOrdinal;
+	int	yyDayNumber;
+	int	yyHaveDate;
+	int	yyHaveDay;
+	int	yyHaveRel;
+	int	yyHaveTime;
+	int	yyHaveZone;
+	int	yyTimezone;
+	int	yyDay;
+	int	yyHour;
+	int	yyMinutes;
+	int	yyMonth;
+	int	yySeconds;
+	int	yyYear;
+	MERIDIAN	yyMeridian;
+	int	yyRelDay;
+	int	yyRelHour;
+	int	yyRelMinutes;
+	int	yyRelMonth;
+	int	yyRelSeconds;
+	int	yyRelYear;
+};
+
+typedef union _date_ll {
+    int			Number;
+    enum _MERIDIAN	Meridian;
+} date_ll;
+
+#define YYPARSE_PARAM parm
+#define YYLEX_PARAM parm
+#define YYSTYPE date_ll
+#define YYLTYPE void
+
+#ifndef YYSTYPE
+#define YYSTYPE int
+#endif
+#include <stdio.h>
+
+#ifndef __cplusplus
+#ifndef __STDC__
+#define const
+#endif
+#endif
+
+
+
+#define	YYFINAL		70
+#define	YYFLAG		-32768
+#define	YYNTBASE	22
+
+#define YYTRANSLATE(x) ((unsigned)(x) <= 272 ? yytranslate[x] : 32)
+
+static const char yytranslate[] = {     0,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,    20,     2,     2,    21,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,    19,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+     2,     2,     2,     2,     2,     1,     3,     4,     5,     6,
+     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
+    17,    18
+};
+
+#if YYDEBUG != 0
+static const short yyprhs[] = {     0,
+     0,     1,     4,     6,     8,    10,    12,    14,    16,    19,
+    24,    29,    34,    41,    48,    55,    57,    59,    62,    64,
+    67,    70,    74,    83,    89,    93,    97,   101,   104,   109,
+   112,   116,   119,   121,   124,   127,   129,   132,   135,   137,
+   140,   143,   145,   148,   151,   153,   156,   159,   161,   164,
+   167,   169,   171,   172
+};
+
+static const short yyrhs[] = {    -1,
+    22,    23,     0,    24,     0,    25,     0,    27,     0,    26,
+     0,    28,     0,    30,     0,    16,    10,     0,    16,    19,
+    16,    31,     0,    16,    19,    16,    28,     0,    16,    19,
+    16,    15,     0,    16,    19,    16,    19,    16,    31,     0,
+    16,    19,    16,    19,    16,    28,     0,    16,    19,    16,
+    19,    16,    15,     0,    18,     0,     6,     0,    18,     7,
+     0,     4,     0,     4,    20,     0,    16,     4,     0,    16,
+    21,    16,     0,    12,    16,    16,    19,    16,    19,    16,
+    16,     0,    16,    21,    16,    21,    16,     0,    16,    15,
+    15,     0,    16,    12,    15,     0,    12,    16,    16,     0,
+    12,    16,     0,    12,    16,    20,    16,     0,    16,    12,
+     0,    16,    12,    16,     0,    29,     3,     0,    29,     0,
+    16,    17,     0,    15,    17,     0,    17,     0,    16,    13,
+     0,    15,    13,     0,    13,     0,    16,     5,     0,    15,
+     5,     0,     5,     0,    16,     8,     0,    15,     8,     0,
+     8,     0,    16,    11,     0,    15,    11,     0,    11,     0,
+    16,    14,     0,    15,    14,     0,    14,     0,    16,     0,
+     0,    10,     0
+};
+
+#endif
+
+#if YYDEBUG != 0
+static const short yyrline[] = { 0,
+   168,   169,   172,   175,   178,   181,   184,   187,   190,   199,
+   208,   216,   228,   237,   246,   265,   268,   271,   277,   281,
+   285,   291,   295,   306,   324,   330,   336,   341,   349,   354,
+   362,   369,   383,   386,   389,   392,   395,   398,   401,   404,
+   407,   410,   413,   416,   419,   422,   425,   428,   431,   434,
+   437,   442,   477,   481
+};
+#endif
+
+
+#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)
+
+static const char * const yytname[] = {   "$","error","$undefined.","tAGO","tDAY",
+"tDAY_UNIT","tDAYZONE","tDST","tHOUR_UNIT","tID","tMERIDIAN","tMINUTE_UNIT",
+"tMONTH","tMONTH_UNIT","tSEC_UNIT","tSNUMBER","tUNUMBER","tYEAR_UNIT","tZONE",
+"':'","','","'/'","spec","item","time","zone","day","date","rel","relunit","number",
+"o_merid", NULL
+};
+#endif
+
+static const short yyr1[] = {     0,
+    22,    22,    23,    23,    23,    23,    23,    23,    24,    24,
+    24,    24,    24,    24,    24,    25,    25,    25,    26,    26,
+    26,    27,    27,    27,    27,    27,    27,    27,    27,    27,
+    27,    28,    28,    29,    29,    29,    29,    29,    29,    29,
+    29,    29,    29,    29,    29,    29,    29,    29,    29,    29,
+    29,    30,    31,    31
+};
+
+static const short yyr2[] = {     0,
+     0,     2,     1,     1,     1,     1,     1,     1,     2,     4,
+     4,     4,     6,     6,     6,     1,     1,     2,     1,     2,
+     2,     3,     8,     5,     3,     3,     3,     2,     4,     2,
+     3,     2,     1,     2,     2,     1,     2,     2,     1,     2,
+     2,     1,     2,     2,     1,     2,     2,     1,     2,     2,
+     1,     1,     0,     1
+};
+
+static const short yydefact[] = {     1,
+     0,    19,    42,    17,    45,    48,     0,    39,    51,     0,
+    52,    36,    16,     2,     3,     4,     6,     5,     7,    33,
+     8,    20,    28,    41,    44,    47,    38,    50,    35,    21,
+    40,    43,     9,    46,    30,    37,    49,     0,    34,     0,
+     0,    18,    32,    27,     0,    26,    31,    25,    53,    22,
+     0,    29,    54,    12,     0,     0,    11,    10,     0,     0,
+    53,    24,     0,    15,    14,    13,     0,    23,     0,     0
+};
+
+static const short yydefgoto[] = {     1,
+    14,    15,    16,    17,    18,    19,    20,    21,    58
+};
+
+static const short yypact[] = {-32768,
+     0,   -10,-32768,-32768,-32768,-32768,     6,-32768,-32768,    56,
+    15,-32768,    17,-32768,-32768,-32768,-32768,-32768,-32768,    28,
+-32768,-32768,   -13,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+-32768,-32768,-32768,-32768,   -14,-32768,-32768,    18,-32768,    21,
+    23,-32768,-32768,    31,    26,-32768,-32768,-32768,    30,    34,
+    36,-32768,-32768,    56,    63,    46,-32768,-32768,    47,    53,
+    43,-32768,    49,    56,-32768,-32768,    50,-32768,    75,-32768
+};
+
+static const short yypgoto[] = {-32768,
+-32768,-32768,-32768,-32768,-32768,   -40,-32768,-32768,    20
+};
+
+
+#define	YYLAST		81
+
+
+static const short yytable[] = {    69,
+    46,    47,    44,     2,     3,     4,    45,     5,    57,    22,
+     6,     7,     8,     9,    10,    11,    12,    13,    30,    31,
+    65,    23,    32,    42,    33,    34,    35,    36,    37,    38,
+    43,    39,    48,    40,     3,    41,    49,     5,    50,    53,
+     6,    52,     8,     9,    54,    55,    12,     3,    56,    51,
+     5,    60,    53,     6,    59,     8,     9,    64,    55,    12,
+    24,    61,    62,    25,    67,    68,    26,    31,    27,    28,
+    32,    63,    29,    34,    70,    36,    37,     0,     0,    39,
+    66
+};
+
+static const short yycheck[] = {     0,
+    15,    16,    16,     4,     5,     6,    20,     8,    49,    20,
+    11,    12,    13,    14,    15,    16,    17,    18,     4,     5,
+    61,    16,     8,     7,    10,    11,    12,    13,    14,    15,
+     3,    17,    15,    19,     5,    21,    16,     8,    16,    10,
+    11,    16,    13,    14,    15,    16,    17,     5,    19,    19,
+     8,    16,    10,    11,    21,    13,    14,    15,    16,    17,
+     5,    16,    16,     8,    16,    16,    11,     5,    13,    14,
+     8,    19,    17,    11,     0,    13,    14,    -1,    -1,    17,
+    61
+};
+#define YYPURE 1
+
+/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
+#line 3 "bison.simple"
+/* This file comes from bison-1.27.  */
+
+/* Skeleton output parser for bison,
+   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
+
+/* As a special exception, when this file is copied by Bison into a
+   Bison output file, you may use that output file without restriction.
+   This special exception was added by the Free Software Foundation
+   in version 1.24 of Bison.  */
+
+/* This is the parser code that is written into each bison parser
+  when the %semantic_parser declaration is not specified in the grammar.
+  It was written by Richard Stallman by simplifying the hairy parser
+  used when %semantic_parser is specified.  */
+
+#ifndef YYSTACK_USE_ALLOCA
+#ifdef alloca
+#define YYSTACK_USE_ALLOCA
+#else /* alloca not defined */
+#ifdef __GNUC__
+#define YYSTACK_USE_ALLOCA
+#define alloca __builtin_alloca
+#else /* not GNU C.  */
+#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi) || (defined (__sun) && defined (__i386))
+#define YYSTACK_USE_ALLOCA
+#include <alloca.h>
+#else /* not sparc */
+/* We think this test detects Watcom and Microsoft C.  */
+/* This used to test MSDOS, but that is a bad idea
+   since that symbol is in the user namespace.  */
+#if (defined (_MSDOS) || defined (_MSDOS_)) && !defined (__TURBOC__)
+#if 0 /* No need for malloc.h, which pollutes the namespace;
+	 instead, just don't use alloca.  */
+#include <malloc.h>
+#endif
+#else /* not MSDOS, or __TURBOC__ */
+#if defined(_AIX)
+/* I don't know what this was needed for, but it pollutes the namespace.
+   So I turned it off.   rms, 2 May 1997.  */
+/* #include <malloc.h>  */
+ #pragma alloca
+#define YYSTACK_USE_ALLOCA
+#else /* not MSDOS, or __TURBOC__, or _AIX */
+#if 0
+#ifdef __hpux /* haible@ilog.fr says this works for HPUX 9.05 and up,
+		 and on HPUX 10.  Eventually we can turn this on.  */
+#define YYSTACK_USE_ALLOCA
+#define alloca __builtin_alloca
+#endif /* __hpux */
+#endif
+#endif /* not _AIX */
+#endif /* not MSDOS, or __TURBOC__ */
+#endif /* not sparc */
+#endif /* not GNU C */
+#endif /* alloca not defined */
+#endif /* YYSTACK_USE_ALLOCA not defined */
+
+#ifdef YYSTACK_USE_ALLOCA
+#define YYSTACK_ALLOC alloca
+#else
+#define YYSTACK_ALLOC malloc
+#endif
+
+/* Note: there must be only one dollar sign in this file.
+   It is replaced by the list of actions, each action
+   as one case of the switch.  */
+
+#define yyerrok		(yyerrstatus = 0)
+#define yyclearin	(yychar = YYEMPTY)
+#define YYEMPTY		-2
+#define YYEOF		0
+#define YYACCEPT	goto yyacceptlab
+#define YYABORT 	goto yyabortlab
+#define YYERROR		goto yyerrlab1
+/* Like YYERROR except do call yyerror.
+   This remains here temporarily to ease the
+   transition to the new meaning of YYERROR, for GCC.
+   Once GCC version 2 has supplanted version 1, this can go.  */
+#define YYFAIL		goto yyerrlab
+#define YYRECOVERING()  (!!yyerrstatus)
+#define YYBACKUP(token, value) \
+do								\
+  if (yychar == YYEMPTY && yylen == 1)				\
+    { yychar = (token), yylval = (value);			\
+      yychar1 = YYTRANSLATE (yychar);				\
+      YYPOPSTACK;						\
+      goto yybackup;						\
+    }								\
+  else								\
+    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
+while (0)
+
+#define YYTERROR	1
+#define YYERRCODE	256
+
+#ifndef YYPURE
+#define YYLEX		yylex()
+#endif
+
+#ifdef YYPURE
+#ifdef YYLSP_NEEDED
+#ifdef YYLEX_PARAM
+#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
+#else
+#define YYLEX		yylex(&yylval, &yylloc)
+#endif
+#else /* not YYLSP_NEEDED */
+#ifdef YYLEX_PARAM
+#define YYLEX		yylex(&yylval, YYLEX_PARAM)
+#else
+#define YYLEX		yylex(&yylval)
+#endif
+#endif /* not YYLSP_NEEDED */
+#endif
+
+/* If nonreentrant, generate the variables here */
+
+#ifndef YYPURE
+
+int	yychar;			/*  the lookahead symbol		*/
+YYSTYPE	yylval;			/*  the semantic value of the		*/
+				/*  lookahead symbol			*/
+
+#ifdef YYLSP_NEEDED
+YYLTYPE yylloc;			/*  location data for the lookahead	*/
+				/*  symbol				*/
+#endif
+
+int yynerrs;			/*  number of parse errors so far       */
+#endif  /* not YYPURE */
+
+#if YYDEBUG != 0
+int yydebug;			/*  nonzero means print parse trace	*/
+/* Since this is uninitialized, it does not stop multiple parsers
+   from coexisting.  */
+#endif
+
+/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/
+
+#ifndef	YYINITDEPTH
+#define YYINITDEPTH 200
+#endif
+
+/*  YYMAXDEPTH is the maximum size the stacks can grow to
+    (effective only if the built-in stack extension method is used).  */
+
+#if YYMAXDEPTH == 0
+#undef YYMAXDEPTH
+#endif
+
+#ifndef YYMAXDEPTH
+#define YYMAXDEPTH 10000
+#endif
+
+/* Define __yy_memcpy.  Note that the size argument
+   should be passed with type unsigned int, because that is what the non-GCC
+   definitions require.  With GCC, __builtin_memcpy takes an arg
+   of type size_t, but it can handle unsigned int.  */
+
+#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
+#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
+#else				/* not GNU C or C++ */
+#ifndef __cplusplus
+
+/* This is the most reliable way to avoid incompatibilities
+   in available built-in functions on various systems.  */
+static void
+__yy_memcpy (to, from, count)
+     char *to;
+     char *from;
+     unsigned int count;
+{
+  register char *f = from;
+  register char *t = to;
+  register int i = count;
+
+  while (i-- > 0)
+    *t++ = *f++;
+}
+
+#else /* __cplusplus */
+
+/* This is the most reliable way to avoid incompatibilities
+   in available built-in functions on various systems.  */
+static void
+__yy_memcpy (char *to, char *from, unsigned int count)
+{
+  register char *t = to;
+  register char *f = from;
+  register int i = count;
+
+  while (i-- > 0)
+    *t++ = *f++;
+}
+
+#endif
+#endif
+
+#line 216 "bison.simple"
+
+/* The user can define YYPARSE_PARAM as the name of an argument to be passed
+   into yyparse.  The argument should have type void *.
+   It should actually point to an object.
+   Grammar actions can access the variable by casting it
+   to the proper pointer type.  */
+
+#ifdef YYPARSE_PARAM
+#ifdef __cplusplus
+#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
+#define YYPARSE_PARAM_DECL
+#else /* not __cplusplus */
+#define YYPARSE_PARAM_ARG YYPARSE_PARAM
+#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
+#endif /* not __cplusplus */
+#else /* not YYPARSE_PARAM */
+#define YYPARSE_PARAM_ARG
+#define YYPARSE_PARAM_DECL
+#endif /* not YYPARSE_PARAM */
+
+/* Prevent warning if -Wstrict-prototypes.  */
+#ifdef __GNUC__
+#ifdef YYPARSE_PARAM
+int yyparse (void *);
+#else
+int yyparse (void);
+#endif
+#endif
+
+int
+yyparse(YYPARSE_PARAM_ARG)
+     YYPARSE_PARAM_DECL
+{
+  register int yystate;
+  register int yyn;
+  register short *yyssp;
+  register YYSTYPE *yyvsp;
+  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
+  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */
+
+  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
+  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/
+
+  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
+  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */
+
+#ifdef YYLSP_NEEDED
+  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
+  YYLTYPE *yyls = yylsa;
+  YYLTYPE *yylsp;
+
+#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
+#else
+#define YYPOPSTACK   (yyvsp--, yyssp--)
+#endif
+
+  int yystacksize = YYINITDEPTH;
+  int yyfree_stacks = 0;
+
+#ifdef YYPURE
+  int yychar;
+  YYSTYPE yylval;
+  int yynerrs;
+#ifdef YYLSP_NEEDED
+  YYLTYPE yylloc;
+#endif
+#endif
+
+  YYSTYPE yyval;		/*  the variable used to return		*/
+				/*  semantic values from the action	*/
+				/*  routines				*/
+
+  int yylen;
+
+#if YYDEBUG != 0
+  if (yydebug)
+    fprintf(stderr, "Starting parse\n");
+#endif
+
+  yystate = 0;
+  yyerrstatus = 0;
+  yynerrs = 0;
+  yychar = YYEMPTY;		/* Cause a token to be read.  */
+
+  /* Initialize stack pointers.
+     Waste one element of value and location stack
+     so that they stay on the same level as the state stack.
+     The wasted elements are never initialized.  */
+
+  yyssp = yyss - 1;
+  yyvsp = yyvs;
+#ifdef YYLSP_NEEDED
+  yylsp = yyls;
+#endif
+
+/* Push a new state, which is found in  yystate  .  */
+/* In all cases, when you get here, the value and location stacks
+   have just been pushed. so pushing a state here evens the stacks.  */
+yynewstate:
+
+  *++yyssp = yystate;
+
+  if (yyssp >= yyss + yystacksize - 1)
+    {
+      /* Give user a chance to reallocate the stack */
+      /* Use copies of these so that the &'s don't force the real ones into memory. */
+      YYSTYPE *yyvs1 = yyvs;
+      short *yyss1 = yyss;
+#ifdef YYLSP_NEEDED
+      YYLTYPE *yyls1 = yyls;
+#endif
+
+      /* Get the current used size of the three stacks, in elements.  */
+      int size = yyssp - yyss + 1;
+
+#ifdef yyoverflow
+      /* Each stack pointer address is followed by the size of
+	 the data in use in that stack, in bytes.  */
+#ifdef YYLSP_NEEDED
+      /* This used to be a conditional around just the two extra args,
+	 but that might be undefined if yyoverflow is a macro.  */
+      yyoverflow("parser stack overflow",
+		 &yyss1, size * sizeof (*yyssp),
+		 &yyvs1, size * sizeof (*yyvsp),
+		 &yyls1, size * sizeof (*yylsp),
+		 &yystacksize);
+#else
+      yyoverflow("parser stack overflow",
+		 &yyss1, size * sizeof (*yyssp),
+		 &yyvs1, size * sizeof (*yyvsp),
+		 &yystacksize);
+#endif
+
+      yyss = yyss1; yyvs = yyvs1;
+#ifdef YYLSP_NEEDED
+      yyls = yyls1;
+#endif
+#else /* no yyoverflow */
+      /* Extend the stack our own way.  */
+      if (yystacksize >= YYMAXDEPTH)
+	{
+	  yyerror("parser stack overflow");
+	  if (yyfree_stacks)
+	    {
+	      free (yyss);
+	      free (yyvs);
+#ifdef YYLSP_NEEDED
+	      free (yyls);
+#endif
+	    }
+	  return 2;
+	}
+      yystacksize *= 2;
+      if (yystacksize > YYMAXDEPTH)
+	yystacksize = YYMAXDEPTH;
+#ifndef YYSTACK_USE_ALLOCA
+      yyfree_stacks = 1;
+#endif
+      yyss = (short *) YYSTACK_ALLOC (yystacksize * sizeof (*yyssp));
+      __yy_memcpy ((char *)yyss, (char *)yyss1,
+		   size * (unsigned int) sizeof (*yyssp));
+      yyvs = (YYSTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yyvsp));
+      __yy_memcpy ((char *)yyvs, (char *)yyvs1,
+		   size * (unsigned int) sizeof (*yyvsp));
+#ifdef YYLSP_NEEDED
+      yyls = (YYLTYPE *) YYSTACK_ALLOC (yystacksize * sizeof (*yylsp));
+      __yy_memcpy ((char *)yyls, (char *)yyls1,
+		   size * (unsigned int) sizeof (*yylsp));
+#endif
+#endif /* no yyoverflow */
+
+      yyssp = yyss + size - 1;
+      yyvsp = yyvs + size - 1;
+#ifdef YYLSP_NEEDED
+      yylsp = yyls + size - 1;
+#endif
+
+#if YYDEBUG != 0
+      if (yydebug)
+	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
+#endif
+
+      if (yyssp >= yyss + yystacksize - 1)
+	YYABORT;
+    }
+
+#if YYDEBUG != 0
+  if (yydebug)
+    fprintf(stderr, "Entering state %d\n", yystate);
+#endif
+
+  goto yybackup;
+ yybackup:
+
+/* Do appropriate processing given the current state.  */
+/* Read a lookahead token if we need one and don't already have one.  */
+/* yyresume: */
+
+  /* First try to decide what to do without reference to lookahead token.  */
+
+  yyn = yypact[yystate];
+  if (yyn == YYFLAG)
+    goto yydefault;
+
+  /* Not known => get a lookahead token if don't already have one.  */
+
+  /* yychar is either YYEMPTY or YYEOF
+     or a valid token in external form.  */
+
+  if (yychar == YYEMPTY)
+    {
+#if YYDEBUG != 0
+      if (yydebug)
+	fprintf(stderr, "Reading a token: ");
+#endif
+      yychar = YYLEX;
+    }
+
+  /* Convert token to internal form (in yychar1) for indexing tables with */
+
+  if (yychar <= 0)		/* This means end of input. */
+    {
+      yychar1 = 0;
+      yychar = YYEOF;		/* Don't call YYLEX any more */
+
+#if YYDEBUG != 0
+      if (yydebug)
+	fprintf(stderr, "Now at end of input.\n");
+#endif
+    }
+  else
+    {
+      yychar1 = YYTRANSLATE(yychar);
+
+#if YYDEBUG != 0
+      if (yydebug)
+	{
+	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
+	  /* Give the individual parser a way to print the precise meaning
+	     of a token, for further debugging info.  */
+#ifdef YYPRINT
+	  YYPRINT (stderr, yychar, yylval);
+#endif
+	  fprintf (stderr, ")\n");
+	}
+#endif
+    }
+
+  yyn += yychar1;
+  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
+    goto yydefault;
+
+  yyn = yytable[yyn];
+
+  /* yyn is what to do for this token type in this state.
+     Negative => reduce, -yyn is rule number.
+     Positive => shift, yyn is new state.
+       New state is final state => don't bother to shift,
+       just return success.
+     0, or most negative number => error.  */
+
+  if (yyn < 0)
+    {
+      if (yyn == YYFLAG)
+	goto yyerrlab;
+      yyn = -yyn;
+      goto yyreduce;
+    }
+  else if (yyn == 0)
+    goto yyerrlab;
+
+  if (yyn == YYFINAL)
+    YYACCEPT;
+
+  /* Shift the lookahead token.  */
+
+#if YYDEBUG != 0
+  if (yydebug)
+    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
+#endif
+
+  /* Discard the token being shifted unless it is eof.  */
+  if (yychar != YYEOF)
+    yychar = YYEMPTY;
+
+  *++yyvsp = yylval;
+#ifdef YYLSP_NEEDED
+  *++yylsp = yylloc;
+#endif
+
+  /* count tokens shifted since error; after three, turn off error status.  */
+  if (yyerrstatus) yyerrstatus--;
+
+  yystate = yyn;
+  goto yynewstate;
+
+/* Do the default action for the current state.  */
+yydefault:
+
+  yyn = yydefact[yystate];
+  if (yyn == 0)
+    goto yyerrlab;
+
+/* Do a reduction.  yyn is the number of a rule to reduce with.  */
+yyreduce:
+  yylen = yyr2[yyn];
+  if (yylen > 0)
+    yyval = yyvsp[1-yylen]; /* implement default value of the action */
+
+#if YYDEBUG != 0
+  if (yydebug)
+    {
+      int i;
+
+      fprintf (stderr, "Reducing via rule %d (line %d), ",
+	       yyn, yyrline[yyn]);
+
+      /* Print the symbols being reduced, and their result.  */
+      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
+	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
+      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
+    }
+#endif
+
+
+  switch (yyn) {
+
+case 3:
+#line 172 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyHaveTime++;
+	;
+    break;}
+case 4:
+#line 175 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyHaveZone++;
+	;
+    break;}
+case 5:
+#line 178 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyHaveDate++;
+	;
+    break;}
+case 6:
+#line 181 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyHaveDay++;
+	;
+    break;}
+case 7:
+#line 184 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyHaveRel++;
+	;
+    break;}
+case 9:
+#line 190 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyHour = yyvsp[-1].Number;
+	    ((struct date_yy *)parm)->yyMinutes = 0;
+	    ((struct date_yy *)parm)->yySeconds = 0;
+	    ((struct date_yy *)parm)->yyMeridian = yyvsp[0].Meridian;
+#ifdef PHP_DEBUG_PARSE_DATE_PARSER
+		printf("[U M]\n");
+#endif
+	;
+    break;}
+case 10:
+#line 199 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyHour = yyvsp[-3].Number;
+	    ((struct date_yy *)parm)->yyMinutes = yyvsp[-1].Number;
+	    ((struct date_yy *)parm)->yySeconds = 0;
+	    ((struct date_yy *)parm)->yyMeridian = yyvsp[0].Meridian;
+#ifdef PHP_DEBUG_PARSE_DATE_PARSER
+		printf("[U:U M]\n");
+#endif
+	;
+    break;}
+case 11:
+#line 208 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyHour = yyvsp[-3].Number;
+	    ((struct date_yy *)parm)->yyMinutes = yyvsp[-1].Number;
+	    ((struct date_yy *)parm)->yyMeridian = MER24;
+#ifdef PHP_DEBUG_PARSE_DATE_PARSER
+		printf("[U:U rel]\n");
+#endif
+	;
+    break;}
+case 12:
+#line 216 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyHour = yyvsp[-3].Number;
+	    ((struct date_yy *)parm)->yyMinutes = yyvsp[-1].Number;
+	    ((struct date_yy *)parm)->yyMeridian = MER24;
+	    ((struct date_yy *)parm)->yyHaveZone++;
+	    ((struct date_yy *)parm)->yyTimezone = (yyvsp[0].Number < 0
+			  ? -yyvsp[0].Number % 100 + (-yyvsp[0].Number / 100) * 60
+			  : - (yyvsp[0].Number % 100 + (yyvsp[0].Number / 100) * 60));
+#ifdef PHP_DEBUG_PARSE_DATE_PARSER
+		printf("[U:U S]\n");
+#endif
+	;
+    break;}
+case 13:
+#line 228 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyHour = yyvsp[-5].Number;
+	    ((struct date_yy *)parm)->yyMinutes = yyvsp[-3].Number;
+	    ((struct date_yy *)parm)->yySeconds = yyvsp[-1].Number;
+	    ((struct date_yy *)parm)->yyMeridian = yyvsp[0].Meridian;
+#ifdef PHP_DEBUG_PARSE_DATE_PARSER
+		printf("[U:U:U M]\n");
+#endif
+	;
+    break;}
+case 14:
+#line 237 "parsedate.y"
+{
+	    /* ISO 8601 format.  hh:mm:ss[+-][0-9]{2}([0-9]{2})?.  */
+	    ((struct date_yy *)parm)->yyHour = yyvsp[-5].Number;
+	    ((struct date_yy *)parm)->yyMinutes = yyvsp[-3].Number;
+	    ((struct date_yy *)parm)->yySeconds = yyvsp[-1].Number;
+#ifdef PHP_DEBUG_PARSE_DATE_PARSER
+		printf("[U:U:U rel]\n");
+#endif
+	;
+    break;}
+case 15:
+#line 246 "parsedate.y"
+{
+	    /* ISO 8601 format.  hh:mm:ss[+-][0-9]{2}([0-9]{2})?.  */
+	    ((struct date_yy *)parm)->yyHour = yyvsp[-5].Number;
+	    ((struct date_yy *)parm)->yyMinutes = yyvsp[-3].Number;
+	    ((struct date_yy *)parm)->yySeconds = yyvsp[-1].Number;
+	    ((struct date_yy *)parm)->yyMeridian = MER24;
+	    ((struct date_yy *)parm)->yyHaveZone++;
+		if (yyvsp[0].Number <= -100 || yyvsp[0].Number >= 100) {
+			((struct date_yy *)parm)->yyTimezone =  
+				-yyvsp[0].Number % 100 + (-yyvsp[0].Number / 100) * 60;
+		} else {
+			((struct date_yy *)parm)->yyTimezone =  -yyvsp[0].Number * 60;
+		}
+#ifdef PHP_DEBUG_PARSE_DATE_PARSER
+		printf("[U:U:U S]\n");
+#endif
+	;
+    break;}
+case 16:
+#line 265 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyTimezone = yyvsp[0].Number;
+	;
+    break;}
+case 17:
+#line 268 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyTimezone = yyvsp[0].Number - 60;
+	;
+    break;}
+case 18:
+#line 272 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyTimezone = yyvsp[-1].Number - 60;
+	;
+    break;}
+case 19:
+#line 277 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyDayOrdinal = 1;
+	    ((struct date_yy *)parm)->yyDayNumber = yyvsp[0].Number;
+	;
+    break;}
+case 20:
+#line 281 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyDayOrdinal = 1;
+	    ((struct date_yy *)parm)->yyDayNumber = yyvsp[-1].Number;
+	;
+    break;}
+case 21:
+#line 285 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyDayOrdinal = yyvsp[-1].Number;
+	    ((struct date_yy *)parm)->yyDayNumber = yyvsp[0].Number;
+	;
+    break;}
+case 22:
+#line 291 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyMonth = yyvsp[-2].Number;
+	    ((struct date_yy *)parm)->yyDay = yyvsp[0].Number;
+	;
+    break;}
+case 23:
+#line 295 "parsedate.y"
+{
+		((struct date_yy *)parm)->yyYear = yyvsp[0].Number;
+		((struct date_yy *)parm)->yyMonth = yyvsp[-7].Number;
+		((struct date_yy *)parm)->yyDay = yyvsp[-6].Number;
+
+		((struct date_yy *)parm)->yyHour = yyvsp[-5].Number;
+		((struct date_yy *)parm)->yyMinutes = yyvsp[-3].Number;
+		((struct date_yy *)parm)->yySeconds = yyvsp[-1].Number;
+
+		((struct date_yy *)parm)->yyHaveTime = 1;
+	;
+    break;}
+case 24:
+#line 306 "parsedate.y"
+{
+	  /* Interpret as YYYY/MM/DD if $1 >= 1000, otherwise as MM/DD/YY.
+	     The goal in recognizing YYYY/MM/DD is solely to support legacy
+	     machine-generated dates like those in an RCS log listing.  If
+	     you want portability, use the ISO 8601 format.  */
+	  if (yyvsp[-4].Number >= 1000)
+	    {
+	      ((struct date_yy *)parm)->yyYear = yyvsp[-4].Number;
+	      ((struct date_yy *)parm)->yyMonth = yyvsp[-2].Number;
+	      ((struct date_yy *)parm)->yyDay = yyvsp[0].Number;
+	    }
+	  else
+	    {
+	      ((struct date_yy *)parm)->yyMonth = yyvsp[-4].Number;
+	      ((struct date_yy *)parm)->yyDay = yyvsp[-2].Number;
+	      ((struct date_yy *)parm)->yyYear = yyvsp[0].Number;
+	    }
+	;
+    break;}
+case 25:
+#line 324 "parsedate.y"
+{
+	    /* ISO 8601 format.  yyyy-mm-dd.  */
+	    ((struct date_yy *)parm)->yyYear = yyvsp[-2].Number;
+	    ((struct date_yy *)parm)->yyMonth = -yyvsp[-1].Number;
+	    ((struct date_yy *)parm)->yyDay = -yyvsp[0].Number;
+	;
+    break;}
+case 26:
+#line 330 "parsedate.y"
+{
+	    /* e.g. 17-JUN-1992.  */
+	    ((struct date_yy *)parm)->yyDay = yyvsp[-2].Number;
+	    ((struct date_yy *)parm)->yyMonth = yyvsp[-1].Number;
+	    ((struct date_yy *)parm)->yyYear = -yyvsp[0].Number;
+	;
+    break;}
+case 27:
+#line 336 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyMonth = yyvsp[-2].Number;
+	    ((struct date_yy *)parm)->yyDay = yyvsp[-1].Number;
+		((struct date_yy *)parm)->yyYear = yyvsp[0].Number;
+	;
+    break;}
+case 28:
+#line 341 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyMonth = yyvsp[-1].Number;
+	    if (yyvsp[0].Number > 1000) {
+		((struct date_yy *)parm)->yyYear = yyvsp[0].Number;
+	    } else {
+		((struct date_yy *)parm)->yyDay = yyvsp[0].Number;
+	    }
+	;
+    break;}
+case 29:
+#line 349 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyMonth = yyvsp[-3].Number;
+	    ((struct date_yy *)parm)->yyDay = yyvsp[-2].Number;
+	    ((struct date_yy *)parm)->yyYear = yyvsp[0].Number;
+	;
+    break;}
+case 30:
+#line 354 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyMonth = yyvsp[0].Number;
+	    if (yyvsp[-1].Number > 1000) {
+		((struct date_yy *)parm)->yyYear = yyvsp[-1].Number;
+	    } else {
+		((struct date_yy *)parm)->yyDay = yyvsp[-1].Number;
+	    }
+	;
+    break;}
+case 31:
+#line 362 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyMonth = yyvsp[-1].Number;
+	    ((struct date_yy *)parm)->yyDay = yyvsp[-2].Number;
+	    ((struct date_yy *)parm)->yyYear = yyvsp[0].Number;
+	;
+    break;}
+case 32:
+#line 369 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelSeconds =
+			-((struct date_yy *)parm)->yyRelSeconds;
+	    ((struct date_yy *)parm)->yyRelMinutes =
+			-((struct date_yy *)parm)->yyRelMinutes;
+	    ((struct date_yy *)parm)->yyRelHour =
+			-((struct date_yy *)parm)->yyRelHour;
+	    ((struct date_yy *)parm)->yyRelDay =
+			-((struct date_yy *)parm)->yyRelDay;
+	    ((struct date_yy *)parm)->yyRelMonth =
+			-((struct date_yy *)parm)->yyRelMonth;
+	    ((struct date_yy *)parm)->yyRelYear =
+			-((struct date_yy *)parm)->yyRelYear;
+	;
+    break;}
+case 34:
+#line 386 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelYear += yyvsp[-1].Number * yyvsp[0].Number;
+	;
+    break;}
+case 35:
+#line 389 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelYear += yyvsp[-1].Number * yyvsp[0].Number;
+	;
+    break;}
+case 36:
+#line 392 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelYear += yyvsp[0].Number;
+	;
+    break;}
+case 37:
+#line 395 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelMonth += yyvsp[-1].Number * yyvsp[0].Number;
+	;
+    break;}
+case 38:
+#line 398 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelMonth += yyvsp[-1].Number * yyvsp[0].Number;
+	;
+    break;}
+case 39:
+#line 401 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelMonth += yyvsp[0].Number;
+	;
+    break;}
+case 40:
+#line 404 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelDay += yyvsp[-1].Number * yyvsp[0].Number;
+	;
+    break;}
+case 41:
+#line 407 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelDay += yyvsp[-1].Number * yyvsp[0].Number;
+	;
+    break;}
+case 42:
+#line 410 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelDay += yyvsp[0].Number;
+	;
+    break;}
+case 43:
+#line 413 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelHour += yyvsp[-1].Number * yyvsp[0].Number;
+	;
+    break;}
+case 44:
+#line 416 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelHour += yyvsp[-1].Number * yyvsp[0].Number;
+	;
+    break;}
+case 45:
+#line 419 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelHour += yyvsp[0].Number;
+	;
+    break;}
+case 46:
+#line 422 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelMinutes += yyvsp[-1].Number * yyvsp[0].Number;
+	;
+    break;}
+case 47:
+#line 425 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelMinutes += yyvsp[-1].Number * yyvsp[0].Number;
+	;
+    break;}
+case 48:
+#line 428 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelMinutes += yyvsp[0].Number;
+	;
+    break;}
+case 49:
+#line 431 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelSeconds += yyvsp[-1].Number * yyvsp[0].Number;
+	;
+    break;}
+case 50:
+#line 434 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelSeconds += yyvsp[-1].Number * yyvsp[0].Number;
+	;
+    break;}
+case 51:
+#line 437 "parsedate.y"
+{
+	    ((struct date_yy *)parm)->yyRelSeconds += yyvsp[0].Number;
+	;
+    break;}
+case 52:
+#line 443 "parsedate.y"
+{
+	    if (((struct date_yy *)parm)->yyHaveTime && 
+			((struct date_yy *)parm)->yyHaveDate && 
+			!((struct date_yy *)parm)->yyHaveRel)
+	      ((struct date_yy *)parm)->yyYear = yyvsp[0].Number;
+	    else
+	      {
+		if (yyvsp[0].Number>10000)
+		  {
+		    ((struct date_yy *)parm)->yyHaveDate++;
+		    ((struct date_yy *)parm)->yyDay= (yyvsp[0].Number)%100;
+		    ((struct date_yy *)parm)->yyMonth= (yyvsp[0].Number/100)%100;
+		    ((struct date_yy *)parm)->yyYear = yyvsp[0].Number/10000;
+		  }
+		else
+		  {
+		    ((struct date_yy *)parm)->yyHaveTime++;
+		    if (yyvsp[0].Number < 100)
+		      {
+			((struct date_yy *)parm)->yyHour = yyvsp[0].Number;
+			((struct date_yy *)parm)->yyMinutes = 0;
+		      }
+		    else
+		      {
+		    	((struct date_yy *)parm)->yyHour = yyvsp[0].Number / 100;
+		    	((struct date_yy *)parm)->yyMinutes = yyvsp[0].Number % 100;
+		      }
+		    ((struct date_yy *)parm)->yySeconds = 0;
+		    ((struct date_yy *)parm)->yyMeridian = MER24;
+		  }
+	      }
+	  ;
+    break;}
+case 53:
+#line 478 "parsedate.y"
+{
+	    yyval.Meridian = MER24;
+	  ;
+    break;}
+case 54:
+#line 482 "parsedate.y"
+{
+	    yyval.Meridian = yyvsp[0].Meridian;
+	  ;
+    break;}
+}
+   /* the action file gets copied in in place of this dollarsign */
+#line 542 "bison.simple"
+
+  yyvsp -= yylen;
+  yyssp -= yylen;
+#ifdef YYLSP_NEEDED
+  yylsp -= yylen;
+#endif
+
+#if YYDEBUG != 0
+  if (yydebug)
+    {
+      short *ssp1 = yyss - 1;
+      fprintf (stderr, "state stack now");
+      while (ssp1 != yyssp)
+	fprintf (stderr, " %d", *++ssp1);
+      fprintf (stderr, "\n");
+    }
+#endif
+
+  *++yyvsp = yyval;
+
+#ifdef YYLSP_NEEDED
+  yylsp++;
+  if (yylen == 0)
+    {
+      yylsp->first_line = yylloc.first_line;
+      yylsp->first_column = yylloc.first_column;
+      yylsp->last_line = (yylsp-1)->last_line;
+      yylsp->last_column = (yylsp-1)->last_column;
+      yylsp->text = 0;
+    }
+  else
+    {
+      yylsp->last_line = (yylsp+yylen-1)->last_line;
+      yylsp->last_column = (yylsp+yylen-1)->last_column;
+    }
+#endif
+
+  /* Now "shift" the result of the reduction.
+     Determine what state that goes to,
+     based on the state we popped back to
+     and the rule number reduced by.  */
+
+  yyn = yyr1[yyn];
+
+  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
+  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
+    yystate = yytable[yystate];
+  else
+    yystate = yydefgoto[yyn - YYNTBASE];
+
+  goto yynewstate;
+
+yyerrlab:   /* here on detecting error */
+
+  if (! yyerrstatus)
+    /* If not already recovering from an error, report this error.  */
+    {
+      ++yynerrs;
+
+#ifdef YYERROR_VERBOSE
+      yyn = yypact[yystate];
+
+      if (yyn > YYFLAG && yyn < YYLAST)
+	{
+	  int size = 0;
+	  char *msg;
+	  int x, count;
+
+	  count = 0;
+	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
+	  for (x = (yyn < 0 ? -yyn : 0);
+	       x < (sizeof(yytname) / sizeof(char *)); x++)
+	    if (yycheck[x + yyn] == x)
+	      size += strlen(yytname[x]) + 15, count++;
+	  msg = (char *) malloc(size + 15);
+	  if (msg != 0)
+	    {
+	      strcpy(msg, "parse error");
+
+	      if (count < 5)
+		{
+		  count = 0;
+		  for (x = (yyn < 0 ? -yyn : 0);
+		       x < (sizeof(yytname) / sizeof(char *)); x++)
+		    if (yycheck[x + yyn] == x)
+		      {
+			strcat(msg, count == 0 ? ", expecting `" : " or `");
+			strcat(msg, yytname[x]);
+			strcat(msg, "'");
+			count++;
+		      }
+		}
+	      yyerror(msg);
+	      free(msg);
+	    }
+	  else
+	    yyerror ("parse error; also virtual memory exceeded");
+	}
+      else
+#endif /* YYERROR_VERBOSE */
+	yyerror("parse error");
+    }
+
+  goto yyerrlab1;
+yyerrlab1:   /* here on error raised explicitly by an action */
+
+  if (yyerrstatus == 3)
+    {
+      /* if just tried and failed to reuse lookahead token after an error, discard it.  */
+
+      /* return failure if at end of input */
+      if (yychar == YYEOF)
+	YYABORT;
+
+#if YYDEBUG != 0
+      if (yydebug)
+	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
+#endif
+
+      yychar = YYEMPTY;
+    }
+
+  /* Else will try to reuse lookahead token
+     after shifting the error token.  */
+
+  yyerrstatus = 3;		/* Each real token shifted decrements this */
+
+  goto yyerrhandle;
+
+yyerrdefault:  /* current state does not do anything special for the error token. */
+
+#if 0
+  /* This is wrong; only states that explicitly want error tokens
+     should shift them.  */
+  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
+  if (yyn) goto yydefault;
+#endif
+
+yyerrpop:   /* pop the current state because it cannot handle the error token */
+
+  if (yyssp == yyss) YYABORT;
+  yyvsp--;
+  yystate = *--yyssp;
+#ifdef YYLSP_NEEDED
+  yylsp--;
+#endif
+
+#if YYDEBUG != 0
+  if (yydebug)
+    {
+      short *ssp1 = yyss - 1;
+      fprintf (stderr, "Error: state stack now");
+      while (ssp1 != yyssp)
+	fprintf (stderr, " %d", *++ssp1);
+      fprintf (stderr, "\n");
+    }
+#endif
+
+yyerrhandle:
+
+  yyn = yypact[yystate];
+  if (yyn == YYFLAG)
+    goto yyerrdefault;
+
+  yyn += YYTERROR;
+  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
+    goto yyerrdefault;
+
+  yyn = yytable[yyn];
+  if (yyn < 0)
+    {
+      if (yyn == YYFLAG)
+	goto yyerrpop;
+      yyn = -yyn;
+      goto yyreduce;
+    }
+  else if (yyn == 0)
+    goto yyerrpop;
+
+  if (yyn == YYFINAL)
+    YYACCEPT;
+
+#if YYDEBUG != 0
+  if (yydebug)
+    fprintf(stderr, "Shifting error token, ");
+#endif
+
+  *++yyvsp = yylval;
+#ifdef YYLSP_NEEDED
+  *++yylsp = yylloc;
+#endif
+
+  yystate = yyn;
+  goto yynewstate;
+
+ yyacceptlab:
+  /* YYACCEPT comes here.  */
+  if (yyfree_stacks)
+    {
+      free (yyss);
+      free (yyvs);
+#ifdef YYLSP_NEEDED
+      free (yyls);
+#endif
+    }
+  return 0;
+
+ yyabortlab:
+  /* YYABORT comes here.  */
+  if (yyfree_stacks)
+    {
+      free (yyss);
+      free (yyvs);
+#ifdef YYLSP_NEEDED
+      free (yyls);
+#endif
+    }
+  return 1;
+}
+#line 487 "parsedate.y"
+
+
+time_t get_date (char *p, time_t *now);
+
+#ifndef PHP_WIN32
+extern struct tm	*gmtime();
+extern struct tm	*localtime();
+extern time_t		mktime();
+#endif
+
+/* Month and day table. */
+static TABLE const MonthDayTable[] = {
+    { "january",	tMONTH,  1 },
+    { "february",	tMONTH,  2 },
+    { "march",		tMONTH,  3 },
+    { "april",		tMONTH,  4 },
+    { "may",		tMONTH,  5 },
+    { "june",		tMONTH,  6 },
+    { "july",		tMONTH,  7 },
+    { "august",		tMONTH,  8 },
+    { "september",	tMONTH,  9 },
+    { "sept",		tMONTH,  9 },
+    { "october",	tMONTH, 10 },
+    { "november",	tMONTH, 11 },
+    { "december",	tMONTH, 12 },
+    { "sunday",		tDAY, 0 },
+    { "monday",		tDAY, 1 },
+    { "tuesday",	tDAY, 2 },
+    { "tues",		tDAY, 2 },
+    { "wednesday",	tDAY, 3 },
+    { "wednes",		tDAY, 3 },
+    { "thursday",	tDAY, 4 },
+    { "thur",		tDAY, 4 },
+    { "thurs",		tDAY, 4 },
+    { "friday",		tDAY, 5 },
+    { "saturday",	tDAY, 6 },
+    { NULL, 0, 0 }
+};
+
+/* Time units table. */
+static TABLE const UnitsTable[] = {
+    { "year",		tYEAR_UNIT,	1 },
+    { "month",		tMONTH_UNIT,	1 },
+    { "fortnight",	tDAY_UNIT,	14 },
+    { "week",		tDAY_UNIT,	7 },
+    { "day",		tDAY_UNIT,	1 },
+    { "hour",		tHOUR_UNIT,	1 },
+    { "minute",		tMINUTE_UNIT,	1 },
+    { "min",		tMINUTE_UNIT,	1 },
+    { "second",		tSEC_UNIT,	1 },
+    { "sec",		tSEC_UNIT,	1 },
+    { NULL, 0, 0 }
+};
+
+/* Assorted relative-time words. */
+static TABLE const OtherTable[] = {
+    { "tomorrow",	tDAY_UNIT,	1 },
+    { "yesterday",	tDAY_UNIT,	-1 },
+    { "today",		tDAY_UNIT,	0 },
+    { "now",		tDAY_UNIT,	0 },
+    { "last",		tUNUMBER,	-1 },
+    { "this",		tUNUMBER,	0 },
+    { "next",		tUNUMBER,	2 },
+    { "first",		tUNUMBER,	1 },
+/*  { "second",		tUNUMBER,	2 }, */
+    { "third",		tUNUMBER,	3 },
+    { "fourth",		tUNUMBER,	4 },
+    { "fifth",		tUNUMBER,	5 },
+    { "sixth",		tUNUMBER,	6 },
+    { "seventh",	tUNUMBER,	7 },
+    { "eighth",		tUNUMBER,	8 },
+    { "ninth",		tUNUMBER,	9 },
+    { "tenth",		tUNUMBER,	10 },
+    { "eleventh",	tUNUMBER,	11 },
+    { "twelfth",	tUNUMBER,	12 },
+    { "ago",		tAGO,	1 },
+    { NULL, 0, 0 }
+};
+
+/* The timezone table. */
+static TABLE const TimezoneTable[] = {
+    { "gmt",	tZONE,     HOUR ( 0) },	/* Greenwich Mean */
+    { "ut",	tZONE,     HOUR ( 0) },	/* Universal (Coordinated) */
+    { "utc",	tZONE,     HOUR ( 0) },
+    { "wet",	tZONE,     HOUR ( 0) },	/* Western European */
+    { "bst",	tDAYZONE,  HOUR ( 0) },	/* British Summer */
+    { "wat",	tZONE,     HOUR ( 1) },	/* West Africa */
+    { "at",	tZONE,     HOUR ( 2) },	/* Azores */
+#if	0
+    /* For completeness.  BST is also British Summer, and GST is
+     * also Guam Standard. */
+    { "bst",	tZONE,     HOUR ( 3) },	/* Brazil Standard */
+    { "gst",	tZONE,     HOUR ( 3) },	/* Greenland Standard */
+#endif
+#if 0
+    { "nft",	tZONE,     HOUR (3.5) },	/* Newfoundland */
+    { "nst",	tZONE,     HOUR (3.5) },	/* Newfoundland Standard */
+    { "ndt",	tDAYZONE,  HOUR (3.5) },	/* Newfoundland Daylight */
+#endif
+    { "ast",	tZONE,     HOUR ( 4) },	/* Atlantic Standard */
+    { "adt",	tDAYZONE,  HOUR ( 4) },	/* Atlantic Daylight */
+    { "est",	tZONE,     HOUR ( 5) },	/* Eastern Standard */
+    { "edt",	tDAYZONE,  HOUR ( 5) },	/* Eastern Daylight */
+    { "cst",	tZONE,     HOUR ( 6) },	/* Central Standard */
+    { "cdt",	tDAYZONE,  HOUR ( 6) },	/* Central Daylight */
+    { "mst",	tZONE,     HOUR ( 7) },	/* Mountain Standard */
+    { "mdt",	tDAYZONE,  HOUR ( 7) },	/* Mountain Daylight */
+    { "pst",	tZONE,     HOUR ( 8) },	/* Pacific Standard */
+    { "pdt",	tDAYZONE,  HOUR ( 8) },	/* Pacific Daylight */
+    { "yst",	tZONE,     HOUR ( 9) },	/* Yukon Standard */
+    { "ydt",	tDAYZONE,  HOUR ( 9) },	/* Yukon Daylight */
+    { "hst",	tZONE,     HOUR (10) },	/* Hawaii Standard */
+    { "hdt",	tDAYZONE,  HOUR (10) },	/* Hawaii Daylight */
+    { "cat",	tZONE,     HOUR (10) },	/* Central Alaska */
+    { "akst",	tZONE,     HOUR (10) }, /* Alaska Standard */
+    { "akdt",	tZONE,     HOUR (10) }, /* Alaska Daylight */
+    { "ahst",	tZONE,     HOUR (10) },	/* Alaska-Hawaii Standard */
+    { "nt",	tZONE,     HOUR (11) },	/* Nome */
+    { "idlw",	tZONE,     HOUR (12) },	/* International Date Line West */
+    { "cet",	tZONE,     -HOUR (1) },	/* Central European */
+    { "cest",	tDAYZONE,  -HOUR (1) },	/* Central European Summer */
+    { "met",	tZONE,     -HOUR (1) },	/* Middle European */
+    { "mewt",	tZONE,     -HOUR (1) },	/* Middle European Winter */
+    { "mest",	tDAYZONE,  -HOUR (1) },	/* Middle European Summer */
+    { "mesz",	tDAYZONE,  -HOUR (1) },	/* Middle European Summer */
+    { "swt",	tZONE,     -HOUR (1) },	/* Swedish Winter */
+    { "sst",	tDAYZONE,  -HOUR (1) },	/* Swedish Summer */
+    { "fwt",	tZONE,     -HOUR (1) },	/* French Winter */
+    { "fst",	tDAYZONE,  -HOUR (1) },	/* French Summer */
+    { "eet",	tZONE,     -HOUR (2) },	/* Eastern Europe, USSR Zone 1 */
+    { "bt",	tZONE,     -HOUR (3) },	/* Baghdad, USSR Zone 2 */
+#if 0
+    { "it",	tZONE,     -HOUR (3.5) },/* Iran */
+#endif
+    { "zp4",	tZONE,     -HOUR (4) },	/* USSR Zone 3 */
+    { "zp5",	tZONE,     -HOUR (5) },	/* USSR Zone 4 */
+#if 0
+    { "ist",	tZONE,     -HOUR (5.5) },/* Indian Standard */
+#endif
+    { "zp6",	tZONE,     -HOUR (6) },	/* USSR Zone 5 */
+#if	0
+    /* For completeness.  NST is also Newfoundland Standard, and SST is
+     * also Swedish Summer. */
+    { "nst",	tZONE,     -HOUR (6.5) },/* North Sumatra */
+    { "sst",	tZONE,     -HOUR (7) },	/* South Sumatra, USSR Zone 6 */
+#endif	/* 0 */
+    { "wast",	tZONE,     -HOUR (7) },	/* West Australian Standard */
+    { "wadt",	tDAYZONE,  -HOUR (7) },	/* West Australian Daylight */
+#if 0
+    { "jt",	tZONE,     -HOUR (7.5) },/* Java (3pm in Cronusland!) */
+#endif
+    { "cct",	tZONE,     -HOUR (8) },	/* China Coast, USSR Zone 7 */
+    { "jst",	tZONE,     -HOUR (9) },	/* Japan Standard, USSR Zone 8 */
+#if 0
+    { "cast",	tZONE,     -HOUR (9.5) },/* Central Australian Standard */
+    { "cadt",	tDAYZONE,  -HOUR (9.5) },/* Central Australian Daylight */
+#endif
+    { "east",	tZONE,     -HOUR (10) },	/* Eastern Australian Standard */
+    { "eadt",	tDAYZONE,  -HOUR (10) },	/* Eastern Australian Daylight */
+    { "gst",	tZONE,     -HOUR (10) },	/* Guam Standard, USSR Zone 9 */
+    { "nzt",	tZONE,     -HOUR (12) },	/* New Zealand */
+    { "nzst",	tZONE,     -HOUR (12) },	/* New Zealand Standard */
+    { "nzdt",	tDAYZONE,  -HOUR (12) },	/* New Zealand Daylight */
+    { "idle",	tZONE,     -HOUR (12) },	/* International Date Line East */
+    {  NULL, 0, 0  }
+};
+
+/* Military timezone table. */
+static TABLE const MilitaryTable[] = {
+    { "a",	tZONE,	HOUR (- 1) },
+    { "b",	tZONE,	HOUR (- 2) },
+    { "c",	tZONE,	HOUR (- 3) },
+    { "d",	tZONE,	HOUR (- 4) },
+    { "e",	tZONE,	HOUR (- 5) },
+    { "f",	tZONE,	HOUR (- 6) },
+    { "g",	tZONE,	HOUR (- 7) },
+    { "h",	tZONE,	HOUR (- 8) },
+    { "i",	tZONE,	HOUR (- 9) },
+    { "k",	tZONE,	HOUR (-10) },
+    { "l",	tZONE,	HOUR (-11) },
+    { "m",	tZONE,	HOUR (-12) },
+    { "n",	tZONE,	HOUR (  1) },
+    { "o",	tZONE,	HOUR (  2) },
+    { "p",	tZONE,	HOUR (  3) },
+    { "q",	tZONE,	HOUR (  4) },
+    { "r",	tZONE,	HOUR (  5) },
+    { "s",	tZONE,	HOUR (  6) },
+    { "t",	tZONE,	HOUR (  7) },
+    { "u",	tZONE,	HOUR (  8) },
+    { "v",	tZONE,	HOUR (  9) },
+    { "w",	tZONE,	HOUR ( 10) },
+    { "x",	tZONE,	HOUR ( 11) },
+    { "y",	tZONE,	HOUR ( 12) },
+    { "z",	tZONE,	HOUR (  0) },
+    { NULL, 0, 0 }
+};
+
+
+
+
+/* ARGSUSED */
+static int
+yyerror (s)
+     char *s ATTRIBUTE_UNUSED;
+{
+  return 0;
+}
+
+static int
+ToHour (Hours, Meridian)
+     int Hours;
+     MERIDIAN Meridian;
+{
+  switch (Meridian)
+    {
+    case MER24:
+      if (Hours < 0 || Hours > 23)
+	return -1;
+      return Hours;
+    case MERam:
+      if (Hours < 1 || Hours > 12)
+	return -1;
+      if (Hours == 12)
+	Hours = 0;
+      return Hours;
+    case MERpm:
+      if (Hours < 1 || Hours > 12)
+	return -1;
+      if (Hours == 12)
+	Hours = 0;
+      return Hours + 12;
+    default:
+      abort ();
+    }
+  /* NOTREACHED */
+}
+
+static int
+ToYear (Year)
+     int Year;
+{
+  if (Year < 0)
+    Year = -Year;
+
+  /* XPG4 suggests that years 00-68 map to 2000-2068, and
+     years 69-99 map to 1969-1999.  */
+  if (Year < 69)
+    Year += 2000;
+  else if (Year < 100)
+    Year += 1900;
+
+  return Year;
+}
+
+static int
+LookupWord (lvalp,buff)
+	YYSTYPE *lvalp;
+     char *buff;
+{
+  register char *p;
+  register char *q;
+  register const TABLE *tp;
+  int i;
+  int abbrev;
+
+  /* Make it lowercase. */
+  for (p = buff; *p; p++)
+    if (ISUPPER ((unsigned char) *p))
+      *p = tolower (*p);
+
+  if (strcmp (buff, "am") == 0 || strcmp (buff, "a.m.") == 0)
+    {
+      lvalp->Meridian = MERam;
+      return tMERIDIAN;
+    }
+  if (strcmp (buff, "pm") == 0 || strcmp (buff, "p.m.") == 0)
+    {
+      lvalp->Meridian = MERpm;
+      return tMERIDIAN;
+    }
+
+  /* See if we have an abbreviation for a month. */
+  if (strlen (buff) == 3)
+    abbrev = 1;
+  else if (strlen (buff) == 4 && buff[3] == '.')
+    {
+      abbrev = 1;
+      buff[3] = '\0';
+    }
+  else
+    abbrev = 0;
+
+  for (tp = MonthDayTable; tp->name; tp++)
+    {
+      if (abbrev)
+	{
+	  if (strncmp (buff, tp->name, 3) == 0)
+	    {
+	      lvalp->Number = tp->value;
+	      return tp->type;
+	    }
+	}
+      else if (strcmp (buff, tp->name) == 0)
+	{
+	  lvalp->Number = tp->value;
+	  return tp->type;
+	}
+    }
+
+  for (tp = TimezoneTable; tp->name; tp++)
+    if (strcmp (buff, tp->name) == 0)
+      {
+	lvalp->Number = tp->value;
+	return tp->type;
+      }
+
+  if (strcmp (buff, "dst") == 0)
+    return tDST;
+
+  for (tp = UnitsTable; tp->name; tp++)
+    if (strcmp (buff, tp->name) == 0)
+      {
+	lvalp->Number = tp->value;
+	return tp->type;
+      }
+
+  /* Strip off any plural and try the units table again. */
+  i = strlen (buff) - 1;
+  if (buff[i] == 's')
+    {
+      buff[i] = '\0';
+      for (tp = UnitsTable; tp->name; tp++)
+	if (strcmp (buff, tp->name) == 0)
+	  {
+	    lvalp->Number = tp->value;
+	    return tp->type;
+	  }
+      buff[i] = 's';		/* Put back for "this" in OtherTable. */
+    }
+
+  for (tp = OtherTable; tp->name; tp++)
+    if (strcmp (buff, tp->name) == 0)
+      {
+	lvalp->Number = tp->value;
+	return tp->type;
+      }
+
+  /* Military timezones. */
+  if (buff[1] == '\0' && ISALPHA ((unsigned char) *buff))
+    {
+      for (tp = MilitaryTable; tp->name; tp++)
+	if (strcmp (buff, tp->name) == 0)
+	  {
+	    lvalp->Number = tp->value;
+	    return tp->type;
+	  }
+    }
+
+  /* Drop out any periods and try the timezone table again. */
+  for (i = 0, p = q = buff; *q; q++)
+    if (*q != '.')
+      *p++ = *q;
+    else
+      i++;
+  *p = '\0';
+  if (i)
+    for (tp = TimezoneTable; tp->name; tp++)
+      if (strcmp (buff, tp->name) == 0)
+	{
+	  lvalp->Number = tp->value;
+	  return tp->type;
+	}
+
+  return tID;
+}
+
+yylex (YYSTYPE *lvalp, void *parm)
+{
+  register unsigned char c;
+  register char *p;
+  char buff[20];
+  int Count;
+  int sign;
+  struct date_yy * date = (struct date_yy *)parm;
+
+  for (;;)
+    {
+      while (ISSPACE ((unsigned char) *date->yyInput))
+	date->yyInput++;
+
+      if (ISDIGIT (c = *date->yyInput) || c == '-' || c == '+')
+	{
+	  if (c == '-' || c == '+')
+	    {
+	      sign = c == '-' ? -1 : 1;
+	      if (!ISDIGIT (*++date->yyInput))
+		/* skip the '-' sign */
+		continue;
+	    }
+	  else
+	    sign = 0;
+	  for (lvalp->Number = 0; ISDIGIT (c = *date->yyInput++);)
+	    lvalp->Number = 10 * lvalp->Number + c - '0';
+	  date->yyInput--;
+	  if (sign < 0)
+	    lvalp->Number = -lvalp->Number;
+	  /* Ignore ordinal suffixes on numbers */
+	  c = *date->yyInput;
+	  if (c == 's' || c == 'n' || c == 'r' || c == 't') {
+	    c = *++date->yyInput;
+	    if (c == 't' || c == 'd' || c == 'h') {
+	      date->yyInput++;
+	    } else {
+	      date->yyInput--;
+	    }
+	  }
+#ifdef PHP_DEBUG_PARSE_DATE_PARSER
+	  printf ("T: %s\n", sign ? "tS" : "tU");
+#endif
+	  return sign ? tSNUMBER : tUNUMBER;
+	}
+      if (ISALPHA (c))
+	{
+	  for (p = buff; (c = *date->yyInput++, ISALPHA (c)) || c == '.';)
+	    if (p < &buff[sizeof buff - 1])
+	      *p++ = c;
+	  *p = '\0';
+	  date->yyInput--;
+#ifdef PHP_DEBUG_PARSE_DATE_PARSER
+	  printf ("T: LW\n");
+#endif
+	  return LookupWord (lvalp, buff);
+	}
+      if (c != '(') {
+#ifdef PHP_DEBUG_PARSE_DATE_PARSER
+	printf ("T: %c\n", *date->yyInput);
+#endif
+	return *date->yyInput++;
+	  }
+      Count = 0;
+      do
+	{
+	  c = *date->yyInput++;
+	  if (c == '\0') {
+#ifdef PHP_DEBUG_PARSE_DATE_PARSER
+	printf ("T: %c\n", c);
+#endif
+	    return c;
+	  }
+	  if (c == '(')
+	    Count++;
+	  else if (c == ')')
+	    Count--;
+	}
+      while (Count > 0);
+    }
+}
+
+#define TM_YEAR_ORIGIN 1900
+
+/* Yield A - B, measured in seconds.  */
+static long
+difftm (struct tm *a, struct tm *b)
+{
+  int ay = a->tm_year + (TM_YEAR_ORIGIN - 1);
+  int by = b->tm_year + (TM_YEAR_ORIGIN - 1);
+  long days = (
+  /* difference in day of year */
+		a->tm_yday - b->tm_yday
+  /* + intervening leap days */
+		+ ((ay >> 2) - (by >> 2))
+		- (ay / 100 - by / 100)
+		+ ((ay / 100 >> 2) - (by / 100 >> 2))
+  /* + difference in years * 365 */
+		+ (long) (ay - by) * 365
+  );
+  return (60 * (60 * (24 * days + (a->tm_hour - b->tm_hour))
+		+ (a->tm_min - b->tm_min))
+	  + (a->tm_sec - b->tm_sec));
+}
+
+time_t php_parse_date(char *p, time_t *now)
+{
+  struct tm tm, tm0, *tmp;
+  time_t Start;
+  struct date_yy date;
+
+  date.yyInput = p;
+  Start = now ? *now : time ((time_t *) NULL);
+  tmp = localtime (&Start);
+  if (!tmp)
+    return -1;
+  date.yyYear = tmp->tm_year + TM_YEAR_ORIGIN;
+  date.yyMonth = tmp->tm_mon + 1;
+  date.yyDay = tmp->tm_mday;
+  date.yyHour = tmp->tm_hour;
+  date.yyMinutes = tmp->tm_min;
+  date.yySeconds = tmp->tm_sec;
+  tm.tm_isdst = tmp->tm_isdst;
+  date.yyMeridian = MER24;
+  date.yyRelSeconds = 0;
+  date.yyRelMinutes = 0;
+  date.yyRelHour = 0;
+  date.yyRelDay = 0;
+  date.yyRelMonth = 0;
+  date.yyRelYear = 0;
+  date.yyHaveDate = 0;
+  date.yyHaveDay = 0;
+  date.yyHaveRel = 0;
+  date.yyHaveTime = 0;
+  date.yyHaveZone = 0;
+
+  if (yyparse ((void *)&date)
+      || date.yyHaveTime > 1 || date.yyHaveZone > 1 
+	  || date.yyHaveDate > 1 || date.yyHaveDay > 1)
+    return -1;
+
+  tm.tm_year = ToYear (date.yyYear) - TM_YEAR_ORIGIN + date.yyRelYear;
+  tm.tm_mon = date.yyMonth - 1 + date.yyRelMonth;
+  tm.tm_mday = date.yyDay + date.yyRelDay;
+  if (date.yyHaveTime || (date.yyHaveRel && !date.yyHaveDate && !date.yyHaveDay))
+    {
+      tm.tm_hour = ToHour (date.yyHour, date.yyMeridian);
+      if (tm.tm_hour < 0)
+	return -1;
+      tm.tm_min = date.yyMinutes;
+      tm.tm_sec = date.yySeconds;
+    }
+  else
+    {
+      tm.tm_hour = tm.tm_min = tm.tm_sec = 0;
+    }
+  tm.tm_hour += date.yyRelHour;
+  tm.tm_min += date.yyRelMinutes;
+  tm.tm_sec += date.yyRelSeconds;
+
+  /* Let mktime deduce tm_isdst if we have an absolute timestamp,
+     or if the relative timestamp mentions days, months, or years.  */
+  if (date.yyHaveDate | date.yyHaveDay | date.yyHaveTime | date.yyRelDay | date.yyRelMonth | date.yyRelYear)
+    tm.tm_isdst = -1;
+
+  tm0 = tm;
+
+  Start = mktime (&tm);
+
+  if (Start == (time_t) -1)
+    {
+
+      /* Guard against falsely reporting errors near the time_t boundaries
+         when parsing times in other time zones.  For example, if the min
+         time_t value is 1970-01-01 00:00:00 UTC and we are 8 hours ahead
+         of UTC, then the min localtime value is 1970-01-01 08:00:00; if
+         we apply mktime to 1970-01-01 00:00:00 we will get an error, so
+         we apply mktime to 1970-01-02 08:00:00 instead and adjust the time
+         zone by 24 hours to compensate.  This algorithm assumes that
+         there is no DST transition within a day of the time_t boundaries.  */
+      if (date.yyHaveZone)
+	{
+	  tm = tm0;
+	  if (tm.tm_year <= EPOCH - TM_YEAR_ORIGIN)
+	    {
+	      tm.tm_mday++;
+	      date.yyTimezone -= 24 * 60;
+	    }
+	  else
+	    {
+	      tm.tm_mday--;
+	      date.yyTimezone += 24 * 60;
+	    }
+	  Start = mktime (&tm);
+	}
+
+      if (Start == (time_t) -1)
+	return Start;
+    }
+
+  if (date.yyHaveDay && !date.yyHaveDate)
+    {
+      tm.tm_mday += ((date.yyDayNumber - tm.tm_wday + 7) % 7
+		     + 7 * (date.yyDayOrdinal - (0 < date.yyDayOrdinal)));
+      Start = mktime (&tm);
+      if (Start == (time_t) -1)
+	return Start;
+    }
+
+  if (date.yyHaveZone)
+    {
+      long delta;
+      struct tm *gmt = gmtime (&Start);
+      if (!gmt)
+	return -1;
+      delta = date.yyTimezone * 60L + difftm (&tm, gmt);
+      if ((Start + delta < Start) != (delta < 0))
+	return -1;		/* time_t overflow */
+      Start += delta;
+    }
+
+  return Start;
+}
diff -Nur php-4.3.11/ext/standard/parsedate.h php/ext/standard/parsedate.h
--- php-4.3.11/ext/standard/parsedate.h	2005-03-30 22:35:48.000000000 +0800
+++ php/ext/standard/parsedate.h	2007-07-23 21:45:13.000000000 +0800
@@ -1,26 +1,20 @@
-#ifndef BISON_EXT_STANDARD_PARSEDATE_H
-# define BISON_EXT_STANDARD_PARSEDATE_H
-
-# ifndef YYSTYPE
-#  define YYSTYPE int
-#  define YYSTYPE_IS_TRIVIAL 1
-# endif
-# define	tAGO	257
-# define	tDAY	258
-# define	tDAY_UNIT	259
-# define	tDAYZONE	260
-# define	tDST	261
-# define	tHOUR_UNIT	262
-# define	tID	263
-# define	tMERIDIAN	264
-# define	tMINUTE_UNIT	265
-# define	tMONTH	266
-# define	tMONTH_UNIT	267
-# define	tSEC_UNIT	268
-# define	tSNUMBER	269
-# define	tUNUMBER	270
-# define	tYEAR_UNIT	271
-# define	tZONE	272
-
-
-#endif /* not BISON_EXT_STANDARD_PARSEDATE_H */
+#ifndef YYSTYPE
+#define YYSTYPE int
+#endif
+#define	tAGO	257
+#define	tDAY	258
+#define	tDAY_UNIT	259
+#define	tDAYZONE	260
+#define	tDST	261
+#define	tHOUR_UNIT	262
+#define	tID	263
+#define	tMERIDIAN	264
+#define	tMINUTE_UNIT	265
+#define	tMONTH	266
+#define	tMONTH_UNIT	267
+#define	tSEC_UNIT	268
+#define	tSNUMBER	269
+#define	tUNUMBER	270
+#define	tYEAR_UNIT	271
+#define	tZONE	272
+
diff -Nur php-4.3.11/main/main.c php/main/main.c
--- php-4.3.11/main/main.c	2005-03-09 05:45:52.000000000 +0800
+++ php/main/main.c	2005-08-29 00:57:40.000000000 +0800
@@ -971,7 +971,7 @@
 	} zend_end_try();
 
 	zend_try {
-		sapi_send_headers(TSRMLS_C);
+//		sapi_send_headers(TSRMLS_C);		/* remarked by lkq. 2005.9.7 */
 	} zend_end_try();
 
 	if (PG(modules_activated)) zend_try {
